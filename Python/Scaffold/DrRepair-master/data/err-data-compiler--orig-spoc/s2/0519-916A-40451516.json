{
  "meta": {
    "index": 519,
    "hitid": "3KTCJ4SCVGV2L8R3CS6A3UDPTYZ1MW",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "916A",
    "subid": "40451516"
  },
  "lines": [
    {
      "line": 0,
      "text": "function ok ( get int n , return bool )",
      "code": "bool ok ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "while n > 0",
      "code": "while ( n > 0 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if n modulo 10 is 7 return true",
      "code": "if ( n % 10 == 7 ) return true ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "divide n by 10",
      "code": "n = n / 10 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "x , h , m , ans = int",
      "code": "int x , h , m , ans ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while read x , h , m",
      "code": "while ( cin >> x >> h >> m )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "ans = 0",
      "code": "ans = 0 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "while not ok ( h ) and not ok ( m )",
      "code": "while ( ! ok ( h ) and ! ok ( m ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "subtract x from m",
      "code": "m = m - x ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if m < 0",
      "code": "if ( m < 0 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "decrement h",
      "code": "h -- ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "add 60 to m",
      "code": "m = m + 60 ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if h < 0 add 24 to h",
      "code": "if ( h < 0 ) { h = h + 24 ; }",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print ans",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        5,
        9,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ! ok )",
        "exit ( false ) ;",
        "while ( cin >> x >> h , m )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        5,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ! ok )",
        "exit ( false ) ;",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        9,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ! ok )",
        "while ( cin >> x >> h , m )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ! ok )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        5,
        9,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ok ( m ) )",
        "exit ( false ) ;",
        "while ( cin >> x >> h , m )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        5,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ok ( m ) )",
        "exit ( false ) ;",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        9,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ok ( m ) )",
        "while ( cin >> x >> h , m )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "while ( ! ok ( h ) && ok ( m ) )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        9,
        0
      ],
      "mod_code": [
        "exit ( false ) ;",
        "while ( cin >> x >> h , m )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "exit ( false ) ;",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "while ( cin >> x >> h , m )",
        "bool ok ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}