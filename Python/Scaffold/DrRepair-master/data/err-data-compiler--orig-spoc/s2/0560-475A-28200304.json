{
  "meta": {
    "index": 560,
    "hitid": "3J06WJ78HNE1X71AXYRQXE3I88KVVN",
    "workerid": "A1AYVATMT88U1W",
    "probid": "475A",
    "subid": "28200304"
  },
  "lines": [
    {
      "line": 0,
      "text": "let Pi be a constant double with value is equal to arc cosine of ( - 1 . 0 )",
      "code": "const double Pi = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let k be a integer",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print + - - - - - - - - - - - - - - - - - - - - - - - - + and newline",
      "code": "cout << \" +------------------------+\\n \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( k is greater than 0 )",
      "code": "if ( k > 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print O .",
      "code": "cout << \" O. \" ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print # .",
      "code": "cout << \" #. \" ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "let c be a integer with value c is equal to ( k - 4 ) / 3",
      "code": "int c = ( k - 4 ) / 3 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ( ( k - 4 ) modulus 3 is greater than 0 ) , increase c by 1",
      "code": "if ( ( k - 4 ) % 3 > 0 ) c ++ ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for ( i = 0 to 10 exclusive )",
      "code": "for ( int i = 0 ; i < 10 ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ( i is less than c )",
      "code": "if ( i < c )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print O .",
      "code": "cout << \" O. \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print # .",
      "code": "cout << \" #. \" ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print | D | and newline",
      "code": "cout << \" |D|)\\n \" ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ( k is greater than 1 )",
      "code": "if ( k > 1 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print O .",
      "code": "cout << \" O. \" ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print # .",
      "code": "cout << \" #. \" ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "let the value of c is equal to ( k - 4 ) / 3",
      "code": "c = ( k - 4 ) / 3 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if ( ( k - 4 ) modulus 3 is greater than 1 ) , increase c value by 1",
      "code": "if ( ( k - 4 ) % 3 > 1 ) c ++ ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for ( i = 0 to 10 exclusive )",
      "code": "for ( int i = 0 ; i < 10 ; i ++ )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if ( i is less than c )",
      "code": "if ( i < c )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print O .",
      "code": "cout << \" O. \" ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "else , do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print # .",
      "code": "cout << \" #. \" ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print | . | and newline",
      "code": "cout << \" |.|\\n \" ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "if ( k is greater than 2 )",
      "code": "if ( k > 2 )",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print O",
      "code": "cout << \" O \" ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print #",
      "code": "cout << \" # \" ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "print . . . . . . . . . . . . . . . . . . . . . . . | and newline",
      "code": "cout << \" .......................|\\n \" ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "if ( k is greater than 3 )",
      "code": "if ( k > 3 )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print O .",
      "code": "cout << \" O. \" ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 43,
      "text": "print # .",
      "code": "cout << \" #. \" ;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "let the value of c is equal to ( k - 4 ) / 3",
      "code": "c = ( k - 4 ) / 3 ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "for ( i = 0 to 10 exclusive )",
      "code": "for ( int i = 0 ; i < 10 ; i ++ )",
      "indent": 1
    },
    {
      "line": 46,
      "text": "if ( i is less than c )",
      "code": "if ( i < c )",
      "indent": 2
    },
    {
      "line": 47,
      "text": "print O .",
      "code": "cout << \" O. \" ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 49,
      "text": "print # .",
      "code": "cout << \" #. \" ;",
      "indent": 3
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 51,
      "text": "print | . | and newline",
      "code": "cout << \" |.|)\\n \" ;",
      "indent": 1
    },
    {
      "line": 52,
      "text": "print + - - - - - - - - - - - - - - - - - - - - - - - - + and newline",
      "code": "cout << \" +------------------------+\\n \" ;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const double Pi ) = acos ( - 1.0 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( k > 0 ) )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘c’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < 10 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( i < c ) )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘c’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( i = 0 ; i < 10 ; i ++ )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( i < c ) )"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "if ( k > 2 ) )"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 38,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "<< endl ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 44,
      "err_msg": "expected ‘while’ before ‘c’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "for ( i = 0 ; i < 10 ; i ++ )"
      ],
      "err_line": 45,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "if ( i < c ) )"
      ],
      "err_line": 46,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 50,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}