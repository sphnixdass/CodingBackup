{
  "meta": {
    "index": 542,
    "hitid": "3UV0D2KX1MDD7XW5DNLZ620J8HS4F0",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "1040A",
    "subid": "47543760"
  },
  "lines": [
    {
      "line": 0,
      "text": "s = integer array of size 1020",
      "code": "int s [ 1020 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , a , b = integers",
      "code": "int n , a , b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , a , b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "i , j = integers",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive , read s [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "ans = integer with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "flas = integer with flas = 0",
      "code": "int flas = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "l = integer with l = if a < b , a else b",
      "code": "int l = ( a < b ? a : b ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 , j = n - 1 to j > i with j - - , i + +",
      "code": "for ( i = 0 , j = n - 1 ; j > i ; j -- , i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( ( s [ i ] is 1 and s [ j ] is 0 ) or ( s [ j ] is 1 and s [ i ] is 0 ) )",
      "code": "if ( ( s [ i ] == 1 && s [ j ] == 0 ) || ( s [ j ] == 1 && s [ i ] == 0 ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "flas = 1",
      "code": "flas = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if ( s [ i ] is 2 and s [ j ] is 2 )",
      "code": "if ( s [ i ] == 2 && s [ j ] == 2 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "ans = ans + l * 2",
      "code": "ans += l * 2 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if s [ i ] is 2",
      "code": "else if ( s [ i ] == 2 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if s [ j ] is 1",
      "code": "if ( s [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "ans = ans + b",
      "code": "ans += b ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 20,
      "text": "ans = ans + a",
      "code": "ans += a ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "else if s [ j ] is 2",
      "code": "else if ( s [ j ] == 2 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if s [ i ] is 1",
      "code": "if ( s [ i ] == 1 )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "ans = ans + b",
      "code": "ans += b ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 25,
      "text": "ans = ans + a",
      "code": "ans += a ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if ( n modulo 2 is not 0 and s [ n / 2 ] is 2 ) , ans = ans + if a < b , a else b",
      "code": "if ( n % 2 != 0 && s [ n / 2 ] == 2 ) { ans += ( a < b ? a : b ) ; }",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if flas",
      "code": "if ( flas )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        10,
        16,
        29
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        10,
        16,
        0
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        10,
        16,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        10,
        29
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        10,
        29,
        0
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        10,
        29,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        10,
        0
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        10,
        0,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        10,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        16,
        29
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        16,
        29,
        0
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        16,
        29,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        16,
        0
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "else if ( s [ i ] == ' 2 ' )",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        16,
        0,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "else if ( s [ i ] == ' 2 ' )",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        16,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "else if ( s [ i ] == ' 2 ' )",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        29
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        29,
        0
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        29,
        0,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        29,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        0,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        32
      ],
      "mod_code": [
        "for ( int i = 0 , j = n - 1 ; i > i ; i -- )",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        16,
        29
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        16,
        29,
        0
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        16,
        29,
        32
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        16,
        0
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        16,
        0,
        32
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        16,
        32
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "else if ( s [ i ] == ' 2 ' )",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        29
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        29,
        0
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        29,
        0,
        32
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        29,
        32
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        0,
        32
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        32
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' 1 ' && s [ j ] == ' 0 ' && s [ j ] == ' 0 ' && s [ i ] == ' 0 ' ) )",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        29
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        29,
        0
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        16,
        29,
        0,
        32
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        16,
        29,
        32
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 2 ' )",
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 2 ' )",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        16,
        0,
        32
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 2 ' )",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        16,
        32
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 2 ' )",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        29,
        0
      ],
      "mod_code": [
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        29,
        0,
        32
      ],
      "mod_code": [
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        29,
        32
      ],
      "mod_code": [
        "if ( ( n % 2 != 0 && s [ n / 2 ] == 2 ) ) ans += ( a [ n / 2 ] == 2 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        32
      ],
      "mod_code": [
        "int * s [ 1020 ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    }
  ]
}