{
  "meta": {
    "index": 543,
    "hitid": "3V7ICJJAZAANUGKP8LZ3NC9YTJ0B4P",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "1040A",
    "subid": "47391783"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , a , b = int",
      "code": "int n , a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n then a then b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "flag = int with flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "arr = int array of size n",
      "code": "int arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n values into arr",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "cost = int with cost = 0",
      "code": "int cost = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "i = int with i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "j = int with j = n - 1",
      "code": "int j = n - 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "loop while i is less than j",
      "code": "while ( i < j )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if arr [ i ] and arr [ j ] are both 2",
      "code": "if ( arr [ i ] == 2 && arr [ j ] == 2 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "add min of a and b * 2 to cost",
      "code": "cost = cost + min ( a , b ) * 2 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if arr [ i ] and arr [ j ] are both 1",
      "code": "else if ( arr [ i ] == 0 && arr [ j ] == 1 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if arr [ i ] and arr [ j ] are both 0",
      "code": "else if ( arr [ i ] == 1 && arr [ j ] == 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if arr [ i ] is 2",
      "code": "else if ( arr [ i ] == 2 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if arr [ j ] is 0",
      "code": "if ( arr [ j ] == 0 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "add a to cost",
      "code": "cost = cost + a ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 22,
      "text": "add b to cost",
      "code": "cost = cost + b ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "else if arr [ j ] is 2",
      "code": "else if ( arr [ j ] == 2 )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if arr [ i ] is 0",
      "code": "if ( arr [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "add a to cost",
      "code": "cost = cost + a ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 27,
      "text": "add b to cost",
      "code": "cost = cost + b ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "decrement j",
      "code": "j -- ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if i is j and arr [ i ] is 2 add min of a and b to cost",
      "code": "if ( i == j && arr [ i ] == 2 ) cost = cost + min ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if flag is not 0",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 36,
      "text": "print cost",
      "code": "cout << cost << endl ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , arr , b ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> a then b ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int * i = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "while ( i < j ) ;"
      ],
      "err_line": 14,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cost . push_back ( a ) ;"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cost . push_back ( b ) ;"
      ],
      "err_line": 22,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "cost . push_back ( a ) ;"
      ],
      "err_line": 25,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "cost . push_back ( b ) ;"
      ],
      "err_line": 27,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        32
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        12,
        32
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        10,
        12,
        32,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        12,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        15,
        32
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        10,
        15,
        32,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        15,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        32
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        10,
        32,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        15,
        32
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        12,
        15,
        32,
        10
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "if ( ! arr [ i ] && arr [ j ] == 2 )"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        12,
        15,
        32,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        15,
        10,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( ! arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        15,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        32
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        12,
        32,
        10
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "if ( ! arr [ i ] && arr [ j ] == 2 )"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        12,
        32,
        10,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "if ( ! arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        32,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        10,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "if ( ! arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 1 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        32
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        15,
        32,
        10
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "if ( ! arr [ i ] && arr [ j ] == 2 )"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        15,
        32,
        10,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "if ( ! arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        32,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        10,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "if ( ! arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "else if ( arr [ i ] && arr [ j ] == 0 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32,
        10
      ],
      "mod_code": [
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "if ( ! arr [ i ] && arr [ j ] == 2 )"
      ],
      "err_line": 32,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [n]’"
    },
    {
      "mod_line": [
        32,
        10,
        17
      ],
      "mod_code": [
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "if ( ! arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32,
        17
      ],
      "mod_code": [
        "if ( i == j && arr [ i ] == 2 ) { arr += min ( a , b ) ; }",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "if ( ! arr [ i ] && arr [ j ] == 2 )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}