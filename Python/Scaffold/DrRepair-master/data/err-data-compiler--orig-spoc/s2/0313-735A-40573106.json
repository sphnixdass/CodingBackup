{
  "meta": {
    "index": 313,
    "hitid": "3AA88CN98PX4LQ23350324WVBEGKYB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "735A",
    "subid": "40573106"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string x1",
      "code": "string x1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare new ints n and k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read user input to n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read standard input to x1",
      "code": "cin >> x1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integers c and d",
      "code": "int c , d ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i from 0 to length of x1 inclusive",
      "code": "for ( int i = 0 ; i <= x1 . length ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if x1 [ i ] is equal to ' G ' , assign the new value = i to c",
      "code": "if ( x1 [ i ] == ' G ' ) c = i ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if x1 [ i ] = ' T ' , set the value of d to i",
      "code": "if ( x1 [ i ] == ' T ' ) d = i ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare integer variable with name i",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ( c - d ) % k ! = 0",
      "code": "if ( ( ( c - d ) % k ) != 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if c is greater than d",
      "code": "else if ( c > d )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "in a for loop , change i from d + k to c inclusive",
      "code": "for ( i = d + k ; i <= c ; i = i + k )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if x1 [ i ] is equal to ' # '",
      "code": "if ( x1 [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if i is greater than c , print \" YES \"",
      "code": "if ( i > c ) cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "start for loop from i = c + k to d inclusive , incrementing i by k",
      "code": "for ( i = c + k ; i <= d ; i = i + k )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if x1 [ i ] = ' # '",
      "code": "if ( x1 [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if i is greater than d , print \" YES \"",
      "code": "if ( i > d ) cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string * x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "n , k ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "c , d ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        23,
        1
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        23,
        1,
        5
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "c , d ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        23,
        1,
        4
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        14,
        23,
        1,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        23,
        5
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "c , d ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        5,
        4
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "c , d ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        23,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "c , d ;",
        "n = n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        4
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        23,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "if ( x1 [ i ] = ' # ' )",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "string * x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        1,
        5
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "string * x1 ;",
        "c , d ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        1,
        5,
        4
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "string * x1 ;",
        "c , d ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        14,
        1,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "string * x1 ;",
        "c , d ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        1,
        4
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "string * x1 ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        14,
        1,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "string * x1 ;",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        14,
        1,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "string * x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "c , d ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        5,
        4
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "c , d ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        5,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "c , d ;",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "c , d ;",
        "n = n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = d + k ; i <= c ; i ++ )",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        1
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        23,
        1,
        5
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "c , d ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        23,
        1,
        5,
        4
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "c , d ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        23,
        1,
        5,
        3
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "c , d ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        23,
        1,
        4
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        23,
        1,
        4,
        3
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        23,
        1,
        3
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "string * x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        23,
        5
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "c , d ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        5,
        4
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "c , d ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        5,
        4,
        3
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "c , d ;",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        5,
        3
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "c , d ;",
        "n = n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        4
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        4,
        3
      ],
      "mod_code": [
        "if ( x1 [ i ] = ' # ' )",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string * x1 ;",
        "c , d ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "string * x1 ;",
        "c , d ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        5,
        4,
        3
      ],
      "mod_code": [
        "string * x1 ;",
        "c , d ;",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "string * x1 ;",
        "c , d ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string * x1 ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "string * x1 ;",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string * x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "c , d ;",
        "x1 >> x1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        4,
        3
      ],
      "mod_code": [
        "c , d ;",
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "c , d ;",
        "n = n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "x1 >> x1 ;",
        "n = n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}