{
  "meta": {
    "index": 680,
    "hitid": "3NOEP8XAU4WGWC99B1J9F7BL3INXPE",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "1020A",
    "subid": "48712908"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make integers n , h , a , b , and k",
      "code": "int n , h , a , b , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , h , a , b , and k",
      "code": "cin >> n >> h >> a >> b >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while k - - is truthy",
      "code": "while ( k -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "make ints t1 , f1 , t2 , and f2",
      "code": "int t1 , f1 , t2 , f2 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read t1 , f1 , t2 , and f2",
      "code": "cin >> t1 >> f1 >> t2 >> f2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if t1 is equal to t2",
      "code": "if ( t1 == t2 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print abs ( f1 - f2 )",
      "code": "cout << abs ( f1 - f2 ) << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if t1 is not equal to t2",
      "code": "else if ( t1 != t2 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if f1 is greater than or equal to a and f1 is less than or equal to b or if f2 is greater than of equal to a and f2 is less than or equal to b",
      "code": "if ( f1 >= a and f1 <= b || f2 >= a and f2 <= b )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print abs ( t1 - t2 ) + abs ( f1 - f2 )",
      "code": "cout << abs ( t1 - t2 ) + abs ( f1 - f2 ) << endl ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else do",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if f1 is greater than b",
      "code": "if ( f1 > b )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "make integer total = abs ( f1 - b )",
      "code": "int total = abs ( f1 - b ) ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "set total to total + abs ( t1 - t2 )",
      "code": "total += abs ( t1 - t2 ) ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "set total to total + abs ( f2 - b )",
      "code": "total += abs ( f2 - b ) ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "print total",
      "code": "cout << total << endl ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "else if f1 is less than a",
      "code": "else if ( f1 < a )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "create integer total = abs ( f1 - a )",
      "code": "int total = abs ( f1 - a ) ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "set total to total + abs ( t1 - t2 )",
      "code": "total += abs ( t1 - t2 ) ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "set total to total + abs ( f2 - a )",
      "code": "total += abs ( f2 - a ) ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "print total",
      "code": "cout << total << endl ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "total = abs ( f1 - b ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘total’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        21,
        5,
        6
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cout << ' total ' ;",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        21,
        5,
        1
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cout << ' total ' ;",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        21,
        6
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cout << ' total ' ;",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        21,
        6,
        1
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cout << ' total ' ;",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        21,
        6,
        2
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cout << ' total ' ;",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        21,
        1
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cout << ' total ' ;",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        21,
        1,
        2
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cout << ' total ' ;",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        5,
        6
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        5,
        6,
        1
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        5,
        6,
        2
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        5,
        1,
        2
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        6,
        1
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        6,
        2
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        1,
        2
      ],
      "mod_code": [
        "if ( f1 >= a && f2 <= b || f2 <= b && f2 <= b )",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        21,
        5,
        6
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21,
        5,
        6,
        1
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        21,
        5,
        6,
        2
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21,
        5,
        1
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        21,
        5,
        1,
        2
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        21,
        6
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21,
        6,
        1
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        21,
        6,
        1,
        2
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        21,
        6,
        2
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21,
        1
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        21,
        1,
        2
      ],
      "mod_code": [
        "cout << ' total ' ;",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        6,
        1,
        2
      ],
      "mod_code": [
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        1,
        2
      ],
      "mod_code": [
        "cin >> t1 >> f1 >> f1 >> f2 ;",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , h , a , b >> k ;",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    }
  ]
}