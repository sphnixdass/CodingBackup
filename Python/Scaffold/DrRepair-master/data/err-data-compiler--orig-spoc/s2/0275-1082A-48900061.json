{
  "meta": {
    "index": 275,
    "hitid": "36GJS3V78VK9OFBLREELUPPERTLGJ5",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "1082A",
    "subid": "48900061"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer t with t = 0",
      "code": "int t = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while t not equal to zero do decrement t and the following",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers n , x , y , d and set to 0",
      "code": "int n = 0 , x = 0 , y = 0 , d = 0 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read n , x , y , d",
      "code": "cin >> n >> x >> y >> d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if ( absolute value of y - x ) mod d is equal to 0 then",
      "code": "if ( abs ( y - x ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print ( absolute value of y - x ) / d",
      "code": "cout << abs ( y - x ) / d << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if ( absolute value of y - 1 ) mod d is equal to 0 and ( absolute value of y - n ) mod d is not equal to 0 then",
      "code": "else if ( abs ( y - 1 ) % d == 0 && abs ( y - n ) % d != 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "create integer cnt with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "while x greater than 1 do",
      "code": "while ( x > 1 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "subtract d from x",
      "code": "x = x - d ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print ( absolute value of y - 1 ) / d + cnt",
      "code": "cout << ( abs ( y - 1 ) / d ) + cnt << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if ( absolute value of y - n ) mod d is equal to 0 and ( absolute value of y - 1 ) mod d is not equal to 0 then",
      "code": "else if ( abs ( y - n ) % d == 0 && abs ( y - 1 ) % d != 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "create integer cnt with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "while x less than n do",
      "code": "while ( x < n )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "add d to x",
      "code": "x = x + d ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "print ( absolute value of y - n ) / d + cnt",
      "code": "cout << ( abs ( y - n ) / d ) + cnt << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else if ( absolute value of y - 1 ) mod d is equal to 0 and ( absolute value of y - 1 ) mod d is equal to 0 then",
      "code": "else if ( abs ( y - 1 ) % d == 0 && abs ( y - 1 ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "create integers cnt1 , cnt2 , x1 , x2 with cnt1 = 0 , cnt2 = 0 , x1 = x , x2 = x",
      "code": "int cnt1 = 0 , cnt2 = 0 , x1 = x , x2 = x ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "while x1 greater than 1 do",
      "code": "while ( x1 > 1 )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "increment cnt1",
      "code": "cnt1 ++ ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "subtract d from x1",
      "code": "x1 = x1 - d ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "while x2 less than n do",
      "code": "while ( x2 < n )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "increment cnt2",
      "code": "cnt2 ++ ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "add d to x2",
      "code": "x2 = x2 + d ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 32,
      "text": "print minimum of ( absolute value of y - n ) / d + cnt2 and ( absolute value of y - 1 ) / d + cnt2",
      "code": "cout << min ( ( abs ( y - n ) / d ) + cnt2 , ( abs ( y - 1 ) / d ) + cnt1 ) << endl ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;"
      ],
      "err_line": 32,
      "err_msg": "no matching function for call to ‘min(bool)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( fabs ( y - x ) % d == 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << ( abs ) abs ( y - x ) / d << endl ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::ostream {aka std::basic_ostream<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = x , x2 = x , x2 ;"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        23,
        32
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        23,
        32,
        22
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        23,
        32,
        33
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        23,
        32,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        22
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        23,
        22,
        33
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        23,
        22,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        33
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        23,
        33,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        32
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        32,
        22
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        32,
        22,
        33
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        32,
        22,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        32,
        33
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        32,
        33,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        32,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        22,
        33
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        22,
        33,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        22,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        33
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4,
        33,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int n , x , y , d , d = 0 ;",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        32
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        23,
        32,
        22
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        23,
        32,
        22,
        33
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        23,
        32,
        22,
        3
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        32,
        33
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else do"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        23,
        32,
        33,
        3
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        32,
        3
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        22
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        23,
        22,
        33
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        23,
        22,
        33,
        3
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        22,
        3
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        33
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else do"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        23,
        33,
        3
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        3
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 = 0 , x1 = 0 , x2 = x , x2 ;",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        22
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        32,
        22,
        33
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        32,
        22,
        33,
        3
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        22,
        3
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        33
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else do"
      ],
      "err_line": 32,
      "err_msg": "no matching function for call to ‘min(bool)’"
    },
    {
      "mod_line": [
        32,
        33,
        3
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        3
      ],
      "mod_code": [
        "cout << min ( abs ( y - n ) / d + cnt2 && ( abs ( y - 1 ) / d + cnt2 ) ) + cnt2 + cnt2 << endl ;",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        33
      ],
      "mod_code": [
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        22,
        33,
        3
      ],
      "mod_code": [
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "else if ( fabs ( y - 1 ) % d == 0 && ( abs ( y - 1 ) ) % d == 0 )",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        3
      ],
      "mod_code": [
        "else do",
        "for ( ; t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}