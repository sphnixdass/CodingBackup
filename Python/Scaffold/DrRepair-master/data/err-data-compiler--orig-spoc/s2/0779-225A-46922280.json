{
  "meta": {
    "index": 779,
    "hitid": "3EQVJH0T40FH2E21NEA7HVOO38RTHD",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "225A",
    "subid": "46922280"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "t1 , l1 , t2 , l2 , f1 , f2 = int",
      "code": "int t1 , l1 , t2 , l2 , f1 , f2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read t1",
      "code": "cin >> t1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "l1 = 7 - t1",
      "code": "l1 = 7 - t1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "ans = true",
      "code": "bool ans = true ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read f1 and f2",
      "code": "cin >> f1 >> f2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if i is 0",
      "code": "if ( i == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if f1 = = l1 or 7 - f1 = = l1 or f2 = = l1 or 7 - f2 = = l1",
      "code": "if ( f1 == l1 || 7 - f1 == l1 || f2 == l1 || 7 - f2 == l1 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "for g = 1 to 6 inclusive",
      "code": "for ( int g = 1 ; g <= 6 ; g ++ )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if g ! = f1 and g ! = f2 and g ! = 7 - f1 and g ! = 7 - f2",
      "code": "if ( g != f1 && g != f2 && g != 7 - f1 && g != 7 - f2 )",
      "indent": 5
    },
    {
      "line": 13,
      "text": "l2 = g",
      "code": "l2 = g ;",
      "indent": 6
    },
    {
      "line": 14,
      "text": "t2 = 7 - g",
      "code": "t2 = 7 - g ;",
      "indent": 6
    },
    {
      "line": 15,
      "text": "break",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "l2 = l1",
      "code": "l2 = l1 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "t2 = 7 - l1",
      "code": "t2 = 7 - l1 ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else if l2 = = f1 or l2 = = 7 - f1 or t2 = = f1 or t2 = = 7 - f1",
      "code": "else if ( l2 == f1 || l2 == 7 - f1 || t2 == f1 || t2 == 7 - f1 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "ans = false",
      "code": "ans = false ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else if l2 = = f2 or l2 = = 7 - f2 or t2 = = f2 or t2 = = 7 - f2",
      "code": "else if ( l2 == f2 || l2 == 7 - f2 || t2 == f2 || t2 == 7 - f2 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "ans = false",
      "code": "ans = false ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 29,
      "text": "for g = 1 to 6 inclusive",
      "code": "for ( int g = 1 ; g <= 6 ; g ++ )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if g ! = f1 and g ! = f2 and g ! = 7 - f1 and g ! = 7 - f2",
      "code": "if ( g != f1 && g != f2 && g != 7 - f1 && g != 7 - f2 )",
      "indent": 4
    },
    {
      "line": 31,
      "text": "l2 = g",
      "code": "l2 = g ;",
      "indent": 5
    },
    {
      "line": 32,
      "text": "t2 = 7 - g",
      "code": "t2 = 7 - g ;",
      "indent": 5
    },
    {
      "line": 33,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "if not ans",
      "code": "if ( ! ans )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "print \" NO \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 40,
      "text": "print \" YES \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( t1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int l1 = 7 - t1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int l1’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "ans = true ;"
      ],
      "err_line": 6,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( g = 1 ; g <= 6 ; g ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( g = 1 ; g <= 6 ; g ++ )"
      ],
      "err_line": 29,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1
      ],
      "mod_code": [
        "n",
        "bool n ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1,
        40
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1,
        40,
        18
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1,
        40,
        37
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "cout << \" YES \" ;",
        "if ( ans != ans )"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1,
        40,
        3
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "cout << \" YES \" ;",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        1,
        18
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1,
        18,
        37
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1,
        18,
        3
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        1,
        37
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "if ( ans != ans )"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        1,
        37,
        3
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        1,
        3
      ],
      "mod_code": [
        "n",
        "bool n ;",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        40
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        40,
        18
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        40,
        18,
        37
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        40,
        18,
        3
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        40,
        37
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "if ( ans != ans )"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        40,
        37,
        3
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        40,
        3
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        18
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        18,
        37
      ],
      "mod_code": [
        "n",
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        18,
        37,
        3
      ],
      "mod_code": [
        "n",
        "n",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        18,
        3
      ],
      "mod_code": [
        "n",
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        37
      ],
      "mod_code": [
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        37,
        3
      ],
      "mod_code": [
        "n",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        39,
        3
      ],
      "mod_code": [
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        1,
        40,
        18
      ],
      "mod_code": [
        "bool n ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        40,
        18,
        37
      ],
      "mod_code": [
        "bool n ;",
        "cout << \" YES \" ;",
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        40,
        18,
        3
      ],
      "mod_code": [
        "bool n ;",
        "cout << \" YES \" ;",
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        1,
        40,
        37,
        3
      ],
      "mod_code": [
        "bool n ;",
        "cout << \" YES \" ;",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        1,
        40,
        3
      ],
      "mod_code": [
        "bool n ;",
        "cout << \" YES \" ;",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "bool n ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        37
      ],
      "mod_code": [
        "bool n ;",
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        37,
        3
      ],
      "mod_code": [
        "bool n ;",
        "n",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        1,
        18,
        3
      ],
      "mod_code": [
        "bool n ;",
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        1,
        37,
        3
      ],
      "mod_code": [
        "bool n ;",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "bool n ;",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        40,
        18
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        40,
        18,
        37
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        40,
        18,
        37,
        3
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "n",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        40,
        18,
        3
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        40,
        37,
        3
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        40,
        3
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        18,
        37
      ],
      "mod_code": [
        "n",
        "if ( ans != ans )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        37,
        3
      ],
      "mod_code": [
        "n",
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "n",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    },
    {
      "mod_line": [
        37,
        3
      ],
      "mod_code": [
        "if ( ans != ans )",
        "int t1 , l1 , t2 , l2 , f1 , f2 , f2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f2’"
    }
  ]
}