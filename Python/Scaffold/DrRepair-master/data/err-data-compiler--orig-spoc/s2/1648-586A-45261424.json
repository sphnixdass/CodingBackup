{
  "meta": {
    "index": 1648,
    "hitid": "3OID399FXG1Q7TFY6YMS96UPLUUDFV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "586A",
    "subid": "45261424"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer maxn = 1e5 + 10",
      "code": "const int maxn = 1e5 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer variable with name n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a is a new array of integers with size maxn",
      "code": "int a [ maxn ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop , reading n from the input",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n elements into a from the input stream",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "create integer variable ans = 0",
      "code": "int ans = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a [ 0 ] is equal to 1",
      "code": "if ( a [ 0 ] == 1 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "start for loop from i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if a [ i ] is equal to 1",
      "code": "if ( a [ i ] == 1 )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increment ans by one",
      "code": "ans ++ ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 13,
      "text": "for j = i + 1 to n exclusive incrementing j",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 5
    },
    {
      "line": 14,
      "text": "if a [ j ] = 0",
      "code": "if ( a [ j ] == 0 )",
      "indent": 6
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": ";",
      "indent": 7
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 17,
      "text": "if j = i + 1",
      "code": "if ( j == i + 1 )",
      "indent": 7
    },
    {
      "line": 18,
      "text": "increase ans by 2",
      "code": "ans += 2 ;",
      "indent": 8
    },
    {
      "line": 19,
      "text": "change the value of i to j",
      "code": "i = j ;",
      "indent": 8
    },
    {
      "line": 20,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 7
    },
    {
      "line": 22,
      "text": "increment ans by one",
      "code": "ans ++ ;",
      "indent": 8
    },
    {
      "line": 23,
      "text": "change the value of i to j",
      "code": "i = j ;",
      "indent": 8
    },
    {
      "line": 24,
      "text": "break the loop",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 7
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 31,
      "text": "create integer variable c",
      "code": "int c ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 33,
      "text": "if a [ i ] ! = 0",
      "code": "if ( a [ i ] != 0 )",
      "indent": 4
    },
    {
      "line": 34,
      "text": "set the value of c to i",
      "code": "c = i ;",
      "indent": 5
    },
    {
      "line": 35,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 5
    },
    {
      "line": 36,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "loop i from c + 1 to n exclusive",
      "code": "for ( int i = c + 1 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "if a [ i ] = 1",
      "code": "if ( a [ i ] == 1 )",
      "indent": 4
    },
    {
      "line": 41,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 5
    },
    {
      "line": 42,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 43,
      "text": "for j from i + 1 to n exclusive",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 5
    },
    {
      "line": 44,
      "text": "if a [ j ] = 0",
      "code": "if ( a [ j ] == 0 )",
      "indent": 6
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": ";",
      "indent": 7
    },
    {
      "line": 46,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 47,
      "text": "if j = i + 1",
      "code": "if ( j == i + 1 )",
      "indent": 7
    },
    {
      "line": 48,
      "text": "increase ans by 2",
      "code": "ans += 2 ;",
      "indent": 8
    },
    {
      "line": 49,
      "text": "set the value of i to j",
      "code": "i = j ;",
      "indent": 8
    },
    {
      "line": 50,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 7
    },
    {
      "line": 52,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 8
    },
    {
      "line": 53,
      "text": "change i to j",
      "code": "i = j ;",
      "indent": 8
    },
    {
      "line": 54,
      "text": "break the loop",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 7
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 61,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 64,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int const maxn = 1e5 + 10 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * a [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "loop << n << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘loop’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "* i = j ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "* i = j ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 32,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "* c = i ;"
      ],
      "err_line": 34,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 43,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 43,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "* i = j ;"
      ],
      "err_line": 49,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 52,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        54
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 54,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        49
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        49,
        23
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* i = j ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        49,
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        49,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        23
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        23,
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        23,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        43,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        49
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        49,
        23
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "* i = j ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        49,
        23,
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        49,
        23,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        49,
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        49,
        43,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        49,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        23,
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        23,
        43,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        23,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        43,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        34
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "* c = i ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        49
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        49,
        23
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* i = j ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        49,
        23,
        43
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        49,
        23,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        49,
        43
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        49,
        43,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        49,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        23
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        23,
        43
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        23,
        43,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        23,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        43
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        43,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        23
      ],
      "mod_code": [
        "* i = j ;",
        "* i = j ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        49,
        23,
        43
      ],
      "mod_code": [
        "* i = j ;",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        49,
        23,
        43,
        34
      ],
      "mod_code": [
        "* i = j ;",
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        49,
        23,
        34
      ],
      "mod_code": [
        "* i = j ;",
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        49,
        43
      ],
      "mod_code": [
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 43,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        43,
        34
      ],
      "mod_code": [
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 34,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        49,
        34
      ],
      "mod_code": [
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 34,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        43
      ],
      "mod_code": [
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        43,
        34
      ],
      "mod_code": [
        "* i = j ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        34
      ],
      "mod_code": [
        "* i = j ;",
        "* c = i ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        43,
        34
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "* c = i ;"
      ],
      "err_line": 34,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}