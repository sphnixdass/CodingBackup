{
  "meta": {
    "index": 1709,
    "hitid": "33EEIIWHK719SZ5TBZXGRR4AS33QVX",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "1044A",
    "subid": "47808952"
  },
  "lines": [
    {
      "line": 0,
      "text": "function choose takes long long n , k and returns long long",
      "code": "long long choose ( long long n , long long k ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function isprime takes long long n and returns bool",
      "code": "bool isprime ( long long n ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "function power takes long long x , y , p and returns long long",
      "code": "long long power ( long long x , long long y , long long p ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "function power takes long long x , y and returns long long",
      "code": "long long power ( long long x , long long y ) ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "a , b = long long array of size 200005",
      "code": "long long a [ 200005 ] , b [ 200005 ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "n , m , x , y , z = long long",
      "code": "long long n , m , x , y , z ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "a [ n + 1 ] = 1000000000",
      "code": "a [ n + 1 ] = 1000000000 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 1 to n + 1 exclusive , read a [ i ]",
      "code": "for ( long long i = 1 ; i < n + 1 ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "sort a + 1 and a + n + 1",
      "code": "sort ( a + 1 , a + n + 1 ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "sz = long long with sz = 0",
      "code": "long long sz = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to m exclusive",
      "code": "for ( long long i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read x , y , z",
      "code": "cin >> x >> y >> z ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if ( x is 1 ) , b [ increment sz ] = y",
      "code": "if ( x == 1 ) b [ ++ sz ] = y ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "sort b + 1 and b + sz + 1",
      "code": "sort ( b + 1 , b + sz + 1 ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "j , ans = long long with j = 1 , ans = n + m",
      "code": "long long j = 1 , ans = n + m ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 1 to n + 2 exclusive",
      "code": "for ( long long i = 1 ; i < n + 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while ( j < = sz and b [ j ] < a [ i ] ) , increment j",
      "code": "while ( j <= sz && b [ j ] < a [ i ] ) j ++ ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "ans = min of ans and i + sz - j",
      "code": "ans = min ( ans , i + sz - j ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "in the function choose that takes long long n , k and returns long long",
      "code": "long long choose ( long long n , long long k )",
      "indent": 0
    },
    {
      "line": 26,
      "text": "if ( k is 0 ) , return 1",
      "code": "if ( k == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "return ( n * choose ( n - 1 , k - 1 ) ) / k",
      "code": "return ( n * choose ( n - 1 , k - 1 ) ) / k ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 29,
      "text": "in the function isprime that takes long long n and returns bool",
      "code": "bool isprime ( long long n )",
      "indent": 0
    },
    {
      "line": 30,
      "text": "for i = 2 to i * i < = n",
      "code": "for ( long long i = 2 ; i * i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if ( n modulo i is 0 ) , return false",
      "code": "if ( n % i == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 35,
      "text": "in the function power that takes long long x , y , p and returns long long",
      "code": "long long power ( long long x , long long y , long long p )",
      "indent": 0
    },
    {
      "line": 36,
      "text": "res = long long with res = 1",
      "code": "long long res = 1 ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "x = x modulo p",
      "code": "x = x % p ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "while ( y > 0 )",
      "code": "while ( y > 0 )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "if ( y bitwise and 1 ) , res = ( res * x ) modulo p",
      "code": "if ( y & 1 ) res = ( res * x ) % p ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "y = right shift y 1 place",
      "code": "y = y >> 1 ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "x = ( x * x ) modulo p",
      "code": "x = ( x * x ) % p ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "return res",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 45,
      "text": "in the function power that takes long long x , y and returns long long",
      "code": "long long power ( long long x , long long y )",
      "indent": 0
    },
    {
      "line": 46,
      "text": "res = long long with res = 1",
      "code": "long long res = 1 ;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "while ( y > 0 )",
      "code": "while ( y > 0 )",
      "indent": 1
    },
    {
      "line": 48,
      "text": "if ( y bitwise and 1 ) , res = res * x",
      "code": "if ( y & 1 ) res = res * x ;",
      "indent": 2
    },
    {
      "line": 49,
      "text": "y = right shift y 1 place",
      "code": "y = y >> 1 ;",
      "indent": 2
    },
    {
      "line": 50,
      "text": "x = x * x",
      "code": "x = x * x ;",
      "indent": 2
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 52,
      "text": "return res",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool isprime ( long long n )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long power ( long long x , long long y )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int choose ( long long n , long long k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long int power ( long long x , long long y , long long p )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long int power ( long long x , long long y )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long a [ 200005 ] , b ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘long long int*’ and ‘long long int [200005]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "sort ( b + 1 + b + sz + 1 ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int*’ and ‘long long int [200005]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "long long j = 1 , ans += m ;"
      ],
      "err_line": 17,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 1 ; i < n + 2 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int ans = min ( ans , i + sz - j ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘min(int&, long long int)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "bool isprime ( long long n ) ;"
      ],
      "err_line": 30,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= n ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        2
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        3
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        14
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        14
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        14
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        14,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "bool isprime ( long long n )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y , long long p )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        14
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        2,
        14
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y , long long p )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        2,
        14,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y , long long p )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        2,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y , long long p )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        3,
        14
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        3,
        14,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        3,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "long long power ( long long x , long long y )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        14,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "long long choose ( long long n , long long k )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        14
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        10
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        10
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y , long long p )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        10
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        10
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "long long power ( long long x , long long y )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        10
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "bool isprime ( long long n )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        10
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        10
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )",
        "long long power ( long long x , long long y )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        10
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "long long power ( long long x , long long y , long long p )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3,
        14,
        10
      ],
      "mod_code": [
        "long long power ( long long x , long long y )",
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "long long power ( long long x , long long y )",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "if ( x == 1 ) b [ sz ++ ] = y ;",
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘long long int*’ and ‘long long int [200005]’ to binary ‘operator+’"
    }
  ]
}