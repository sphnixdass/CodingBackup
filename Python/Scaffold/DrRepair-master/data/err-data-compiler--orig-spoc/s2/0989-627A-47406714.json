{
  "meta": {
    "index": 989,
    "hitid": "3FDWKV9VCNWIU5I1EGGUEWIM4VZMUJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "627A",
    "subid": "47406714"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer mod = 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare modularExponentiation with signed long long integers x , n , M as arguments , returning signed long long integer",
      "code": "signed long long int modularExponentiation ( signed long long int x , signed long long int n , signed long long int M )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare signed long long integer result = 1",
      "code": "signed long long int result = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while n is greater than 0",
      "code": "while ( n > 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare signed long long integer power = n",
      "code": "signed long long int power = n ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if power % 2 is 1 , let result be ( result * x ) % M",
      "code": "if ( power % 2 == 1 ) result = ( result * x ) % M ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "let x be ( x * x ) % M",
      "code": "x = ( x * x ) % M ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "let n be n / 2",
      "code": "n = n / 2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return result from function",
      "code": "return result ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare ceil with signed long long integers n , x as arguments , returning signed long long integer",
      "code": "signed long long int ceil ( signed long long int n , signed long long int x )",
      "indent": 0
    },
    {
      "line": 12,
      "text": "if n % x is 0",
      "code": "if ( n % x == 0 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return n / x",
      "code": "return n / x ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "return ( n / x ) + 1",
      "code": "return ( ( n / x ) + 1 ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "declare signed long long integers sum , x",
      "code": "signed long long int sum , x ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read sum , x",
      "code": "cin >> sum >> x ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "declare signed long long integer a = ( sum - x ) / 2",
      "code": "signed long long int a = ( sum - x ) / 2 ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if a is less than 0 or 2 * a + x is not sum or ( x bitwise and a ) is not 0",
      "code": "if ( a < 0 || 2 * a + x != sum || ( x & a ) != 0 )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print 0 and \" \\ n \"",
      "code": "cout << 0 << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "exit program with code 0",
      "code": "exit ( 0 ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "declare signed long long integers bits = 0 , temp = 0",
      "code": "signed long long int bits = 0 , temp = 0 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "let temp be x",
      "code": "temp = x ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "while temp is greater than 0",
      "code": "while ( temp > 0 )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "increment bits by temp bitwise and 1",
      "code": "bits += temp & 1 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "let temp be temp bitshift right 1",
      "code": "temp >>= 1 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "declare signed long long integer ans = 1LL bitshift left bits",
      "code": "signed long long int ans = 1LL << bits ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if a is 0 , decrement ans by 2",
      "code": "if ( a == 0 ) { ans -= 2 ; }",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print ans and \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 32,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "signed signed long long int result = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "signed signed int power = n ;"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "exit ( l ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int temp = x ;"
      ],
      "err_line": 27,
      "err_msg": "conflicting declaration ‘int temp’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 32,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "\" cout << ans << \" \\n \" ;"
      ],
      "err_line": 34,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        22,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 32,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        22,
        32,
        21
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int a = ( sum - x ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        32,
        21,
        1
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        32,
        21,
        19
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        32,
        1
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed long long int ans = 1LL << endl ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        32,
        1,
        19
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed long long int ans = 1LL << endl ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        32,
        19
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        21
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int a = ( sum - x ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        21,
        1
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        21,
        1,
        19
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        21,
        1,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        21,
        19
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        21,
        19,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int sum , x ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        21,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 21,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        1
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        1,
        19
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        1,
        19,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        1,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        19
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        19,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int sum , x ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        22,
        32
      ],
      "mod_code": [
        "if ( a < 0 || 2 * a + x != 0 && ( x & a ) != 0 )",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 32,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        32,
        21
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int a = ( sum - x ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        32,
        21,
        1
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        32,
        21,
        1,
        19
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        32,
        21,
        19
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        32,
        1
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        32,
        1,
        19
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        32,
        19
      ],
      "mod_code": [
        "signed long long int ans = 1LL << endl ;",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21,
        1
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21,
        1,
        19
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21,
        1,
        19,
        32
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21,
        1,
        32
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21,
        19
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21,
        19,
        32
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int sum , x ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        21,
        32
      ],
      "mod_code": [
        "signed signed long long int a = ( sum - x ) / 2 ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 21,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        1,
        19,
        32
      ],
      "mod_code": [
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int sum , x ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        1,
        32
      ],
      "mod_code": [
        "signed signed int modularExponentiation ( signed long long int x , signed long long int M )",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘signed’"
    },
    {
      "mod_line": [
        19,
        32
      ],
      "mod_code": [
        "signed signed long long int sum , x ;",
        "signed signed long long int ans = 1LL << endl ;"
      ],
      "err_line": 19,
      "err_msg": "duplicate ‘signed’"
    }
  ]
}