{
  "meta": {
    "index": 2270,
    "hitid": "3O71U79SRBJ2FSQXPBLUZV0YJYDMS2",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "99A",
    "subid": "38604150"
  },
  "lines": [
    {
      "line": 0,
      "text": "asd = vector of char",
      "code": "vector < char > asd ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "wtf = vector of char",
      "code": "vector < char > wtf ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "z = string",
      "code": "string z ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read z",
      "code": "cin >> z ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = long long with s = z . size ( )",
      "code": "long long s = z . size ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "cek = bool with cek = false",
      "code": "bool cek = false ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for q = 0 to s exclusive",
      "code": "for ( long long q = 0 ; q < s ; q ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if ( z [ q ] is not . and cek is false )",
      "code": "if ( z [ q ] != ' . ' && cek == false )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "append z [ q ] in asd",
      "code": "asd . push_back ( z [ q ] ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "cek = true",
      "code": "cek = true ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ( cek is true ) , append z [ q ] in wtf",
      "code": "if ( cek == true ) { wtf . push_back ( z [ q ] ) ; }",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "s = asd . size ( )",
      "code": "s = asd . size ( ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "d = long long with d = asd [ s - 1 ] - 0",
      "code": "long long d = asd [ s - 1 ] - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if ( d is 9 )",
      "code": "if ( d == 9 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print GOTO Vasilisa .",
      "code": "cout << \" GOTO Vasilisa. \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "dsa = long long with dsa = wtf [ 1 ] - 0",
      "code": "long long dsa = wtf [ 1 ] - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if ( dsa < 5 )",
      "code": "if ( dsa < 5 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "for q = 0 to s exclusive , print asd [ q ]",
      "code": "for ( long long q = 0 ; q < s ; q ++ ) { cout << asd [ q ] ; }",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for q = 0 to s - 1 exclusive , print asd [ q ]",
      "code": "for ( long long q = 0 ; q < s - 1 ; q ++ ) { cout << asd [ q ] ; }",
      "indent": 3
    },
    {
      "line": 25,
      "text": "print asd [ asd . size ( ) - 1 ] - 0 + 1",
      "code": "cout << asd [ asd . size ( ) - 1 ] - ' 0 ' + 1 ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << GOTO << endl ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "vector = char > asd ;"
      ],
      "err_line": 0,
      "err_msg": "invalid use of template-name ‘std::vector’ without an argument list"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "z >> z ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( q = 0 ; q < s ; q ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘q’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "asd += z [ q ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( cek == true ) wtf += z [ q ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int s = asd . size ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << GOTO << ' \\n ' ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        25
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        25,
        20
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        25,
        11
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "bool cek = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        25,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        20
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        20,
        11
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        20,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        11
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "bool cek = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        11,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        18,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << GOTO << endl ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        25,
        20
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        25,
        20,
        11
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        25,
        20,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        25,
        11
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "bool cek = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        25,
        11,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        25,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        20
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "long long dsa = wtf [ 1 ] - 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        20,
        11
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        20,
        11,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        20,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "bool cek = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        11,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( z [ q ] != . cek && cek )",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        18,
        25
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        25,
        20
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        25,
        20,
        11
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        25,
        20,
        1
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        18,
        25,
        11
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "bool cek = true ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        25,
        11,
        1
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        18,
        25,
        1
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        20,
        11
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        20,
        11,
        1
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        18,
        20,
        1
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        18,
        11
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "bool cek = true ;"
      ],
      "err_line": 18,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        11,
        1
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        18,
        1
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        25,
        20,
        11,
        1
      ],
      "mod_code": [
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        25,
        20,
        1
      ],
      "mod_code": [
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "long long dsa = wtf [ 1 ] - 0 ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        25,
        11,
        1
      ],
      "mod_code": [
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        25,
        1
      ],
      "mod_code": [
        "cout << asd [ asd . size ( ) - 1 ] - 0 + 1 << endl ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        20,
        11,
        1
      ],
      "mod_code": [
        "long long dsa = wtf [ 1 ] - 0 ;",
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        20,
        1
      ],
      "mod_code": [
        "long long dsa = wtf [ 1 ] - 0 ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "bool cek = true ;",
        "vector < char > wtf ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘push_back’ in ‘wtf’, which is of non-class type ‘std::vector<char>()’"
    }
  ]
}