{
  "meta": {
    "index": 1324,
    "hitid": "3L7SUC0TTUO2EJ6LG92APPUFO6TM0E",
    "workerid": "AIWEXPJAU66D9",
    "probid": "798A",
    "subid": "48372754"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s is a new string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read standard input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create new integers count = 0 and l = length of s - 1",
      "code": "int count = 0 , l = s . size ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "start for loop from i = 0 to length of s / 2 exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] ! = s [ l - i ] , increment count",
      "code": "if ( s [ i ] != s [ l - i ] ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if length of s is even and count is 1",
      "code": "if ( s . size ( ) % 2 == 0 && count == 1 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if length of s is odd and ( count is 1 or 0 )",
      "code": "else if ( s . size ( ) % 2 == 1 && ( count == 1 || count == 0 ) )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" YES \" to the standard output",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        12,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        12,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "cout << \" NO \" ;",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        12,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        11,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        11,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "string s << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        11,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        11,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        12,
        11
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        12,
        11,
        3
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" NO \" ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        12,
        11,
        8
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" NO \" ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        12,
        3
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" NO \" ;",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        12,
        3,
        8
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" NO \" ;",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        12,
        8
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "string s << endl ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        11,
        3
      ],
      "mod_code": [
        "string s << endl ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        11,
        3,
        8
      ],
      "mod_code": [
        "string s << endl ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        11,
        8
      ],
      "mod_code": [
        "string s << endl ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string s << endl ;",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "string s << endl ;",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string s << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        11,
        3
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        11,
        3,
        8
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        11,
        8
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        3,
        8
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11,
        3,
        8
      ],
      "mod_code": [
        "n",
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int l = 0 , l = s . length ( ) - 1 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int l’"
    }
  ]
}