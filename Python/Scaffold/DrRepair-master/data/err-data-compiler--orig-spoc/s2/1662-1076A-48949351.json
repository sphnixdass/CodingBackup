{
  "meta": {
    "index": 1662,
    "hitid": "3IQ9O0AYW6THY9DLTWSSH7P33L7ITW",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1076A",
    "subid": "48949351"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set stdout output decimal precision to 10",
      "code": "cout . precision ( 10 ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set stdout floatfield format flag to fixed",
      "code": "cout << fixed ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare long long variable n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare long long variable pos = n - 1",
      "code": "long long pos = n - 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to n exclusive",
      "code": "for ( long long i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ i ] is less than s [ i - 1 ] , set pos to min of pos and i - 1",
      "code": "if ( s [ i ] < s [ i - 1 ] ) { pos = min ( pos , i - 1 ) ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "remove 1 character at position pos from s",
      "code": "s . erase ( pos , 1 ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(long long int&, int)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "s . pop ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘pop’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(long long int&, int)’"
    },
    {
      "mod_line": [
        2,
        8,
        11
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "s . erase ( pos ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(long long int&, int)’"
    },
    {
      "mod_line": [
        2,
        8,
        11,
        1
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        11,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "s . erase ( pos ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        1,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "puts ( 10 ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        1,
        8
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        1,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        8
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "s . erase ( pos ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        8,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "s . erase ( pos ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "s . erase ( pos ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "puts ( 10 ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        8,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "puts ( 10 ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "puts ( 10 ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "cout << fixed << endl ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "s . erase ( pos ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘min(long long int&, int)’"
    },
    {
      "mod_line": [
        8,
        11,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        11,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "s . erase ( pos ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "puts ( 10 ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        1,
        8
      ],
      "mod_code": [
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        1,
        8,
        6
      ],
      "mod_code": [
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        1,
        6
      ],
      "mod_code": [
        "s . erase ( pos ) ;",
        "puts ( 10 ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "s . erase ( pos ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8,
        6
      ],
      "mod_code": [
        "s . erase ( pos ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "s . erase ( pos ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "puts ( 10 ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        6
      ],
      "mod_code": [
        "puts ( 10 ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "puts ( 10 ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}