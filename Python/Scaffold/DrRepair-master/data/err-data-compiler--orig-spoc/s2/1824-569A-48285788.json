{
  "meta": {
    "index": 1824,
    "hitid": "3RSBJ6YZECKHBQ6NW708K06OP81OF3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "569A",
    "subid": "48285788"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare doubles t , s , q , c and ans with c and ans = 0",
      "code": "double t , s , q , c = 0 , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to t , s and q",
      "code": "cin >> t >> s >> q ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while s < t",
      "code": "while ( s < t )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "change s to the product of s and q",
      "code": "s = s * q ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increment ans by one",
      "code": "ans ++ ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print ans to the standard output",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> t , s >> q ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "s = max ( s , q ) ;",
        "double t , s = 0 , q , c , c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        4,
        1,
        3
      ],
      "mod_code": [
        "s = max ( s , q ) ;",
        "double t , s = 0 , q , c , c = 0 ;",
        "while ( s < t ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        4,
        1,
        3,
        2
      ],
      "mod_code": [
        "s = max ( s , q ) ;",
        "double t , s = 0 , q , c , c = 0 ;",
        "while ( s < t ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        4,
        1,
        2
      ],
      "mod_code": [
        "s = max ( s , q ) ;",
        "double t , s = 0 , q , c , c = 0 ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "s = max ( s , q ) ;",
        "while ( s < t ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "s = max ( s , q ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;",
        "while ( s < t ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;",
        "while ( s < t ) ;",
        "s = min ( s , q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        2
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;",
        "while ( s < t ) ;",
        "s = min ( s , q ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;",
        "while ( s < t ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;",
        "s = min ( s , q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;",
        "s = min ( s , q ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "double t , s = 0 , q , c , c = 0 ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘double c’"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "while ( s < t ) ;",
        "s = min ( s , q ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( s < t ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "s = min ( s , q ) ;",
        "cin >> t , s >> q ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    }
  ]
}