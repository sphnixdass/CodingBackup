{
  "meta": {
    "index": 346,
    "hitid": "33J5JKFMK6SPGQ3ARPRA8WCR1J6Q3W",
    "workerid": "AIWEXPJAU66D9",
    "probid": "814A",
    "subid": "47953859"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant int64_t infint64_t = 9223372036854775807LL",
      "code": "const int64_t infint64_t = 9223372036854775807LL ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create int64_t n and k",
      "code": "int64_t n , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create vector of int64_t a with size n",
      "code": "vector < int64_t > a ( n ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare int64_t minb = infint64_t",
      "code": "int64_t minb = infint64_t ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare int64_t maxb = 0",
      "code": "int64_t maxb = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i from 0 to n exclusive , read input to a [ i ]",
      "code": "for ( int64_t i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i from 0 to k exclusive",
      "code": "for ( int64_t i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare int64_t x",
      "code": "int64_t x ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read input to x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if x is less than minb , change minb to x",
      "code": "if ( x < minb ) minb = x ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if x is greater than maxb , change maxb to x",
      "code": "if ( x > maxb ) maxb = x ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if a [ 0 ] = 0 and a [ 1 ] = 0",
      "code": "if ( a [ 0 ] == 0 && a [ 1 ] == 0 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "return",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if a [ 0 ] = 0 and maxb > = a [ 1 ]",
      "code": "if ( a [ 0 ] == 0 && maxb >= a [ 1 ] )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "return",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for int64_t i = 0 to n exclusive",
      "code": "for ( int64_t i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if a [ i ] = 0 and i > 0 and a [ i - 1 ] = 0",
      "code": "if ( a [ i ] == 0 && i > 0 && a [ i - 1 ] == 0 )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "return",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if a [ i ] = 0 and i > 0 and minb < a [ i - 1 ]",
      "code": "if ( a [ i ] == 0 && i > 0 && minb < a [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "return",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if a [ i ] > 0 and i > 0 and a [ i - 1 ] > 0 and a [ i ] < a [ i - 1 ]",
      "code": "if ( a [ i ] > 0 && i > 0 && a [ i - 1 ] > 0 && a [ i ] < a [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "return",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "if a [ i ] = 0 and i + 1 < n and a [ i + 1 ] = 0",
      "code": "if ( a [ i ] == 0 && i + 1 < n && a [ i + 1 ] == 0 )",
      "indent": 2
    },
    {
      "line": 36,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "return",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 39,
      "text": "if a [ i ] = 0 and i + 1 < n and maxb > a [ i + 1 ]",
      "code": "if ( a [ i ] == 0 && i + 1 < n && maxb > a [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 40,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "return",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print \" No \"",
      "code": "cout << \" No \" << endl ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 47,
      "text": "call solve ( )",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void solve ( ) { }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < int64_t > a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<long int>’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "const int64_t maxb = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "assignment of read-only variable ‘maxb’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )"
      ],
      "err_line": 39,
      "err_msg": "invalid types ‘int64_t {aka long int}[int64_t {aka long int}]’ for array subscript"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "solve ( ) ) ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        37,
        33
      ],
      "mod_code": [
        "return return ;",
        "return return ;"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        33,
        39
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        33,
        39,
        8
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        33,
        39,
        5
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        33,
        39,
        29
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        33,
        8
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        33,
        8,
        5
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        33,
        8,
        29
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        33,
        5
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "int64_t minb = 1 ;"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        33,
        5,
        29
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        33,
        29
      ],
      "mod_code": [
        "return return ;",
        "return return ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        39
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        39,
        8
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        39,
        8,
        5
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        39,
        8,
        29
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        39,
        5
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        39,
        5,
        29
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        39,
        29
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        8
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        8,
        5
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        8,
        5,
        29
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        8,
        29
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        5
      ],
      "mod_code": [
        "return return ;",
        "int64_t minb = 1 ;"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        5,
        29
      ],
      "mod_code": [
        "return return ;",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        37,
        29
      ],
      "mod_code": [
        "return return ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33,
        39
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33,
        39,
        8
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        39,
        8,
        5
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        39,
        8,
        29
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        39,
        5
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33,
        39,
        5,
        29
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33,
        39,
        29
      ],
      "mod_code": [
        "return return ;",
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33,
        8
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        8,
        5
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        8,
        5,
        29
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        8,
        29
      ],
      "mod_code": [
        "return return ;",
        "for ( i = 0 ; i < k ; i ++ )",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        5
      ],
      "mod_code": [
        "return return ;",
        "int64_t minb = 1 ;"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33,
        5,
        29
      ],
      "mod_code": [
        "return return ;",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        33,
        29
      ],
      "mod_code": [
        "return return ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        39,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        8,
        5
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        8,
        5,
        29
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        8,
        29
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "for ( i = 0 ; i < k ; i ++ )",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        5
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 39,
      "err_msg": "invalid types ‘int64_t {aka long int}[int64_t {aka long int}]’ for array subscript"
    },
    {
      "mod_line": [
        39,
        5,
        29
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        39,
        29
      ],
      "mod_code": [
        "if ( a [ i ] == 0 && i + 1 < n && maxb [ i + 1 ] )",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )",
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )",
        "return return ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        29
      ],
      "mod_code": [
        "int64_t minb = 1 ;",
        "return return ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘return’"
    }
  ]
}