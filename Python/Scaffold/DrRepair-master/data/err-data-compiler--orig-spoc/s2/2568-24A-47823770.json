{
  "meta": {
    "index": 2568,
    "hitid": "3VMV5CHJZ8932I7Q38SPWVCNOTZTG5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "24A",
    "subid": "47823770"
  },
  "lines": [
    {
      "line": 0,
      "text": "vector of integers v with 101 element",
      "code": "vector < int > v [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "array of booleans vis with 101 element",
      "code": "bool vis [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let cost be integer = 0",
      "code": "int cost = 0 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "GRAPH is an array of integers with size 101 by 101",
      "code": "int GRAPH [ 101 ] [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DFS is a void function with integer argument x",
      "code": "void DFS ( int x )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "set value of vis [ x ] to true",
      "code": "vis [ x ] = true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to size of v [ x ] exclusive",
      "code": "for ( int i = 0 ; i < v [ x ] . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if vis [ v [ x ] [ i ] ] is false",
      "code": "if ( ! vis [ v [ x ] [ i ] ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if GRAPH [ v [ x ] [ i ] ] [ x ] ! = - 1 , increase cost by GRAPH [ v [ x ] [ i ] ] [ x ]",
      "code": "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] ] [ x ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "call function DFS with argument v [ x ] [ i ]",
      "code": "DFS ( v [ x ] [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j = 1 to n inclusive set GRAPH [ i ] [ j ] to - 1",
      "code": "for ( int j = 1 ; j <= n ; j ++ ) GRAPH [ i ] [ j ] = - 1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set elements of vis from 1 to n inclusive to false",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) vis [ i ] = false ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "declare long longs x , y and z",
      "code": "long long x , y , z ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "read x , y and z",
      "code": "cin >> x >> y >> z ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "GRAPH [ x ] [ y ] = z",
      "code": "GRAPH [ x ] [ y ] = z ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "push y into v [ x ]",
      "code": "v [ x ] . push_back ( y ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "push x into v [ y ]",
      "code": "v [ y ] . push_back ( x ) ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "vis [ 1 ] = true",
      "code": "vis [ 1 ] = true ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "call DFS of v [ 1 ] [ 0 ]",
      "code": "DFS ( v [ 1 ] [ 0 ] ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "cost1 is integer = cost",
      "code": "int cost1 = cost ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if GRAPH [ 1 ] [ v [ 1 ] [ 0 ] ] = - 1 add GRAPH [ v [ 1 ] [ 0 ] ] [ 1 ] to cost1",
      "code": "if ( GRAPH [ 1 ] [ v [ 1 ] [ 0 ] ] == - 1 ) { cost1 += GRAPH [ v [ 1 ] [ 0 ] ] [ 1 ] ; }",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if GRAPH [ v [ 1 ] [ 1 ] ] [ 1 ] = - 1 add GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] to cost1",
      "code": "if ( GRAPH [ v [ 1 ] [ 1 ] ] [ 1 ] == - 1 ) cost1 += GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "set cost to 0",
      "code": "cost = 0 ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "for integer i = 1 to n inclusive set vis [ i ] to false",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) vis [ i ] = false ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "set value of vis [ 1 ] to true",
      "code": "vis [ 1 ] = true ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "call function DFS with argument v [ 1 ] [ 1 ]",
      "code": "DFS ( v [ 1 ] [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "let cost2 be integer = cost",
      "code": "int cost2 = cost ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "if GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] = - 1 , increase cost2 by GRAPH [ v [ 1 ] [ 1 ] ] [ 1 ]",
      "code": "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) { cost2 += GRAPH [ v [ 1 ] [ 1 ] ] [ 1 ] ; }",
      "indent": 1
    },
    {
      "line": 38,
      "text": "if GRAPH [ v [ 1 ] [ 0 ] ] [ 1 ] = - 1 , increase cost2 by GRAPH [ 1 ] [ v [ 1 ] [ 0 ] ]",
      "code": "if ( GRAPH [ v [ 1 ] [ 0 ] ] [ 1 ] == - 1 ) cost2 += GRAPH [ 1 ] [ v [ 1 ] [ 0 ] ] ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print min of cost1 and cost2 and a new line",
      "code": "cout << min ( cost1 , cost2 ) << endl ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 37,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool vis [ 101 ] [ 101 ] ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [101]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cost = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘cost’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * GRAPH [ 101 ] [ 101 ] ;"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool vis [ x ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v ] [ i ] [ x ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int [101][101][std::vector<int> [101]]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "DFS ( ( v [ x ] [ i ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = 1 ; }"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "v [ x ] . push ( y ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "v [ y ] . push ( x ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "bool vis [ 1 ] = true ;"
      ],
      "err_line": 27,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "v = v [ 1 ] [ 1 ] ;"
      ],
      "err_line": 35,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘std::vector<int> [101]’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ v ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 37,
      "err_msg": "invalid types ‘std::vector<int> [101][std::vector<int> [101]]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        19
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        19,
        32
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        19,
        37
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        19,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        32
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        32,
        37
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        32,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost = 0 ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        37
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        37,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        19,
        32
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        19,
        32,
        37
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        19,
        32,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        19,
        37
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        19,
        37,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        19,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        32
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "int cost = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        32,
        37
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        32,
        37,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        32,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "int cost = 0 ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        37
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        37,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "vector < int > v ( 101 ) ;",
        "int cost1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘v.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)x))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        32
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        32,
        37
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        32,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;",
        "int cost1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        37
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        37,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        32
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        32,
        37
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        32,
        37,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        32,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost = 0 ;",
        "int cost1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        37
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        37,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ v [ x ] [ i ] ] [ x ] != - 1 ) cost += GRAPH [ v [ x ] [ i ] [ x ] ;",
        "int cost1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        32
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        32,
        37
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        32,
        37,
        29
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        32,
        29
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost = 0 ;",
        "int cost1 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        37
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        37,
        29
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        29
      ],
      "mod_code": [
        "for ( int i = 1 ; vis <= n ; i ++ ) { vis [ i ] = false ; }",
        "int cost1 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        32,
        37
      ],
      "mod_code": [
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;"
      ],
      "err_line": 37,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        37,
        29
      ],
      "mod_code": [
        "int cost = 0 ;",
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        37,
        29
      ],
      "mod_code": [
        "if ( GRAPH [ 1 ] [ v [ 1 ] [ 1 ] ] == - 1 ) cost2 += GRAPH [ v [ 1 ] [ 1 ] [ 1 ] ;",
        "int cost1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}