{
  "meta": {
    "index": 299,
    "hitid": "30U1YOGZGAQZBYKKCIMRG5D4AKNDSD",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "735A",
    "subid": "46618503"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k = int",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n then k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "call getchar",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "p , i = int with p = - 1 and i = - 1",
      "code": "int p = - 1 , i = - 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = char with s = getchar",
      "code": "char s = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "loop while s is not ' \\ n '",
      "code": "while ( s != ' \\n ' )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s is ' # '",
      "code": "if ( s == ' # ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if p is not - 1 and ( i - p ) mod k is 0",
      "code": "if ( p != - 1 && ( i - p ) % k == 0 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if ' A ' < = s and s < = ' Z '",
      "code": "else if ( ' A ' <= s && s <= ' Z ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if p is not - 1",
      "code": "if ( p != - 1 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if ( i - p ) mod k is 0",
      "code": "if ( ( i - p ) % k == 0 )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set p to i",
      "code": "p = i ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "set s to getchar",
      "code": "s = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n then k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int p , i = - 1 , i = - 1 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else if ( s == ' # ' )"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        16,
        8
      ],
      "mod_code": [
        "int p = i ;",
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        16,
        8,
        3
      ],
      "mod_code": [
        "int p = i ;",
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        16,
        8,
        19
      ],
      "mod_code": [
        "int p = i ;",
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        16,
        8,
        5
      ],
      "mod_code": [
        "int p = i ;",
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        16,
        3
      ],
      "mod_code": [
        "int p = i ;",
        "cout << \" YES \" ;",
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        16,
        3,
        19
      ],
      "mod_code": [
        "int p = i ;",
        "cout << \" YES \" ;",
        "exit ( ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        16,
        3,
        5
      ],
      "mod_code": [
        "int p = i ;",
        "cout << \" YES \" ;",
        "exit ( ) ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        8
      ],
      "mod_code": [
        "int p = i ;",
        "else if ( s == ' # ' )"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        8,
        3
      ],
      "mod_code": [
        "int p = i ;",
        "else if ( s == ' # ' )",
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        8,
        3,
        19
      ],
      "mod_code": [
        "int p = i ;",
        "else if ( s == ' # ' )",
        "exit ( ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        8,
        3,
        5
      ],
      "mod_code": [
        "int p = i ;",
        "else if ( s == ' # ' )",
        "exit ( ) ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        8,
        19
      ],
      "mod_code": [
        "int p = i ;",
        "else if ( s == ' # ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        8,
        19,
        5
      ],
      "mod_code": [
        "int p = i ;",
        "else if ( s == ' # ' )",
        "cout << \" NO \" ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        8,
        5
      ],
      "mod_code": [
        "int p = i ;",
        "else if ( s == ' # ' )",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        3
      ],
      "mod_code": [
        "int p = i ;",
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        3,
        19
      ],
      "mod_code": [
        "int p = i ;",
        "exit ( ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        3,
        19,
        5
      ],
      "mod_code": [
        "int p = i ;",
        "exit ( ) ;",
        "cout << \" NO \" ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        23,
        3,
        5
      ],
      "mod_code": [
        "int p = i ;",
        "exit ( ) ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        8,
        3
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        16,
        8,
        3,
        19
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "exit ( ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        16,
        8,
        3,
        5
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "exit ( ) ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        16,
        8,
        19
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        8,
        19,
        5
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "cout << \" NO \" ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        8,
        5
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else if ( s == ' # ' )",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        16,
        3,
        19
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "exit ( ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        16,
        3,
        19,
        5
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "exit ( ) ;",
        "cout << \" NO \" ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        16,
        3,
        5
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "exit ( ) ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "else if ( s == ' # ' )",
        "exit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        8,
        3,
        19
      ],
      "mod_code": [
        "else if ( s == ' # ' )",
        "exit ( ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        8,
        3,
        19,
        5
      ],
      "mod_code": [
        "else if ( s == ' # ' )",
        "exit ( ) ;",
        "cout << \" NO \" ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        8,
        3,
        5
      ],
      "mod_code": [
        "else if ( s == ' # ' )",
        "exit ( ) ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "else if ( s == ' # ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8,
        19,
        5
      ],
      "mod_code": [
        "else if ( s == ' # ' )",
        "cout << \" NO \" ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "else if ( s == ' # ' )",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "exit ( ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        3,
        19,
        5
      ],
      "mod_code": [
        "exit ( ) ;",
        "cout << \" NO \" ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "exit ( ) ;",
        "bool s = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void exit(int)’"
    }
  ]
}