{
  "meta": {
    "index": 528,
    "hitid": "31KPKEKW4A76VS2OPKC1B9JLC7KB09",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "1040A",
    "subid": "48114173"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , a and b",
      "code": "int n , a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , a , b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create int array c of length n + 1",
      "code": "int c [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read first n elements into array c [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> c [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set l = 0 , f = n - 1 and cost = 0",
      "code": "int l = 0 , f = n - 1 , cost = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set min_cost = min of a and b , flag = 1",
      "code": "int min_cost = min ( a , b ) , flag = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while l less than f",
      "code": "while ( l < f )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if c [ l ] = c [ f ] and c [ l ] different from 2",
      "code": "if ( c [ l ] == c [ f ] && c [ l ] != 2 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "decrement f",
      "code": "f -- ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if c [ l ] = c [ f ] and c [ l ] = 2",
      "code": "else if ( c [ l ] == c [ f ] && c [ l ] == 2 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "cost = cost + 2 * min_cost",
      "code": "cost += 2 * min_cost ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "add 1 to l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "decrement f",
      "code": "f -- ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if c [ l ] = 2",
      "code": "else if ( c [ l ] == 2 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "assign cost + c [ f ] * b + ( 1 - c [ f ] ) * a to cost",
      "code": "cost += c [ f ] * b + ( 1 - c [ f ] ) * a ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "decrement f",
      "code": "f -- ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else if c [ f ] equal to 2",
      "code": "else if ( c [ f ] == 2 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set cost = cost + c [ l ] * b + ( 1 - c [ l ] ) * a",
      "code": "cost += c [ l ] * b + ( 1 - c [ l ] ) * a ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "add 1 to l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "decrement f",
      "code": "f -- ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "flag = 0",
      "code": "flag = 0 ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if l equal to f and c [ l ] = 2 , cost = cost + min_cost",
      "code": "if ( l == f && c [ l ] == 2 ) cost += min_cost ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if flag equal to 0",
      "code": "if ( flag == 0 )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print - 1 and a newline",
      "code": "cout << \" -1\\n \" ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print cost",
      "code": "cout << cost << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a + b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int min_cost = min ( a , b , flag = 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( l < f ) ;"
      ],
      "err_line": 25,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        32,
        24,
        23
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "cout << ' cost ' ;",
        "int flag = 0 ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        32,
        24,
        5
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "cout << ' cost ' ;",
        "int flag = 0 ;",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        32,
        23
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        32,
        23,
        5
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "cout << ' cost ' ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        32,
        23,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "cout << ' cost ' ;",
        "n",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        32,
        5
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "cout << ' cost ' ;",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        32,
        5,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "cout << ' cost ' ;",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24,
        23
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "int flag = 0 ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        24,
        23,
        5
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "int flag = 0 ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24,
        23,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "int flag = 0 ;",
        "n",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        24,
        5
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "int flag = 0 ;",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24,
        5,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "int flag = 0 ;",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        23,
        5
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        23,
        5,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        23,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "n",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        24,
        23
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "int flag = 0 ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        32,
        24,
        23,
        5
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "int flag = 0 ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        24,
        23,
        19
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "int flag = 0 ;",
        "n",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        32,
        24,
        5
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "int flag = 0 ;",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        24,
        5,
        19
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "int flag = 0 ;",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        23
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        32,
        23,
        5
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        23,
        5,
        19
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        23,
        19
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "n",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        32,
        5
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        5,
        19
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        23
      ],
      "mod_code": [
        "int flag = 0 ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        23,
        5
      ],
      "mod_code": [
        "int flag = 0 ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        23,
        5,
        19
      ],
      "mod_code": [
        "int flag = 0 ;",
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        23,
        19
      ],
      "mod_code": [
        "int flag = 0 ;",
        "n",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "int flag = 0 ;",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        5,
        19
      ],
      "mod_code": [
        "int flag = 0 ;",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        5
      ],
      "mod_code": [
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        5,
        19
      ],
      "mod_code": [
        "n",
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        19
      ],
      "mod_code": [
        "n",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "l = 0 , f = n - 1 , cost = 0 ;",
        "else if ( c [ f ] == ' 2 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}