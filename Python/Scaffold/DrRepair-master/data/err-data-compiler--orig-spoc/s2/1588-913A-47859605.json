{
  "meta": {
    "index": 1588,
    "hitid": "39I4RL8QGJBXLTNB8D9Z9NCWOW74H0",
    "workerid": "AIWEXPJAU66D9",
    "probid": "913A",
    "subid": "47859605"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long variables n and m",
      "code": "long long n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n > = 30",
      "code": "if ( n >= 30 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "change n to 2 raised to the power of n",
      "code": "n = pow ( 2 , n ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print m modulo n",
      "code": "cout << m % n << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "n = min ( n , n ) ;",
        "cout << ' m ' ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        4,
        5,
        2
      ],
      "mod_code": [
        "n = min ( n , n ) ;",
        "cout << ' m ' ;",
        "n",
        "n = n >> m ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "n = min ( n , n ) ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        5,
        2
      ],
      "mod_code": [
        "n = min ( n , n ) ;",
        "n",
        "n = n >> m ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "cout << ' m ' ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        5,
        2
      ],
      "mod_code": [
        "cout << ' m ' ;",
        "n",
        "n = n >> m ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        5,
        2,
        6
      ],
      "mod_code": [
        "cout << ' m ' ;",
        "n",
        "n = n >> m ;",
        "n = pow ( n , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "cout << ' m ' ;",
        "n",
        "n = pow ( n , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "n",
        "n = n >> m ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "n",
        "n = n >> m ;",
        "n = pow ( n , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "n",
        "n = pow ( n , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}