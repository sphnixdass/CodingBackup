{
  "meta": {
    "index": 2312,
    "hitid": "37SQU136V7I5PJ5EJ6NCJ2PMVN611Q",
    "workerid": "AIWEXPJAU66D9",
    "probid": "908A",
    "subid": "48938430"
  },
  "lines": [
    {
      "line": 0,
      "text": "vowel is a bool function with char argument ch",
      "code": "bool vowel ( char ch )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if ch is one of : ' a ' , ' e ' , ' i ' , ' o ' or ' u '",
      "code": "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' || ch == ' u ' )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "boolean function even with char argument ch",
      "code": "bool even ( char ch )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "if ch is an odd digit character",
      "code": "if ( ch == ' 1 ' || ch == ' 3 ' || ch == ' 5 ' || ch == ' 7 ' || ch == ' 9 ' )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "declare new string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read user input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "create integer variable with name len",
      "code": "int len = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "count is a new integer with value 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i from 0 to len exclusive incrementing i",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "create new character called ch with value s [ i ]",
      "code": "char ch = s [ i ] ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if vowel ( ch ) returns true , increment count by one",
      "code": "if ( vowel ( ch ) ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if even ( ch ) returns true , increment count by one",
      "code": "if ( even ( ch ) ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool * vowel ( char ch )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘bool’ to ‘bool*’ in return"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "count = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "ch = s [ i ] ;"
      ],
      "err_line": 20,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        17,
        22,
        15
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "int len ;",
        "if ( ( ch ) ) count ++ ;",
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        17,
        15
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "int len ;",
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        17,
        15,
        11
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "int len ;",
        "const string s ;",
        "exit ( false ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        17,
        15,
        1
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "int len ;",
        "const string s ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        22,
        15
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "if ( ( ch ) ) count ++ ;",
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        22,
        15,
        11
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "if ( ( ch ) ) count ++ ;",
        "const string s ;",
        "exit ( false ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        22,
        15,
        1
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "if ( ( ch ) ) count ++ ;",
        "const string s ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        15,
        11
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "const string s ;",
        "exit ( false ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        15,
        11,
        1
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "const string s ;",
        "exit ( false ) ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        15,
        1
      ],
      "mod_code": [
        "if ( ch % 2 )",
        "const string s ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        22,
        15
      ],
      "mod_code": [
        "int len ;",
        "if ( ( ch ) ) count ++ ;",
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        22,
        15,
        11
      ],
      "mod_code": [
        "int len ;",
        "if ( ( ch ) ) count ++ ;",
        "const string s ;",
        "exit ( false ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        22,
        15,
        1
      ],
      "mod_code": [
        "int len ;",
        "if ( ( ch ) ) count ++ ;",
        "const string s ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "int len ;",
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        15,
        11
      ],
      "mod_code": [
        "int len ;",
        "const string s ;",
        "exit ( false ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        15,
        11,
        1
      ],
      "mod_code": [
        "int len ;",
        "const string s ;",
        "exit ( false ) ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        15,
        1
      ],
      "mod_code": [
        "int len ;",
        "const string s ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        15
      ],
      "mod_code": [
        "if ( ( ch ) ) count ++ ;",
        "const string s ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        15,
        11
      ],
      "mod_code": [
        "if ( ( ch ) ) count ++ ;",
        "const string s ;",
        "exit ( false ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        15,
        11,
        1
      ],
      "mod_code": [
        "if ( ( ch ) ) count ++ ;",
        "const string s ;",
        "exit ( false ) ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        15,
        1
      ],
      "mod_code": [
        "if ( ( ch ) ) count ++ ;",
        "const string s ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "const string s ;",
        "exit ( false ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        11,
        1
      ],
      "mod_code": [
        "const string s ;",
        "exit ( false ) ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "const string s ;",
        "if ( ch == ' a ' || ch == ' e ' || ch == ' i ' || ch == ' o ' )"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    }
  ]
}