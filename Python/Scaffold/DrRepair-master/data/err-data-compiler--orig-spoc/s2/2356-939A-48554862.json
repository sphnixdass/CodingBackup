{
  "meta": {
    "index": 2356,
    "hitid": "3XDJY5RK5SF2QFTV8CGYS21MI4BU4T",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "939A",
    "subid": "48554862"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create int a [ n + 1 ]",
      "code": "int a [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i01 to n inclusive , read a [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ a [ a [ i ] ] ] = i",
      "code": "if ( a [ a [ a [ i ] ] ] == i )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        1,
        3
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        1,
        3,
        6
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        1,
        3,
        2
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "int a [ n ] ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(((int)n) + 1)][int [(((int)n) + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(((int)n) + 1)][int [(((int)n) + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = n ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        1,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        1,
        3,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        1,
        3,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "int a [ n ] ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(((int)n) + 1)][int [(((int)n) + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "bool n ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(((int)n) + 1)][int [(((int)n) + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "int a [ n ] ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n ; i ++ ) cin >> a [ i ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "bool n ;",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "bool n ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        2
      ],
      "mod_code": [
        "bool n ;",
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "bool n ;",
        "int a [ n ] ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "bool n ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(((int)n) + 1)][int [(((int)n) + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        2
      ],
      "mod_code": [
        "bool n ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(((int)n) + 1)][int [(((int)n) + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int a [ n ] ] ;",
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int a [ n ] ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( a [ a [ a [ a ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    }
  ]
}