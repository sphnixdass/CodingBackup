{
  "meta": {
    "index": 1420,
    "hitid": "3VGET1QSZ0TC160J5AT6D26TUMFW7H",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "155A",
    "subid": "49050702"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , point , highest , lowest , set result = 0",
      "code": "int n , point , result = 0 , highest , lowest ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read point",
      "code": "cin >> point ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "highest = lowest = point",
      "code": "highest = lowest = point ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read point",
      "code": "cin >> point ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if point > highest and point > lowest",
      "code": "if ( point > highest && point > lowest )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set highest = point",
      "code": "highest = point ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment result",
      "code": "result ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if point < highest and point < lowest",
      "code": "if ( point < highest && point < lowest )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "assign point to lowest",
      "code": "lowest = point ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment result",
      "code": "result ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print result",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , highest , highest = 0 , result = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "getchar ( ) ; )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( point < highest && point < min )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "min = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        11
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        6
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "min = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        12,
        6
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "* lowest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "getchar ( ) ; )",
        "min = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        4,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "highest = getchar ( ) ;",
        "min = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "if ( point < highest && point < 1 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        11,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "if ( point < highest && point < 1 )",
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        11,
        12,
        6
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "if ( point < highest && point < 1 )",
        "* lowest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        11,
        6
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "if ( point < highest && point < 1 )",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        11,
        6,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "if ( point < highest && point < 1 )",
        "getchar ( ) ; )",
        "min = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        11,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "if ( point < highest && point < 1 )",
        "min = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        12,
        6
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "* lowest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        6,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "getchar ( ) ; )",
        "min = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , highest , highest , lowest = 0 ;",
        "min = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int highest’"
    },
    {
      "mod_line": [
        4,
        11,
        12
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        11,
        12,
        6
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "* lowest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        11,
        6
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        11,
        6,
        12
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "getchar ( ) ; )",
        "min = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        11,
        12
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "if ( point < highest && point < 1 )",
        "min = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        12,
        6
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "* lowest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "getchar ( ) ; )",
        "min = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "highest = getchar ( ) ;",
        "min = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "if ( point < highest && point < 1 )",
        "* lowest = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        12,
        6
      ],
      "mod_code": [
        "if ( point < highest && point < 1 )",
        "* lowest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "if ( point < highest && point < 1 )",
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        6,
        12
      ],
      "mod_code": [
        "if ( point < highest && point < 1 )",
        "getchar ( ) ; )",
        "min = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "if ( point < highest && point < 1 )",
        "min = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "* lowest = getchar ( ) ;",
        "getchar ( ) ; )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "min = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}