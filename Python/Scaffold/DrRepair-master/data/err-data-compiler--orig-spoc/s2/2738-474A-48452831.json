{
  "meta": {
    "index": 2738,
    "hitid": "32CAVSKPCEJLYGWCLUXWU4UJ6K01UM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "474A",
    "subid": "48452831"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in the infinite loop",
      "code": "for ( ; ; )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare character variable left_rigth",
      "code": "char left_rigth ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "input , output , u , m and d are strings with output = \" \"",
      "code": "string input , output = \" \" , u , m , d ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "set u to \" qwertyuiop \"",
      "code": "u = \" qwertyuiop \" ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "change m to \" asdfghjkl ; \"",
      "code": "m = \" asdfghjkl; \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set d to \" zxcvbnm , . / \"",
      "code": "d = \" zxcvbnm,./ \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read left_rigth from the user input",
      "code": "cin >> left_rigth ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read input",
      "code": "cin >> input ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if left_rigth is equal to ' R '",
      "code": "if ( left_rigth == ' R ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "in a for loop , change i from 0 to length of input exclusive",
      "code": "for ( int i = 0 ; i < input . length ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "create boolean variable with name found = false",
      "code": "bool found = false ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if found is false",
      "code": "if ( ! found )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "for integer j = 0 to 10 exclusive",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 5
    },
    {
      "line": 14,
      "text": "if input [ i ] is equal to u [ j ]",
      "code": "if ( input [ i ] == u [ j ] )",
      "indent": 6
    },
    {
      "line": 15,
      "text": "assign true to found",
      "code": "found = true ;",
      "indent": 7
    },
    {
      "line": 16,
      "text": "append u [ j - 1 ] to output",
      "code": "output += u [ j - 1 ] ;",
      "indent": 7
    },
    {
      "line": 17,
      "text": "break the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if found is false",
      "code": "if ( ! found )",
      "indent": 4
    },
    {
      "line": 22,
      "text": "start for loop from j = 0 to 10 exclusive incrementing j",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 5
    },
    {
      "line": 23,
      "text": "if input [ i ] = m [ j ]",
      "code": "if ( input [ i ] == m [ j ] )",
      "indent": 6
    },
    {
      "line": 24,
      "text": "set found to true",
      "code": "found = true ;",
      "indent": 7
    },
    {
      "line": 25,
      "text": "append m [ j - 1 ] to output",
      "code": "output += m [ j - 1 ] ;",
      "indent": 7
    },
    {
      "line": 26,
      "text": "break the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 30,
      "text": "if found is false",
      "code": "if ( ! found )",
      "indent": 4
    },
    {
      "line": 31,
      "text": "for integer j = 0 to 10 exclusive incrementing j",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 5
    },
    {
      "line": 32,
      "text": "if input [ i ] is equal to d [ j ]",
      "code": "if ( input [ i ] == d [ j ] )",
      "indent": 6
    },
    {
      "line": 33,
      "text": "assign true to found",
      "code": "found = true ;",
      "indent": 7
    },
    {
      "line": 34,
      "text": "change output to the output joined with d [ j - 1 ]",
      "code": "output += d [ j - 1 ] ;",
      "indent": 7
    },
    {
      "line": 35,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 40,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 41,
      "text": "for i from 0 to length of input exclusive incrementing i",
      "code": "for ( int i = 0 ; i < input . length ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 42,
      "text": "found is a new boolean variable = false",
      "code": "bool found = false ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "if found is false",
      "code": "if ( ! found )",
      "indent": 4
    },
    {
      "line": 44,
      "text": "start for loop from j = 0 to 10 exclusive",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 5
    },
    {
      "line": 45,
      "text": "if input [ i ] = u [ j ]",
      "code": "if ( input [ i ] == u [ j ] )",
      "indent": 6
    },
    {
      "line": 46,
      "text": "set found to true",
      "code": "found = true ;",
      "indent": 7
    },
    {
      "line": 47,
      "text": "change output to the concatenation of output and u [ j + 1 ]",
      "code": "output += u [ j + 1 ] ;",
      "indent": 7
    },
    {
      "line": 48,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 52,
      "text": "if found is false",
      "code": "if ( ! found )",
      "indent": 4
    },
    {
      "line": 53,
      "text": "for integer j = 0 to 10 exclusive",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 5
    },
    {
      "line": 54,
      "text": "if input [ i ] = m [ j ]",
      "code": "if ( input [ i ] == m [ j ] )",
      "indent": 6
    },
    {
      "line": 55,
      "text": "assign true to found",
      "code": "found = true ;",
      "indent": 7
    },
    {
      "line": 56,
      "text": "append m [ j + 1 ] to output",
      "code": "output += m [ j + 1 ] ;",
      "indent": 7
    },
    {
      "line": 57,
      "text": "break the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 61,
      "text": "if found is false",
      "code": "if ( ! found )",
      "indent": 4
    },
    {
      "line": 62,
      "text": "start for loop from j = 0 to 10 exclusive",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 5
    },
    {
      "line": 63,
      "text": "if input [ i ] is equal to d [ j ]",
      "code": "if ( input [ i ] == d [ j ] )",
      "indent": 6
    },
    {
      "line": 64,
      "text": "set found to true",
      "code": "found = true ;",
      "indent": 7
    },
    {
      "line": 65,
      "text": "set output to output joined with d [ j + 1 ]",
      "code": "output += d [ j + 1 ] ;",
      "indent": 7
    },
    {
      "line": 66,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 69,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 70,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 71,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 72,
      "text": "print output",
      "code": "cout << output << endl ;",
      "indent": 2
    },
    {
      "line": 73,
      "text": "break",
      "code": "break ;",
      "indent": 2
    },
    {
      "line": 74,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 75,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string input , output , u , m = \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int u = \" qwertyuiop \" ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘int u’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( left_rigth == ' R ' ) break ;"
      ],
      "err_line": 40,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( strcmp ( input [ i ] ) == d [ j ] )"
      ],
      "err_line": 32,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "output = string + d [ j - 1 ] ;"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘+’ token"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 40,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "found = false ;"
      ],
      "err_line": 42,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 44,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 57,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        62
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 62,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "if ( strcmp ( input [ i ] ) == d [ j ] )"
      ],
      "err_line": 63,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        22
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "d = \" zxcvbnm \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        22,
        54
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "d = \" zxcvbnm \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        22,
        2
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "d = \" zxcvbnm \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        54,
        2
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "d = \" zxcvbnm \" ;",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "d = \" zxcvbnm \" ;",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        22,
        54
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        22,
        54,
        2
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        54,
        6
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        22,
        2
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        2,
        6
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "char left_rigth [ 5 ] ;",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        6
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        54,
        2
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        54,
        2,
        6
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "m = \" -1 \" ;",
        "char left_rigth [ 5 ] ;",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        22
      ],
      "mod_code": [
        "d = \" zxcvbnm \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        54
      ],
      "mod_code": [
        "d = \" zxcvbnm \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        54,
        2
      ],
      "mod_code": [
        "d = \" zxcvbnm \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        22,
        2
      ],
      "mod_code": [
        "d = \" zxcvbnm \" ;",
        "for ( j = 0 ; j < 10 ; j ++ )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        54,
        2
      ],
      "mod_code": [
        "d = \" zxcvbnm \" ;",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "d = \" zxcvbnm \" ;",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        54
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        54,
        2
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        54,
        2,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        54,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )",
        "if ( input [ i ] = m [ j ] )",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        2
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        2,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )",
        "char left_rigth [ 5 ] ;",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        54,
        2
      ],
      "mod_code": [
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        54,
        2,
        6
      ],
      "mod_code": [
        "if ( input [ i ] = m [ j ] )",
        "char left_rigth [ 5 ] ;",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "char left_rigth [ 5 ] ;",
        "d = \" Malvika\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}