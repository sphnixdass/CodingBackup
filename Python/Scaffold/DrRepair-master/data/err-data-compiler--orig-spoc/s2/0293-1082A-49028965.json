{
  "meta": {
    "index": 293,
    "hitid": "3WRKFXQBOB1DFVCF32FRPOHIJAMIYT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1082A",
    "subid": "49028965"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new integer variable q",
      "code": "int q ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read variable q from the input",
      "code": "cin >> q ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement q and loop further , while q is not 0",
      "code": "while ( q -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare new long long variables a , b and c = - 1",
      "code": "long long a = - 1 , b = - 1 , c = - 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "declare long long variables n , x , y and d",
      "code": "long long n , x , y , d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read n , x , y and d",
      "code": "cin >> n >> x >> y >> d ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "create new long long ans with value - 1",
      "code": "long long ans = - 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if abs ( x - y ) % d is equal to 0",
      "code": "if ( abs ( x - y ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change the value of ans to abs ( x - y ) / d",
      "code": "ans = abs ( x - y ) / d ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if abs ( n - y ) % d is equal to 0",
      "code": "if ( abs ( n - y ) % d == 0 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "change the value of b to ceil ( abs ( n - x ) * 1 . / d ) + abs ( n - y ) / d",
      "code": "b = ceil ( abs ( n - x ) * 1. / d ) + abs ( n - y ) / d ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if ans ! = - 1",
      "code": "if ( ans != - 1 )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "change the value of ans to min of ans and b",
      "code": "ans = min ( ans , b ) ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 16,
      "text": "set ans to b",
      "code": "ans = b ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if ( y - 1 ) modulo d is 0",
      "code": "if ( ( y - 1 ) % d == 0 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "assign the new value = ceil ( abs ( x - 1 ) * 1 . / d ) + abs ( y - 1 ) / d to c",
      "code": "c = ceil ( abs ( x - 1 ) * 1. / d ) + abs ( y - 1 ) / d ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if ans ! = - 1",
      "code": "if ( ans != - 1 )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "change ans to min of ans and c",
      "code": "ans = min ( ans , c ) ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 23,
      "text": "assign the new value = c to ans",
      "code": "ans = c ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print ans to the standard output",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "ans = min ( ans change c ) ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘)’ before ‘change’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "c = ceil ( abs ( x - 1 ) * 1.0 ) + abs ( y - 1 ) / d ;",
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        12,
        3
      ],
      "mod_code": [
        "c = ceil ( abs ( x - 1 ) * 1.0 ) + abs ( y - 1 ) / d ;",
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "while ( -- q )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        12,
        3,
        23
      ],
      "mod_code": [
        "c = ceil ( abs ( x - 1 ) * 1.0 ) + abs ( y - 1 ) / d ;",
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "while ( -- q )",
        "int ans = c ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        12,
        3,
        8
      ],
      "mod_code": [
        "c = ceil ( abs ( x - 1 ) * 1.0 ) + abs ( y - 1 ) / d ;",
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "while ( -- q )",
        "if ( ! abs ( x - y ) % d == 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        12,
        23
      ],
      "mod_code": [
        "c = ceil ( abs ( x - 1 ) * 1.0 ) + abs ( y - 1 ) / d ;",
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "int ans = c ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        12,
        23,
        8
      ],
      "mod_code": [
        "c = ceil ( abs ( x - 1 ) * 1.0 ) + abs ( y - 1 ) / d ;",
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "int ans = c ;",
        "if ( ! abs ( x - y ) % d == 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        12,
        8
      ],
      "mod_code": [
        "c = ceil ( abs ( x - 1 ) * 1.0 ) + abs ( y - 1 ) / d ;",
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "if ( ! abs ( x - y ) % d == 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "while ( -- q )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3,
        23
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "while ( -- q )",
        "int ans = c ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3,
        23,
        8
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "while ( -- q )",
        "int ans = c ;",
        "if ( ! abs ( x - y ) % d == 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3,
        8
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "while ( -- q )",
        "if ( ! abs ( x - y ) % d == 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        23
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "int ans = c ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        23,
        8
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "int ans = c ;",
        "if ( ! abs ( x - y ) % d == 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "b = ceil ( abs ( n - x ) * 1.0 ) + abs ( n - y ) / d ) ;",
        "if ( ! abs ( x - y ) % d == 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}