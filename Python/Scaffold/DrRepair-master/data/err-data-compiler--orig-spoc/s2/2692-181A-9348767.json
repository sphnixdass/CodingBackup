{
  "meta": {
    "index": 2692,
    "hitid": "3J94SKDEKIJY5WM90M9JNU3CVDED5Z",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "181A",
    "subid": "9348767"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "N , M = integers",
      "code": "int N , M ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "S = string array of length 100",
      "code": "string S [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x = vector of integers",
      "code": "vector < int > x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "y = vector of integers",
      "code": "vector < int > y ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read N and M",
      "code": "cin >> N >> M ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to N exclusive",
      "code": "for ( int i = 0 ; i < N ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read S [ i ]",
      "code": "cin >> S [ i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 0 to M exclusive",
      "code": "for ( int j = 0 ; j < M ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if S [ i ] [ j ] equals *",
      "code": "if ( S [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "add i to the end of x",
      "code": "x . push_back ( i ) ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "add j to the end of y",
      "code": "y . push_back ( j ) ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set op to 0",
      "code": "int op = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "samey , samex = integers",
      "code": "int samey , samex ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for op to 3 exclusive",
      "code": "for ( ; op < 3 ; op ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if x [ op ] equals x [ ( op + 1 ) mod 3 ] and y [ op ] equals y [ ( op + 2 ) mod 3 ]",
      "code": "if ( ( x [ op ] == x [ ( op + 1 ) % 3 ] ) && ( y [ op ] == y [ ( op + 2 ) % 3 ] ) )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set samey to ( op + 2 ) mod 3",
      "code": "samey = ( op + 2 ) % 3 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "set samex to ( op + 1 ) mod 3",
      "code": "samex = ( op + 1 ) % 3 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "break out of for loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if x [ op ] equals x [ ( op + 2 ) mod 3 ] and y [ op ] equals y [ ( op + 1 ) mod 3 ]",
      "code": "if ( ( x [ op ] == x [ ( op + 2 ) % 3 ] ) && ( y [ op ] == y [ ( op + 1 ) % 3 ] ) )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set samey to ( op + 1 ) mod 3",
      "code": "samey = ( op + 1 ) % 3 ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "set samex to ( op + 2 ) mod 3",
      "code": "samex = ( op + 2 ) % 3 ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "break out of for loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print x [ samey ] + 1 space y [ samex ] + 1",
      "code": "cout << x [ samey ] + 1 << \" \" << y [ samex ] + 1 << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "op = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string :: S [ 100 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘S’ is not a member of ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> n >> M ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> S . at ( i ) ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘at’ in ‘S’, which is of non-class type ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < M ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "x . end ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::end(int&)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "y . end ( j ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘std::vector<int>::end(int&)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( int op = 3 ; j < 3 ; op ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 1 ) % 3 && y [ op ] == y [ ( op + 2 ) ] )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "break out ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘out’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "break out ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘out’"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        18
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        18,
        23
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        18,
        24
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        18,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        23
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        23,
        24
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        23,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        24
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        24,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        23
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        23,
        24
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        23,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        24
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        24,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        24
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        24,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24
      ],
      "mod_code": [
        "op = 0 ;",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        26
      ],
      "mod_code": [
        "op = 0 ;",
        "break out ;"
      ],
      "err_line": 15,
      "err_msg": "‘op’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        23
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        23,
        24
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        23,
        26
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "break out ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        24
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        24,
        26
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        26
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "break out ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        24
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        24,
        26
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        26
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "break out ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        24
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        24,
        26
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        26
      ],
      "mod_code": [
        "for ( int op = 3 ; i < 3 ; op ++ )",
        "break out ;"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        23
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        23,
        24
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        23,
        24,
        26
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        23,
        26
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "break out ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        24,
        26
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘out’"
    },
    {
      "mod_line": [
        18,
        26
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 1 ) % 3 ] && y [ op ] == y [ ( op + 2 ) ] )",
        "break out ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘out’"
    },
    {
      "mod_line": [
        23,
        24
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        24,
        26
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        26
      ],
      "mod_code": [
        "if ( x [ op ] == x [ ( op + 2 ) % 3 && y [ op ] == y [ ( op + 1 ) ] )",
        "break out ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        26
      ],
      "mod_code": [
        "int samey = ( op + 1 ) % 3 ;",
        "break out ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘out’"
    }
  ]
}