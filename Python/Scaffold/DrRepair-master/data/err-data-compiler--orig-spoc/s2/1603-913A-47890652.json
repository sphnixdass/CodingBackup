{
  "meta": {
    "index": 1603,
    "hitid": "3O0M2G5VC6W46N5SA1L7W6E85JZ94F",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "913A",
    "subid": "47890652"
  },
  "lines": [
    {
      "line": 0,
      "text": "inf = const int with inf = 1e9 + 7",
      "code": "const int inf = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "longif = const long long with longif = 1LL bitshift right by 60",
      "code": "const long long longinf = 1LL << 60 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "mod = const long long with mod = 1e9 + 7",
      "code": "const long long mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n then m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if n is grater than 28",
      "code": "if ( n > 28 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print m mod ( 1 bitshift right by n )",
      "code": "cout << m % ( 1 << n ) << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( n < 28 )",
        "n"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "if ( n < 28 )",
        "n",
        "cout << ' m ' ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        7,
        9
      ],
      "mod_code": [
        "if ( n < 28 )",
        "n",
        "cout << ' m ' ;",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "if ( n < 28 )",
        "n",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        7,
        9
      ],
      "mod_code": [
        "if ( n < 28 )",
        "cout << ' m ' ;",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( n < 28 )",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "n",
        "if ( n == 28 )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        6,
        7
      ],
      "mod_code": [
        "n",
        "if ( n == 28 )",
        "cout << ' m ' ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        6,
        7,
        9
      ],
      "mod_code": [
        "n",
        "if ( n == 28 )",
        "cout << ' m ' ;",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        6,
        9
      ],
      "mod_code": [
        "n",
        "if ( n == 28 )",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "n",
        "cout << ' m ' ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        7,
        9
      ],
      "mod_code": [
        "n",
        "cout << ' m ' ;",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "n",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        7,
        9
      ],
      "mod_code": [
        "if ( n == 28 )",
        "cout << ' m ' ;",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( n == 28 )",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "cout << ' m ' ;",
        "cout << m % ( 1 << n ) ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}