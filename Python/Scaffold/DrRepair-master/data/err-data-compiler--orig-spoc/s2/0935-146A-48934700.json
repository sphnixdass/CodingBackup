{
  "meta": {
    "index": 935,
    "hitid": "3A3KKYU7P3BVM9769GVVWK3JPB6WMO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "146A",
    "subid": "48934700"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new string called s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers n , a , j , sum1 and sum2 where sum1 and sum2 have the value of 0",
      "code": "int n , a , j , sum1 = 0 , sum2 = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read variables n and s from the input",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "assign the new value = n / 2 to a",
      "code": "a = n / 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare new boolean flag with value true",
      "code": "bool flag = true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 and j = 0 while i < n , incrementing i and j",
      "code": "for ( int i = 0 , j = 0 ; i < n ; i ++ , j ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is equal to ' 4 ' or ' 7 '",
      "code": "if ( s [ i ] == ' 4 ' || s [ i ] == ' 7 ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if j is less than a",
      "code": "if ( j < a )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "assign the new value = sum1 + s [ i ] - ' 0 ' to sum1",
      "code": "sum1 = sum1 + s [ i ] - ' 0 ' ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 11,
      "text": "change the value of sum2 to sum2 + s [ i ] - ' 0 '",
      "code": "sum2 = sum2 + s [ i ] - ' 0 ' ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set flag to false",
      "code": "flag = false ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if flag is true and sum1 = sum2",
      "code": "if ( flag && sum1 == sum2 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" YES \" to the standard output",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum1 , sum2 = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "flag = true ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( s [ i ] == ' 4 ' || s [ i ] == ' 7 ' )"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;"
      ],
      "err_line": 19,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        19,
        17
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        19,
        17,
        14
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        19,
        17,
        1
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19,
        17,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "if ( j < j )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        19,
        14
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        19,
        14,
        1
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "break the ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19,
        14,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "break the ;",
        "if ( j < j )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        19,
        1
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19,
        1,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "n",
        "if ( j < j )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( flag && sum1 ) sum1 = sum2 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        17,
        14
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        17,
        14,
        1
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        14,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;",
        "if ( j < j )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        17,
        1
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        1,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "if ( j < j )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        14,
        1
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "break the ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        1,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "break the ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "break the ;",
        "if ( j < j )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int n , a , j , sum1 , sum1 , sum2 , sum2 = 0 ;",
        "if ( j < j )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int sum1’"
    },
    {
      "mod_line": [
        19,
        17
      ],
      "mod_code": [
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        17,
        14
      ],
      "mod_code": [
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        19,
        17,
        14,
        1
      ],
      "mod_code": [
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19,
        17,
        14,
        8
      ],
      "mod_code": [
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;",
        "if ( j < j )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        19,
        17,
        1
      ],
      "mod_code": [
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19,
        17,
        1,
        8
      ],
      "mod_code": [
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19,
        17,
        8
      ],
      "mod_code": [
        "n",
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "if ( j < j )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        14
      ],
      "mod_code": [
        "n",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        19,
        14,
        1
      ],
      "mod_code": [
        "n",
        "break the ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19,
        14,
        1,
        8
      ],
      "mod_code": [
        "n",
        "break the ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19,
        14,
        8
      ],
      "mod_code": [
        "n",
        "break the ;",
        "if ( j < j )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "n",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19,
        1,
        8
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19,
        8
      ],
      "mod_code": [
        "n",
        "if ( j < j )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        14
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        17,
        14,
        1
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        14,
        1,
        8
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        14,
        8
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "break the ;",
        "if ( j < j )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        17,
        1
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        1,
        8
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "if ( flag && sum1 ) sum1 = sum2 ;",
        "if ( j < j )"
      ],
      "err_line": 19,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "break the ;",
        "string s = endl ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        1,
        8
      ],
      "mod_code": [
        "break the ;",
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "break the ;",
        "if ( j < j )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string s = endl ;",
        "if ( j < j )"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}