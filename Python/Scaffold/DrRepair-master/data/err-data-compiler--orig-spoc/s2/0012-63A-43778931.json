{
  "meta": {
    "index": 12,
    "hitid": "30UZJB2POH60N4KC7X37ALH05NI35V",
    "workerid": "A1APYLD4DUK33J",
    "probid": "63A",
    "subid": "43778931"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long N with N = 1e5 + 1",
      "code": "const long long N = 1e5 + 1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long x",
      "code": "long long x ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create strings s1 , s2",
      "code": "string s1 , s2 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create pair array p with size 1001 from integer to string",
      "code": "pair < int , string > p [ 1001 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to x exclusive",
      "code": "for ( int i = 0 ; i < x ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s1 read s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s2 is \" rat \"",
      "code": "if ( s2 == \" rat \" )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set p [ i ] to { 1 , s1 }",
      "code": "p [ i ] = { 1 , s1 } ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if s2 is \" woman \" or s2 is \" child \"",
      "code": "else if ( s2 == \" woman \" or s2 == \" child \" )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set p [ i ] to { 2 , s2 }",
      "code": "p [ i ] = { 2 , s1 } ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if s2 is \" man \"",
      "code": "else if ( s2 == \" man \" )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set p [ i ] to { 3 , s1 }",
      "code": "p [ i ] = { 3 , s1 } ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if s2 is \" captain \"",
      "code": "else if ( s2 == \" captain \" )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set p [ i ] to { 4 , s1 }",
      "code": "p [ i ] = { 4 , s1 } ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 1 to 4 inclusive",
      "code": "for ( int i = 1 ; i <= 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for j = 0 to x exclusive",
      "code": "for ( int j = 0 ; j < x ; j ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if first element of p [ j ] is i , print second element of p [ j ] print newline",
      "code": "if ( p [ j ] . first == i ) { cout << p [ j ] . second << endl ; }",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s1 , s2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < x ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int p [ i ] = { 1 , s1 } ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int p [ i ] = { 2 , s2 } ;"
      ],
      "err_line": 11,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int p [ i ] = { 3 , s1 } ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int p [ i ] = { 4 , s1 } ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8,
        14,
        18
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        8,
        14,
        7
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        8,
        14,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        11,
        8,
        18
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        8,
        18,
        7
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        8,
        18,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        11,
        8,
        7
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        8,
        7,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        8,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "if ( s2 == \" [] \" )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        11,
        14,
        18
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        7
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        11,
        14,
        7
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "else if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        14,
        7,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "else if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        14,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "else if ( s2 == \" [] \" )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        18,
        7
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        18,
        7,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        18,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        7,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "p [ i ] = { 2 , s2 } ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        8,
        14,
        18
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        18,
        7
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        14,
        18,
        3
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        8,
        14,
        7
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        14,
        7,
        3
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        14,
        3
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        18,
        7
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        18,
        7,
        3
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        18,
        3
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        18,
        7
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        18,
        7,
        3
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        18,
        3
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        7,
        3
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        18,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        7,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 4 ; i ++ )",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::pair<int, int>’ and ‘<brace-enclosed initializer list>’)"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "s1 >> s1 >> s2 ;",
        "pair < int , int > p [ 1001 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}