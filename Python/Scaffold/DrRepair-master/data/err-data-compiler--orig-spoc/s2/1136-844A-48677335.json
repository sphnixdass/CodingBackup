{
  "meta": {
    "index": 1136,
    "hitid": "3XUSYT70ITVZAP083G376Z7LFS20DB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "844A",
    "subid": "48677335"
  },
  "lines": [
    {
      "line": 0,
      "text": "create new constant integer INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer constant mod with value 998244353",
      "code": "const int mod = 998244353 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create new string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare integers k and cnt and an integer array vis with 26 elements",
      "code": "int k , vis [ 26 ] , cnt ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read s and k from the input",
      "code": "cin >> s >> k ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if length of s is less than k",
      "code": "if ( s . size ( ) < k )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return puts ( \" impossible \" ) , 0",
      "code": "return puts ( \" impossible \" ) , 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "in a for loop , change i from 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if vis [ s [ i ] - ' a ' ] is equal to 0",
      "code": "if ( vis [ s [ i ] - ' a ' ] == 0 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set the value of vis [ s [ i ] - ' a ' ] to 1",
      "code": "vis [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if cnt > = k",
      "code": "if ( cnt >= k )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print k - cnt",
      "code": "cout << k - cnt << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const int * mod = 998244353 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const string s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int k , cnt [ 26 ] , k ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        17
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        17,
        8
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "n"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        17,
        5
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        17,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        8
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        8,
        5
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        8,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        5
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "s >> s >> k ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        5,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17,
        8
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "n"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17,
        8,
        5
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17,
        8,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17,
        5
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17,
        5,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "s >> s >> k ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "const int * mod = 998244353 ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17,
        8
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17,
        8,
        5
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        17,
        8,
        7
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17,
        5
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        17,
        5,
        7
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        17,
        7
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8,
        5
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        8,
        5,
        7
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        8,
        7
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        5,
        7
      ],
      "mod_code": [
        "vis [ s [ i ] - ' a ' ] - 1 ;",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        8,
        5
      ],
      "mod_code": [
        "n",
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        8,
        5,
        7
      ],
      "mod_code": [
        "n",
        "n",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        8,
        7
      ],
      "mod_code": [
        "n",
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        5,
        7
      ],
      "mod_code": [
        "n",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "n",
        "s >> s >> k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        5,
        7
      ],
      "mod_code": [
        "n",
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "n",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "s >> s >> k ;",
        "return puts ( \" impossible \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}