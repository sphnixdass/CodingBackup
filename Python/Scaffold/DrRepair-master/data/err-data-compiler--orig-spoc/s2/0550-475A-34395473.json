{
  "meta": {
    "index": 550,
    "hitid": "35F6NGNVM8DK9PWPA5OVQIZUP5XT7D",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "475A",
    "subid": "34395473"
  },
  "lines": [
    {
      "line": 0,
      "text": "numbers = integer array of length 4 by 12",
      "code": "int numbers [ 4 ] [ 12 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 4 exclusive",
      "code": "for ( int i = 0 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to 12 exclusive",
      "code": "for ( int j = 0 ; j < 12 ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if j equals 0",
      "code": "if ( j == 0 )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if n is greater than or equal to 1 then set numbers [ 0 ] [ 0 ] to 1",
      "code": "if ( n >= 1 ) { numbers [ 0 ] [ 0 ] = 1 ; }",
      "indent": 4
    },
    {
      "line": 8,
      "text": "if n is greater than or equal to 2 then set numbers [ 1 ] [ 0 ] to 1",
      "code": "if ( n >= 2 ) { numbers [ 1 ] [ 0 ] = 1 ; }",
      "indent": 4
    },
    {
      "line": 9,
      "text": "if n is greater than or equal to 3 then set numbers [ 3 ] [ 0 ] to 1",
      "code": "if ( n >= 3 ) { numbers [ 3 ] [ 0 ] = 1 ; }",
      "indent": 4
    },
    {
      "line": 10,
      "text": "if n is greater than or equal to 4 then set numbers [ 2 ] [ 0 ] to 1",
      "code": "if ( n >= 4 ) { numbers [ 2 ] [ 0 ] = 1 ; }",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if i equals 3 continue",
      "code": "if ( i == 3 ) { continue ; }",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if n is greater than or equal to 3 * ( j - 1 ) + i + 5 ) then set numbers [ i ] [ j ] to 1",
      "code": "if ( n >= 3 * ( j - 1 ) + i + 5 ) { numbers [ i ] [ j ] = 1 ; }",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print + - - - - - - - - - - - - - - - - - - - - - - - - +",
      "code": "cout << \" +------------------------+ \" << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to 11 exclusive",
      "code": "for ( int i = 0 ; i < 11 ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if numbers [ 0 ] [ i ] equals 1",
      "code": "if ( numbers [ 0 ] [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print 0",
      "code": "cout << \" O \" ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print #",
      "code": "cout << \" # \" ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print .",
      "code": "cout << \" . \" ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print | D | )",
      "code": "cout << \" |D|) \" << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for i = 0 to 11 exclusive",
      "code": "for ( int i = 0 ; i < 11 ; i ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if numbers [ 1 ] [ i ] equals 1",
      "code": "if ( numbers [ 1 ] [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "print 0",
      "code": "cout << \" O \" ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 33,
      "text": "print #",
      "code": "cout << \" # \" ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "print .",
      "code": "cout << \" . \" ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print | . |",
      "code": "cout << \" |.| \" << endl ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "if n is greater than or equal to 3",
      "code": "if ( n >= 3 )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "print 0",
      "code": "cout << ' O ' ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print #",
      "code": "cout << ' # ' ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print . . . . . . . . . . . . . . . . . . . . . . . |",
      "code": "cout << \" .......................| \" << endl ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "print |",
      "code": "cout << \" | \" ;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "for i = 0 to 11 exclusive",
      "code": "for ( int i = 0 ; i < 11 ; i ++ )",
      "indent": 1
    },
    {
      "line": 47,
      "text": "if numbers [ 2 ] [ i ] equals 1",
      "code": "if ( numbers [ 2 ] [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 48,
      "text": "print 0",
      "code": "cout << \" O \" ;",
      "indent": 3
    },
    {
      "line": 49,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 50,
      "text": "print #",
      "code": "cout << \" # \" ;",
      "indent": 3
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 52,
      "text": "print .",
      "code": "cout << \" . \" ;",
      "indent": 2
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 54,
      "text": "print | . |",
      "code": "cout << \" |.|) \" << endl ;",
      "indent": 1
    },
    {
      "line": 55,
      "text": "print + - - - - - - - - - - - - - - - - - - - - - - - - +",
      "code": "cout << \" +------------------------+ \" << endl ;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "read a single character",
      "code": "cin . get ( ) ;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "read a single character",
      "code": "cin . get ( ) ;",
      "indent": 1
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < 12 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( j == 0 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < 11 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < 11 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "cout << ) << endl ;"
      ],
      "err_line": 44,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "for ( i = 0 ; i < 11 ; i ++ )"
      ],
      "err_line": 46,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 50,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}