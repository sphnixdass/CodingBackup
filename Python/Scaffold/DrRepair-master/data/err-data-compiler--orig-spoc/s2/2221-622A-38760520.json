{
  "meta": {
    "index": 2221,
    "hitid": "33NOQL7T9OTKVFA7Q25JQ6W6M8MZ8U",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "622A",
    "subid": "38760520"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k , m = long long",
      "code": "long long n , k , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set k to sqrt of ( 2 . 0 * n + 0 . 25 ) - 0 . 5",
      "code": "k = sqrt ( 2.0 * n + 0.25 ) - 0.5 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set m to k * ( k + 1 ) / 2",
      "code": "m = k * ( k + 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n > m",
      "code": "if ( n > m )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print n - m",
      "code": "cout << n - m << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print k + n - m",
      "code": "cout << k + n - m << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "k = sqrt ( ( 3.0 * n + 25 ) - 1.0 ) - 1.0 ;",
        "m -= ( k + 1 ) / 2 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        2
      ],
      "mod_code": [
        "k = sqrt ( ( 3.0 * n + 25 ) - 1.0 ) - 1.0 ;",
        "m -= ( k + 1 ) / 2 ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "k = sqrt ( ( 3.0 * n + 25 ) - 1.0 ) - 1.0 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "k = sqrt ( ( 3.0 * n + 25 ) - 1.0 ) - 1.0 ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "m -= ( k + 1 ) / 2 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7,
        3
      ],
      "mod_code": [
        "m -= ( k + 1 ) / 2 ;",
        "n",
        "k = sqrt ( ( 3.0 * n + 0.5 ) - 1.0 ) - 1.0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7,
        3,
        2
      ],
      "mod_code": [
        "m -= ( k + 1 ) / 2 ;",
        "n",
        "k = sqrt ( ( 3.0 * n + 0.5 ) - 1.0 ) - 1.0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7,
        2
      ],
      "mod_code": [
        "m -= ( k + 1 ) / 2 ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "n",
        "k = sqrt ( ( 3.0 * n + 0.5 ) - 1.0 ) - 1.0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "n",
        "k = sqrt ( ( 3.0 * n + 0.5 ) - 1.0 ) - 1.0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}