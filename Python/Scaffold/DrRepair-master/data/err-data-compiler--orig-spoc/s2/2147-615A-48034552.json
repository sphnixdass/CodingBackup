{
  "meta": {
    "index": 2147,
    "hitid": "3YCT0L9OMM38XABX1C0UCAPYOOISN3",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "615A",
    "subid": "48034552"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer pointer * p to contain m + 10000 integers",
      "code": "int * p = new int [ m + 10000 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to m , set p [ i ] to 0",
      "code": "for ( int i = 1 ; i <= m ; i ++ ) { p [ i ] = 0 ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer r",
      "code": "int r ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer q",
      "code": "int q ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read q",
      "code": "cin >> q ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to q exclusive",
      "code": "for ( int j = 0 ; j < q ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read r",
      "code": "cin >> r ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set p [ r ] to 1",
      "code": "p [ r ] = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create integer f = 0",
      "code": "int f = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 1 to m",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if p [ i ] is equal to 1",
      "code": "if ( p [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if f is equal to 1",
      "code": "if ( f == 1 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n m , m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘m’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> m )"
      ],
      "err_line": 4,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * p = ( m + 10000 ) + 10000 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "r ;"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int p [ r ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "f = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( f == 1 ) break ;"
      ],
      "err_line": 22,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        9
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        9,
        23
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        9,
        11
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        9,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        23
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        23,
        11
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "n",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        23,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "n",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        11
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        11,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( j = 0 ; j < q ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        23
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( j = 0 ; j < q ; j ++ )",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        23,
        11
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( j = 0 ; j < q ; j ++ )",
        "n",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        23,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( j = 0 ; j < q ; j ++ )",
        "n",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( j = 0 ; j < q ; j ++ )",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( j = 0 ; j < q ; j ++ )",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "for ( j = 0 ; j < q ; j ++ )",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        23,
        11
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "n",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        23,
        11,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "n",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        23,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "n",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int * p = m + m + 10000 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        9,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "n"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        9,
        23,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "n",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        9,
        23,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "n",
        "q = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        9,
        11,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        9,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "for ( j = 0 ; j < q ; j ++ )",
        "q = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        23,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "n",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15,
        23,
        11,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "n",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15,
        23,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "n",
        "q = getchar ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15,
        11,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )",
        "n"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        23,
        11
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )",
        "n",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        23,
        11,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )",
        "n",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        23,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )",
        "n",
        "q = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < q ; j ++ )",
        "q = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        11
      ],
      "mod_code": [
        "n",
        "int p [ r ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        23,
        11,
        8
      ],
      "mod_code": [
        "n",
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        23,
        8
      ],
      "mod_code": [
        "n",
        "q = getchar ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "int p [ r ] = 1 ;",
        "q = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    }
  ]
}