{
  "meta": {
    "index": 2562,
    "hitid": "38Z7YZ2SB3W46TLTCSYXC2EGJZSQIG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "24A",
    "subid": "29298750"
  },
  "lines": [
    {
      "line": 0,
      "text": "let a , b and c be arrays on integers with size 105",
      "code": "int a [ 105 ] , b [ 105 ] , c [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long result with value 0",
      "code": "long long result = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "function dfs with integer arguments start and self",
      "code": "void dfs ( int start , int self )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if self is equal to i , continue the loop from the start",
      "code": "if ( self == i ) continue ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if start is equal to a [ i ]",
      "code": "if ( start == a [ i ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if b [ i ] is equal to a [ 1 ] , return",
      "code": "if ( b [ i ] == a [ 1 ] ) return ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "invoke function dfs with arguments b [ i ] and i",
      "code": "dfs ( b [ i ] , i ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if start is equal to b [ i ]",
      "code": "else if ( start == b [ i ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increase result by c [ i ]",
      "code": "result += c [ i ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if a [ i ] is equal to a [ 1 ] , return",
      "code": "if ( a [ i ] == a [ 1 ] ) return ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "invoke function dfs with arguments a [ i ] and i",
      "code": "dfs ( a [ i ] , i ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 17,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create long long sum with value 0",
      "code": "long long sum = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read a [ i ] , b [ i ] and c [ i ]",
      "code": "cin >> a [ i ] >> b [ i ] >> c [ i ] ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increase sum by c [ i ]",
      "code": "sum += c [ i ] ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "call dfs with arguments b [ 1 ] and 1",
      "code": "dfs ( b [ 1 ] , 1 ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set result to min of result and sum - result",
      "code": "result = min ( result , sum - result ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print result and a new line",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool dfs ( int start , int self )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with no value, in function returning ‘bool’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( a [ i ] == a [ 1 ] ) return 1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "dfs ( b [ 1 ] [ 1 ] ) ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        20
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        20,
        0
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        7,
        20,
        12
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        20,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        0
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        7,
        0,
        12
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        7,
        0,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        20,
        0
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        20,
        0,
        12
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        20,
        0,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        20,
        12
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        20,
        12,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        20,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        0,
        12
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        0,
        12,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        0,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        12,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( start == a [ i ] ) start ++ ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        20,
        0
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        7,
        20,
        0,
        12
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        7,
        20,
        0,
        8
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        7,
        20,
        12
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        20,
        12,
        8
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        20,
        8
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        7,
        0,
        12
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        7,
        0,
        12,
        8
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        7,
        0,
        8
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        8
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "if ( b [ i ] == a [ 1 ] ) return 1 ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        20,
        0,
        12
      ],
      "mod_code": [
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        20,
        0,
        12,
        8
      ],
      "mod_code": [
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        20,
        0,
        8
      ],
      "mod_code": [
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        20,
        12
      ],
      "mod_code": [
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        12,
        8
      ],
      "mod_code": [
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        8
      ],
      "mod_code": [
        "cin >> a [ i ] >> b [ i ] >> b [ i ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        0,
        12,
        8
      ],
      "mod_code": [
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int a [ 105 ] , a [ 105 ] , c [ 105 ] ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [105]’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "dfs ( a [ i ] [ i ] ) ;",
        "dfs ( b [ i ] [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}