{
  "meta": {
    "index": 1694,
    "hitid": "3XT3KXP24ZSBWB29XJKZ6XXPJDZI6O",
    "workerid": "AIWEXPJAU66D9",
    "probid": "69A",
    "subid": "42468751"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , i , j , k and l be integers where j , k and l = 0",
      "code": "int n , i , j = 0 , k = 0 , l = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer variables m , n and p",
      "code": "int m , n , p ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read m , n and p",
      "code": "cin >> m >> n >> p ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set value of j to j + m",
      "code": "j = j + m ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set value of k to k + n",
      "code": "k = k + n ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "l = l + p",
      "code": "l = l + p ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if j = 0 & & k = 0 & & l = 0",
      "code": "if ( j == 0 && k == 0 && l == 0 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , j = 0 , j = 0 , l = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        13,
        4
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n = getchar ( ) ;",
        "cout << \" NO \" ;",
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        2,
        13,
        12
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n = getchar ( ) ;",
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        4
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n = getchar ( ) ;",
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        12
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n = getchar ( ) ;",
        "int n , n , p ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        11
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n = getchar ( ) ;",
        "int n , n , p ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        2,
        12
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        12,
        11
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n = getchar ( ) ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        4
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "cout << \" NO \" ;",
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        13,
        4,
        12
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "cout << \" NO \" ;",
        "int n , n , p ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        13,
        4,
        11
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "cout << \" NO \" ;",
        "int n , n , p ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        13,
        12
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        12,
        11
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "cout << \" NO \" ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        4,
        12
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "int n , n , p ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        4,
        12,
        11
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "int n , n , p ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        4,
        11
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "int n , n , p ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12,
        11
      ],
      "mod_code": [
        "cin >> m >> n >> n ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        13,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "cout << \" NO \" ;",
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2,
        13,
        4,
        12
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "cout << \" NO \" ;",
        "int n , n , p ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2,
        13,
        4,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "cout << \" NO \" ;",
        "int n , n , p ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2,
        13,
        12
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        13,
        12,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "cout << \" NO \" ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2,
        4,
        12
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , n , p ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2,
        4,
        12,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , n , p ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2,
        4,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , n , p ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int n , n , p ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        4,
        12
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int n , n , p ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        4,
        12,
        11
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int n , n , p ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        4,
        11
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int n , n , p ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        12,
        11
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        12,
        11
      ],
      "mod_code": [
        "int n , n , p ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int n , n , p ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}