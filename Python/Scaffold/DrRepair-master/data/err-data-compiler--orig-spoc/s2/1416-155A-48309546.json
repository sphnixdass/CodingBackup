{
  "meta": {
    "index": 1416,
    "hitid": "3RWB1RTQDJHQHB813T7HZ8USC9IP82",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "155A",
    "subid": "48309546"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create int a [ n + 1 ]",
      "code": "int a [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set max = a [ 0 ] , min = a [ 0 ] , count = 0",
      "code": "int max = a [ 0 ] , min = a [ 0 ] , count = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a [ i ] > max , set max = a [ i ] , increment count",
      "code": "if ( a [ i ] > max ) max = a [ i ] , count ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ i ] < min , set min = a [ i ] and increment count",
      "code": "if ( a [ i ] < min ) min = a [ i ] , count ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "max = a [ 0 ] , min = a [ 0 ] , count = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "cout << ' count ' ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        6,
        3,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int a [ n ] ] ;",
        "cout << ' count ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        6,
        3,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int a [ n ] ] ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        6,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "cout << ' count ' ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;",
        "cout << ' count ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        3,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int a [ n ] ] ;",
        "cout << ' count ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        3,
        10,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int a [ n ] ] ;",
        "cout << ' count ' ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int a [ n ] ] ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7,
        3,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;",
        "cout << ' count ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7,
        3,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "cout << ' count ' ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "cout << ' count ' ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        3,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "int a [ n ] ] ;",
        "cout << ' count ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        3,
        10,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "int a [ n ] ] ;",
        "cout << ' count ' ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        3,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "int a [ n ] ] ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "cout << ' count ' ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        3,
        10
      ],
      "mod_code": [
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;",
        "cout << ' count ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        3,
        10,
        1
      ],
      "mod_code": [
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;",
        "cout << ' count ' ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        3,
        1
      ],
      "mod_code": [
        "if ( a [ i ] > max ) { max = a [ i ] ; }",
        "int a [ n ] ] ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int a [ n ] ] ;",
        "cout << ' count ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        10,
        1
      ],
      "mod_code": [
        "int a [ n ] ] ;",
        "cout << ' count ' ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int a [ n ] ] ;",
        "bool n ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    }
  ]
}