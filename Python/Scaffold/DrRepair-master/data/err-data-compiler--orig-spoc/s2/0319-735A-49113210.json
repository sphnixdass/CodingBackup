{
  "meta": {
    "index": 319,
    "hitid": "3E22YV8GG10BKIV59VW0H5KN14IPNR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "735A",
    "subid": "49113210"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new int variables n and k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and k from the input",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "define string variable with name s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s from the user input",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "define ints g , t and i",
      "code": "int g , t , i ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare vector of integers b",
      "code": "vector < int > b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive incrementing i",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] is equal to ' G ' , assign i to g",
      "code": "if ( s [ i ] == ' G ' ) g = i ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s [ i ] = ' T ' , change t to i",
      "code": "if ( s [ i ] == ' T ' ) t = i ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if s [ i ] is equal to ' # ' , add i to the end of b",
      "code": "if ( s [ i ] == ' # ' ) b . push_back ( i ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create boolean variable flag = false",
      "code": "bool flag = false ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if g is less than t",
      "code": "if ( g < t )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = g to t inclusive increasing i by k",
      "code": "for ( i = g ; i <= t ; i += k )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] = ' # '",
      "code": "if ( s [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if s [ i ] is equal to ' T ' , assign true to flag",
      "code": "if ( s [ i ] == ' T ' ) flag = true ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if g is greater than t",
      "code": "if ( g > t )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "start for loop from i = g to t inclusive subtracting k from i",
      "code": "for ( i = g ; i >= t ; i -= k )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if s [ i ] is equal to ' # '",
      "code": "if ( s [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 32,
      "text": "if s [ i ] = ' T ' , change flag to true",
      "code": "if ( s [ i ] == ' T ' ) flag = true ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 37,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' # ' ) b . end ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::end(int&)’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}