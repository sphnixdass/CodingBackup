{
  "meta": {
    "index": 13,
    "hitid": "336OE47KI2EECW1FN8WMJGMWG4EVW0",
    "workerid": "AIWEXPJAU66D9",
    "probid": "63A",
    "subid": "48918431"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create strings vectors name and spec",
      "code": "vector < string > name , spec ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set size of name to n and fill it with \" 0 \"",
      "code": "name . assign ( n , \" 0 \" ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set size of spec to n and fill it with \" 0 \"",
      "code": "spec . assign ( n , \" 0 \" ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to n exclusive , read name [ i ] and spec [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> name [ i ] >> spec [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if spec [ i ] is \" rat \" , print name [ i ] and \" \\ n \"",
      "code": "if ( spec [ i ] == \" rat \" ) { cout << name [ i ] << \" \\n \" ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if spec [ i ] is \" woman \" or spec [ i ] is \" child \" , print name [ i ] and \" \\ n \"",
      "code": "if ( spec [ i ] == \" woman \" || spec [ i ] == \" child \" ) { cout << name [ i ] << \" \\n \" ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if spec [ i ] is \" man \" , print name [ i ] and \" \\ n \"",
      "code": "if ( spec [ i ] == \" man \" ) { cout << name [ i ] << \" \\n \" ; }",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if spec [ i ] is \" captain \" , print name [ i ] and \" \\ n \"",
      "code": "if ( spec [ i ] == \" captain \" ) { cout << name [ i ] << \" \\n \" ; }",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "vector < string > name ;"
      ],
      "err_line": 5,
      "err_msg": "‘spec’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "it . resize ( spec ( n , \" 0 \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        3,
        10
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        4
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        7
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, bool&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        7
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, bool&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        3,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "n = getchar ( ) ;",
        "bool n ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, bool&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        10,
        4
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        4,
        7
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        4,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        10,
        7
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        10,
        7,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, bool&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        10,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, bool&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        4,
        7
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        4,
        7,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, int&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        7,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, bool&, const char [2])’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "fill ( spec . size ( ) , n , \" 0 \" ) ;",
        "bool n ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘fill(std::vector<std::__cxx11::basic_string<char> >::size_type, bool&, const char [2])’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        10,
        4,
        7
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        10,
        4,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        10,
        7
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        7,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        4,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        4,
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        4,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        7,
        1
      ],
      "mod_code": [
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "memset ( name , \" 0 \" , sizeof ( n ) ) ;",
        "bool n ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}