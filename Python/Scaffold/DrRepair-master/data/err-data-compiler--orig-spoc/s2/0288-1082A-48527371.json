{
  "meta": {
    "index": 288,
    "hitid": "3OWZNK3RYLJSN1E84YXAZN4OYQF2U5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1082A",
    "subid": "48527371"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new integer variable t with value 1",
      "code": "int t = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while t ! = 0 , decrement it and continue the loop",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare long long int variables n , x , y and d",
      "code": "long long int n , x , y , d ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read n , x , y and d from the user input",
      "code": "cin >> n >> x >> y >> d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if x is equal to y",
      "code": "if ( x == y )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print 0 and ' \\ n '",
      "code": "cout << 0 << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "skip the rest of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if abs ( y - x ) modulo d = 0",
      "code": "if ( abs ( y - x ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print the ( absolute value of y - x ) / d and ' \\ n '",
      "code": "cout << abs ( y - x ) / d << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "declare long long int variables m1 and m2 = - 1",
      "code": "long long int m1 = - 1 , m2 = - 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if ( n - y ) % d = 0",
      "code": "if ( ( n - y ) % d == 0 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "change m1 to ( n - y ) / d",
      "code": "m1 = ( n - y ) / d ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if ( n - x ) % d is equal to 0",
      "code": "if ( ( n - x ) % d == 0 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "increase m1 by ( n - x ) / d",
      "code": "m1 += ( n - x ) / d ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "increase m1 by ( ( n - x ) / d + 1 )",
      "code": "m1 += ( ( n - x ) / d + 1 ) ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if ( y - 1 ) % d = 0",
      "code": "if ( ( y - 1 ) % d == 0 )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "set m2 to ( y - 1 ) / d",
      "code": "m2 = ( y - 1 ) / d ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if ( x - 1 ) % d = 0",
      "code": "if ( ( x - 1 ) % d == 0 )",
      "indent": 4
    },
    {
      "line": 24,
      "text": "change m2 to the sum of m2 and ( x - 1 ) / d",
      "code": "m2 += ( x - 1 ) / d ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 26,
      "text": "change m2 to the sum of m2 and ( ( x - 1 ) / d + 1 )",
      "code": "m2 += ( ( x - 1 ) / d + 1 ) ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "if m1 and m2 are both equal to - 1",
      "code": "if ( m1 == - 1 && m2 == - 1 )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "print - 1 and ' \\ n '",
      "code": "cout << - 1 << ' \\n ' ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "else if the value of both m1 and m2 is not - 1",
      "code": "else if ( m1 != - 1 && m2 != - 1 )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "print min of m1 and m2 and ' \\ n '",
      "code": "cout << min ( m1 , m2 ) << ' \\n ' ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 33,
      "text": "print max of m1 and m2 and ' \\ n ' to the standard output",
      "code": "cout << max ( m1 , m2 ) << ' \\n ' ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int t = l ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const long long int n , x , y , d ;"
      ],
      "err_line": 4,
      "err_msg": "uninitialized const ‘n’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" 0 0\\n ' ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "rest ;"
      ],
      "err_line": 8,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( ( n - y ) % d = 0 )"
      ],
      "err_line": 14,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "m1 -= y ) / d ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d = 0 )"
      ],
      "err_line": 21,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( ( x - 1 ) % d = 0 )"
      ],
      "err_line": 23,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "cout << \" -1\\n ' ;"
      ],
      "err_line": 29,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "cout << min ( m1 , m2 ) ' \\n ' ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before '\\xa'"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "cout << max ( m1 m1 m2 ) << ' \\n ' ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘)’ before ‘m1’"
    },
    {
      "mod_line": [
        30,
        11
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        11,
        2
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        11,
        2,
        26
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        11,
        2,
        32
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "n"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        11,
        2,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        11,
        26
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        11,
        26,
        32
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        11,
        26,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        11,
        32
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "n"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        11,
        32,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        11,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        2
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cin >> t >> t ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        2,
        26
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        2,
        26,
        32
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        2,
        26,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        2,
        32
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cin >> t >> t ;",
        "n"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        2,
        32,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cin >> t >> t ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        2,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "cin >> t >> t ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        26
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        26,
        32
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        26,
        32,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        26,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        30,
        32
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "n"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        32,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        13
      ],
      "mod_code": [
        "else if ( strcmp ( m1 , m2 ) != - 1 )",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2,
        26
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        2,
        26,
        32
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        2,
        26,
        13
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        2,
        32
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        2,
        32,
        13
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "cin >> t >> t ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        26
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        26,
        32
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        26,
        32,
        13
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        26,
        13
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        32
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        32,
        13
      ],
      "mod_code": [
        "cout << ( abs ( y - x ) / d ) / d << ' \\n ' ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        26
      ],
      "mod_code": [
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        26,
        32
      ],
      "mod_code": [
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        26,
        32,
        13
      ],
      "mod_code": [
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        26,
        13
      ],
      "mod_code": [
        "cin >> t >> t ;",
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        32
      ],
      "mod_code": [
        "cin >> t >> t ;",
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        32,
        13
      ],
      "mod_code": [
        "cin >> t >> t ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        26,
        32
      ],
      "mod_code": [
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        26,
        32,
        13
      ],
      "mod_code": [
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        26,
        13
      ],
      "mod_code": [
        "m2 += ( ( ( x - 1 ) / d + 1 ) ;",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        32,
        13
      ],
      "mod_code": [
        "n",
        "long long int m1 = - 1 , m2 ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}