{
  "meta": {
    "index": 2177,
    "hitid": "32W3UF2EZOF64LCVMLVYYWFGB484CX",
    "workerid": "A9X69TEYMWYG7",
    "probid": "102A",
    "subid": "47003183"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , m , a [ 1000 ] , b [ 1000 ] , price",
      "code": "int n , m , a [ 1000 ] , b [ 1000 ] , price ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create clo [ 105 ] [ 105 ] = 0 , x , y",
      "code": "int clo [ 105 ] [ 105 ] = { 0 } , x , y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "b [ i - 1 ] = a [ i ]",
      "code": "b [ i - 1 ] = a [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "sort ( b , b + n )",
      "code": "sort ( b , b + n ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "price = 3 * b [ n - 1 ] + 1 ;",
      "code": "price = 3 * b [ n - 1 ] + 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read x and y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "clo [ y ] [ x ] = clo [ x ] [ y ] = 1",
      "code": "clo [ y ] [ x ] = clo [ x ] [ y ] = 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create int num_p = 0",
      "code": "int num_p = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for j = 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if j different from i",
      "code": "if ( j != i )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "for k = 1 to k inclusive",
      "code": "for ( int k = 1 ; k <= n ; k ++ )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if k is different from i and k is different from j",
      "code": "if ( k != i && k != j )",
      "indent": 5
    },
    {
      "line": 20,
      "text": "clo [ i ] [ k ] = 1 and clo [ i ] [ j ] = 1 and clo [ j ] [ k ] = 1 )",
      "code": "if ( clo [ i ] [ k ] == 1 && clo [ i ] [ j ] == 1 && clo [ j ] [ k ] == 1 )",
      "indent": 6
    },
    {
      "line": 21,
      "text": "num_p = a [ i ] + a [ k ] + a [ j ]",
      "code": "num_p = a [ i ] + a [ k ] + a [ j ] ;",
      "indent": 7
    },
    {
      "line": 22,
      "text": "if num_p < price { price = num_p",
      "code": "if ( num_p < price ) { price = num_p ; }",
      "indent": 7
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if num_p = 0",
      "code": "if ( num_p == 0 )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print - 1",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print price",
      "code": "cout << price << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , a [ 1000 ] , b [ 1000 ] >> price ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = { 0 , x , y } ;"
      ],
      "err_line": 2,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> a . at ( i ) ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘at’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "const int num_p = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "assignment of read-only variable ‘num_p’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( k = 1 ; k <= k ; k ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 and clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( num_p < price { price )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        20
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        20,
        22
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        20,
        8
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        20,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        22
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        22,
        8
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        22,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "if ( num_p < price { price = num_p )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        8
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        8,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        18,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        20,
        22
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        20,
        22,
        8
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        20,
        22,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        20,
        8
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        20,
        8,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        20,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        22,
        8
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        22,
        8,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        22,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "if ( num_p < price { price = num_p )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        8,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = 0 , x , y ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        20,
        22
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        8
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        12
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        20,
        8
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        18,
        20,
        8,
        12
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        18,
        20,
        12
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        22
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        22,
        8
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        18,
        22,
        8,
        12
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        18,
        22,
        12
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "if ( num_p < price { price = num_p )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        8
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        18,
        8,
        12
      ],
      "mod_code": [
        "for ( int k = 1 ; k <= k ; k ++ )",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        22,
        8
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        20,
        22,
        8,
        12
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        20,
        22,
        12
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "if ( num_p < price { price = num_p )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        8
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        20,
        8,
        12
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        20,
        12
      ],
      "mod_code": [
        "clo [ i ] [ k ] = 1 , clo [ i ] [ j ] = 1 , clo [ j ] [ k ] = 1 ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        8
      ],
      "mod_code": [
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        22,
        8,
        12
      ],
      "mod_code": [
        "if ( num_p < price { price = num_p )",
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    },
    {
      "mod_line": [
        22,
        12
      ],
      "mod_code": [
        "if ( num_p < price { price = num_p )",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "sort ( ( b , b + n ) ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘sort(int*)’"
    }
  ]
}