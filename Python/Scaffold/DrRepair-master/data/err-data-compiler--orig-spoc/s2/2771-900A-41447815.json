{
  "meta": {
    "index": 2771,
    "hitid": "35YHTYFL1GXC1AFKXJMMFS0WL1WFVU",
    "workerid": "AIWEXPJAU66D9",
    "probid": "900A",
    "subid": "41447815"
  },
  "lines": [
    {
      "line": 0,
      "text": "maxn is a new constant int with value 1e6 + 10",
      "code": "const int maxn = 1e6 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define new constant integer INF with value 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "new int constant called inf with value 0x3f",
      "code": "const int inf = 0x3f ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "new constant double variable EPS = 1e - 7",
      "code": "const double EPS = 1e-7 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "constant double Pi = acos of - 1",
      "code": "const double Pi = acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create constant integer MOD = 1e9 + 7",
      "code": "const int MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "start of the loop",
      "code": "do",
      "indent": 1
    },
    {
      "line": 8,
      "text": "leave the loop immediately",
      "code": "while ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare new ints n , a and b",
      "code": "int n , a , b ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "define new boolean flag = true",
      "code": "bool flag = true ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare new integer variables cntx and cnty = 0",
      "code": "int cntx = 0 , cnty = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": ";",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read user input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "increment i in a loop from 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read input to a and b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if a is less than 0",
      "code": "if ( a < 0 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment cntx by one",
      "code": "cntx ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if a is greater than 0",
      "code": "else if ( a > 0 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment cnty by one",
      "code": "cnty ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if cntx and cnty are both > = 2 , set flag to false",
      "code": "if ( cntx >= 2 && cnty >= 2 ) flag = false ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" Yes \" if flag is set , or \" No \" to the standard output",
      "code": "cout << ( flag ? \" Yes \" : \" No \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "start ;"
      ],
      "err_line": 7,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "continue ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14,
        20
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; i ++ )",
        "if ( ! cntx && cnty >= 2 ) flag = false ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14,
        20,
        15
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; i ++ )",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14,
        20,
        9
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; i ++ )",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14,
        15
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; i ++ )",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        9
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; i ++ )",
        "a >> a >> b ;",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14,
        9
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; i ++ )",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        20
      ],
      "mod_code": [
        "break ;",
        "if ( ! cntx && cnty >= 2 ) flag = false ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        20,
        15
      ],
      "mod_code": [
        "break ;",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        20,
        15,
        14
      ],
      "mod_code": [
        "break ;",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;",
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        20,
        15,
        9
      ],
      "mod_code": [
        "break ;",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        20,
        14
      ],
      "mod_code": [
        "break ;",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        20,
        14,
        9
      ],
      "mod_code": [
        "break ;",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "for ( int i = 1 ; i <= m ; ++ i )",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        20,
        9
      ],
      "mod_code": [
        "break ;",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "break ;",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        15,
        14
      ],
      "mod_code": [
        "break ;",
        "a >> a >> b ;",
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        15,
        14,
        9
      ],
      "mod_code": [
        "break ;",
        "a >> a >> b ;",
        "for ( int i = 1 ; i <= m ; ++ i )",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        15,
        9
      ],
      "mod_code": [
        "break ;",
        "a >> a >> b ;",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        14,
        9
      ],
      "mod_code": [
        "break ;",
        "for ( int i = 1 ; i <= m ; ++ i )",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "break ;",
        "int n , a + b ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )",
        "if ( ! cntx && cnty >= 2 ) flag = false ;"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        20,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        20,
        15,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        14,
        20,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )",
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )",
        "a >> a >> b ;"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )",
        "a >> a >> b ;",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; i ++ )",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        20,
        15,
        14
      ],
      "mod_code": [
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;",
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        15,
        14,
        9
      ],
      "mod_code": [
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;",
        "for ( int i = 1 ; i <= m ; ++ i )",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        20,
        15,
        9
      ],
      "mod_code": [
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "a >> a >> b ;",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        20,
        14
      ],
      "mod_code": [
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        14,
        9
      ],
      "mod_code": [
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "for ( int i = 1 ; i <= m ; ++ i )",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        20,
        9
      ],
      "mod_code": [
        "if ( ! cntx && cnty >= 2 ) flag = false ;",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "a >> a >> b ;",
        "for ( int i = 1 ; i <= m ; ++ i )"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        9
      ],
      "mod_code": [
        "a >> a >> b ;",
        "for ( int i = 1 ; i <= m ; ++ i )",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        15,
        9
      ],
      "mod_code": [
        "a >> a >> b ;",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= m ; ++ i )",
        "int n , a + b ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+’ token"
    }
  ]
}