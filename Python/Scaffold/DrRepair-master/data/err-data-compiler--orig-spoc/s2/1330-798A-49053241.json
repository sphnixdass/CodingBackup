{
  "meta": {
    "index": 1330,
    "hitid": "3T2EL38U0ME1WOAOBEYYFC1V8EBQX0",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "798A",
    "subid": "49053241"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let integer d = 0",
      "code": "int d = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to str . size ( ) exclusive , set d to d + str [ i ] ! = str [ str . size ( ) - 1 - i ]",
      "code": "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] != str [ str . size ( ) - 1 - i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if d is 2 or if d is 0 and size of str % 2 is truthy",
      "code": "if ( d == 2 || ( d == 0 && str . size ( ) % 2 ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string str )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "d = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        5,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        5,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        5,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "cout << \" YES \" ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "string str )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" YES \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "cout << \" YES \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) d += str [ i ] ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        8
      ],
      "mod_code": [
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        7
      ],
      "mod_code": [
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" YES \" ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        7
      ],
      "mod_code": [
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "string str )",
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string str )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "string str )",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        7
      ],
      "mod_code": [
        "string str )",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "string str )",
        "cout << \" YES \" ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string str )",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "string str )",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "string str )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        7
      ],
      "mod_code": [
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" YES \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        8,
        7
      ],
      "mod_code": [
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( d == 0 || d == 0 && str . size ( ) % 2 )",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}