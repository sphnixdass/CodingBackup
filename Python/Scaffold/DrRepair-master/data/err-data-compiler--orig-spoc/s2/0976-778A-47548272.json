{
  "meta": {
    "index": 976,
    "hitid": "3PUOXASB57XK9KTHVUBXQ2RH5R79ZL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "778A",
    "subid": "47548272"
  },
  "lines": [
    {
      "line": 0,
      "text": "assign value 200 * 1000 to constant integer MAXN",
      "code": "const int MAXN = 200 * 1000 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let arr be integer array with size MAXN + 10",
      "code": "int arr [ MAXN + 10 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create strings str1 and str2",
      "code": "string str1 , str2 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "in the function good with integer argument a that returns boolean",
      "code": "bool good ( int a )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare integer variable cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to length of str2 exclusive",
      "code": "for ( int i = 0 ; i < ( int ) str2 . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while cnt < length of str1 and ( arr [ cnt ] < a | | str1 [ cnt ] ! = str2 [ i ] )",
      "code": "while ( cnt < ( int ) str1 . size ( ) && ( arr [ cnt ] < a || str1 [ cnt ] != str2 [ i ] ) ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "return false if cnt = length of str1",
      "code": "if ( cnt == ( int ) str1 . size ( ) ) return false ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "read str1 and str2",
      "code": "cin >> str1 >> str2 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to length of str1 exclusive",
      "code": "for ( int i = 0 ; i < ( int ) str1 . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "declare integer variable a",
      "code": "int a ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "arr [ a - 1 ] = i",
      "code": "arr [ a - 1 ] = i ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "declare integer variables l = - 1 and r = length of str1",
      "code": "int l = - 1 , r = ( int ) str1 . size ( ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "while r - l is greater than 1",
      "code": "while ( r - l > 1 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "declare integer variable mid = ( r + l ) / 2",
      "code": "int mid = ( r + l ) / 2 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if good ( mid ) is false",
      "code": "if ( ! good ( mid ) )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "r = mid",
      "code": "r = mid ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 25,
      "text": "l = mid",
      "code": "l = mid ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print l",
      "code": "cout << l << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "good good ( int a )"
      ],
      "err_line": 3,
      "err_msg": "‘good’ does not name a type"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int a [ 4 ] ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [4]’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "getline ( cin , a ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "arr [ j - 1 ] = i ;"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        16
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        6,
        22,
        16,
        2
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        22,
        16,
        10
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "exit ( true ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        6,
        22,
        16,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        6,
        22,
        2
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        22,
        2,
        10
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "str1 , str2 ;",
        "exit ( true ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        22,
        2,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "str1 , str2 ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        22,
        10,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        6,
        22,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "if ( good ( mid ) )",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "getline ( cin , a ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        6,
        16,
        2
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "getline ( cin , a ) ;",
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        16,
        2,
        10
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "getline ( cin , a ) ;",
        "str1 , str2 ;",
        "exit ( true ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        16,
        2,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "getline ( cin , a ) ;",
        "str1 , str2 ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        16,
        10
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "getline ( cin , a ) ;",
        "exit ( true ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        6,
        16,
        10,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "getline ( cin , a ) ;",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        6,
        16,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "getline ( cin , a ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        2,
        10
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "str1 , str2 ;",
        "exit ( true ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        2,
        10,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "str1 , str2 ;",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        2,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "str1 , str2 ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        6,
        10,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "while ( cnt < str1 . length ( ) && ( arr [ cnt ] < str2 [ i ] ) || str1 [ cnt ] != str2 [ i ] )",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        22,
        16
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        22,
        16,
        2
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        22,
        16,
        2,
        10
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "str1 , str2 ;",
        "exit ( true ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        22,
        16,
        2,
        21
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "str1 , str2 ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        22,
        16,
        10
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "exit ( true ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        22,
        16,
        10,
        21
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        22,
        16,
        21
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "getline ( cin , a ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        22,
        2
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        22,
        2,
        10
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "str1 , str2 ;",
        "exit ( true ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        22,
        2,
        10,
        21
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "str1 , str2 ;",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        22,
        2,
        21
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "str1 , str2 ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        22,
        10,
        21
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        22,
        21
      ],
      "mod_code": [
        "if ( good ( mid ) )",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "str1 , str2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        16,
        2,
        10
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "str1 , str2 ;",
        "exit ( true ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        16,
        2,
        10,
        21
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "str1 , str2 ;",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        16,
        2,
        21
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "str1 , str2 ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "exit ( true ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        16,
        10,
        21
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "str1 , str2 ;",
        "exit ( true ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        2,
        10,
        21
      ],
      "mod_code": [
        "str1 , str2 ;",
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "str1 , str2 ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘str1’ does not name a type"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "exit ( true ) ;",
        "int mid = ( long r + l ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘long’"
    }
  ]
}