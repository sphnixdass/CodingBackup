{
  "meta": {
    "index": 208,
    "hitid": "3CO05SML7VZTBZJDLHYRBOOPUTV0RJ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1009A",
    "subid": "47501581"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers i , j , m , a , s , d , c , b , n , x , p , y and k with p and k = 0 , and arrays an and am with size 1001",
      "code": "int i , j , m , a , s , d , c , b , n , x , p = 0 , y , k = 0 , an [ 1001 ] , am [ 1001 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m from the user input",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n elements from the input into an",
      "code": "for ( i = 0 ; i < n ; i ++ ) { cin >> an [ i ] ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read m elements into am",
      "code": "for ( j = 0 ; j < m ; j ++ ) { cin >> am [ j ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 and j = 0 while i < n",
      "code": "for ( i = 0 , j = 0 ; i < n ; )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if am [ j ] > = an [ i ]",
      "code": "if ( am [ j ] >= an [ i ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment k by one",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment i by one",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if k is greater than m",
      "code": "if ( k > m )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print k",
      "code": "cout << k << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , p , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 0 and j = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        16
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        16,
        15
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        16,
        10
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        16,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        15
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        10
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16,
        15
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> k ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16,
        15,
        10
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> k ;",
        "n",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16,
        15,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16,
        10
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> k ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16,
        10,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> k ;",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        15,
        10
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "n",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        15,
        10,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "n",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        15,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int i , j , m , a [ 1001 ] , an [ 1001 ] , c = 0 , s [ 1001 ] , x , b , n , p , y , k , k ;",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        5,
        16,
        15
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16,
        15,
        10
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "n",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16,
        15,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16,
        10
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "cin >> k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        15,
        10
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        15,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        15,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "cin >> k ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15,
        10
      ],
      "mod_code": [
        "cin >> k ;",
        "n",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15,
        10,
        2
      ],
      "mod_code": [
        "cin >> k ;",
        "n",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15,
        2
      ],
      "mod_code": [
        "cin >> k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "cin >> k ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        10,
        2
      ],
      "mod_code": [
        "cin >> k ;",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        10,
        2
      ],
      "mod_code": [
        "n",
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "n",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}