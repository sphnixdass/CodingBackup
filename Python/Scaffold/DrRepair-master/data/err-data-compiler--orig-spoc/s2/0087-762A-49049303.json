{
  "meta": {
    "index": 87,
    "hitid": "373L46LKP70EQ174H5Z0SHH7XN6KJ5",
    "workerid": "A1APYLD4DUK33J",
    "probid": "762A",
    "subid": "49049303"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare solve with no arguments , returning void",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long vector ret",
      "code": "vector < long long > ret ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create long longs n , k , counts , with counts = 0",
      "code": "long long n , k , counts = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read character",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create long long limit with limit = ( long long casted square root of n ) + 1",
      "code": "long long limit = ( long long ) ( sqrt ( n ) ) + 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to limit inclusive",
      "code": "for ( int i = 1 ; i <= limit ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n % i is 0",
      "code": "if ( n % i == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "add element i to end of ret",
      "code": "ret . push_back ( i ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment counts",
      "code": "counts ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if counts is k",
      "code": "if ( counts == k )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "print i print newline",
      "code": "cout << i << endl ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "return from function",
      "code": "return ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if last of ret * last of ret is n",
      "code": "if ( ret . back ( ) * ret . back ( ) == n )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if counts * 2 - 1 is less than k",
      "code": "if ( counts * 2 - 1 < k )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" - 1 \" print newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "return from function",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print n / ( ret [ counts * 2 - k - 1 ] ) print newline",
      "code": "cout << n / ( ret [ counts * 2 - k - 1 ] ) << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "return from function",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if ret [ counts - 1 ] * ret [ counts - 2 ] is not n , increment counts",
      "code": "if ( ret [ counts - 1 ] * ret [ counts - 2 ] != n ) { counts ++ ; }",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if counts * 2 - 2 is less than k",
      "code": "if ( counts * 2 - 2 < k )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print - 1 print newline",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "return from function",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print n / ( ret [ counts * 2 - k - 2 ] ) print newline",
      "code": "cout << n / ( ret [ counts * 2 - k - 2 ] ) << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "return from function",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "return from function",
      "code": "return ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 35,
      "text": "run solve",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )"
      ],
      "err_line": 16,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘last’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void solve ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= limit ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "ret . end ( i ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘std::vector<long long int>::end(int&)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( ret . find ( ret * ret ) == n )"
      ],
      "err_line": 16,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘find’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "return from ;"
      ],
      "err_line": 19,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "return from ;"
      ],
      "err_line": 22,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "return from ;"
      ],
      "err_line": 27,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "return from ;"
      ],
      "err_line": 30,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "return from ;"
      ],
      "err_line": 32,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "solve solve ) ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘solve’"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "if ( ret . last ( ret * ret ) == n )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        16,
        35
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        16,
        35,
        12
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        16,
        35,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        16,
        12
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "if ( ret . last ( ret * ret ) == n )",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        16,
        12,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "if ( ret . last ( ret * ret ) == n )",
        "return from ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        16,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "if ( ret . last ( ret * ret ) == n )",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        35
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "solve solve ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        35,
        12
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        35,
        12,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "solve solve ) ;",
        "return from ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        35,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        12,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "return from ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( sqrt ( n ) ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        35
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘last’"
    },
    {
      "mod_line": [
        16,
        35,
        5
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        35,
        5,
        12
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        35,
        5,
        19
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        35,
        12
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        35,
        12,
        19
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "return from ;",
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        35,
        19
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 16,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘last’"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        5,
        12
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        5,
        12,
        19
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        5,
        19
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        19
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "return from ;",
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "if ( ret . last ( ret * ret ) == n )",
        "return from ;"
      ],
      "err_line": 16,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘last’"
    },
    {
      "mod_line": [
        35,
        5
      ],
      "mod_code": [
        "solve solve ) ;",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        35,
        5,
        12
      ],
      "mod_code": [
        "solve solve ) ;",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        35,
        5,
        12,
        19
      ],
      "mod_code": [
        "solve solve ) ;",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        35,
        5,
        19
      ],
      "mod_code": [
        "solve solve ) ;",
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        35,
        12
      ],
      "mod_code": [
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        35,
        12,
        19
      ],
      "mod_code": [
        "solve solve ) ;",
        "return from ;",
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        35,
        19
      ],
      "mod_code": [
        "solve solve ) ;",
        "return from ;"
      ],
      "err_line": 19,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        12,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "long long limit = ( long long ) sqrt ( sqrt long ) sqrt ( n ) + 1 ;",
        "return from ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘long’"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "return from ;",
        "return from ;"
      ],
      "err_line": 12,
      "err_msg": "‘from’ was not declared in this scope"
    }
  ]
}