{
  "meta": {
    "index": 1811,
    "hitid": "37J05LC5AXD6CV1UPODDO4MHE1BDJY",
    "workerid": "A1AYVATMT88U1W",
    "probid": "569A",
    "subid": "46291011"
  },
  "lines": [
    {
      "line": 0,
      "text": "the constant double value of PI = acos ( - 1 )",
      "code": "const long double PI = acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let mod be a inline function that accepts long long n , long long m and returns a long integer value",
      "code": "inline long long mod ( long long n , long long m )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "the long integer value of ret = n modulo m",
      "code": "long long ret = n % m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ret is less than 0 , increment ret by m",
      "code": "if ( ret < 0 ) ret += m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return the value of ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let gcd be a function that accepts long long a , long long b and returns a long integer",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "if a equals 0",
      "code": "if ( a == 0 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return the value of b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return the value of gcd of b modulo a and a",
      "code": "return gcd ( b % a , a ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "let q , s , t be long integers",
      "code": "long long q , s , t ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read t , s , q",
      "code": "cin >> t >> s >> q ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "the long integer value of ans = 0",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "while s is less than t",
      "code": "while ( s < t )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "s is equal to s * q",
      "code": "s *= q ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment ans by 1",
      "code": "ans ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print ans and newline",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "inline long long mod ( long long n , long long m ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( a == 0 )"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else if ( a == 0 )"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        7,
        1
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else if ( a == 0 )",
        "inline long long mod ( long long n , long long m ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        7,
        1,
        9
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else if ( a == 0 )",
        "inline long long mod ( long long n , long long m ) ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        7,
        1,
        16
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else if ( a == 0 )",
        "inline long long mod ( long long n , long long m ) ;",
        "while ( s < t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        7,
        9
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else if ( a == 0 )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        7,
        9,
        16
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else if ( a == 0 )",
        "else do",
        "while ( s < t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        7,
        16
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else if ( a == 0 )",
        "while ( s < t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "inline long long mod ( long long n , long long m ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        1,
        9
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "inline long long mod ( long long n , long long m ) ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        1,
        9,
        16
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "inline long long mod ( long long n , long long m ) ;",
        "else do",
        "while ( s < t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        1,
        16
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "inline long long mod ( long long n , long long m ) ;",
        "while ( s < t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        9,
        16
      ],
      "mod_code": [
        "cin >> t >> s , q ;",
        "else do",
        "while ( s < t ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "inline long long mod ( long long n , long long m ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1,
        9
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "inline long long mod ( long long n , long long m ) ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1,
        9,
        16
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "inline long long mod ( long long n , long long m ) ;",
        "else do",
        "while ( s < t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1,
        16
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "inline long long mod ( long long n , long long m ) ;",
        "while ( s < t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        9,
        16
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "else do",
        "while ( s < t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "while ( s < t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "inline long long mod ( long long n , long long m ) ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        16
      ],
      "mod_code": [
        "inline long long mod ( long long n , long long m ) ;",
        "else do",
        "while ( s < t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "inline long long mod ( long long n , long long m ) ;",
        "while ( s < t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "else do",
        "while ( s < t ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}