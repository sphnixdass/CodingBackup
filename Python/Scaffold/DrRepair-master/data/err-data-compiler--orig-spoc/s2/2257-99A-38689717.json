{
  "meta": {
    "index": 2257,
    "hitid": "33NKDW9FFXCX2N056WX3V7CE4ZBCXI",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "99A",
    "subid": "38689717"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "pos = integer",
      "code": "int pos ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "pos = s . find .",
      "code": "pos = s . find ( \" . \" ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( s [ pos - 1 ] is not 9 )",
      "code": "if ( s [ pos - 1 ] != ' 9 ' )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( s [ pos + 1 ] > = 5 ) , s [ pos - 1 ] = s [ pos - 1 ] + 1",
      "code": "if ( s [ pos + 1 ] >= ' 5 ' ) { s [ pos - 1 ] += 1 ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 to pos exclusive , print s [ i ]",
      "code": "for ( int i = 0 ; i < pos ; ++ i ) cout << s [ i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print GOTO Vasilisa .",
      "code": "cout << \" GOTO Vasilisa.\\n \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "pos = s . find ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << GOTO << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "pos = s . top ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘top’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 9,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << GOTO << endl ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << GOTO << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "cout << GOTO << endl ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        10,
        6
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "cout << GOTO << endl ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        10,
        6,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "cout << GOTO << endl ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "cout << GOTO << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::find()’"
    },
    {
      "mod_line": [
        4,
        10,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "pos = s . find ( ) ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << GOTO << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        3
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << GOTO << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        3
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) s [ pos - 1 ] = s [ pos - 1 ] + 1 ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }"
      ],
      "err_line": 10,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6,
        3
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        3
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s [ pos + 1 ] >= 5 ) { s [ pos - 1 ] = s [ pos - 1 ] + 1 ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}