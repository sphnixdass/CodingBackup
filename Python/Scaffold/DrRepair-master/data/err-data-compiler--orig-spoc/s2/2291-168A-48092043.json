{
  "meta": {
    "index": 2291,
    "hitid": "3J6BHNX0U9MA9RYPW3RSLOYO7U4KND",
    "workerid": "A1APYLD4DUK33J",
    "probid": "168A",
    "subid": "48092043"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer MOD with MOD = 1e9 + 7",
      "code": "const int MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with doubles a , b as arguments , returning double",
      "code": "double gcd ( double a , double b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return b if a is less than 0 . 01 , else result of run gcd with ( ( floating point remainder of b / a ) , a ) as arguments from function",
      "code": "return a < 0.01 ? b : gcd ( fmod ( b , a ) , a ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare max with long long integers a , b as arguments , returning long long integer",
      "code": "long long int max ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "return a if a is greater than b , else b from function",
      "code": "return ( a > b ) ? a : b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare max with long long integers a , b , c as arguments , returning long long integer",
      "code": "long long int max ( long long int a , long long int b , long long int c )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "return maximum of ( a and maximum of ( b and c ) ) from function",
      "code": "return max ( a , max ( b , c ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare min with long long integers a , b as arguments , returning long long integer",
      "code": "long long int min ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "return a if a is less than b , else b from function",
      "code": "return ( a < b ) ? a : b ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "declare min with long long integers a , b , c as arguments , returning long long integer",
      "code": "long long int min ( long long int a , long long int b , long long int c )",
      "indent": 0
    },
    {
      "line": 14,
      "text": "return minimum of ( a and minimum of ( b and c ) ) from function",
      "code": "return min ( a , min ( b , c ) ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "declare power with long long integers x , y as arguments , returning long long integer",
      "code": "long long int power ( long long int x , long long int y )",
      "indent": 0
    },
    {
      "line": 17,
      "text": "declare long long integer res with res = 1",
      "code": "long long int res = 1 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set x to x % MOD",
      "code": "x = x % MOD ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while y is greater than 0",
      "code": "while ( y > 0 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if y bitwise and 1 , set res to ( res * x ) % MOD",
      "code": "if ( y & 1 ) res = ( res * x ) % MOD ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set y to y bitshift right 1",
      "code": "y = y >> 1 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set x to ( x * x ) % MOD",
      "code": "x = ( x * x ) % MOD ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "return res from function",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "declare swap with character pointers x , y as arguments , returning void",
      "code": "void swap ( char * x , char * y )",
      "indent": 0
    },
    {
      "line": 27,
      "text": "create character temp",
      "code": "char temp ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "set temp to value of y",
      "code": "temp = * y ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "set value of y to value of x",
      "code": "* y = * x ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "set value of x to temp",
      "code": "* x = temp ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 32,
      "text": "declare mod with long long integer a as argument , returning long long integer",
      "code": "long long int mod ( long long int a )",
      "indent": 0
    },
    {
      "line": 33,
      "text": "if a is greater than 0",
      "code": "if ( a > 0 )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "return a",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 36,
      "text": "return - a",
      "code": "return - a ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 39,
      "text": "create integers n , x , y",
      "code": "int n , x , y ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "read n read x read y",
      "code": "cin >> n >> x >> y ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "create integer r with r = round up ( ( n * y ) / 100 . 0 )",
      "code": "int r = ceil ( ( n * y ) / 100.0 ) ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print r - x if ( r - x ) is greater than or equal to 0 , else 0 print newline",
      "code": "cout << ( ( ( r - x ) >= 0 ) ? r - x : 0 ) << endl ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "y = * x ;"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "x = temp ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "double gcd ( double a , double b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b . remainder ( ) / a ) ;"
      ],
      "err_line": 2,
      "err_msg": "request for member ‘remainder’ in ‘b’, which is of non-class type ‘double’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return max ( a , max ( b ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘max(long long int&)’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "void swap ( char * x , char y )"
      ],
      "err_line": 28,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 28,
      "err_msg": "‘temp’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "y = x . top ( ) ;"
      ],
      "err_line": 29,
      "err_msg": "request for member ‘top’ in ‘x’, which is of non-class type ‘char*’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "if ( a > 0 ) return 1 ;"
      ],
      "err_line": 35,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 35,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "n , x , y ;"
      ],
      "err_line": 39,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "while ( cin >> n >> x >> y )"
      ],
      "err_line": 42,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "cout << ( ( ( r - x ) >= 0 ? r - x ) : 0 ) << endl ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        29
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        30
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "x = temp ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        30,
        41
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        30,
        35
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "x = temp ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        30,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "x = temp ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        41
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        41,
        35
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        41,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        35
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        35,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        29,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "y = * x ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        30
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "x = temp ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        30,
        41
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        30,
        41,
        35
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        30,
        41,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        30,
        35
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "x = temp ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        30,
        35,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "x = temp ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        30,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "x = temp ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        41
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        41,
        35
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        41,
        35,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        41,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        35
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        35,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        2,
        28
      ],
      "mod_code": [
        "return a < 0 ? b : gcd ( b / a ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘double gcd(double, double)’"
    },
    {
      "mod_line": [
        29,
        30
      ],
      "mod_code": [
        "y = * x ;",
        "x = temp ;"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        30,
        41
      ],
      "mod_code": [
        "y = * x ;",
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        30,
        41,
        35
      ],
      "mod_code": [
        "y = * x ;",
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        30,
        41,
        28
      ],
      "mod_code": [
        "y = * x ;",
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        29,
        30,
        35
      ],
      "mod_code": [
        "y = * x ;",
        "x = temp ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        30,
        35,
        28
      ],
      "mod_code": [
        "y = * x ;",
        "x = temp ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        29,
        30,
        28
      ],
      "mod_code": [
        "y = * x ;",
        "x = temp ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        29,
        41
      ],
      "mod_code": [
        "y = * x ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        41,
        35
      ],
      "mod_code": [
        "y = * x ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        41,
        35,
        28
      ],
      "mod_code": [
        "y = * x ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        29,
        41,
        28
      ],
      "mod_code": [
        "y = * x ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        29,
        35
      ],
      "mod_code": [
        "y = * x ;",
        "n"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        35,
        28
      ],
      "mod_code": [
        "y = * x ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        29,
        28
      ],
      "mod_code": [
        "y = * x ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        30,
        41
      ],
      "mod_code": [
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        41,
        35
      ],
      "mod_code": [
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        41,
        35,
        28
      ],
      "mod_code": [
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        30,
        41,
        28
      ],
      "mod_code": [
        "x = temp ;",
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        30,
        35
      ],
      "mod_code": [
        "x = temp ;",
        "n"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        35,
        28
      ],
      "mod_code": [
        "x = temp ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        30,
        28
      ],
      "mod_code": [
        "x = temp ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        41,
        35
      ],
      "mod_code": [
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n"
      ],
      "err_line": 35,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        41,
        35,
        28
      ],
      "mod_code": [
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        41,
        28
      ],
      "mod_code": [
        "int r = ceil ( ( n * y ) / 0.5 ) ;",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    },
    {
      "mod_line": [
        35,
        28
      ],
      "mod_code": [
        "n",
        "temp = y ( y ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘y’ cannot be used as a function"
    }
  ]
}