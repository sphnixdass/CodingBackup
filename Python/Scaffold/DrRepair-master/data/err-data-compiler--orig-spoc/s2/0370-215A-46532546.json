{
  "meta": {
    "index": 370,
    "hitid": "304QEQWKZPEQEMRXTPHNHTJKJ640O3",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "215A",
    "subid": "46532546"
  },
  "lines": [
    {
      "line": 0,
      "text": "E = const double with E = exp of 1",
      "code": "const double E = exp ( 1 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "maxn = const int with maxn = 1e6 + 10",
      "code": "const int maxn = 1e6 + 10 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "mod = const int with mod = 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "a , b = int array of size maxn each",
      "code": "int a [ maxn ] , b [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "vis = int array of size maxn",
      "code": "int vis [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n values into a",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read m values into b",
      "code": "for ( int i = 0 ; i < m ; i ++ ) cin >> b [ i ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 0 to m",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if b [ j ] is a multiple of a [ i ] then incrment vis [ b [ j ] / a [ i ] ]",
      "code": "if ( b [ j ] % a [ i ] == 0 ) vis [ b [ j ] / a [ i ] ] ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = maxn to 0 inclusive decrementing i",
      "code": "for ( int i = maxn ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if vis [ i ] is not 0",
      "code": "if ( vis [ i ] )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print vis [ i ]",
      "code": "cout << vis [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const double E = exp . exp ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘std::exp’ does not have class type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "cout << vis [ i ] ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        18,
        3
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        13,
        18,
        3,
        16
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        13,
        18,
        3,
        9
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        13,
        18,
        16
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "cout << vis [ i ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        18,
        16,
        9
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "cout << vis [ i ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "m = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        18,
        9
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "cout << vis [ i ] ;",
        "m = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "int a [ maxn ] , a [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        13,
        3,
        16
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        13,
        3,
        16,
        9
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        13,
        3,
        9
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "int a [ maxn ] , a [ maxn ] ;",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        16,
        9
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "m = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "if ( b [ j ] % a [ i ] && vis [ b [ j ] / a [ i ] ] == 0 )",
        "m = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        18,
        3,
        16
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        18,
        3,
        16,
        13
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        18,
        3,
        16,
        9
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        18,
        3,
        13
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        18,
        3,
        13,
        9
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        18,
        3,
        9
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "int a [ maxn ] , a [ maxn ] ;",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        18,
        16
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        16,
        13
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        16,
        13,
        9
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }",
        "m = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        16,
        9
      ],
      "mod_code": [
        "cout << vis [ i ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "m = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        3,
        16,
        13
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        3,
        16,
        13,
        9
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        3,
        16,
        9
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;",
        "for ( i = maxn ; i >= 0 ; i -- )",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        3,
        13,
        9
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int a [ maxn ] , a [ maxn ] ;",
        "m = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int a [1000010]’"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "for ( i = maxn ; i >= 0 ; i -- )",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        13,
        9
      ],
      "mod_code": [
        "for ( i = maxn ; i >= 0 ; i -- )",
        "if ( b [ j ] % a [ i ] ) { vis [ b [ j ] / a [ i ] ] += a [ i ] ; }",
        "m = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "for ( i = maxn ; i >= 0 ; i -- )",
        "m = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}