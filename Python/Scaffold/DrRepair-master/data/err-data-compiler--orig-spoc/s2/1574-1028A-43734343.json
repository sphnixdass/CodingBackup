{
  "meta": {
    "index": 1574,
    "hitid": "3OEWW2KGQJ5KD6SR515IW033DVLODS",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "1028A",
    "subid": "43734343"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a = double pointer of char = new char pointer array of length n",
      "code": "char * * a = new char * [ n ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive , set a [ i ] to new char [ m ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = new char [ m ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to m exclusive , read a [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "x = 0 = int",
      "code": "int x = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "z = int = 0",
      "code": "int z = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "h = int = 0",
      "code": "int h = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if a [ i ] [ j ] = ' B '",
      "code": "if ( a [ i ] [ j ] == ' B ' )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set x = 0",
      "code": "x = 0 ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "set z = 0",
      "code": "z = 0 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "set h = 0",
      "code": "h = 0 ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "for v = i - 1 to 0 inclusive",
      "code": "for ( int v = i - 1 ; v >= 0 ; v -- )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if [ v ] [ j ] = ' B ' then increment x",
      "code": "if ( a [ v ] [ j ] == ' B ' ) { x ++ ; }",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "for t = j - 1 to 0 inclusive",
      "code": "for ( int t = j - 1 ; t >= 0 ; t -- )",
      "indent": 4
    },
    {
      "line": 22,
      "text": "if a [ i ] [ t ] = ' B ' then increment z",
      "code": "if ( a [ i ] [ t ] == ' B ' ) { z ++ ; }",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "for t = j + 1 to m exclusive",
      "code": "for ( int t = j + 1 ; t < m ; t ++ )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if a [ i ] [ t ] = ' B ' then increment h",
      "code": "if ( a [ i ] [ t ] == ' B ' ) { h ++ ; }",
      "indent": 5
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 27,
      "text": "if z = x and x = h then print i + 1 and space and j + 1",
      "code": "if ( z == x && x == h ) { cout << i + 1 << \" \" << j + 1 << \" \\n \" ; }",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "a = new char * [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 18,
      "err_msg": "‘v’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) { x ++ ; }"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( t = j + 1 ; t < m ; t ++ )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘t’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        19,
        12
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        19,
        12,
        13
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        19,
        12,
        18
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        19,
        13
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        19,
        13,
        18
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        19,
        18
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        18
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        18
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        18
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "a = new char * [ n ] ;",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        12,
        13
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        12,
        13,
        18
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        12,
        13,
        4
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        12,
        18
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        12,
        18,
        4
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        12,
        4
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        13
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        13,
        18
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        13,
        18,
        4
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        13,
        4
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        18
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 18,
      "err_msg": "‘v’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        18,
        4
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "for ( v = i - 1 ; v >= 0 ; v -- )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4
      ],
      "mod_code": [
        "if ( v [ v ] [ j ] == ' B ' ) x ++ ;",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        18,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18,
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( v = i - 1 ; v >= 0 ; v -- )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "for ( v = i - 1 ; v >= 0 ; v -- )",
        "char * a = new char [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    }
  ]
}