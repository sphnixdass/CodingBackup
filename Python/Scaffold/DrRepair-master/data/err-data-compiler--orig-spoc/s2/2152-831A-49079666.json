{
  "meta": {
    "index": 2152,
    "hitid": "3APP19WN718X0KWE7VKWLLK9404G6R",
    "workerid": "AIWEXPJAU66D9",
    "probid": "831A",
    "subid": "49079666"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer variable n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "assign value 1e4 + 5 to constant integer maxn",
      "code": "const int maxn = 1e4 + 5 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer array a with maxn elements",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n elements into a",
      "code": "for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer status = 1",
      "code": "int status = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integer now = 1",
      "code": "int now = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare boolean p = true",
      "code": "bool p = true ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for integer i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if a [ i ] > a [ i - 1 ] and status = 1",
      "code": "if ( a [ i ] > a [ i - 1 ] && status == 1 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": ";",
      "code": ";",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if a [ i ] = a [ i - 1 ] and status ! = 3",
      "code": "else if ( a [ i ] == a [ i - 1 ] && status != 3 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "status = 2",
      "code": "status = 2 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "assign value of i to now",
      "code": "now = i ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if a [ i ] < a [ i - 1 ] and ( status ! = 1 or now = 1 )",
      "code": "else if ( a [ i ] < a [ i - 1 ] && ( status != 1 || now == 1 ) )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set value of status to 3",
      "code": "status = 3 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set p to false",
      "code": "p = false ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if p is true",
      "code": "if ( p )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "a [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "now = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘now’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( a [ i ] > a [ i - 1 ] && status = 1 )"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "* status = 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "* status = 3 ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        16,
        18
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "* status = 3 ;",
        "bool p = false ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        16,
        24
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "* status = 3 ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        16,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "* status = 3 ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        18
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "bool p = false ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        18,
        24
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        18,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        24
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        24,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        2,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "a [ maxn ] ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "* status = 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        16,
        18
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "* status = 3 ;",
        "bool p = false ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        16,
        18,
        24
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "* status = 3 ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        16,
        18,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "* status = 3 ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        16,
        24
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "* status = 3 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        16,
        24,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "* status = 3 ;",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        16,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "* status = 3 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        18,
        24
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        18,
        24,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "bool p = false ;",
        "n",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        18,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        24
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        24,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "* status = 3 ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        16,
        18
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "* status = 3 ;",
        "bool p = false ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        16,
        18,
        24
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "* status = 3 ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        16,
        18,
        17
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "* status = 3 ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        16,
        24
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "* status = 3 ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        16,
        24,
        17
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "* status = 3 ;",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        16,
        17
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "* status = 3 ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "bool p = false ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        24
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        24,
        17
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "bool p = false ;",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        17
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        24
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        24,
        17
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "a [ maxn ] ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "* status = 3 ;",
        "bool p = false ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        18,
        24
      ],
      "mod_code": [
        "* status = 3 ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        18,
        24,
        17
      ],
      "mod_code": [
        "* status = 3 ;",
        "bool p = false ;",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        18,
        17
      ],
      "mod_code": [
        "* status = 3 ;",
        "bool p = false ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        24
      ],
      "mod_code": [
        "* status = 3 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        24,
        17
      ],
      "mod_code": [
        "* status = 3 ;",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "* status = 3 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        24
      ],
      "mod_code": [
        "bool p = false ;",
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        24,
        17
      ],
      "mod_code": [
        "bool p = false ;",
        "n",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "bool p = false ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        17
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}