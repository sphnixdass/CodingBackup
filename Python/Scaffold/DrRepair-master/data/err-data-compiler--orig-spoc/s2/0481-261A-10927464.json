{
  "meta": {
    "index": 481,
    "hitid": "39WSF6KUV2FP5C6R1WG22ILOD7JOEI",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "261A",
    "subid": "10927464"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "ff = ifstream with ff = file . txt",
      "code": "ifstream ff ( \" file.txt \" ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "s1 = set of integer",
      "code": "set < int > s1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "v = integer",
      "code": "int v ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read v",
      "code": "cin >> v ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "insert v in s1",
      "code": "s1 . insert ( v ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "m = integer",
      "code": "int m ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "v1 = vector of integer with v1 = m",
      "code": "vector < int > v1 ( m ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to m exclusive , read v1 [ i ]",
      "code": "for ( int i = 0 ; i < m ; i ++ ) { cin >> v1 [ i ] ; }",
      "indent": 1
    },
    {
      "line": 14,
      "text": "sort v1 . begin ( ) and v1 . end ( )",
      "code": "sort ( v1 . begin ( ) , v1 . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "p = iterator set of integer with p = s1 . begin ( )",
      "code": "set < int > :: iterator p = s1 . begin ( ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "sum = long long with sum = 0",
      "code": "long long sum = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "b1 = bool with b1 = true",
      "code": "bool b1 = true ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "v = pointer of p",
      "code": "v = * p ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "kol = integer with kol = v",
      "code": "int kol = v ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = m - 1 down to 0",
      "code": "for ( int i = m - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if ( b1 is true )",
      "code": "if ( b1 == true )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "sum = sum + v1 [ i ]",
      "code": "sum += v1 [ i ] ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "decrement kol",
      "code": "kol -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if ( kol is 0 )",
      "code": "if ( kol == 0 )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "kol = 2",
      "code": "kol = 2 ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "b1 = false",
      "code": "b1 = false ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else if ( b1 is false )",
      "code": "else if ( b1 == false )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "decrement kol",
      "code": "kol -- ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if ( kol is 0 )",
      "code": "if ( kol == 0 )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "kol = v",
      "code": "kol = v ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "b1 = true",
      "code": "b1 = true ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "print sum",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < int > s1 ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s1 . insert ( v . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘end’ in ‘v’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "vector < int > v1 [ m ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "set < int > p ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::set<int>’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        14
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        14,
        19
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        14,
        20
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        14,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        19
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "int kol = ' v ' ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        19,
        20
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        19,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "int kol = ' v ' ;",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        20
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        20,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        18,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "v %= * p ;",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        19
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        19,
        20
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        19,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        20
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        20,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        14,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "int kol = ' v ' ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19,
        20
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19,
        20,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        19,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "int kol = ' v ' ;",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        20,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        32
      ],
      "mod_code": [
        "ifstream ff = 3.14159265359 ;",
        "bool b1 = true ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::ifstream {aka std::basic_ifstream<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        18,
        14,
        19
      ],
      "mod_code": [
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        18,
        14,
        19,
        20
      ],
      "mod_code": [
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        18,
        14,
        19,
        32
      ],
      "mod_code": [
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;",
        "bool b1 = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        18,
        14,
        20
      ],
      "mod_code": [
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        18,
        14,
        20,
        32
      ],
      "mod_code": [
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        18,
        14,
        32
      ],
      "mod_code": [
        "v %= * p ;",
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "bool b1 = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        18,
        19,
        20
      ],
      "mod_code": [
        "v %= * p ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        19,
        20,
        32
      ],
      "mod_code": [
        "v %= * p ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "v %= * p ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        32
      ],
      "mod_code": [
        "v %= * p ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        19
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        14,
        19,
        20
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        14,
        19,
        20,
        32
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        14,
        19,
        32
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "int kol = ' v ' ;",
        "bool b1 = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        14,
        20,
        32
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        14,
        32
      ],
      "mod_code": [
        "sort ( v1 . begin ( ) . begin ( ) , v1 . end ( ) ) ;",
        "bool b1 = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘std::vector<int>::iterator {aka class __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ has no member named ‘begin’"
    },
    {
      "mod_line": [
        19,
        20
      ],
      "mod_code": [
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        20,
        32
      ],
      "mod_code": [
        "int kol = ' v ' ;",
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        32
      ],
      "mod_code": [
        "for ( i = m - 1 ; i >= 0 ; i -- )",
        "bool b1 = true ;"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}