{
  "meta": {
    "index": 2420,
    "hitid": "37NXA7GVST0Y12PGJUPKA55GIXFLV2",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "631A",
    "subid": "48675412"
  },
  "lines": [
    {
      "line": 0,
      "text": "a = integer array of size 1005",
      "code": "int a [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "b = integer array of size 1005",
      "code": "int b [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "num , i , j = integer",
      "code": "int num , i , j ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "sign1 , sign2 = integer",
      "code": "int sign1 , sign2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read num",
      "code": "cin >> num ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to num exclusive , then read a [ i ]",
      "code": "for ( i = 0 ; i < num ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to num exclusive , then read b [ i ]",
      "code": "for ( i = 0 ; i < num ; i ++ ) { cin >> b [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "i = 0",
      "code": "i = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "ans = integer = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if num is 1",
      "code": "if ( num == 1 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "ans = a [ 0 ] + b [ 0 ]",
      "code": "ans = a [ 0 ] + b [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to num exclusive",
      "code": "for ( i = 0 ; i < num ; i ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "sign1 = a [ i ]",
      "code": "sign1 = a [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "sign2 = b [ i ]",
      "code": "sign2 = b [ i ] ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "for j = i + 1 to num exclusive",
      "code": "for ( j = i + 1 ; j < num ; j ++ )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "sign1 = bitwise or between sign1 and a [ j ]",
      "code": "sign1 = ( sign1 | a [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "sign2 = bitwise or between sign2 and a [ j ]",
      "code": "sign2 = ( sign2 | b [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if sign1 + sign2 > ans , then ans = sign1 + sign2",
      "code": "if ( sign1 + sign2 > ans ) ans = sign1 + sign2 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int * a [ 1005 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 = strcmp ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        19
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        19,
        8
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        18,
        19,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        8
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        18,
        8,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "int i = 0 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        18,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        19,
        8
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        19,
        8,
        18
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        19,
        8,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        19,
        18
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        19,
        18,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        19,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        8,
        18
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "int i = 0 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        8,
        18,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "int i = 0 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        8,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "int i = 0 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "sign1 = strcmp ( sign1 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        19,
        8
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        18,
        19,
        8,
        11
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        18,
        19,
        11
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        8
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        18,
        8,
        11
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "int i = 0 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        18,
        11
      ],
      "mod_code": [
        "sign2 = strcmp ( sign2 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        8
      ],
      "mod_code": [
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        19,
        8,
        18
      ],
      "mod_code": [
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        19,
        8,
        18,
        11
      ],
      "mod_code": [
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        19,
        8,
        11
      ],
      "mod_code": [
        "if ( sign1 + sign2 > ans ) ans += sign2 ;",
        "int i = 0 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "int i = 0 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        8,
        18,
        11
      ],
      "mod_code": [
        "int i = 0 ;",
        "sign2 ^= min ( sign2 , a [ j ] ) ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "int i = 0 ;",
        "int ans = a [ 0 ] + b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int i’"
    }
  ]
}