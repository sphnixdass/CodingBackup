{
  "meta": {
    "index": 1963,
    "hitid": "32204AGAAB6DX9GV3EB0IC9ZE1EGHX",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "319A",
    "subid": "38786505"
  },
  "lines": [
    {
      "line": 0,
      "text": "mod = long long with mod = 1e9 + 7",
      "code": "long long mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "ans = long long with ans = 0",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "power = long long with power = 1",
      "code": "long long power = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to s . size ( ) , power = ( power * 2 ) modulo mod",
      "code": "for ( int i = 1 ; i < s . size ( ) ; ++ i ) power = ( power * 2 ) % mod ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "cur = long long with cur = 1",
      "code": "long long cur = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = s . size ( ) - 1 down to 0",
      "code": "for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ i ] is 1 , ans = ( ans + cur * power ) modulo mod",
      "code": "if ( s [ i ] == ' 1 ' ) ans = ( ans + cur * power ) % mod ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "cur = ( cur * 2 ) modulo mod",
      "code": "cur = ( cur * 2 ) % mod ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = s . size ( ) - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "int cur = ( cur * 2 ) % mod ;"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        2,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "int cur = ( cur * 2 ) % mod ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        10,
        9,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "int cur = ( cur * 2 ) % mod ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "int cur = ( cur * 2 ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "string S ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        9,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "string S ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "string S ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        9,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        6,
        9
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        6,
        3
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        9
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        9,
        3
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        3
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "string S ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        10,
        6,
        9
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        10,
        6,
        9,
        3
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        6,
        3
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        9,
        3
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "int cur = ( cur * 2 ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "string S ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "string S ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        3
      ],
      "mod_code": [
        "string S ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "string S ;",
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "string S ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        3
      ],
      "mod_code": [
        "string S ;",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "string S ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;"
      ],
      "err_line": 6,
      "err_msg": "‘power’ cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        9,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) ; i ++ ) { power ( power * 2 ) % mod ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 1 ) ans = ( ans + cur * power ) % mod ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}