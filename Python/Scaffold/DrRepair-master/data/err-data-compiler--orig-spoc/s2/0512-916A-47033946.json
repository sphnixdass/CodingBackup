{
  "meta": {
    "index": 512,
    "hitid": "363A7XIFV4GH5JYCM30U1RP5OLGVAU",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "916A",
    "subid": "47033946"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function check that takes long long a and returns bool",
      "code": "bool check ( long long a )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if ( a modulo 10 is 7 ) , return true",
      "code": "if ( a % 10 == 7 ) return true ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "a = a / 10",
      "code": "a /= 10 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ( a modulo 10 is 7 ) , return 7",
      "code": "if ( a % 10 == 7 ) return 7 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "x , h , m , ans = long long with ans = 0",
      "code": "long long x , h , m , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read x , h , m",
      "code": "cin >> x >> h >> m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "h1 = long long with h1 = x / 60",
      "code": "long long h1 = x / 60 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "m1 = long long with m1 = x modulo 60",
      "code": "long long m1 = x % 60 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while true",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if ( check ( h ) or check ( m ) )",
      "code": "if ( check ( h ) || check ( m ) )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print ans",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "ans = ans + 1",
      "code": "ans += 1 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "m = m - m1",
      "code": "m -= m1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "h = h - h1",
      "code": "h -= h1 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if ( m < 0 )",
      "code": "if ( m < 0 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "m = m + 60",
      "code": "m += 60 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "h = h - 1",
      "code": "h -= 1 ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if ( h < 0 ) , h = h + 24",
      "code": "if ( h < 0 ) { h += 24 ; }",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "long long m1 %= 60 ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        20,
        10
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        20,
        10,
        4
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "exit ( false ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        20,
        10,
        4,
        8
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "cin >> x >> h , m ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        20,
        10,
        4,
        0
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        10,
        4,
        12
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        20,
        10,
        8
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "cin >> x >> h , m ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        20,
        10,
        8,
        0
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        10,
        8,
        12
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "cin >> x >> h , m ;",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        20,
        10,
        0
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        10,
        0,
        12
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        10,
        12
      ],
      "mod_code": [
        "m -= 60 ;",
        "long long m1 %= 60 ;",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        20,
        4,
        8,
        0
      ],
      "mod_code": [
        "m -= 60 ;",
        "exit ( false ) ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        4,
        0
      ],
      "mod_code": [
        "m -= 60 ;",
        "exit ( false ) ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        4,
        0,
        12
      ],
      "mod_code": [
        "m -= 60 ;",
        "exit ( false ) ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        8,
        0
      ],
      "mod_code": [
        "m -= 60 ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        8,
        0,
        12
      ],
      "mod_code": [
        "m -= 60 ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "m -= 60 ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        20,
        0,
        12
      ],
      "mod_code": [
        "m -= 60 ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "exit ( false ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        10,
        4,
        8
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "cin >> x >> h , m ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        10,
        4,
        8,
        0
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        4,
        8,
        12
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "cin >> x >> h , m ;",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        10,
        4,
        0
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        4,
        0,
        12
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        4,
        12
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "exit ( false ) ;",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "cin >> x >> h , m ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        10,
        8,
        0
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        8,
        0,
        12
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        8,
        12
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "cin >> x >> h , m ;",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        0,
        12
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "long long m1 %= 60 ;",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘%=’ token"
    },
    {
      "mod_line": [
        4,
        8,
        0
      ],
      "mod_code": [
        "exit ( false ) ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        4,
        8,
        0,
        12
      ],
      "mod_code": [
        "exit ( false ) ;",
        "cin >> x >> h , m ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "exit ( false ) ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        4,
        0,
        12
      ],
      "mod_code": [
        "exit ( false ) ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "cin >> x >> h , m ;",
        "bool check ( const long long a )"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        8,
        0,
        12
      ],
      "mod_code": [
        "cin >> x >> h , m ;",
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "bool check ( const long long a )",
        "if ( check ( h ) ) check ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "assignment of read-only parameter ‘a’"
    }
  ]
}