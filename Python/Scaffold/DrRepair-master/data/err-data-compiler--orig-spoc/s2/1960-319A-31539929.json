{
  "meta": {
    "index": 1960,
    "hitid": "3R0WOCG21M3FQBCO1NHRV6VSUU9DUJ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "319A",
    "subid": "31539929"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer MAXN = 99999",
      "code": "const int MAXN = 99999 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare constant integer INF = ( 1 < < 30 )",
      "code": "const int INF = ( 1 << 30 ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create constant double PI = acos ( - 1 . 0 )",
      "code": "const double PI = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare constant double EPS = 1e - 11",
      "code": "const double EPS = 1e-11 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare constant long long MOD = 1000000007",
      "code": "const long long MOD = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare integer variable n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "twoPower is a long long function with integer argument x",
      "code": "long long twoPower ( int x )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare long long t",
      "code": "long long t ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return 1 if x = 0",
      "code": "if ( x == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return 2 if x = 1",
      "code": "if ( x == 1 ) return 2 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "t = twoPower ( x / 2 )",
      "code": "t = twoPower ( x / 2 ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if x is even",
      "code": "if ( x % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return ( t * t ) % MOD",
      "code": "return ( t * t ) % MOD ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "return ( t * t ) % MOD * 2 % MOD",
      "code": "return ( t * t ) % MOD * 2 % MOD ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "in the function input that returns integer",
      "code": "int input ( )",
      "indent": 0
    },
    {
      "line": 19,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "n = length of s",
      "code": "n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "function rec with integer argument i that returns long long",
      "code": "long long rec ( int i )",
      "indent": 0
    },
    {
      "line": 24,
      "text": "if i = n - 1 , return s [ i ] - ' 0 '",
      "code": "if ( i == n - 1 ) { return s [ i ] - ' 0 ' ; }",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if s [ i ] = ' 0 '",
      "code": "if ( s [ i ] == ' 0 ' )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "return 2 * rec ( i + 1 ) % MOD",
      "code": "return 2 * rec ( i + 1 ) % MOD ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) ) % MOD",
      "code": "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) ) % MOD ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 31,
      "text": "call function input",
      "code": "input ( ) ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print rec ( 0 )",
      "code": "cout << rec ( 0 ) << endl ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const double PI = acos ( - constant ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘constant’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 19,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int t = twoPower ( x / 2 ) ;"
      ],
      "err_line": 11,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "return t * t ) % MOD ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int input ( string str )"
      ],
      "err_line": 31,
      "err_msg": "too few arguments to function ‘int input(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;"
      ],
      "err_line": 28,
      "err_msg": "invalid conversion from ‘long long int (*)(int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        28,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "s >> s ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        28,
        19,
        0
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "s >> s ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        28,
        19,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "s >> s ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        28,
        0
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        28,
        0,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "s >> s ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        19,
        28
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "s >> s ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        19,
        28,
        0
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "s >> s ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        19,
        28,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "s >> s ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        19,
        0
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "s >> s ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        19,
        0,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "s >> s ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        19,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "s >> s ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        28
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;"
      ],
      "err_line": 28,
      "err_msg": "invalid conversion from ‘long long int (*)(int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        28,
        0
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        28,
        0,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        28,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 28,
      "err_msg": "invalid conversion from ‘long long int (*)(int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        20,
        0,
        12
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        28,
        19
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "s >> s ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        19,
        0
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "s >> s ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        28,
        19,
        0,
        12
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "s >> s ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        28,
        19,
        12
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "s >> s ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        0
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        28,
        0,
        12
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ( 2 * ( n - i - 1 ) ) % MOD ) ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        19,
        28
      ],
      "mod_code": [
        "s >> s ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        28,
        0
      ],
      "mod_code": [
        "s >> s ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        19,
        28,
        0,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        19,
        28,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        0
      ],
      "mod_code": [
        "s >> s ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        19,
        0,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        0
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "const MAXN = 99999 ;"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        28,
        0,
        12
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    },
    {
      "mod_line": [
        28,
        12
      ],
      "mod_code": [
        "return ( 2 * rec ( i + 1 ) + twoPower ) + twoPower ( 2 * ( n - i ) ) % MOD ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 28,
      "err_msg": "invalid conversion from ‘long long int (*)(int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "const MAXN = 99999 ;",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 0,
      "err_msg": "‘MAXN’ does not name a type"
    }
  ]
}