{
  "meta": {
    "index": 966,
    "hitid": "3D0LPO3EABTNBHNI1XSW9LD4UWOYOW",
    "workerid": "AIWEXPJAU66D9",
    "probid": "778A",
    "subid": "48203503"
  },
  "lines": [
    {
      "line": 0,
      "text": "i , h , m , z , t and fg are long longs with fg = 0 ; p is a long long array with size 200005",
      "code": "long long i , h , m , z , p [ 200005 ] , t , fg = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variables a , b and c",
      "code": "string a , b , c ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "boolean function chec with long long argument m",
      "code": "bool chec ( long long m )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set value of c to a",
      "code": "c = a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "assign value of 0 to fg",
      "code": "fg = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to m exclusive set c [ p [ i ] - 1 ] to ' 1 '",
      "code": "for ( i = 0 ; i < m ; i ++ ) { c [ p [ i ] - 1 ] = ' 1 ' ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to length of a exclusive",
      "code": "for ( i = 0 ; i < a . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if c [ i ] = b [ fg ] increment fg",
      "code": "if ( c [ i ] == b [ fg ] ) fg ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "return true if fg = length of b",
      "code": "if ( fg == b . size ( ) ) return true ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to length of a exclusive read p [ i ]",
      "code": "for ( i = 0 ; i < a . size ( ) ; i ++ ) cin >> p [ i ] ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set z to 0",
      "code": "z = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "h = length of a",
      "code": "h = a . size ( ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "m = ( z + h ) / 2",
      "code": "m = ( z + h ) / 2 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "while h - z is greater than 1",
      "code": "while ( h - z > 1 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if chec ( m ) returned true",
      "code": "if ( chec ( m ) )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "assign value of m to z",
      "code": "z = m ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "assign value of h to m",
      "code": "h = m ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "m = ( z + h ) / 2",
      "code": "m = ( z + h ) / 2 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , z , z , t , fg ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b , c ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool chec ( long long m ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "* c = a ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cin >> n >> b ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "m += h ) / 2 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 21,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "m += h ) / 2 ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = h ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        22,
        3
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = h ;",
        "* c = a ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        22,
        3,
        18
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = h ;",
        "* c = a ;",
        "while ( h - z >= 1 )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        22,
        3,
        25
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = h ;",
        "* c = a ;",
        "cout << ' m ' ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        22,
        18
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = h ;",
        "while ( h - z >= 1 )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        22,
        18,
        25
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = h ;",
        "while ( h - z >= 1 )",
        "cout << ' m ' ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        22,
        25
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = h ;",
        "cout << ' m ' ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "* c = a ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        3,
        18
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "* c = a ;",
        "while ( h - z >= 1 )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        3,
        18,
        25
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "* c = a ;",
        "while ( h - z >= 1 )",
        "cout << ' m ' ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        3,
        18,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "* c = a ;",
        "while ( h - z >= 1 )",
        "m = ( h ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        3,
        25
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "* c = a ;",
        "cout << ' m ' ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        3,
        25,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "* c = a ;",
        "cout << ' m ' ;",
        "m = ( h ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        3,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "* c = a ;",
        "m = ( h ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "while ( h - z >= 1 )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        18,
        25
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "while ( h - z >= 1 )",
        "cout << ' m ' ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        18,
        25,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "while ( h - z >= 1 )",
        "cout << ' m ' ;",
        "m = ( h ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        18,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "while ( h - z >= 1 )",
        "m = ( h ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "cout << ' m ' ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        25,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "cout << ' m ' ;",
        "m = ( h ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "long long i , h [ 200005 ] , h [ 200005 ] , m , z , t , fg ;",
        "m = ( h ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int h [200005]’"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "m = h ;",
        "* c = a ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        3,
        18
      ],
      "mod_code": [
        "m = h ;",
        "* c = a ;",
        "while ( h - z >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        3,
        18,
        25
      ],
      "mod_code": [
        "m = h ;",
        "* c = a ;",
        "while ( h - z >= 1 )",
        "cout << ' m ' ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        3,
        25
      ],
      "mod_code": [
        "m = h ;",
        "* c = a ;",
        "cout << ' m ' ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "* c = a ;",
        "while ( h - z >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        18,
        25
      ],
      "mod_code": [
        "* c = a ;",
        "while ( h - z >= 1 )",
        "cout << ' m ' ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        18,
        25,
        22
      ],
      "mod_code": [
        "* c = a ;",
        "while ( h - z >= 1 )",
        "cout << ' m ' ;",
        "m = ( h ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        18,
        22
      ],
      "mod_code": [
        "* c = a ;",
        "while ( h - z >= 1 )",
        "m = ( h ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "* c = a ;",
        "cout << ' m ' ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        25,
        22
      ],
      "mod_code": [
        "* c = a ;",
        "cout << ' m ' ;",
        "m = ( h ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "* c = a ;",
        "m = ( h ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}