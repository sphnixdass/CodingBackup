{
  "meta": {
    "index": 2114,
    "hitid": "37NXA7GVST0Y12PGJUPKA55GIXCLVZ",
    "workerid": "A1AYVATMT88U1W",
    "probid": "615A",
    "subid": "48572780"
  },
  "lines": [
    {
      "line": 0,
      "text": "let INF_INT be a constant integer with INF_INT = 2147483647",
      "code": "const int INF_INT = 2147483647 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let INF_LL be a constant long integer with INF_LL = 9223372036854775807LL",
      "code": "const long long INF_LL = 9223372036854775807LL ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let INF_ULL be a unsigned constant long integer with INF_ULL = 18446744073709551615Ull",
      "code": "const unsigned long long INF_ULL = 18446744073709551615Ull ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let P be a constant long integer with P = 92540646808111039LL",
      "code": "const long long P = 92540646808111039LL ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let maxn , MOD be constant long integers with maxn = 1e5 + 10 , MOD = 1e9 + 7",
      "code": "const long long maxn = 1e5 + 10 , MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let Move [ 4 ] [ 2 ] be a 2d array of constant integers with elements as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1",
      "code": "const int Move [ 4 ] [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "Move_ [ 8 ] [ 2 ] be a 2d array of constant integers with values as - 1 , - 1 , - 1 , 0 , - 1 , 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , 1 , 0 , 1 , 1",
      "code": "const int Move_ [ 8 ] [ 2 ] = { - 1 , - 1 , - 1 , 0 , - 1 , 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , 1 , 0 , 1 , 1 } ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "inline integer read function",
      "code": "inline int read ( )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "let x , f be integers with x = 0 , f = 1",
      "code": "int x = 0 , f = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let ch be a getchar function of characters",
      "code": "char ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while ch is less than 0 or ch is greater than 9",
      "code": "while ( ch < ' 0 ' || ch > ' 9 ' )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ch is equal to - , f is equal to - 1",
      "code": "if ( ch == ' - ' ) f = - 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "ch is equal to getchar ( )",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "while ch > = 0 and ch < = 9",
      "code": "while ( ch >= ' 0 ' && ch <= ' 9 ' )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "the value of x = x * 10 + ch - 0",
      "code": "x = x * 10 + ch - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "ch is equal to getchar ( )",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return value x * f",
      "code": "return x * f ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "create a function init which returns void",
      "code": "void init ( ) { }",
      "indent": 0
    },
    {
      "line": 21,
      "text": "a = array of integers of length maxn",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 23,
      "text": "call the function init",
      "code": "init ( ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "let n , m be integers",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "let t be a integer",
      "code": "int t ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "while t is decremented by 1",
      "code": "while ( t -- )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "let x be a integer",
      "code": "int x ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "increment a [ x ] by 1",
      "code": "a [ x ] ++ ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "set boolean flg to false",
      "code": "bool flg = false ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "for i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 37,
      "text": "if not a [ i ]",
      "code": "if ( ! a [ i ] )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "set flg to true",
      "code": "flg = true ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "stop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "if flg is true",
      "code": "if ( flg )",
      "indent": 1
    },
    {
      "line": 43,
      "text": "print NO",
      "code": "puts ( \" NO \" ) ;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 45,
      "text": "print YES",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "void init ( )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "constant = 2147483647 ;"
      ],
      "err_line": 0,
      "err_msg": "‘constant’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const unsigned unsigned INF_ULL = 18446744073709551615Ull ;"
      ],
      "err_line": 2,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 0 , 0 , - 1 } ;"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ ] ;"
      ],
      "err_line": 6,
      "err_msg": "declaration of ‘Move_’ as multidimensional array must have bounds for all dimensions except the first"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int x , f = 1 , f = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int ch ( )"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘while’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( ch == \" - \" ) f = - 1 ;"
      ],
      "err_line": 11,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "a [ maxn ] ;"
      ],
      "err_line": 21,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "x ( ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 26,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "while ( t is 1 )"
      ],
      "err_line": 29,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "bool flg to false ;"
      ],
      "err_line": 35,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 36,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 39,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 46,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        20
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        20,
        37
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "if ( a [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        20,
        36
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        20,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        37
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( a [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        37,
        36
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        37,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( a [ i ] )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        36
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        36,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "void init ( )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        37
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "void init ( )",
        "if ( a [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        37,
        36
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "void init ( )",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        37,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "void init ( )",
        "if ( a [ i ] )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        36
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "void init ( )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        36,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "void init ( )",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "void init ( )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        37
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "if ( a [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        37,
        36
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        37,
        36,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        37,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "if ( a [ i ] )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        36
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        36,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        42
      ],
      "mod_code": [
        "const int Move [ 4 ] [ 2 ] = { as - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
        "if ( ! flg )"
      ],
      "err_line": 5,
      "err_msg": "‘as’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        20,
        37
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "if ( a [ i ] )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        20,
        37,
        36
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        20,
        37,
        42
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "if ( a [ i ] )",
        "if ( ! flg )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        20,
        36
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        20,
        36,
        42
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        20,
        42
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "void init ( )",
        "if ( ! flg )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        37
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( a [ i ] )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        37,
        36
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        37,
        36,
        42
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        37,
        42
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( a [ i ] )",
        "if ( ! flg )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        36
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        36,
        42
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        42
      ],
      "mod_code": [
        "const int Move_ [ 8 ] [ 2 ] [ 1 ] ;",
        "if ( ! flg )"
      ],
      "err_line": 6,
      "err_msg": "uninitialized const ‘Move_’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        37
      ],
      "mod_code": [
        "void init ( )",
        "if ( a [ i ] )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        37,
        36
      ],
      "mod_code": [
        "void init ( )",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        37,
        36,
        42
      ],
      "mod_code": [
        "void init ( )",
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        37,
        42
      ],
      "mod_code": [
        "void init ( )",
        "if ( a [ i ] )",
        "if ( ! flg )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        36
      ],
      "mod_code": [
        "void init ( )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        36,
        42
      ],
      "mod_code": [
        "void init ( )",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        42
      ],
      "mod_code": [
        "void init ( )",
        "if ( ! flg )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        37,
        36
      ],
      "mod_code": [
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 36,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        36,
        42
      ],
      "mod_code": [
        "if ( a [ i ] )",
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 36,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        42
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )",
        "if ( ! flg )"
      ],
      "err_line": 36,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}