{
  "meta": {
    "index": 151,
    "hitid": "3L7SUC0TTUO2EJ6LG92APPUFNJUM04",
    "workerid": "AIWEXPJAU66D9",
    "probid": "954A",
    "subid": "39328289"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string variables a and b",
      "code": "string a , b ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer variable n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer len = length of s",
      "code": "int len = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] = ' U ' & & s [ i + 1 ] = ' R '",
      "code": "if ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "push \" D \" to a",
      "code": "a . push_back ( ' D ' ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if s [ i ] = ' R ' & & s [ i + 1 ] = ' U '",
      "code": "else if ( s [ i ] == ' R ' && s [ i + 1 ] == ' U ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "push \" D \" to a",
      "code": "a . push_back ( ' D ' ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increase i by one",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "push s [ i ] to a",
      "code": "a . push_back ( s [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for integer i = len - 1 to 0 inclusive decrementing i",
      "code": "for ( int i = len - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if s [ i ] = ' U ' & & s [ i - 1 ] = ' R '",
      "code": "if ( s [ i ] == ' U ' && s [ i - 1 ] == ' R ' )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "push \" D \" to b",
      "code": "b . push_back ( ' D ' ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "decrease i",
      "code": "i -- ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else if s [ i ] = ' R ' & & s [ i - 1 ] = ' U '",
      "code": "else if ( s [ i ] == ' R ' && s [ i - 1 ] == ' U ' )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "push \" D \" to b",
      "code": "b . push_back ( ' D ' ) ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "decrease i by one",
      "code": "i -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 25,
      "text": "push s [ i ] to b",
      "code": "b . push_back ( s [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print min of length of a and length of b",
      "code": "cout << min ( a . size ( ) , b . size ( ) ) << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 19,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a , b ;"
      ],
      "err_line": 9,
      "err_msg": "request for member ‘push_back’ in ‘a’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( s [ i ] == ' R ' && s [ i + 1 ] = ' U ' )"
      ],
      "err_line": 11,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a . push ( s [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "b . push ( \" D \" ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "else if ( s [ i ] == ' R ' && s [ i - 1 ] = ' U ' )"
      ],
      "err_line": 21,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "b . push ( \" D \" ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "b . push ( s [ i ] ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        19
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        19,
        22
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        19,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        12,
        22
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        22,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        12,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        22
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        22,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        19,
        22,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        19,
        5,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        19,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        22,
        5,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        22,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        5,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "s >> s ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        22
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        22,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        19,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        22
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        22,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "a . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;"
      ],
      "err_line": 19,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        22,
        5
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        22,
        5,
        12
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "s >> s ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        22,
        12
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "b . push_back ( \" D \" ) ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        19,
        5
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        5,
        12
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "s >> s ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        22,
        5
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        5,
        12
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "s >> s ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        12
      ],
      "mod_code": [
        "b . push_back ( \" D \" ) ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "a . push ( \" D \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}