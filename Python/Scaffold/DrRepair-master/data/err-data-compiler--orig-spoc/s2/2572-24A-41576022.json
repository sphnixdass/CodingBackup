{
  "meta": {
    "index": 2572,
    "hitid": "3KTZHH2ONI9KW8BOBDFPI40X62R8M4",
    "workerid": "AIWEXPJAU66D9",
    "probid": "24A",
    "subid": "41576022"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer maxn with value 105",
      "code": "const int maxn = 105 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n be integer",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "u , v and c are arrays of integers with size maxn",
      "code": "int u [ maxn ] , v [ maxn ] , c [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integer ans = 0",
      "code": "int ans = 0 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "void function dfs with integer arguments s and index",
      "code": "void dfs ( int s , int index )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if index = i , continue the loop from the start",
      "code": "if ( index == i ) continue ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s = u [ i ]",
      "code": "if ( s == u [ i ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if v [ i ] = u [ 1 ] , return",
      "code": "if ( v [ i ] == u [ 1 ] ) return ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "invoke function dfs with arguments v [ i ] and i",
      "code": "dfs ( v [ i ] , i ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if s = v [ i ]",
      "code": "else if ( s == v [ i ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increase ans by c [ i ]",
      "code": "ans += c [ i ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if u [ i ] = u [ 1 ] return",
      "code": "if ( u [ i ] == u [ 1 ] ) return ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "invoke function dfs with arguments u [ i ] and i",
      "code": "dfs ( u [ i ] , i ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "declare integer sum = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "read u [ i ] , v [ i ] and c [ i ]",
      "code": "cin >> u [ i ] >> v [ i ] >> c [ i ] ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increase sum by c [ i ]",
      "code": "sum += c [ i ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "call function dfs with arguments v [ 1 ] and 1",
      "code": "dfs ( v [ 1 ] , 1 ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print min of ans and sum - ans and a new line",
      "code": "cout << min ( ans , sum - ans ) << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void dfs ( int s , void index )"
      ],
      "err_line": 4,
      "err_msg": "invalid use of type ‘void’ in parameter declaration"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ i ] == u [ i ] )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( v [ i ] == u [ 1 ] ) return [ 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected identifier before numeric constant"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "dfs ( v [ i ] [ i ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "dfs ( u [ i ] [ i ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "dfs ( v [ 1 ] [ 1 ] ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "n ;",
        "if ( s [ i ] == u [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        3
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "n ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        12
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "n ;",
        "if ( s [ i ] == u [ i ] )",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        3
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "n ;",
        "ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        3,
        12
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "n ;",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        12
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "n ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        12
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        2,
        7,
        12
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int u [ maxn ] , u [ maxn ] , c [ maxn ] ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int u [105]’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "n ;",
        "if ( s [ i ] == u [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        3
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "n ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        12
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "n ;",
        "if ( s [ i ] == u [ i ] )",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        3
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "n ;",
        "ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        3,
        12
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "n ;",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        1,
        12
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "n ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        12
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        2,
        7,
        12
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "if ( s [ i ] == u [ i ] )",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int u , v [ maxn ] , v [ maxn ] ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int v [105]’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "n ;",
        "if ( s [ i ] == u [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "n ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        3,
        12
      ],
      "mod_code": [
        "n ;",
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        12
      ],
      "mod_code": [
        "n ;",
        "if ( s [ i ] == u [ i ] )",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "n ;",
        "ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        12
      ],
      "mod_code": [
        "n ;",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "n ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        7,
        3,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == u [ i ] )",
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == u [ i ] )",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "if ( u [ i ] == u [ 1 ] ) return u ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ does not name a type"
    }
  ]
}