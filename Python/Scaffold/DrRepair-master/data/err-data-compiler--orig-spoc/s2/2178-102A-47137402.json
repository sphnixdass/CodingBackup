{
  "meta": {
    "index": 2178,
    "hitid": "336OE47KI2EECW1FN8WMJGMWG4MWV9",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "102A",
    "subid": "47137402"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , m , x , y , cnt , ans = int with ans = - 1 and v = int array of size 101 and rel = two dimensional int array of sizes 101 and 101",
      "code": "int n , m , v [ 101 ] , rel [ 101 ] [ 101 ] , x , y , cnt , ans = - 1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = int vector array of size 1000001",
      "code": "vector < int > a [ 1000001 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "in function find_ans taking int l , int r , int cnt , int cur_ans",
      "code": "void find_ans ( int l , int r , int cnt , int cur_ans )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if cnt > 3",
      "code": "if ( cnt > 3 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if rel [ l ] [ r ] is 1 and ( cur_ans < ans or ans is - 1 ) set ans to cur_ans",
      "code": "if ( rel [ l ] [ r ] == 1 && ( cur_ans < ans || ans == - 1 ) ) { ans = cur_ans ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "return",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to size of a [ r ] call find_ans of l , a [ r ] [ i ] , cnt + 1 , cur_ans + v [ a [ r ] [ i ] ]",
      "code": "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) { find_ans ( l , a [ r ] [ i ] , cnt + 1 , cur_ans + v [ a [ r ] [ i ] ] ) ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "read n then m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 1 to n inclusive read v [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> v [ i ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read x then y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if rel [ x ] [ y ] is 0",
      "code": "if ( rel [ x ] [ y ] == 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set rel [ x ] [ y ] and rel [ y ] [ x ] to 1",
      "code": "rel [ x ] [ y ] = rel [ y ] [ x ] = 1 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "append max of x , y to a [ min of x , y ]",
      "code": "a [ min ( x , y ) ] . push_back ( max ( x , y ) ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 1 to n inclusive call find_ans of i , i , 2 , v [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) find_ans ( i , i , 2 , v [ i ] ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] , ans = - 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < int > a ( 1000001 ) ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘a.std::vector<_Tp, _Alloc>::operator[]<int, std::allocator<int> >(((std::vector<int>::size_type)r))’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] . a [ r ] [ i ] , cnt + 1 , cur_ans + v [ a [ r ] [ i ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘class std::vector<int>’ has no member named ‘a’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "rel [ x ] [ y ] [ y ] = rel [ y ] [ x ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7,
        17
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7,
        17,
        11
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7,
        17,
        6
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7,
        17,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        7,
        11
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        6
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "while ( cin >> n >> m )",
        "n"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "while ( cin >> n >> m )",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        7,
        6
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        7,
        6,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        7,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        17,
        11
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        17,
        11,
        6
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )",
        "n"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        17,
        11,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        17,
        6
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        17,
        6,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        17,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        11,
        6
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "while ( cin >> n >> m )",
        "n"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        11,
        6,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "while ( cin >> n >> m )",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        11,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "while ( cin >> n >> m )",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int n , m , x [ 101 ] , rel [ 101 ] , y , cnt = - 1 , v [ 101 ] ;",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        17,
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        7,
        17,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        17,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        7,
        17,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "while ( cin >> n >> m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "while ( cin >> n >> m )",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        7,
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "while ( cin >> n >> m )",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ r ] . size ( ) ; i ++ ) a [ r ] [ i ] = find_ans + v [ r ] [ i ] , cnt + v [ a [ r ] [ i ] ] ;",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        11,
        6
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        11,
        6,
        2
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        17,
        11,
        2
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "while ( cin >> n >> m )",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        17,
        6
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        6,
        2
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "a [ min ( x , y ) , a [ min ( x , y ) ] ) ;",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        6,
        2
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "n",
        "void find_ans ( int l , int r , int cur_ans , int cur_ans )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int cur_ans’"
    }
  ]
}