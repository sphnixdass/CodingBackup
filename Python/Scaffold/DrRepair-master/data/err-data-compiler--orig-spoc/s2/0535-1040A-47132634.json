{
  "meta": {
    "index": 535,
    "hitid": "3NZ1E5QA6ZV5QZOPMQIDS4FCTFVB5U",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "1040A",
    "subid": "47132634"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers = i , n , a , b",
      "code": "int i , n , a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , a , b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set integer arr [ n ] , cost to 0",
      "code": "int arr [ n ] , cost = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set bool possible to true",
      "code": "bool possible = true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive read arr [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for = 0 to less than n do the following",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if i is greater than n - 1 - i then do break",
      "code": "if ( i > n - 1 - i ) break ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if i is equal to n - 1 - i then do",
      "code": "if ( i == n - 1 - i )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if arr [ i ] is 2 then do cost = cost + min ( a , b )",
      "code": "if ( arr [ i ] == 2 ) { cost += min ( a , b ) ; }",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if arr [ i ] = arr [ n - 1 - i ]",
      "code": "else if ( arr [ i ] == arr [ n - 1 - i ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if arr [ i ] is 2 then make cost = cost + 2 * min ( a , b",
      "code": "if ( arr [ i ] == 2 ) { cost += 2 * min ( a , b ) ; }",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if arr [ i ] is not equal to 2 and arr [ n - 1 - i ] is not equal to 2 then do following",
      "code": "if ( arr [ i ] != 2 && arr [ n - 1 - i ] != 2 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "set possible to false",
      "code": "possible = false ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if arr [ i ] is 0 or arr [ n - 1 - i ] then do following",
      "code": "if ( arr [ i ] == 0 || arr [ n - 1 - i ] == 0 )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "cost equals cost plus a",
      "code": "cost += a ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "else if arr [ i ] = 1 or arr [ n - 1 - i ] = 1 do the following",
      "code": "else if ( arr [ i ] == 1 || arr [ n - 1 - i ] == 1 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "cost equals cost plus b",
      "code": "cost += b ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "output cost if possible is true else output - 1",
      "code": "cout << ( possible ? cost : - 1 ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "equals += a ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "equals += b ;"
      ],
      "err_line": 20,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;"
      ],
      "err_line": 20,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        20,
        18
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "equals += a ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        20,
        18,
        3
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        20,
        18,
        16
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "equals += a ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        20,
        18,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "equals += a ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        20,
        3
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        20,
        3,
        16
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "int arr [ n ] , cost , 0 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        20,
        3,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "int arr [ n ] , cost , 0 ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        20,
        16
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        20,
        16,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        20,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += b ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += a ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        3
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        18,
        3,
        16
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        18,
        3,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        18,
        16
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += a ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        18,
        16,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += a ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        18,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "equals += a ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        3,
        16
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "int arr [ n ] , cost , 0 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        3,
        16,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "int arr [ n ] , cost , 0 ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        3,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "int arr [ n ] , cost , 0 ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17,
        16
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        16,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] == 0 || arr [ n - 1 - i ] )",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        18
      ],
      "mod_code": [
        "equals += b ;",
        "equals += a ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        18,
        3
      ],
      "mod_code": [
        "equals += b ;",
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        20,
        18,
        3,
        16
      ],
      "mod_code": [
        "equals += b ;",
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        20,
        18,
        3,
        24
      ],
      "mod_code": [
        "equals += b ;",
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        20,
        18,
        16
      ],
      "mod_code": [
        "equals += b ;",
        "equals += a ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        18,
        16,
        24
      ],
      "mod_code": [
        "equals += b ;",
        "equals += a ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        18,
        24
      ],
      "mod_code": [
        "equals += b ;",
        "equals += a ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        3
      ],
      "mod_code": [
        "equals += b ;",
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        20,
        3,
        16
      ],
      "mod_code": [
        "equals += b ;",
        "int arr [ n ] , cost , 0 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        20,
        3,
        16,
        24
      ],
      "mod_code": [
        "equals += b ;",
        "int arr [ n ] , cost , 0 ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        20,
        3,
        24
      ],
      "mod_code": [
        "equals += b ;",
        "int arr [ n ] , cost , 0 ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        20,
        16
      ],
      "mod_code": [
        "equals += b ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        16,
        24
      ],
      "mod_code": [
        "equals += b ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        24
      ],
      "mod_code": [
        "equals += b ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        18,
        3,
        16
      ],
      "mod_code": [
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        18,
        3,
        16,
        24
      ],
      "mod_code": [
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        18,
        3,
        24
      ],
      "mod_code": [
        "equals += a ;",
        "int arr [ n ] , cost , 0 ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        18,
        16
      ],
      "mod_code": [
        "equals += a ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        16,
        24
      ],
      "mod_code": [
        "equals += a ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        24
      ],
      "mod_code": [
        "equals += a ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘equals’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "int arr [ n ] , cost , 0 ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        16,
        24
      ],
      "mod_code": [
        "int arr [ n ] , cost , 0 ;",
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "int arr [ n ] , cost , 0 ;",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        16,
        24
      ],
      "mod_code": [
        "n",
        "puts ( possible ? cost : - 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}