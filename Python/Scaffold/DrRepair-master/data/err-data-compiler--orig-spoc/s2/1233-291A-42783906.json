{
  "meta": {
    "index": 1233,
    "hitid": "33J5JKFMK6SPGQ3ARPRA8WCR1JAQ30",
    "workerid": "A277IUJ2DY3GZQ",
    "probid": "291A",
    "subid": "42783906"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function swap that takes int pointers xp and yp",
      "code": "void swap ( int * xp , int * yp )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let temp an int , with temp = value of xp",
      "code": "int temp = * xp ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set value of xp to value of yp",
      "code": "* xp = * yp ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set value of yp to temp",
      "code": "* yp = temp ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "in function selectionSort that takes int array arr and int n",
      "code": "void selectionSort ( int arr [ ] , int n )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let i , j , and min_idx ints",
      "code": "int i , j , min_idx ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i from 0 to n - 1 exclusive",
      "code": "for ( i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set min_idx = i",
      "code": "min_idx = i ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j from i + 1 to n exclusive",
      "code": "for ( j = i + 1 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if arr [ j ] less than arr [ min_idx ] , set min_idx to j",
      "code": "if ( arr [ j ] < arr [ min_idx ] ) min_idx = j ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "apply swap to address of arr [ min_idx ] and address of arr [ i ]",
      "code": "swap ( & arr [ min_idx ] , & arr [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "let n an int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "let counter an int with value 0",
      "code": "int counter = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "let Ids an int array of length n",
      "code": "int Ids [ n ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read the first n values of Ids",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> Ids [ i ] ; }",
      "indent": 1
    },
    {
      "line": 20,
      "text": "apply selectionSort to Ids and n",
      "code": "selectionSort ( Ids , n ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i from 0 to n - 1 exclusive",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if Ids [ i ] is not 0 and Ids [ i ] same as Ids [ i + 2 ]",
      "code": "if ( Ids [ i ] != 0 && Ids [ i ] == Ids [ i + 2 ] )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set counter to - 1",
      "code": "counter = - 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "leave loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if Ids [ i ] is not 0 and Ids [ i ] same as Ids [ i + 1 ]",
      "code": "if ( Ids [ i ] != 0 && Ids [ i ] == Ids [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "increment counter",
      "code": "counter ++ ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print counter",
      "code": "cout << counter << endl ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void swap ( int xp , int yp )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "xp = yp ( yp ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "yp = temp ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "selectionSort = Ids + n ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void selectionSort(int*, int)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void swap ( int * xp , int yp )"
      ],
      "err_line": 2,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int temp = xp ( xp ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘xp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "xp = * yp ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "swap ( arr [ min_idx ] , & arr [ i ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(int&, int*)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "const int counter = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "assignment of read-only variable ‘counter’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int selectionSort = Ids + n ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "leave ;"
      ],
      "err_line": 24,
      "err_msg": "‘leave’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "yp = temp ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        20
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "selectionSort = Ids + n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        22
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        20
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "selectionSort = Ids + n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        20,
        22
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        20,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        22
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        22,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "xp = yp ( yp ) ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "yp = temp ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3,
        20
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "yp = temp ;",
        "selectionSort = Ids + n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3,
        20,
        22
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "yp = temp ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3,
        20,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "yp = temp ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3,
        22
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "selectionSort = Ids + n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        20,
        22
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        20,
        22,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        20,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        22,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        26
      ],
      "mod_code": [
        "void swap ( int xp , int yp )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "yp = temp ;"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        3,
        20
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "selectionSort = Ids + n ;"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        3,
        20,
        22
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        3,
        20,
        26
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        3,
        22
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        3,
        22,
        26
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        3,
        26
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "selectionSort = Ids + n ;"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        20,
        22
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        20,
        22,
        26
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        20,
        26
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        22,
        26
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        26
      ],
      "mod_code": [
        "xp = yp ( yp ) ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘yp’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "yp = temp ;",
        "selectionSort = Ids + n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        20,
        22
      ],
      "mod_code": [
        "yp = temp ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        20,
        22,
        26
      ],
      "mod_code": [
        "yp = temp ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        20,
        26
      ],
      "mod_code": [
        "yp = temp ;",
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        22,
        26
      ],
      "mod_code": [
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        26
      ],
      "mod_code": [
        "yp = temp ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void selectionSort(int*, int)’"
    },
    {
      "mod_line": [
        20,
        22,
        26
      ],
      "mod_code": [
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 2 ] )",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void selectionSort(int*, int)’"
    },
    {
      "mod_line": [
        20,
        26
      ],
      "mod_code": [
        "selectionSort = Ids + n ;",
        "if ( Ids [ i ] != 0 && Ids [ i ] == 0 && Ids [ i + 1 ] )"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void selectionSort(int*, int)’"
    }
  ]
}