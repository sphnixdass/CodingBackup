{
  "meta": {
    "index": 2314,
    "hitid": "3AA88CN98PX4LQ23350324WVBEEYKN",
    "workerid": "A1AYVATMT88U1W",
    "probid": "908A",
    "subid": "48426612"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let i , j , k , l , m , n be integers",
      "code": "int i , j , k , l , m , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "m is equal to 0",
      "code": "m = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] is equal to a or s [ i ] is equal to e or s [ i ] is equal to i or s [ i ] is equal to o or s [ i ] is equal to u",
      "code": "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' o ' || s [ i ] == ' u ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment m by 1",
      "code": "m ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if s [ i ] > = 0 and s [ i ] < = 9",
      "code": "else if ( s [ i ] >= ' 0 ' && s [ i ] <= ' 9 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if ( s [ i ] - 0 ) modulo 2 is not equal to 0 , increment m by 1",
      "code": "if ( ( s [ i ] - ' 0 ' ) % 2 != 0 ) m ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print m and newline",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' u ' )",
        "m = ' 0 ' ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' u ' )",
        "m = ' 0 ' ;",
        "s >> s ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' u ' )",
        "m = ' 0 ' ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' u ' )",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' u ' )",
        "s >> s ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' i ' || s [ i ] == ' u ' )",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "m = ' 0 ' ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "m = ' 0 ' ;",
        "s >> s ;",
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' u ' || s [ i ] == ' u ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        2
      ],
      "mod_code": [
        "m = ' 0 ' ;",
        "s >> s ;",
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' u ' || s [ i ] == ' u ' )",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "m = ' 0 ' ;",
        "s >> s ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "m = ' 0 ' ;",
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' u ' || s [ i ] == ' u ' )",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "m = ' 0 ' ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' u ' || s [ i ] == ' u ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' u ' || s [ i ] == ' u ' )",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' a ' || s [ i ] == ' e ' || s [ i ] == ' e ' || s [ i ] == ' u ' || s [ i ] == ' u ' )",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    }
  ]
}