{
  "meta": {
    "index": 1774,
    "hitid": "3SSN80MU8CIFLLCTY9E1JQPM98LXKH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "897A",
    "subid": "47289036"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create new string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n , m and s",
      "code": "cin >> n >> m >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer arrays l and r with size m",
      "code": "int l [ m ] , r [ m ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare char arrays c1 and c2 with m elements",
      "code": "char c1 [ m ] , c2 [ m ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read l [ i ] , r [ i ] , c1 [ i ] and c2 [ i ] in a loop , changing i from 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> r [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "start for loop from i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = l [ i ] - 1 to r [ i ] exclusive incrementing j",
      "code": "for ( int j = l [ i ] - 1 ; j < r [ i ] ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s [ j ] = c1 [ i ] , change s [ j ] to c2 [ i ]",
      "code": "if ( s [ j ] == c1 [ i ] ) { s [ j ] = c2 [ i ] ; }",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [m]’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char c1 [ m ] , c1 [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "for ( i = 0 ; i < m ; i ++ )",
        "char c1 [ m ] , c1 [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "for ( i = 0 ; i < m ; i ++ )",
        "char c1 [ m ] , c1 [ m ] ;",
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "for ( i = 0 ; i < m ; i ++ )",
        "char c1 [ m ] , c1 [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "for ( i = 0 ; i < m ; i ++ )",
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [m]’)"
    },
    {
      "mod_line": [
        6,
        7,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "for ( i = 0 ; i < m ; i ++ )",
        "int l [ m ] [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "for ( i = 0 ; i < m ; i ++ )",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "char c1 [ m ] , c1 [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        6,
        5,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "char c1 [ m ] , c1 [ m ] ;",
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        6,
        5,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "char c1 [ m ] , c1 [ m ] ;",
        "int l [ m ] [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "char c1 [ m ] , c1 [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [m]’)"
    },
    {
      "mod_line": [
        6,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "int l [ m ] [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> l [ i ] >> c1 [ i ] >> c1 [ i ] >> c2 [ i ] ; }",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "char c1 [ m ] , c1 [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "char c1 [ m ] , c1 [ m ] ;",
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        7,
        5,
        4,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "char c1 [ m ] , c1 [ m ] ;",
        "int l [ m ] [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        5,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "char c1 [ m ] , c1 [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [m]’)"
    },
    {
      "mod_line": [
        7,
        4,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "int l [ m ] [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "char c1 [ m ] , c1 [ m ] ;",
        "int l [ m ] [ m ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘char c1 [m]’"
    },
    {
      "mod_line": [
        5,
        4,
        3
      ],
      "mod_code": [
        "char c1 [ m ] , c1 [ m ] ;",
        "int l [ m ] [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "char c1 [ m ] , c1 [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int l [ m ] [ m ] ;",
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}