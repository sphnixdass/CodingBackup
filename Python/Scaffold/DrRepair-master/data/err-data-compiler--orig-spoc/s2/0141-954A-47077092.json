{
  "meta": {
    "index": 141,
    "hitid": "3B0MCRZMBROBN37IPA9SLUPI0WIPPB",
    "workerid": "A1APYLD4DUK33J",
    "probid": "954A",
    "subid": "47077092"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n - 1 exclusive",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create boolean c1 with c1 = s [ i ] is ' U ' and s [ i + 1 ] is ' R '",
      "code": "bool c1 = s [ i ] == ' U ' and s [ i + 1 ] == ' R ' ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "create boolean c2 with c2 = s [ i ] is ' R ' and s [ i + 1 ] is ' U '",
      "code": "bool c2 = s [ i ] == ' R ' and s [ i + 1 ] == ' U ' ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if c1 or c2",
      "code": "if ( c1 or c2 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set s [ i ] to ' D '",
      "code": "s [ i ] = ' D ' ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set s to substring of s from ( 0 to i + 1 ) + substring of s from ( i + 2 to end )",
      "code": "s = s . substr ( 0 , i + 1 ) + s . substr ( i + 2 ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print size of s print \" \\ n \"",
      "code": "cout << s . size ( ) << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool c1 = s [ i ] = s [ i ] , s [ i + 1 ] == ' R ' ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "bool c2 = s [ i ] = s [ i ] , s [ i + 1 ] == ' U ' ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator+’ (operand types are ‘int’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << s of s . size ( ) << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘of’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        8,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        8,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        8,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( s [ i ] == ' D ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( s [ i ] == ' D ' )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( s [ i ] == ' D ' )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( c1 == c2 )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        9,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        9,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "if ( c1 == c2 )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( c1 == c2 )",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( c1 == c2 )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' D ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        9,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' D ' )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' D ' )",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' D ' )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator+’ (operand types are ‘int’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        10,
        8,
        9
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator+’ (operand types are ‘int’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        10,
        8,
        9,
        3
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        9,
        5
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        3
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        3,
        5
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        5
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( c1 == c2 )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( s [ i ] == ' D ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator+’ (operand types are ‘int’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        10,
        9,
        3
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( s [ i ] == ' D ' )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9,
        3,
        5
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( s [ i ] == ' D ' )",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9,
        5
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "if ( s [ i ] == ' D ' )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        5
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "s = s . substr ( 0 , ( 0 + 1 ) + s . substr ( i + 2 ) ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        3
      ],
      "mod_code": [
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        3,
        5
      ],
      "mod_code": [
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        5
      ],
      "mod_code": [
        "if ( c1 == c2 )",
        "if ( s [ i ] == ' D ' )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( c1 == c2 )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3,
        5
      ],
      "mod_code": [
        "if ( c1 == c2 )",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "if ( c1 == c2 )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' D ' )",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == ' D ' )",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == ' D ' )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    }
  ]
}