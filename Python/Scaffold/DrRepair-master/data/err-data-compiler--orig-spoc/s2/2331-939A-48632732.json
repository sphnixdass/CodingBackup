{
  "meta": {
    "index": 2331,
    "hitid": "33K3E8REWWPVQKASPKHYTLGVE8OX8V",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "939A",
    "subid": "48632732"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int , flag = 0",
      "code": "int n , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x = array of n + 1 int",
      "code": "int x [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive read x [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> x [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if x [ x [ x [ i ] ] ] is i",
      "code": "if ( x [ x [ x [ i ] ] ] == i )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment flag",
      "code": "flag ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if flag is 0",
      "code": "if ( flag == 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        3
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        13
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        13
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "int x [ n ] [ n + 1 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "int x [ n ] [ n + 1 ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        1,
        13
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        1,
        13,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        1,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int n , flag = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        2,
        3,
        13
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        2,
        3,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        2,
        13
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        2,
        13,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n = getchar ( ) ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        3,
        13
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int x [ n ] [ n + 1 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        3,
        13,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int x [ n ] [ n + 1 ] ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        3,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "int x [ n ] [ n + 1 ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int [(n + 1)][int [(n + 1)]]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        13,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( x [ x [ x [ x ] ] ] == i )",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        13
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        5
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        1,
        2,
        13
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        13,
        5
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        1,
        3,
        13
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "int x [ n ] [ n + 1 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        5
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "int x [ n ] [ n + 1 ] ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "int x [ n ] [ n + 1 ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        5
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , flag = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        2,
        3,
        13
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        2,
        3,
        13,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int x [ n ] [ n + 1 ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        13,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int x [ n ] [ n + 1 ] ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        3,
        13,
        5
      ],
      "mod_code": [
        "int x [ n ] [ n + 1 ] ;",
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int x [ n ] [ n + 1 ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(n + 1)]’)"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "n",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}