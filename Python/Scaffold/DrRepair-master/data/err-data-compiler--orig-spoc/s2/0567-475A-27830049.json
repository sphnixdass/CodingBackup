{
  "meta": {
    "index": 567,
    "hitid": "3R6RZGK0XF6I11WF29EA4D7CQPMYVZ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "475A",
    "subid": "27830049"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create array a with size 6",
      "code": "string a [ 6 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers n , k with k = 0",
      "code": "int n , k = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 6 exclusive , set a [ i ] to \" ttttttttttttttttttttttttttt \"",
      "code": "for ( int i = 0 ; i < 6 ; i ++ ) { a [ i ] = \" ttttttttttttttttttttttttttt \" ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set a [ 0 ] [ 0 ] to ' + '",
      "code": "a [ 0 ] [ 0 ] = ' + ' ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set a [ 0 ] [ 25 ] to ' + '",
      "code": "a [ 0 ] [ 25 ] = ' + ' ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set a [ 5 ] [ 0 ] to ' + '",
      "code": "a [ 5 ] [ 0 ] = ' + ' ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set a [ 5 ] [ 25 ] to ' + '",
      "code": "a [ 5 ] [ 25 ] = ' + ' ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set a [ 1 ] [ 26 ] to ' + '",
      "code": "a [ 1 ] [ 26 ] = ' ) ' ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set a [ 4 ] [ 26 ] to ' + '",
      "code": "a [ 4 ] [ 26 ] = ' ) ' ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to 25 exclusive",
      "code": "for ( int i = 1 ; i < 25 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set a [ 0 ] [ i ] to ' - '",
      "code": "a [ 0 ] [ i ] = ' - ' ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set a [ 5 ] [ i ] to ' - '",
      "code": "a [ 5 ] [ i ] = ' - ' ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if i is greater than or equal to 2 and ( i % 2 is 0 )",
      "code": "if ( i >= 2 && ( i % 2 == 0 ) )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set a [ 1 ] [ i ] to ' . '",
      "code": "a [ 1 ] [ i ] = ' . ' ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set a [ 2 ] [ i ] to ' . '",
      "code": "a [ 2 ] [ i ] = ' . ' ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set a [ 4 ] [ i ] to ' . '",
      "code": "a [ 4 ] [ i ] = ' . ' ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if i is 24 , set a [ 1 ] [ i ] to ' D '",
      "code": "if ( i == 24 ) a [ 1 ] [ i ] = ' D ' ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if i is greater than or equal to 2 , set a [ 3 ] [ i ] to ' . '",
      "code": "if ( i >= 2 ) { a [ 3 ] [ i ] = ' . ' ; }",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = 1 to 5 exclusive",
      "code": "for ( int i = 1 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set a [ i ] [ 0 ] to ' | '",
      "code": "a [ i ] [ 0 ] = ' | ' ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set a [ i ] [ 25 ] to ' | '",
      "code": "a [ i ] [ 25 ] = ' | ' ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if i is not 3 , set a [ i ] [ 23 ] to ' | '",
      "code": "if ( i != 3 ) a [ i ] [ 23 ] = ' | ' ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "fo ri = 1 to 23 exclusive , incrementing i by 2",
      "code": "for ( int i = 1 ; i < 23 ; i += 2 )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for j = 1 to 5 exclusive",
      "code": "for ( int j = 1 ; j < 5 ; j ++ )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if a [ j ] [ i ] to ' t '",
      "code": "if ( a [ j ] [ i ] == ' t ' )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if k is not n",
      "code": "if ( k != n )",
      "indent": 4
    },
    {
      "line": 31,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 5
    },
    {
      "line": 32,
      "text": "set a [ j ] [ i ] to ' O '",
      "code": "a [ j ] [ i ] = ' O ' ;",
      "indent": 5
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 34,
      "text": "set a [ j ] [ i ] to ' # '",
      "code": "a [ j ] [ i ] = ' # ' ;",
      "indent": 5
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "for j = 0 to 26 exclusive",
      "code": "for ( int j = 0 ; j < 26 ; j ++ )",
      "indent": 2
    },
    {
      "line": 40,
      "text": "if i is 1 or i is 4",
      "code": "if ( i == 1 || i == 4 )",
      "indent": 3
    },
    {
      "line": 41,
      "text": "print a [ i ]",
      "code": "cout << a [ i ] ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 44,
      "text": "print a [ i ] [ j ]",
      "code": "cout << a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 6 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 6 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int a [ 0 ] [ 25 ] = ' + ' ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘int a [0][25]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int a [ 5 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘int a [5][0]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int a [ 5 ] [ 25 ] = ' + ' ;"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a [5][25]’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int a [ 4 ] [ 26 ] = ' + ' ;"
      ],
      "err_line": 10,
      "err_msg": "conflicting declaration ‘int a [4][26]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i < 25 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a [ 1 ] [ i ] = { ' . ' ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "char a [ 2 ] [ i ] = ' . ' ;"
      ],
      "err_line": 16,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "char a [ 4 ] [ i ] = ' . ' ;"
      ],
      "err_line": 17,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = 1 ; i < 5 ; i ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "C [ i ] [ 25 ] = ' | ' ;"
      ],
      "err_line": 24,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( j = 1 ; j < 5 ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( j = 0 ; j < 26 ; j ++ )"
      ],
      "err_line": 39,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "a [ 4 ] [ 26 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        41
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        2
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        41
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        41,
        2
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int n = 0 , k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        41,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        2
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        2,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 4 ] [ 26 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        41
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        41,
        2
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int n = 0 , k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        41,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        41
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "cout << a [ i ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        41,
        2
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "cout << a [ i ] << endl ;",
        "int n = 0 , k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        41,
        2,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "cout << a [ i ] << endl ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        41,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "cout << a [ i ] << endl ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "int n = 0 , k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a [ 6 ] ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        41,
        5
      ],
      "mod_code": [
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        9,
        10,
        2,
        5
      ],
      "mod_code": [
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        9,
        10,
        5
      ],
      "mod_code": [
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        9,
        41,
        2,
        5
      ],
      "mod_code": [
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        9,
        41,
        5
      ],
      "mod_code": [
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        9,
        2,
        5
      ],
      "mod_code": [
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "a [ 1 ] [ 26 ] = ' + ' ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        10,
        41,
        2,
        5
      ],
      "mod_code": [
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        10,
        41,
        5
      ],
      "mod_code": [
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "cout << a [ i ] << endl ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        10,
        2,
        5
      ],
      "mod_code": [
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "a [ 4 ] [ 26 ] = ' + ' ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        41,
        2,
        5
      ],
      "mod_code": [
        "cout << a [ i ] << endl ;",
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        41,
        5
      ],
      "mod_code": [
        "cout << a [ i ] << endl ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int n = 0 , k ;",
        "int a [ 0 ] [ 0 ] = ' + ' ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [0][0]’"
    }
  ]
}