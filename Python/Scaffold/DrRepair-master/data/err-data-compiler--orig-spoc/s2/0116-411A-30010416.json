{
  "meta": {
    "index": 116,
    "hitid": "374UMBUHN5JQL6RL1MW664R8R3MTCF",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "411A",
    "subid": "30010416"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "i , shuzi , da , xiao , p = char with shuzi = 0 and da = 0 and xiao = 0 and p = 1 and mima = char array of size 10000",
      "code": "char mima [ 10000 ] , i , shuzi = 0 , da = 0 , xiao = 0 , p = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read mima",
      "code": "cin >> mima ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if strlen of mima < 5 set p to 0",
      "code": "if ( strlen ( mima ) < 5 ) p = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to strlen of mima",
      "code": "for ( i = 0 ; i < strlen ( mima ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if mima [ i ] > = ' 0 ' and mima [ i ] < = ' 9 ' increment shuzi",
      "code": "if ( mima [ i ] >= ' 0 ' && mima [ i ] <= ' 9 ' ) shuzi ++ ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if mima [ i ] > = ' A ' and mima [ i ] < = ' Z ' increment da",
      "code": "if ( mima [ i ] >= ' A ' && mima [ i ] <= ' Z ' ) da ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if mima [ i ] > = ' a ' and mima [ i ] < = ' z ' increment xiao",
      "code": "if ( mima [ i ] >= ' a ' && mima [ i ] <= ' z ' ) xiao ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if shuzi and da and xiao are all 0 set p to 0",
      "code": "if ( shuzi == 0 || da == 0 || xiao == 0 ) p = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if p",
      "code": "if ( p )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" Correct \"",
      "code": "cout << \" Correct \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" Too weak \"",
      "code": "cout << \" Too weak \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , mima , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        9,
        11
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        13
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        2
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" Correct \" ;",
        "mima >> mima ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        9,
        13
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        9,
        13,
        2
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        9,
        2
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "mima >> mima ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        2
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        11,
        2
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" Correct \" ;",
        "mima >> mima ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        11,
        2,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" Correct \" ;",
        "mima >> mima ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        11,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" Correct \" ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        13,
        2
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        13,
        2,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        13,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "cout << \" 2/3 \" ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "mima >> mima ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "mima >> mima ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char i , shuzi [ 10000 ] , i , da = 0 , xiao = 0 , mima = 0 , p , p ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char i’"
    },
    {
      "mod_line": [
        9,
        11,
        13,
        2
      ],
      "mod_code": [
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        9,
        11,
        2
      ],
      "mod_code": [
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" Correct \" ;",
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        9,
        13,
        2
      ],
      "mod_code": [
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( ! shuzi && da == 0 && xiao == 0 ) p = 0 ;",
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        13,
        2
      ],
      "mod_code": [
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        13,
        2,
        9
      ],
      "mod_code": [
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "mima >> mima ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << \" Correct \" ;",
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        2,
        9
      ],
      "mod_code": [
        "cout << \" Correct \" ;",
        "mima >> mima ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "mima >> mima ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        2,
        9
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "mima >> mima ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "mima >> mima ;",
        "if ( ! shuzi && da == 0 && da == 0 ) p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10000]’ and ‘char [10000]’ to binary ‘operator>>’"
    }
  ]
}