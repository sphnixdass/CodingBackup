{
  "meta": {
    "index": 1210,
    "hitid": "3AXFSPQOYQS3AFFQGU83C4P2QEQFJA",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "629A",
    "subid": "48904723"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ans = 0 = long long int",
      "code": "long long int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "v = vector of string",
      "code": "vector < string > v ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "i , j = int",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "push back s into v",
      "code": "v . push_back ( s ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "count = 0 = int",
      "code": "int count = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if v [ i ] [ j ] = ' C ' then increment count",
      "code": "if ( v [ i ] [ j ] == ' C ' ) count ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if count is non zero positive then increment ans by ( count * ( count - 1 ) ) / 2",
      "code": "if ( count > 0 ) ans += ( count * ( count - 1 ) ) / 2 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "count = 0 = int",
      "code": "int count = 0 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if v [ j ] [ i ] = ' C ' then increment count",
      "code": "if ( v [ j ] [ i ] == ' C ' ) count ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if count is non zero positive then increment ans by ( count * ( count - 1 ) ) / 2",
      "code": "if ( count > 0 ) ans += ( count * ( count - 1 ) ) / 2 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "ans = long long int > 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < char > v ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::vector<char>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "v . push ( s ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<std::__cxx11::basic_string<char> >’ has no member named ‘push’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        2
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        2,
        8
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        2,
        15
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        2,
        1
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        8
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        8,
        15
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        8,
        1
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "s >> s ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        15
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        15,
        1
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        1
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        8
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        15
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        1
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        15
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        15,
        1
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "string S ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        15
      ],
      "mod_code": [
        "string S ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        1
      ],
      "mod_code": [
        "string S ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        1
      ],
      "mod_code": [
        "string S ;",
        "s >> s ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15,
        1
      ],
      "mod_code": [
        "string S ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "string S ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        2
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        21,
        2,
        8
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        2,
        8,
        15
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        2,
        8,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        2,
        15
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        21,
        2,
        15,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        21,
        2,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "n = getchar ( ) ;",
        "bool n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        21,
        8
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        15
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        15,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "s >> s ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        15
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        21,
        15,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        21,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        15
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        2,
        15,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        15,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "if ( count > 0 && count * ( count - 1 ) ) / 2 ;",
        "bool n ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘/’ token"
    }
  ]
}