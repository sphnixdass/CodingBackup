{
  "meta": {
    "index": 2751,
    "hitid": "3QI9WAYOGQ50QP552VEDAZ3CTYV6S9",
    "workerid": "A1APYLD4DUK33J",
    "probid": "474A",
    "subid": "48358716"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare ss as string = \" qwertyuiopasdfghjkl ; zxcvbnm , . / \"",
      "code": "string ss = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string p",
      "code": "string p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read p",
      "code": "cin >> p ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer x =",
      "code": "int x = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if p [ 0 ] is ' R ' , let x be - 1",
      "code": "if ( p [ 0 ] == ' R ' ) { x = - 1 ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 0 to length of ss exclusive",
      "code": "for ( int j = 0 ; j < ss . length ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if ss [ j ] is [ i ] , print ss [ j + x ]",
      "code": "if ( ss [ j ] == s [ i ] ) cout << ss [ j + x ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "p >> p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int x = endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot resolve overloaded function ‘endl’ based on conversion to type ‘int’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "int x = int ( ) ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        2
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "int x = int ( ) ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "int x = int ( ) ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        2
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "int x = int ( ) ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        6,
        2
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "int x = int ( ) ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        6
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "string * p ;",
        "int x = endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "int x = endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot resolve overloaded function ‘endl’ based on conversion to type ‘int’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        6
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "string * p ;",
        "int x = endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "int x = endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot resolve overloaded function ‘endl’ based on conversion to type ‘int’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "string * p ;",
        "int x = endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string ss = \" qwertyuiopasdfghjkl \" ;",
        "int x = endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot resolve overloaded function ‘endl’ based on conversion to type ‘int’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "int x = int ( ) ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "int x = int ( ) ;",
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "int x = int ( ) ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "int x = int ( ) ;",
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "int x = int ( ) ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "string * p ;",
        "int x = endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "if ( ss [ j ] == i ] ) cout << ss [ j + x ] ;",
        "int x = endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot resolve overloaded function ‘endl’ based on conversion to type ‘int’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "string * p ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "string * p ;",
        "int x = endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "if ( ss [ j ] == i [ i ] ) cout << ss [ j + x ] ;",
        "int x = endl ;"
      ],
      "err_line": 6,
      "err_msg": "cannot resolve overloaded function ‘endl’ based on conversion to type ‘int’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "string * p ;",
        "int x = endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    }
  ]
}