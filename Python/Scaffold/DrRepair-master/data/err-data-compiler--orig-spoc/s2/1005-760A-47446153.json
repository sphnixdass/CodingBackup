{
  "meta": {
    "index": 1005,
    "hitid": "37MQ8Z1JQEQ94AYDEZUZ28A1UEVY24",
    "workerid": "AIWEXPJAU66D9",
    "probid": "760A",
    "subid": "47446153"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long N with value 1e9 + 3",
      "code": "const long long N = 1e9 + 3 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define new constant long long MN = 1e9",
      "code": "const long long MN = 1e9 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare new long long variables n and m",
      "code": "long long n , m ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create an array of long long called ar with size 12 + 1 and elements 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31",
      "code": "long long ar [ 12 + 1 ] = { 0 , 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print ( ( m - 1 ) + ar [ n ] - 1 ) / 7 + 1",
      "code": "cout << ( ( m - 1 ) + ar [ n ] - 1 ) / 7 + 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long ar [ 12 + 1 ] [ 12 + 1 ] , 0 , 31 , 28 , 31 , 31 , 31 , 31 , 31 , 31 , 31 , 31 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "long long ar [ 12 + 1 ] ;",
        "cout << ( ( m - 1 ) + ar [ n ] - 1 ) / 7 + 1 << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "long long ar [ 12 + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "cout << ( ( m - 1 ) + ar [ n ] - 1 ) / 7 + 1 << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        7,
        3
      ],
      "mod_code": [
        "cout << ( ( m - 1 ) + ar [ n ] - 1 ) / 7 + 1 << endl ;",
        "<< \" \\n \" ;",
        "long long ar [ 12 + 1 ] [ 12 + 1 ] , 0 , 31 , 28 , 31 , 31 , 31 , 31 , 31 , 31 , 31 , 31 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "cout << ( ( m - 1 ) + ar [ n ] - 1 ) / 7 + 1 << endl ;",
        "long long ar [ 12 + 1 ] [ 12 + 1 ] , 0 , 31 , 28 , 31 , 31 , 31 , 31 , 31 , 31 , 31 , 31 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "long long ar [ 12 + 1 ] [ 12 + 1 ] , 0 , 31 , 28 , 31 , 31 , 31 , 31 , 31 , 31 , 31 , 31 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    }
  ]
}