{
  "meta": {
    "index": 534,
    "hitid": "3IVEC1GSLPTCK0LI9VTIN2L8P4ZJ15",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1040A",
    "subid": "48082692"
  },
  "lines": [
    {
      "line": 0,
      "text": "create ints n , a and b",
      "code": "int n , a , b ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer array c with size 23",
      "code": "int c [ 23 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n , a and b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop i from 1 to n inclusive , reading c [ i ]",
      "code": "for ( int i = ( int ) 1 ; i <= ( int ) n ; i ++ ) cin >> c [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer cost = 0",
      "code": "int cost = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to n / 2 inclusive",
      "code": "for ( int i = ( int ) 1 ; i <= ( int ) n / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if c [ i ] is c [ n + 1 - i ]",
      "code": "if ( c [ i ] == c [ n + 1 - i ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if c [ i ] is 1 or c [ i ] is 0",
      "code": "if ( c [ i ] == 1 || c [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "skip the rest of the loop",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else if c [ i ] = 2",
      "code": "else if ( c [ i ] == 2 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increase cost by 2 * min ( a , b )",
      "code": "cost += 2 * min ( a , b ) ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if c [ i ] = 1 and c [ n + 1 - i ] = 0",
      "code": "if ( c [ i ] == 1 && c [ n + 1 - i ] == 0 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else if c [ i ] = 0 & & c [ n + 1 - i ] = 1",
      "code": "else if ( c [ i ] == 0 && c [ n + 1 - i ] == 1 )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else if c [ i ] = 0 & & c [ n + 1 - i ] = 2",
      "code": "else if ( c [ i ] == 0 && c [ n + 1 - i ] == 2 )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "add a to cost",
      "code": "cost += a ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else if c [ i ] = 1 & & c [ n + 1 - i ] = 2",
      "code": "else if ( c [ i ] == 1 && c [ n + 1 - i ] == 2 )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "add b to cost",
      "code": "cost += b ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else if c [ i ] = 2 & & c [ n + 1 - i ] = 0",
      "code": "else if ( c [ i ] == 2 && c [ n + 1 - i ] == 0 )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "add a to cost",
      "code": "cost += a ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "else if c [ i ] = 2 & & c [ n + 1 - i ] = 1",
      "code": "else if ( c [ i ] == 2 && c [ n + 1 - i ] == 1 )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "add b to cost",
      "code": "cost += b ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if n & 1 is true",
      "code": "if ( n & 1 )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if c [ n / 2 + 1 ] = 2 , increase cost by min of a and b",
      "code": "if ( c [ n / 2 + 1 ] == 2 ) { cost += min ( a , b ) ; }",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print cost and \" \\ n \"",
      "code": "cout << cost << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , a + b ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "c [ 23 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ does not name a type"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int n = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘cost’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n / 2 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( c [ i ] == c [ n + 1 - i )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "rest ;"
      ],
      "err_line": 9,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cost . push_back ( a ) ;"
      ],
      "err_line": 21,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cost . push_back ( b ) ;"
      ],
      "err_line": 23,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "cost . push_back ( a ) ;"
      ],
      "err_line": 25,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "cost . push_back ( b ) ;"
      ],
      "err_line": 27,
      "err_msg": "request for member ‘push_back’ in ‘cost’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;"
      ],
      "err_line": 34,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        34,
        0
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        34,
        0,
        1
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "c [ 23 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        34,
        0,
        1,
        9
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "c [ 23 ] ;",
        "rest ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        34,
        0,
        1,
        15
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        0,
        1,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        0,
        9
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "rest ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        34,
        0,
        9,
        15
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        0,
        9,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        0,
        15
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        0,
        15,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        0,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "int n , a + b ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        1
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "c [ 23 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ does not name a type"
    },
    {
      "mod_line": [
        34,
        1,
        9
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "c [ 23 ] ;",
        "rest ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ does not name a type"
    },
    {
      "mod_line": [
        34,
        1,
        9,
        15
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "c [ 23 ] ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        1,
        9,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "c [ 23 ] ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        1,
        15
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        1,
        15,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        1,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        9
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "rest ;"
      ],
      "err_line": 9,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        34,
        9,
        15
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        9,
        15,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "rest ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        9,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        15
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        15,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        34,
        18
      ],
      "mod_code": [
        "cout << ( cost << \" \\n \" ) ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int n , a + b ;",
        "c [ 23 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "int n , a + b ;",
        "c [ 23 ] ;",
        "rest ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        15
      ],
      "mod_code": [
        "int n , a + b ;",
        "c [ 23 ] ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        18
      ],
      "mod_code": [
        "int n , a + b ;",
        "c [ 23 ] ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        1,
        15
      ],
      "mod_code": [
        "int n , a + b ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        1,
        15,
        18
      ],
      "mod_code": [
        "int n , a + b ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        1,
        18
      ],
      "mod_code": [
        "int n , a + b ;",
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int n , a + b ;",
        "rest ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        9,
        15
      ],
      "mod_code": [
        "int n , a + b ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        9,
        15,
        18
      ],
      "mod_code": [
        "int n , a + b ;",
        "rest ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        9,
        18
      ],
      "mod_code": [
        "int n , a + b ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        15,
        18
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "c [ 23 ] ;",
        "rest ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ does not name a type"
    },
    {
      "mod_line": [
        1,
        9,
        15
      ],
      "mod_code": [
        "c [ 23 ] ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        9,
        15,
        18
      ],
      "mod_code": [
        "c [ 23 ] ;",
        "rest ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        9,
        18
      ],
      "mod_code": [
        "c [ 23 ] ;",
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        15,
        18
      ],
      "mod_code": [
        "c [ 23 ] ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "c [ 23 ] ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        15,
        18
      ],
      "mod_code": [
        "rest ;",
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "rest ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 18,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "cout << \" \\ \" ;",
        "cout << \" \\ \" ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    }
  ]
}