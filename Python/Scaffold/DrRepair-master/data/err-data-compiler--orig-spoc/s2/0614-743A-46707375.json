{
  "meta": {
    "index": 614,
    "hitid": "3BA7SXOG1JKBTOOGGLB643U7DR18R8",
    "workerid": "A1APYLD4DUK33J",
    "probid": "743A",
    "subid": "46707375"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer array num with size 1000000 with num = { 0 }",
      "code": "int num [ 1000000 ] = { 0 } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare fx with character array a as argument , returning void",
      "code": "void fx ( char a [ ] ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integers n , a , b",
      "code": "int n , a , b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create character array z with size 1000000",
      "code": "char z [ 1000000 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n read a read b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read z",
      "code": "cin >> z ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if z [ a - 1 ] is z [ b - 1 ]",
      "code": "if ( z [ a - 1 ] == z [ b - 1 ] )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" 0 \" print newline",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" 1 \" print newline",
      "code": "cout << \" 1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void fx ( char a [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void fx ( char a [ ) ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char a [ 1000000 ] ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "z >> z ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘char [1000000]’ and ‘char [1000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        9
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        4
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "n",
        "char a [ 1000000 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        10
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "n",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "n",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "char a [ 1000000 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        4,
        10
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        4,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "char a [ 1000000 ] ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "z >> z ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        9,
        4
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n",
        "char a [ 1000000 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        9,
        4,
        10
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        9,
        4,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n",
        "char a [ 1000000 ] ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        9,
        10
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        9,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "char a [ 1000000 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        10,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "char a [ 1000000 ] ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        10,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "void fx ( char a [ ] )",
        "n , a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "z >> z ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘char [1000000]’ and ‘char [1000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        9,
        4
      ],
      "mod_code": [
        "z >> z ;",
        "n",
        "char a [ 1000000 ] ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        6,
        9,
        4,
        10
      ],
      "mod_code": [
        "z >> z ;",
        "n",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        6,
        9,
        4,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "n",
        "char a [ 1000000 ] ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "z >> z ;",
        "n",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘char [1000000]’ and ‘char [1000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "n",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "n",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "z >> z ;",
        "char a [ 1000000 ] ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        6,
        4,
        10
      ],
      "mod_code": [
        "z >> z ;",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        6,
        4,
        10,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "char a [ 1000000 ] ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "z >> z ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘char [1000000]’ and ‘char [1000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        10,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "n",
        "char a [ 1000000 ] ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        9,
        4,
        10
      ],
      "mod_code": [
        "n",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        9,
        4,
        10,
        3
      ],
      "mod_code": [
        "n",
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4,
        3
      ],
      "mod_code": [
        "n",
        "char a [ 1000000 ] ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "n",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        10,
        3
      ],
      "mod_code": [
        "n",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "n",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char a [1000000]’"
    },
    {
      "mod_line": [
        4,
        10,
        3
      ],
      "mod_code": [
        "char a [ 1000000 ] ;",
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "char a [ 1000000 ] ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "<< \" 1 \" << endl ;",
        "n , a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}