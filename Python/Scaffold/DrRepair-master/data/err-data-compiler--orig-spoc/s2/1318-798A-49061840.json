{
  "meta": {
    "index": 1318,
    "hitid": "3E9VAUV7BW8Y9DTHRENE8QTZ62JYA7",
    "workerid": "A1APYLD4DUK33J",
    "probid": "798A",
    "subid": "49061840"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare inline check with string s as argument , returning integer",
      "code": "inline int check ( string s )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare string ss = s",
      "code": "string ss = s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "reverse sort from beginning of s to end of s",
      "code": "reverse ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return s is ss",
      "code": "return s == ss ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if result of run check ( s ) is true",
      "code": "if ( check ( s ) )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if size of s % 2 is 0",
      "code": "if ( s . size ( ) % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "declare integer len = size of s",
      "code": "int len = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if len % 2 is 0",
      "code": "if ( len % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "let len be len / 2 - 1",
      "code": "len = len / 2 - 1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "let len be len / 2",
      "code": "len = len / 2 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for i = 0 to len inclusive",
      "code": "for ( int i = 0 ; i <= len ; ++ i )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if s [ i ] is not s [ size of s - 1 - i ]",
      "code": "if ( s [ i ] != s [ s . size ( ) - 1 - i ] )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "let s [ i ] be s [ size of s - 1 - i ]",
      "code": "s [ i ] = s [ s . size ( ) - 1 - i ] ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if result of run check ( s ) is true",
      "code": "if ( check ( s ) )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 27,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘s’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "inline check ( string s )"
      ],
      "err_line": 1,
      "err_msg": "ISO C++ forbids declaration of ‘check’ with no type [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string ss = ' s ' ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "reverse ( s . sort ( ) , s . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘sort’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int len = strlen ( s ) ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;"
      ],
      "err_line": 22,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘int [i]’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 26,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        7
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        7,
        21
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        7,
        21,
        18
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        7,
        21,
        4
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        7,
        21,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        7,
        18
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        7,
        18,
        4
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "n",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        7,
        18,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        7,
        4
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        7,
        4,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        7,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "s >> s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        21
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        21,
        18
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        21,
        18,
        4
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        21,
        18,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        21,
        4
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        21,
        4,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        21,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "cout << \" NO \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        18
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        18,
        4
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "n",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        18,
        4,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "n",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        18,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        4
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        4,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        22,
        27
      ],
      "mod_code": [
        "int s [ i ] = s [ s . size ( ) - 1 - i ] ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 22,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘int [i]’"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        21,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        21,
        18,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7,
        21,
        18,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        21,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7,
        21,
        4,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7,
        21,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        18,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "n",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7,
        18,
        4,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "n",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7,
        18,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7,
        4,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        7,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        18
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        18,
        4
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        21,
        18,
        4,
        27
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        21,
        18,
        27
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        4
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        21,
        4,
        27
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        21,
        27
      ],
      "mod_code": [
        "if ( s [ i ] != s [ s . size ( ) - 1 - i )",
        "cout << \" NO \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "n",
        "return s ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        18,
        4,
        27
      ],
      "mod_code": [
        "n",
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    },
    {
      "mod_line": [
        18,
        27
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        27
      ],
      "mod_code": [
        "return s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in return"
    }
  ]
}