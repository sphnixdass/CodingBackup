{
  "meta": {
    "index": 2112,
    "hitid": "36FFXPMST9I1PMXTRXO8NLI15N6OHT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "615A",
    "subid": "42075775"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer array a with 150 elements",
      "code": "int a [ 150 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let n , m , b , num and s be ints where s = 0",
      "code": "int n , m , b , num , s = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n and b",
      "code": "cin >> n >> b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read input to m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "loop j from 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read num",
      "code": "cin >> num ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment a [ num ] by one",
      "code": "a [ num ] ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if a [ num ] is equal to 1 , increment s by one",
      "code": "if ( a [ num ] == 1 ) s ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s is equal to b",
      "code": "if ( s == b )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        3,
        15,
        12
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "n = n >> b ;",
        "cout << \" NO \" ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        3,
        15,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "n = n >> b ;",
        "cout << \" NO \" ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        3,
        8,
        12
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "n = n >> b ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        3,
        8,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "n = n >> b ;",
        "a [ num ++ ] ++ ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        3,
        12
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "n = n >> b ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        3,
        12,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "n = n >> b ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        3,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "n = n >> b ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        15,
        8,
        12
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "cout << \" NO \" ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        15,
        8,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "cout << \" NO \" ;",
        "a [ num ++ ] ++ ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        15,
        12
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "cout << \" NO \" ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        15,
        12,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "cout << \" NO \" ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        15,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "cout << \" NO \" ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        8,
        12
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        8,
        12,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        8,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "a [ num ++ ] ++ ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        12,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "num = getchar ( ) ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        15,
        8,
        12
      ],
      "mod_code": [
        "n = n >> b ;",
        "cout << \" NO \" ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        15,
        8,
        0
      ],
      "mod_code": [
        "n = n >> b ;",
        "cout << \" NO \" ;",
        "a [ num ++ ] ++ ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        15,
        12
      ],
      "mod_code": [
        "n = n >> b ;",
        "cout << \" NO \" ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        15,
        12,
        0
      ],
      "mod_code": [
        "n = n >> b ;",
        "cout << \" NO \" ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        15,
        0
      ],
      "mod_code": [
        "n = n >> b ;",
        "cout << \" NO \" ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        8,
        12
      ],
      "mod_code": [
        "n = n >> b ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8,
        12,
        0
      ],
      "mod_code": [
        "n = n >> b ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        8,
        0
      ],
      "mod_code": [
        "n = n >> b ;",
        "a [ num ++ ] ++ ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "n = n >> b ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        12,
        0
      ],
      "mod_code": [
        "n = n >> b ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "n = n >> b ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        8,
        12
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        8,
        12,
        0
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "a [ num ++ ] ++ ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        8,
        0
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "a [ num ++ ] ++ ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        12,
        0
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "a [ num ++ ] ++ ;",
        "else if ( s == b )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8,
        12,
        0
      ],
      "mod_code": [
        "a [ num ++ ] ++ ;",
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "a [ num ++ ] ++ ;",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "else if ( s == b )",
        "a [ 150 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    }
  ]
}