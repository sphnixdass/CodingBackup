{
  "meta": {
    "index": 2288,
    "hitid": "3FK4G712NXU5DN3298HGB4Z4BNPSSE",
    "workerid": "A1APYLD4DUK33J",
    "probid": "168A",
    "subid": "48458976"
  },
  "lines": [
    {
      "line": 0,
      "text": "create long long array spf with size 100001",
      "code": "long long spf [ 100001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with long longs a , b as arguments , returning long long",
      "code": "long long gcd ( long long a , long long b ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare palindrome with string s as argument , returning long long",
      "code": "long long palindrome ( string s ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare modexp with long longs a , b , m as arguments , returning long long",
      "code": "long long modexp ( long long a , long long b , long long m ) ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare sieve with no arguments , returning void",
      "code": "void sieve ( ) ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare ceil with long longs a , b as arguments , returning long long",
      "code": "long long ceil ( long long a , long long b ) ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare getFactorization with long long x as argument , returning long long vector",
      "code": "vector < long long > getFactorization ( long long x ) ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare getZarr with string str , long long array Z as arguments , returning void",
      "code": "void getZarr ( string str , long long Z [ ] ) ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare prefix_function with string s as argument , returning long long vector",
      "code": "vector < long long > prefix_function ( string s ) ;",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "create long doubles n , x , y",
      "code": "long double n , x , y ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read n read x read y",
      "code": "cin >> n >> x >> y ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create long double ans with ans = ( n * y ) / 100 - x",
      "code": "long double ans = ( n * y ) / 100 - x ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ans is less than 0 , set ans to 0",
      "code": "if ( ans < 0 ) ans = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print result of run ceil with ans as argument print newline",
      "code": "cout << ceil ( ans ) << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "declare gcd with long longs a , b as arguments , returning long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 17,
      "text": "if a is 0 , return b from function",
      "code": "if ( a == 0 ) return b ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if b is 0 , return a from function",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if a is b , return a from function",
      "code": "if ( a == b ) return a ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if a is greater than b , return result of run gcd with a % b , b as arguments , from function",
      "code": "if ( a > b ) return gcd ( a % b , b ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "return result of run gcd with a , b % a as arguments , from function",
      "code": "return gcd ( a , b % a ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "declare palindrome with string s as argument , returning long long",
      "code": "long long palindrome ( string s )",
      "indent": 0
    },
    {
      "line": 24,
      "text": "create long long l with l = 0",
      "code": "long long l = 0 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "create long long h with h = length of s - 1",
      "code": "long long h = s . length ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "while h is greater than l",
      "code": "while ( h > l )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if s [ increment l ] is not s [ decrement h ] , return 0 from function",
      "code": "if ( s [ l ++ ] != s [ h -- ] ) { return 0 ; }",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "return 1 from function",
      "code": "return 1 ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 31,
      "text": "declare modexp with long longs a , b , m as arguments , returning long long",
      "code": "long long modexp ( long long a , long long b , long long m )",
      "indent": 0
    },
    {
      "line": 32,
      "text": "if b is 0 , return 1 from function",
      "code": "if ( b == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "create long long temp with temp = result of run modexp with a , b / 2 , m as arguments",
      "code": "long long temp = modexp ( a , b / 2 , m ) ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "set temp to ( temp * temp ) % m",
      "code": "temp = ( temp * temp ) % m ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "if b bitwise and 1 , return ( temp * ( a % m ) ) % m from function",
      "code": "if ( b & 1 ) return ( temp * ( a % m ) ) % m ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "return temp from function",
      "code": "return temp ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 38,
      "text": "declare sieve with no arguments , returning void",
      "code": "void sieve ( )",
      "indent": 0
    },
    {
      "line": 39,
      "text": "set spf [ 1 ] to 1",
      "code": "spf [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "for i = 2 to 100001 exclusive , set spf [ i ] to i",
      "code": "for ( long long i = 2 ; i < 100001 ; i ++ ) spf [ i ] = i ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "for i = 4 to 100001 exclusive , incrementing i by 2 , set spf [ i ] to 2",
      "code": "for ( long long i = 4 ; i < 100001 ; i += 2 ) spf [ i ] = 2 ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "for i = 3 to i * i is less than 100001 , incrementing i",
      "code": "for ( long long i = 3 ; i * i < 100001 ; i ++ )",
      "indent": 1
    },
    {
      "line": 43,
      "text": "if spf [ i ] is i",
      "code": "if ( spf [ i ] == i )",
      "indent": 2
    },
    {
      "line": 44,
      "text": "for j = i * i to 100001 exclusive , incrementing j by i",
      "code": "for ( long long j = i * i ; j < 100001 ; j += i )",
      "indent": 3
    },
    {
      "line": 45,
      "text": "if spf [ j ] is j , set spf [ j ] to i",
      "code": "if ( spf [ j ] == j ) spf [ j ] = i ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 49,
      "text": "declare getFactorization with long long x as argument , returning long long vector",
      "code": "vector < long long > getFactorization ( long long x )",
      "indent": 0
    },
    {
      "line": 50,
      "text": "create long long vector ret",
      "code": "vector < long long > ret ;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "while x is not 1",
      "code": "while ( x != 1 )",
      "indent": 1
    },
    {
      "line": 52,
      "text": "add element spf [ x ] to end of ret",
      "code": "ret . push_back ( spf [ x ] ) ;",
      "indent": 2
    },
    {
      "line": 53,
      "text": "set x to x / spf [ x ]",
      "code": "x = x / spf [ x ] ;",
      "indent": 2
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 55,
      "text": "return ret from function",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 57,
      "text": "declare ceil with long longs a , b as arguments , returning long long",
      "code": "long long ceil ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 58,
      "text": "return a / b + ( a % b is not 0 )",
      "code": "return a / b + ( a % b != 0 ) ;",
      "indent": 1
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 60,
      "text": "declare getZarr with string str , long long array Z as arguments , returning void",
      "code": "void getZarr ( string str , long long Z [ ] )",
      "indent": 0
    },
    {
      "line": 61,
      "text": "create long long n with n = length of str",
      "code": "long long n = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 62,
      "text": "create long longs L , R , K",
      "code": "long long L , R , k ;",
      "indent": 1
    },
    {
      "line": 63,
      "text": "set L to R to 0",
      "code": "L = R = 0 ;",
      "indent": 1
    },
    {
      "line": 64,
      "text": "for i = 1 to n exclusive",
      "code": "for ( long long i = 1 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 65,
      "text": "if i is greater than R",
      "code": "if ( i > R )",
      "indent": 2
    },
    {
      "line": 66,
      "text": "set L to R to i",
      "code": "L = R = i ;",
      "indent": 3
    },
    {
      "line": 67,
      "text": "while R is less than n and str [ R - L ] is str [ R ] , increment R",
      "code": "while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;",
      "indent": 3
    },
    {
      "line": 68,
      "text": "set Z [ i ] to R - L",
      "code": "Z [ i ] = R - L ;",
      "indent": 3
    },
    {
      "line": 69,
      "text": "decrement R",
      "code": "R -- ;",
      "indent": 3
    },
    {
      "line": 70,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 71,
      "text": "set k to i - L",
      "code": "k = i - L ;",
      "indent": 3
    },
    {
      "line": 72,
      "text": "if Z [ k ] is less than R - i + 1",
      "code": "if ( Z [ k ] < R - i + 1 )",
      "indent": 3
    },
    {
      "line": 73,
      "text": "set Z [ i ] to Z [ k ]",
      "code": "Z [ i ] = Z [ k ] ;",
      "indent": 4
    },
    {
      "line": 74,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 75,
      "text": "set L to i",
      "code": "L = i ;",
      "indent": 4
    },
    {
      "line": 76,
      "text": "while R is less than n and str [ R - L ] is str [ R ] , increment R",
      "code": "while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;",
      "indent": 4
    },
    {
      "line": 77,
      "text": "set Z [ i ] to R - L",
      "code": "Z [ i ] = R - L ;",
      "indent": 4
    },
    {
      "line": 78,
      "text": "decrement R",
      "code": "R -- ;",
      "indent": 4
    },
    {
      "line": 79,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 80,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 81,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 82,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 83,
      "text": "declare prefix_function with string s as argument , returning long long vector",
      "code": "vector < long long > prefix_function ( string s )",
      "indent": 0
    },
    {
      "line": 84,
      "text": "create long long n with n = long long casted length of s",
      "code": "long long n = ( long long ) s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 85,
      "text": "create long long vector pi initialized with n",
      "code": "vector < long long > pi ( n ) ;",
      "indent": 1
    },
    {
      "line": 86,
      "text": "for i = 1 to n exclusive",
      "code": "for ( long long i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 87,
      "text": "create long long j with j = pi [ i - 1 ]",
      "code": "long long j = pi [ i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 88,
      "text": "while j is greater than 0 and s [ i ] is not s [ j ] , set j to pi [ j - 1 ]",
      "code": "while ( j > 0 && s [ i ] != s [ j ] ) j = pi [ j - 1 ] ;",
      "indent": 2
    },
    {
      "line": 89,
      "text": "if s [ i ] is s [ j ] , increment j",
      "code": "if ( s [ i ] == s [ j ] ) j ++ ;",
      "indent": 2
    },
    {
      "line": 90,
      "text": "set pi [ i ] to j",
      "code": "pi [ i ] = j ;",
      "indent": 2
    },
    {
      "line": 91,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 92,
      "text": "return pi from function",
      "code": "return pi ;",
      "indent": 1
    },
    {
      "line": 93,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long palindrome ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void sieve ( )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        62
      ],
      "mod_code": [
        "long long L , R , K ;"
      ],
      "err_line": 71,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        83
      ],
      "mod_code": [
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 84,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long int ceil ( long long a , long long b )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "vector < long long > prefix_function ( string s )"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( cin >> n >> x >> y )"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "long long palindrome ( string s ) ;"
      ],
      "err_line": 24,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m ) ;"
      ],
      "err_line": 32,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "long long temp = modexp ( a , b / 2 ) , m ;"
      ],
      "err_line": 33,
      "err_msg": "too few arguments to function ‘long long int modexp(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "void sieve ( ) ;"
      ],
      "err_line": 39,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "for ( i = 3 ; i * i < 100001 ; i ++ )"
      ],
      "err_line": 42,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 50,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "vector < long > ret ;"
      ],
      "err_line": 55,
      "err_msg": "could not convert ‘ret’ from ‘std::vector<long int>’ to ‘std::vector<long long int>’"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "ret . end ( spf [ x ] ) ;"
      ],
      "err_line": 52,
      "err_msg": "no matching function for call to ‘std::vector<long long int>::end(long long int&)’"
    },
    {
      "mod_line": [
        60
      ],
      "mod_code": [
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 61,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        61
      ],
      "mod_code": [
        "long long n = strlen ( str ) ;"
      ],
      "err_line": 61,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        62
      ],
      "mod_code": [
        "long long int L , R , K ;"
      ],
      "err_line": 71,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "int L = R = 0 ;"
      ],
      "err_line": 63,
      "err_msg": "conflicting declaration ‘int L’"
    },
    {
      "mod_line": [
        64
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 64,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        70
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 71,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        74
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 75,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        85
      ],
      "mod_code": [
        "vector < long long > :: pi ( n ) ;"
      ],
      "err_line": 85,
      "err_msg": "‘pi’ is not a member of ‘std::vector<long long int>’"
    },
    {
      "mod_line": [
        86
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 86,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        90
      ],
      "mod_code": [
        "reverse [ i ] = j ;"
      ],
      "err_line": 90,
      "err_msg": "invalid types ‘<unresolved overloaded function type>[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        92
      ],
      "mod_code": [
        "return continue ;"
      ],
      "err_line": 92,
      "err_msg": "expected primary-expression before ‘continue’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        62,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        62,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        7,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        7,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        62,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        62,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        62,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        7,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        7,
        62,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        7,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        62
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        62,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        83
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        6
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        6
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        62,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        6
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        62,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        62,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        62,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        7,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        7,
        62,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        7,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        62
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        62,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        83
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        7
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        7
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        62,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        62,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        62,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        7,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        7,
        62,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        7,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        62
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        62,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        83
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        7
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        62
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        62
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        62
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        62,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        62
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        62
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        62,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        7,
        62
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        7,
        62,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        7,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        62
      ],
      "mod_code": [
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        62,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        83
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        62
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        83
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        62
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        62,
        83
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        83
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        7,
        62
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        7,
        62,
        83
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        7,
        83
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        62
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        62,
        83
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        83
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        7,
        62
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        7,
        62,
        83
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        7,
        83
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        62
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        62,
        83
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        83
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        7,
        62
      ],
      "mod_code": [
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        7,
        62,
        83
      ],
      "mod_code": [
        "void getZarr ( string str , long long Z [ ] )",
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        7,
        83
      ],
      "mod_code": [
        "void getZarr ( string str , long long Z [ ] )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        62,
        83
      ],
      "mod_code": [
        "long long L , R , K ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 71,
      "err_msg": "‘k’ was not declared in this scope"
    }
  ]
}