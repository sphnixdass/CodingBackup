{
  "meta": {
    "index": 2089,
    "hitid": "3SMIWMMK61ZEZHCFIIMHNUKD2XAUWF",
    "workerid": "A1AYVATMT88U1W",
    "probid": "59A",
    "subid": "42208274"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let upper ( 0 ) , lower ( 0 ) be integers",
      "code": "int upper ( 0 ) , lower ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for unsigned integer data type size_t i = 0 to length of s exclusive",
      "code": "for ( size_t i = 0 ; i < s . length ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if isupper ( s [ i ] ) is true",
      "code": "if ( isupper ( s [ i ] ) )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment upper by 1",
      "code": "upper += 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment lower by 1",
      "code": "lower += 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if upper is greater than lower",
      "code": "if ( upper > lower )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for unsigned integer data type size_t i = 0 to length of s exclusive , s [ i ] is equal to toupper ( s [ i ] )",
      "code": "for ( size_t i = 0 ; i < s . length ( ) ; ++ i ) { s [ i ] = toupper ( s [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for unsigned integer data type size_t i = 0 to length of s , s [ i ] is equal to tolower ( s [ i ] )",
      "code": "for ( size_t i = 0 ; i < s . length ( ) ; ++ i ) { s [ i ] = tolower ( s [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print s and newline",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }"
      ],
      "err_line": 14,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "upper ( 0 ) , lower ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘upper’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        12,
        14
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        14,
        12
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        14,
        12,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        14,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        12,
        14,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        12,
        14,
        13,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "else do",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        12,
        14,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        12,
        13,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "else do",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = toupper ( s [ i ] ) ;",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        14,
        12,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        14,
        12,
        13,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "else do",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        14,
        12,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        14,
        13,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "else do",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "duplicate ‘unsigned’"
    },
    {
      "mod_line": [
        12,
        13,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "else do",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "for ( unsigned unsigned i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "else do",
        "for ( unsigned size_t i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘i’"
    }
  ]
}