{
  "meta": {
    "index": 2785,
    "hitid": "3ULIZ0H1VAZ4D16XKTPOMS2373B51C",
    "workerid": "AIWEXPJAU66D9",
    "probid": "900A",
    "subid": "48935802"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create ints p , n , x , y and m where p and n = 0",
      "code": "int p = 0 , n = 0 , x , y , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read from the input to m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement m and loop further , while m ! = 0",
      "code": "while ( m -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read x and y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if x is less than 0",
      "code": "if ( x < 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment n by one",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment p",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if n < = 1 or p < = 1",
      "code": "if ( n <= 1 || p <= 1 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" Yes \" to the stdout",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" No \"",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        12
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "cin >> n >> y ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        12,
        13
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "cin >> n >> y ;",
        "n",
        "cout << \" No \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        12,
        7
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "cin >> n >> y ;",
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        13,
        7
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "cin >> n >> y ;",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "cin >> n >> y ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        13
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "n",
        "cout << \" No \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        7
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "n",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        7
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        7
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int p , n , x = 0 , y = 0 , m ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        1,
        12
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "int p = 0 , n , x = 0 , y , m ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        1,
        12,
        13
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "int p = 0 , n , x = 0 , y , m ;",
        "n",
        "cout << \" No \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        1,
        12,
        7
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "int p = 0 , n , x = 0 , y , m ;",
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        1,
        13,
        7
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "int p = 0 , n , x = 0 , y , m ;",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        1,
        7
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "int p = 0 , n , x = 0 , y , m ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "n",
        "cout << \" No \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        7
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "n",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        7
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        13,
        7
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "cin >> n >> y ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int p = 0 , n , x = 0 , y , m ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        13
      ],
      "mod_code": [
        "int p = 0 , n , x = 0 , y , m ;",
        "n",
        "cout << \" No \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        7
      ],
      "mod_code": [
        "int p = 0 , n , x = 0 , y , m ;",
        "n",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        7
      ],
      "mod_code": [
        "int p = 0 , n , x = 0 , y , m ;",
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        7
      ],
      "mod_code": [
        "int p = 0 , n , x = 0 , y , m ;",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int p = 0 , n , x = 0 , y , m ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "n",
        "cout << \" No \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        7
      ],
      "mod_code": [
        "n",
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "cout << \" No \" ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}