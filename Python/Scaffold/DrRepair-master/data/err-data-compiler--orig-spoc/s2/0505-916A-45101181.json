{
  "meta": {
    "index": 505,
    "hitid": "32CAVSKPCEJLYGWCLUXWU4UJ6K1U1G",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "916A",
    "subid": "45101181"
  },
  "lines": [
    {
      "line": 0,
      "text": "inf = const integer with inf = 1e9 + 7",
      "code": "const int inf = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "mod = const integer with mod = 998244353",
      "code": "const int mod = 998244353 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "x = integer",
      "code": "int x ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "hh , mm = integers",
      "code": "int hh , mm ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "in the function judge that takes integer t and returns bool",
      "code": "bool judge ( int t )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "total = integer with total = hh * 60 + mm - x * t",
      "code": "int total = hh * 60 + mm - x * t ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "total = ( total + 24 * 60 ) modulo ( 24 * 60 )",
      "code": "total = ( total + 24 * 60 ) % ( 24 * 60 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "h = integer with h = total / 60",
      "code": "int h = total / 60 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "m = integer with m = total modulo 60",
      "code": "int m = total % 60 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "num = integer with num = 0",
      "code": "int num = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while ( h )",
      "code": "while ( h )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "tmp = integer with tmp = h modulo 10",
      "code": "int tmp = h % 10 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "h = h / 10",
      "code": "h = h / 10 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ( tmp is 7 ) , increment num",
      "code": "if ( tmp == 7 ) num ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "while ( m )",
      "code": "while ( m )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "tmp = integer with tmp = m modulo 10",
      "code": "int tmp = m % 10 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "m = m / 10",
      "code": "m = m / 10 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if ( tmp is 7 ) , increment num",
      "code": "if ( tmp == 7 ) num ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "return if num , 1 else 0",
      "code": "return num ? 1 : 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 23,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "read hh , mm",
      "code": "cin >> hh >> mm ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for i = 0",
      "code": "for ( int i = 0 ; ; i ++ )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if ( judge ( i ) )",
      "code": "if ( judge ( i ) )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print i",
      "code": "cout << i << endl ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const int mod = 998244353 , mod ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘const int mod’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "total = ( total + 24 * 60 ) modulo ( 24 * 60 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘modulo’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "while ( m ) )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( i = 0 ; ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        20,
        23
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        4
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "bool judge ( bool t )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        4,
        24
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "cin >> hh , mm ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        4,
        26
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        4,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        24
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "cin >> hh , mm ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        24,
        26
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        24,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "cin >> hh , mm ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        26
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        26,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        23,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "x = getchar ( ) ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        4
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "bool judge ( bool t )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        4,
        24
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "bool judge ( bool t )",
        "cin >> hh , mm ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        4,
        24,
        26
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "bool judge ( bool t )",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        4,
        24,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "bool judge ( bool t )",
        "cin >> hh , mm ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        4,
        26
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "bool judge ( bool t )",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        4,
        26,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "bool judge ( bool t )",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        4,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "bool judge ( bool t )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        24
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "cin >> hh , mm ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        24,
        26
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        24,
        26,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        24,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "cin >> hh , mm ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        26
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        26,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        10
      ],
      "mod_code": [
        "return ( num ? 1 ) : 0 ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        4,
        24,
        26
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        4,
        24,
        10
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "cin >> hh , mm ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        4,
        26
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        4,
        26,
        10
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        4,
        10
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "bool judge ( bool t )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        24,
        26
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        24,
        26,
        10
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        24,
        10
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "cin >> hh , mm ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        26
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        26,
        10
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        10
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        24,
        26
      ],
      "mod_code": [
        "bool judge ( bool t )",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        24,
        26,
        10
      ],
      "mod_code": [
        "bool judge ( bool t )",
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        24,
        10
      ],
      "mod_code": [
        "bool judge ( bool t )",
        "cin >> hh , mm ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        26
      ],
      "mod_code": [
        "bool judge ( bool t )",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        26,
        10
      ],
      "mod_code": [
        "bool judge ( bool t )",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "bool judge ( bool t )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        26
      ],
      "mod_code": [
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        26,
        10
      ],
      "mod_code": [
        "cin >> hh , mm ;",
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        10
      ],
      "mod_code": [
        "cin >> hh , mm ;",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        10
      ],
      "mod_code": [
        "if ( judge ( i ) ) )",
        "while ( h ) )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}