{
  "meta": {
    "index": 341,
    "hitid": "3YLTXLH3DF0JAM9U6X1NCLNRFS9PHI",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "735A",
    "subid": "48456245"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = char array of size 101",
      "code": "char a [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "n , k , i , flag1 , flag2 , m = int with m = 0",
      "code": "int n , k , i , flag1 , flag2 , m = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n then k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n values into a",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ i ] is ' G ' set flag1 to i",
      "code": "if ( a [ i ] == ' G ' ) { flag1 = i ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a [ i ] is ' T ' set flag2 to i",
      "code": "if ( a [ i ] == ' T ' ) { flag2 = i ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if flag1 < flag2",
      "code": "if ( flag1 < flag2 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = flag1 to n incrementing i by k",
      "code": "for ( i = flag1 ; i < n ; i = i + k )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if a [ i ] is ' # '",
      "code": "if ( a [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if a [ i ] is ' T '",
      "code": "if ( a [ i ] == ' T ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if i > = n print \" NO \"",
      "code": "if ( i >= n ) { cout << \" NO \" << endl ; }",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = flag1 to flag2 decrementing i by k",
      "code": "for ( i = flag1 ; i >= flag2 ; i = i - k )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if a [ i ] is ' # '",
      "code": "if ( a [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if a [ i ] is ' T '",
      "code": "if ( a [ i ] == ' T ' )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if i < flag2 print \" NO \"",
      "code": "if ( i < flag2 ) { cout << \" NO \" << endl ; }",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char arr [ 101 ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        22,
        9,
        3
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "if ( flag1 )",
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        22,
        9,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "if ( flag1 )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        22,
        3
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        22,
        3,
        28
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cin >> n then k ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        22,
        3,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cin >> n then k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        22,
        28,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        22,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9,
        3
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "if ( flag1 )",
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        9,
        3,
        28
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "if ( flag1 )",
        "cin >> n then k ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        9,
        3,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "if ( flag1 )",
        "cin >> n then k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        9,
        28,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "if ( flag1 )",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "if ( flag1 )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        3,
        28
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "cin >> n then k ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        3,
        28,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "cin >> n then k ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        3,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "cin >> n then k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        10,
        28,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i < n ; i += k )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        9,
        3
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "if ( flag1 )",
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        22,
        9,
        3,
        28
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "if ( flag1 )",
        "cin >> n then k ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        22,
        9,
        3,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "if ( flag1 )",
        "cin >> n then k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        22,
        9,
        28,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "if ( flag1 )",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        9,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "if ( flag1 )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        22,
        3,
        28
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cin >> n then k ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        22,
        3,
        28,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cin >> n then k ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        22,
        3,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cin >> n then k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        22,
        28,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        21
      ],
      "mod_code": [
        "for ( int i = flag1 ; i > flag2 ; i -= k )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( flag1 )",
        "cin >> n then k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        9,
        3,
        28
      ],
      "mod_code": [
        "if ( flag1 )",
        "cin >> n then k ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        9,
        3,
        28,
        21
      ],
      "mod_code": [
        "if ( flag1 )",
        "cin >> n then k ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        9,
        3,
        21
      ],
      "mod_code": [
        "if ( flag1 )",
        "cin >> n then k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        9,
        28,
        21
      ],
      "mod_code": [
        "if ( flag1 )",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "if ( flag1 )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        28
      ],
      "mod_code": [
        "cin >> n then k ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        3,
        28,
        21
      ],
      "mod_code": [
        "cin >> n then k ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "cin >> n then k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        28,
        21
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}