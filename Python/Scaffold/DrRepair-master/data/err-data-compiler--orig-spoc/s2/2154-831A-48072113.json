{
  "meta": {
    "index": 2154,
    "hitid": "3BJKPTD2QC6UR8G4JJM1VZQUQHQTRB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "831A",
    "subid": "48072113"
  },
  "lines": [
    {
      "line": 0,
      "text": "constant int64_t infint64_t = 9223372036854775807LL",
      "code": "const int64_t infint64_t = 9223372036854775807LL ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "void function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "int64_t n",
      "code": "int64_t n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "int64_t last = - 1",
      "code": "int64_t last = - 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "int64_t state = 0",
      "code": "int64_t state = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer 64_t = 0 to n exclusive",
      "code": "for ( int64_t i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "int64_t cur",
      "code": "int64_t cur ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read cur",
      "code": "cin >> cur ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if state = 0",
      "code": "if ( state == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if cur is less than last",
      "code": "if ( cur < last )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set value of state to 2",
      "code": "state = 2 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if cur = last",
      "code": "else if ( cur == last )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set state to 1",
      "code": "state = 1 ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set state to 0",
      "code": "state = 0 ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if state = 1",
      "code": "else if ( state == 1 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if cur is less than last",
      "code": "if ( cur < last )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "assign value of 2 to state",
      "code": "state = 2 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else if cur = last",
      "code": "else if ( cur == last )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "state = 1",
      "code": "state = 1 ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "return",
      "code": "return ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else if state = 2",
      "code": "else if ( state == 2 )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if cur is less than last",
      "code": "if ( cur < last )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "assign value of 2 to state",
      "code": "state = 2 ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else if cur = last",
      "code": "else if ( cur == last )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "return",
      "code": "return ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 33,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "return",
      "code": "return ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "set last to cur",
      "code": "last = cur ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 42,
      "text": "invoke function solve",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "exit ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int64_t last -= 1 ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; ++ 64_t )"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int64_t cur )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "* state = 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "solve ( ) invoke ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘invoke’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        18
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "if ( cur < cur )"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        11
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "if ( cur < cur )",
        "* state = 2 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        37
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "if ( cur < cur )",
        "int last = cur ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "if ( cur < cur )",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        11
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "* state = 2 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        11,
        37
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "* state = 2 ;",
        "int last = cur ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        11,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "* state = 2 ;",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        37
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "int last = cur ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        37,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "n",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "if ( cur < cur )"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18,
        11
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "if ( cur < cur )",
        "* state = 2 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18,
        11,
        37
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "if ( cur < cur )",
        "* state = 2 ;",
        "int last = cur ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18,
        11,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "if ( cur < cur )",
        "* state = 2 ;",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18,
        37
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "if ( cur < cur )",
        "int last = cur ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18,
        37,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "if ( cur < cur )",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "if ( cur < cur )",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "* state = 2 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        11,
        37
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "* state = 2 ;",
        "int last = cur ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        11,
        37,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "* state = 2 ;",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        11,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "* state = 2 ;",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        37
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "int last = cur ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        37,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "for ( int 64_t = 0 ; 64_t < n ; 64_t ++ )",
        "return return ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"_t\" on integer constant"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "n",
        "if ( cur < cur )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        18,
        11
      ],
      "mod_code": [
        "n",
        "if ( cur < cur )",
        "* state = 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14,
        18,
        11,
        37
      ],
      "mod_code": [
        "n",
        "if ( cur < cur )",
        "* state = 2 ;",
        "int last = cur ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14,
        18,
        11,
        24
      ],
      "mod_code": [
        "n",
        "if ( cur < cur )",
        "* state = 2 ;",
        "return return ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14,
        18,
        37
      ],
      "mod_code": [
        "n",
        "if ( cur < cur )",
        "int last = cur ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        18,
        37,
        24
      ],
      "mod_code": [
        "n",
        "if ( cur < cur )",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        18,
        24
      ],
      "mod_code": [
        "n",
        "if ( cur < cur )",
        "return return ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        11
      ],
      "mod_code": [
        "n",
        "* state = 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14,
        11,
        37
      ],
      "mod_code": [
        "n",
        "* state = 2 ;",
        "int last = cur ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14,
        11,
        37,
        24
      ],
      "mod_code": [
        "n",
        "* state = 2 ;",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14,
        11,
        24
      ],
      "mod_code": [
        "n",
        "* state = 2 ;",
        "return return ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        14,
        37
      ],
      "mod_code": [
        "n",
        "int last = cur ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        37,
        24
      ],
      "mod_code": [
        "n",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "n",
        "return return ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        11
      ],
      "mod_code": [
        "if ( cur < cur )",
        "* state = 2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        18,
        11,
        37
      ],
      "mod_code": [
        "if ( cur < cur )",
        "* state = 2 ;",
        "int last = cur ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        18,
        11,
        37,
        24
      ],
      "mod_code": [
        "if ( cur < cur )",
        "* state = 2 ;",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        18,
        11,
        24
      ],
      "mod_code": [
        "if ( cur < cur )",
        "* state = 2 ;",
        "return return ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        18,
        37,
        24
      ],
      "mod_code": [
        "if ( cur < cur )",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        18,
        24
      ],
      "mod_code": [
        "if ( cur < cur )",
        "return return ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        11,
        37
      ],
      "mod_code": [
        "* state = 2 ;",
        "int last = cur ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        11,
        37,
        24
      ],
      "mod_code": [
        "* state = 2 ;",
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        11,
        24
      ],
      "mod_code": [
        "* state = 2 ;",
        "return return ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int64_t {aka long int}’)"
    },
    {
      "mod_line": [
        37,
        24
      ],
      "mod_code": [
        "int last = cur ;",
        "return return ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘return’"
    }
  ]
}