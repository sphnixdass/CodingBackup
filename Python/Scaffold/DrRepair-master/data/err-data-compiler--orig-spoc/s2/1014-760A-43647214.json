{
  "meta": {
    "index": 1014,
    "hitid": "3LN50BUKPV5LWISKXIGL4DGYW9JLPM",
    "workerid": "A1APYLD4DUK33J",
    "probid": "760A",
    "subid": "43647214"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer N = 1e5 + 1",
      "code": "const int N = 1e5 + 1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integers m , d",
      "code": "int m , d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read m , d",
      "code": "cin >> m >> d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer x = 31",
      "code": "int x = 31 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if m is 1 , let x be 31",
      "code": "if ( m == 1 ) x = 31 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if m is 2 , let x be 28",
      "code": "if ( m == 2 ) x = 28 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if m is 3 , let x be 31",
      "code": "if ( m == 3 ) x = 31 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if m is 4 , let x be 30",
      "code": "if ( m == 4 ) x = 30 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if m is 5 , let x be 31",
      "code": "if ( m == 5 ) x = 31 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if m is 6 , let x be 30",
      "code": "if ( m == 6 ) x = 30 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if m is 7 , let x be 31",
      "code": "if ( m == 7 ) x = 31 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if m is 8 , let x be 31",
      "code": "if ( m == 8 ) x = 31 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if m is 9 , let x be 30",
      "code": "if ( m == 9 ) x = 30 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if m is 10 , let x be 31",
      "code": "if ( m == 10 ) x = 31 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if m is 11 , let x be 30",
      "code": "if ( m == 11 ) x = 30 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if m is 12 , let x be 31",
      "code": "if ( m == 12 ) x = 31 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "decrement x by ( 8 - d )",
      "code": "x -= ( 8 - d ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print 1 + ( x + 6 ) / 7 , newline",
      "code": "cout << 1 + ( x + 6 ) / 7 << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const N = 1e5 + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const int x = 31 ;"
      ],
      "err_line": 5,
      "err_msg": "assignment of read-only variable ‘x’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "const N = 1e5 + 1 ;",
        "const int x = 31 ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        4,
        3
      ],
      "mod_code": [
        "const N = 1e5 + 1 ;",
        "const int x = 31 ;",
        "cin >> m , d ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "const N = 1e5 + 1 ;",
        "cin >> m , d ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "const int x = 31 ;",
        "cin >> m , d ;"
      ],
      "err_line": 5,
      "err_msg": "assignment of read-only variable ‘x’"
    }
  ]
}