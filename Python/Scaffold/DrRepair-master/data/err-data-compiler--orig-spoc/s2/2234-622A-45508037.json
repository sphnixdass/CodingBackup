{
  "meta": {
    "index": 2234,
    "hitid": "3HO4MYYR12IG52X9R09DP0L0EVI6UR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "622A",
    "subid": "45508037"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new long longs n , m and i",
      "code": "long long n , m , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i from 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i * ( i + 1 ) / 2 = n",
      "code": "if ( i * ( i + 1 ) / 2 == n )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "change m to i",
      "code": "m = i ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if i * ( i + 1 ) / 2 < n and ( i + 2 ) * ( i + 1 ) / 2 > n",
      "code": "if ( i * ( i + 1 ) / 2 < n && ( i + 2 ) * ( i + 1 ) / 2 > n )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "assign n - i * ( i + 1 ) / 2 to m",
      "code": "m = n - i * ( i + 1 ) / 2 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print m to the standard output",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        2,
        10
      ],
      "mod_code": [
        "m -= i * ( i + 1 ) / 2 ;",
        "n = getchar ( ) ;",
        "break the ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "m -= i * ( i + 1 ) / 2 ;",
        "break the ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "break the ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘the’"
    }
  ]
}