{
  "meta": {
    "index": 657,
    "hitid": "3V7ICJJAZAANUGKP8LZ3NC9YSW64BD",
    "workerid": "A1AYVATMT88U1W",
    "probid": "817A",
    "subid": "43337650"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let x1 , y1 , x2 , y2 be integers",
      "code": "int x1 , y1 , x2 , y2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x1 , y1 , x2 , y2",
      "code": "cin >> x1 >> y1 >> x2 >> y2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let x , y be integers",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( ( x1 - x2 ) % x is equal to 0 and ( y1 - y2 ) % y is equal to 0 )",
      "code": "if ( ( x1 - x2 ) % x == 0 && ( y1 - y2 ) % y == 0 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let integer xx is equal to abs ( x1 - x2 ) / x",
      "code": "int xx = abs ( x1 - x2 ) / x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "let integer yy is equal to abs ( y1 - y2 ) / y",
      "code": "int yy = abs ( y1 - y2 ) / y ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ( xx % 2 is equal to 1 and yy % 2 is equal to 1 )",
      "code": "if ( xx % 2 == 1 && yy % 2 == 1 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print YES and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if ( not ( ( xx & 1 ) power ( yy & 1 ) ) )",
      "code": "else if ( ! ( ( xx & 1 ) ^ ( yy & 1 ) ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print YES and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print NO and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print NO and endline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int xx / abs ( x1 - x2 ) / x ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "yy = abs ( y1 - y2 ) / y ;"
      ],
      "err_line": 7,
      "err_msg": "‘yy’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        15,
        2
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        15,
        2,
        4
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        15,
        2,
        12
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        15,
        4
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do",
        "cin >> x , y ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        15,
        4,
        12
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do",
        "cin >> x , y ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        15,
        12
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        2,
        4,
        12
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        2,
        12
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        4,
        12
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "cin >> x , y ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "else if ( ! ( ( xx & 1 ) % ( yy & 1 ) ) )",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        2,
        4
      ],
      "mod_code": [
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        2,
        4,
        12
      ],
      "mod_code": [
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        2,
        4,
        10
      ],
      "mod_code": [
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        12
      ],
      "mod_code": [
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        2,
        12,
        10
      ],
      "mod_code": [
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        10
      ],
      "mod_code": [
        "else do",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "else do",
        "cin >> x , y ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        4,
        12
      ],
      "mod_code": [
        "else do",
        "cin >> x , y ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        4,
        12,
        10
      ],
      "mod_code": [
        "else do",
        "cin >> x , y ;",
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4,
        10
      ],
      "mod_code": [
        "else do",
        "cin >> x , y ;",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "else do",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        12,
        10
      ],
      "mod_code": [
        "else do",
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        12
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        4,
        12,
        10
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;",
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        10
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        12,
        10
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "cin >> x , y ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        10
      ],
      "mod_code": [
        "cin >> x , y ;",
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cin >> x , y ;",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "else do",
        "else if ( ! ( ( xx & 1 ) % power ( yy & 1 ) ) )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    }
  ]
}