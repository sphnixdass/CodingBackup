{
  "meta": {
    "index": 2685,
    "hitid": "3BO3NEOQM0BCJDECNW1BM2ZBFWNIAC",
    "workerid": "AIWEXPJAU66D9",
    "probid": "181A",
    "subid": "29996146"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , m , r = 0 , c = 0 , i = 0 and j = 0",
      "code": "int n , m , r = 0 , c = 0 , i = 0 , j = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare character ch",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer arrays row and col with 3 elements",
      "code": "int row [ 3 ] , col [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while i is less than n",
      "code": "while ( i < n )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while j is less than m",
      "code": "while ( j < m )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read ch",
      "code": "cin >> ch ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if ch = ' * '",
      "code": "if ( ch == ' * ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set row [ r ] to i",
      "code": "row [ r ] = i ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set col [ r ] to j",
      "code": "col [ r ] = j ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set j to 0",
      "code": "j = 0 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set r to 0",
      "code": "r = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for j = i + 1 to 3 exclusive",
      "code": "for ( j = i + 1 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if row [ i ] = row [ j ]",
      "code": "if ( row [ i ] == row [ j ] )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "row [ i ] = 0",
      "code": "row [ i ] = 0 ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "row [ j ] = 0",
      "code": "row [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "if col [ i ] = col [ j ]",
      "code": "if ( col [ i ] == col [ j ] )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "col [ i ] = 0",
      "code": "col [ i ] = 0 ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "col [ j ] = 0",
      "code": "col [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "sort first 3 elements of row",
      "code": "sort ( row , row + 3 ) ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "sort first 3 elements of col",
      "code": "sort ( col , col + 3 ) ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print row [ 2 ] + 1 , \" \" and col [ 2 ] + 1",
      "code": "cout << row [ 2 ] + 1 << \" \" << col [ 2 ] + 1 << endl ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , r = 0 , c = 0 , c = 0 , j = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "vector < char > ch ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<char>’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int row [ 3 ] [ 3 ] ;"
      ],
      "err_line": 9,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int r = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( row [ i ] [ j ] == row [ j ] )"
      ],
      "err_line": 21,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "sort ( row row row + 3 ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘)’ before ‘row’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "sort ( col , col col 3 ) ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘)’ before ‘col’"
    },
    {
      "mod_line": [
        22,
        7,
        18
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "ch = getchar ( ) ;",
        "int r = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        7,
        18,
        33
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        7,
        18,
        6
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "while ( j < m ) ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        7,
        18,
        23
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        18
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "int r = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        18,
        33
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        18,
        33,
        6
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;",
        "while ( j < m ) ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        18,
        33,
        23
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        18,
        6
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "int r = 0 ;",
        "while ( j < m ) ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        18,
        6,
        23
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "int r = 0 ;",
        "while ( j < m ) ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        18,
        23
      ],
      "mod_code": [
        "row [ i ] = ' 0 ' ;",
        "int r = 0 ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "ch = getchar ( ) ;",
        "int r = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        18,
        33
      ],
      "mod_code": [
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        18,
        33,
        6
      ],
      "mod_code": [
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;",
        "while ( j < m ) ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        18,
        33,
        23
      ],
      "mod_code": [
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        18,
        6
      ],
      "mod_code": [
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "while ( j < m ) ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        18,
        6,
        23
      ],
      "mod_code": [
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "while ( j < m ) ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        7,
        18,
        23
      ],
      "mod_code": [
        "ch = getchar ( ) ;",
        "int r = 0 ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        18,
        33
      ],
      "mod_code": [
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        18,
        33,
        6
      ],
      "mod_code": [
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;",
        "while ( j < m ) ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        18,
        33,
        6,
        23
      ],
      "mod_code": [
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;",
        "while ( j < m ) ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        18,
        33,
        23
      ],
      "mod_code": [
        "int r = 0 ;",
        "cout << row [ 2 ] << 1 << \" \" << col [ 2 ] + 1 << endl ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        18,
        6
      ],
      "mod_code": [
        "int r = 0 ;",
        "while ( j < m ) ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        18,
        6,
        23
      ],
      "mod_code": [
        "int r = 0 ;",
        "while ( j < m ) ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        18,
        23
      ],
      "mod_code": [
        "int r = 0 ;",
        "row [ j ] = ' 0 ' ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int r’"
    }
  ]
}