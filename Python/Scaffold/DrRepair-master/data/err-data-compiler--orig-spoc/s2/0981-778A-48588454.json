{
  "meta": {
    "index": 981,
    "hitid": "3WKGUBL7SZGZ7P61ZYOX1F534QL4L1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "778A",
    "subid": "48588454"
  },
  "lines": [
    {
      "line": 0,
      "text": "void function READ with string arguments INPUT ( default value \" NO \" ) and OUTPUT ( default value \" NO \" )",
      "code": "void READ ( string INPUT = \" NO \" , string OUTPUT = \" NO \" )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if INPUT ! = \" NO \" open file INPUT . c_str ( ) for reading",
      "code": "if ( INPUT != \" NO \" ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if OUTPUT ! = \" NO \" open file OUTPUT . c_str ( ) for writing",
      "code": "if ( OUTPUT != \" NO \" ) freopen ( OUTPUT . c_str ( ) , \" w \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let A be integer array with size 200001",
      "code": "int A [ 200001 ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare string variables a and b",
      "code": "string a , b ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "function ok with integer argument k that returns boolean",
      "code": "bool ok ( int k )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "mp = map from integer to boolean",
      "code": "map < int , bool > mp ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to k exclusive , mp [ A [ i ] ] = 1",
      "code": "for ( int i = 0 ; i < k ; i ++ ) mp [ A [ i ] ] = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create integer id = 0",
      "code": "int id = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 while id < length of b and i < length of a",
      "code": "for ( int i = 0 ; id < ( int ) b . size ( ) && i < ( int ) a . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if mp [ i ] is not 0 , continue the loop",
      "code": "if ( mp [ i ] ) continue ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if a [ i ] = b [ id ] , increment id",
      "code": "if ( a [ i ] == b [ id ] ) id ++ ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "return true if id > = length of b , else return false",
      "code": "return id >= ( int ) b . size ( ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 17,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 0 to length of a exclusive",
      "code": "for ( int i = 0 ; i < ( int ) a . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read A [ i ]",
      "code": "cin >> A [ i ] ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "decrement A [ i ]",
      "code": "A [ i ] -- ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "declare integers l , r , m and ans where l = 0 and r = length of a",
      "code": "int l = 0 , r = ( int ) a . size ( ) , m , ans ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "while l < = r",
      "code": "while ( l <= r )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "m = ( l + r ) > > 1",
      "code": "m = ( l + r ) >> 1 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if ok ( m )",
      "code": "if ( ok ( m ) )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "set ans to m",
      "code": "ans = m ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "set l to m + 1",
      "code": "l = m + 1 ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 29,
      "text": "assign value of m - 1 to r",
      "code": "r = m - 1 ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print ans and \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) ) , OUTPUT ( \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) INPUT ( INPUT . c_str ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) OUTPUT << OUTPUT . c_str ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char*’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int * A [ 200001 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int*’ to ‘std::map<int, bool>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int a , b ;"
      ],
      "err_line": 10,
      "err_msg": "request for member ‘size’ in ‘b’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool ok ( int k ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "map < int , bool mp ;"
      ],
      "err_line": 7,
      "err_msg": "template argument 2 is invalid"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "id = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘id’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cin >> n >> b ;"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cin >> A . at ( i ) ;"
      ],
      "err_line": 19,
      "err_msg": "request for member ‘at’ in ‘A’, which is of non-class type ‘int [200001]’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int l , r , m = a . length ( ) , r = a . size ( ) ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 28,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "\" cout << ans << \" \\n \" ;"
      ],
      "err_line": 31,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . size ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        22
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( id >= b . size ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        14,
        22
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( id >= b . size ( ) ) return false ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        22
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        22,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        2,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . size ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        2,
        14,
        22
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . size ( ) ) return false ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        2,
        22
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        2,
        22,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        2,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( id >= b . size ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        14,
        22
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( id >= b . size ( ) ) return false ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        22,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT ( \" NO \" ) , OUTPUT ( \" NO \" ) ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . size ( ) ) return false ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        22
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . size ( ) ) return false ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        2,
        22
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        2,
        22,
        14
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( id >= b . size ( ) ) return false ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        14,
        22
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( id >= b . size ( ) ) return false ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        22,
        14
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "if ( INPUT != \" NO \" ) { INPUT ( INPUT . c_str ( ) ) ; }",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char*)’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . size ( ) ) return false ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        14,
        22
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . size ( ) ) return false ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        22,
        14
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) { OUTPUT . push_back ( \" NO \" ) ; }",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        22
      ],
      "mod_code": [
        "if ( id >= b . size ( ) ) return false ;",
        "int l , r , m = a . length ( ) , r = a . length ( ) ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "int l , r , m = a . length ( ) , r = a . length ( ) ;",
        "if ( id >= b . length ( ) ) return false ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int r’"
    }
  ]
}