{
  "meta": {
    "index": 1722,
    "hitid": "3XBXDSS888DQ5RUBJ9Q2YQ21Y8OLX6",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "1044A",
    "subid": "48272752"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer mod = 998244353",
      "code": "const int mod = 998244353 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare qpow taking in long long ints x and y and returning long long integer",
      "code": "long long qpow ( long long x , long long y )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "make long long s = 1",
      "code": "long long s = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while y is truthy",
      "code": "while ( y )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if y & 1 is truthy , set s to s * x % mod",
      "code": "if ( y & 1 ) s = s * x % mod ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set x to x * x % mod",
      "code": "x = x * x % mod ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "move the bits of y 1 place to the right",
      "code": "y >>= 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return s",
      "code": "return s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare inline read returning integer",
      "code": "inline int read ( )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "create integers x = 0 and f = 1",
      "code": "int x = 0 , f = 1 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "make char ch = getchar ( )",
      "code": "char ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while ch is less than ' 0 ' or ch is greater than ' 9 '",
      "code": "while ( ch < ' 0 ' || ch > ' 9 ' )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ch is equal to ' - ' , set f to - 1",
      "code": "if ( ch == ' - ' ) f = - 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set ch to getchar ( )",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while ch is greater than or equal to ' 0 ' and ch is less than or equal to ' 9 ' , set x to x * 10 + ch - ' 0 ' and ch to getchar ( )",
      "code": "while ( ch >= ' 0 ' && ch <= ' 9 ' ) x = x * 10 + ch - ' 0 ' , ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return the result of x * f",
      "code": "return x * f ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "declare inve taking in long long int x and returning long long",
      "code": "long long inve ( long long x )",
      "indent": 0
    },
    {
      "line": 21,
      "text": "return the result of x = = 1 ? 1 : ( mod - mod / x ) * inve ( mod % x ) % mod",
      "code": "return x == 1 ? 1 : ( mod - mod / x ) * inve ( mod % x ) % mod ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "make constant int maxn = 1e5 + 5",
      "code": "const int maxn = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 24,
      "text": "create int arrays a of size maxn and b of size maxn",
      "code": "int a [ maxn ] , b [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 26,
      "text": "make integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "sort a with argument a + n",
      "code": "sort ( a , a + n ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "let ints k = 0 and num = 0",
      "code": "int k = 0 , num = 0 ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "make ints x , y , and l",
      "code": "int x , y , l ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "read x , y , and l",
      "code": "cin >> x >> l >> y ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if x is equal to 1 , set b [ k + + ] to 1",
      "code": "if ( x == 1 ) b [ k ++ ] = l ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "if l is equal to 1e9 , increment num",
      "code": "if ( l == 1e9 ) num ++ ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "sort b using b + k",
      "code": "sort ( b , b + k ) ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "create integers tmp = k and ans = num + n",
      "code": "int tmp = k , ans = num + n ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "for i = 0 and j = 0 to n exclusive",
      "code": "for ( int i = 0 , j = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "while j is less than k and b [ j ] is less than a [ i ] , subtract 1 from tmp and add 1 to j",
      "code": "while ( j < k && b [ j ] < a [ i ] ) tmp -- , j ++ ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "set ans to the min of ans and tmp + i",
      "code": "ans = min ( ans , tmp + i ) ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "display ( ans )",
      "code": "cout << ( ans ) << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const mod int mod = 998244353 ;"
      ],
      "err_line": 0,
      "err_msg": "‘mod’ does not name a type"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char ch = \" getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int a [ maxn ] [ maxn ] ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100005]’)"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "sort ( a + a + n ) ;"
      ],
      "err_line": 29,
      "err_msg": "invalid operands of types ‘int [100005]’ and ‘int [100005]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "int num = 0 , num = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "redeclaration of ‘int num’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        33
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        34
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        34,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        34,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        34,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        40,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        40,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        33,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "cin >> x >> y >> l ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        34
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        34,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        34,
        40,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        34,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        34,
        40,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        34,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        40,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        40
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        40,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        21,
        38
      ],
      "mod_code": [
        "return x == 1 ? : : mod - mod / x ) * inve ( mod % x ) % mod ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        33,
        34,
        40,
        38
      ],
      "mod_code": [
        "cin >> x >> y >> l ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        33,
        34,
        40,
        38
      ],
      "mod_code": [
        "cin >> x >> y >> l ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        33,
        34,
        38
      ],
      "mod_code": [
        "cin >> x >> y >> l ;",
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        33,
        40,
        38
      ],
      "mod_code": [
        "cin >> x >> y >> l ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        33,
        40,
        38
      ],
      "mod_code": [
        "cin >> x >> y >> l ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        33,
        38
      ],
      "mod_code": [
        "cin >> x >> y >> l ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        34,
        40,
        38
      ],
      "mod_code": [
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        34,
        40,
        38
      ],
      "mod_code": [
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        34,
        38
      ],
      "mod_code": [
        "if ( x == 1 ) b [ k ++ ] = 1 ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        40,
        38
      ],
      "mod_code": [
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        40,
        38
      ],
      "mod_code": [
        "while ( j < k && b [ j ] < a [ i ] ) tmp ++ , j ++ ;",
        "int tmp = k , ans += n ;"
      ],
      "err_line": 38,
      "err_msg": "expected initializer before ‘+=’ token"
    }
  ]
}