{
  "meta": {
    "index": 520,
    "hitid": "3M7OI89LVYIKJ8G959ODVUZU7VB6CH",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "916A",
    "subid": "41197360"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "loop while reading n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "h , m = int",
      "code": "int h , m ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read h then m",
      "code": "cin >> h >> m ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if h / 10 is 7 or h mod 10 is 7 or m / 10 is 7 or m mod 10 is 7",
      "code": "if ( h / 10 == 7 or h % 10 == 7 or m / 10 == 7 or m % 10 == 7 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "c = int with c = 0",
      "code": "int c = 0 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "loop infinitely",
      "code": "while ( 1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if m - n < 0",
      "code": "if ( m - n < 0 )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "increment m by 60",
      "code": "m += 60 ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "decrement m by n",
      "code": "m -= n ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "if h - 1 < 0",
      "code": "if ( h - 1 < 0 )",
      "indent": 5
    },
    {
      "line": 15,
      "text": "increment h by 23",
      "code": "h += 23 ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 17,
      "text": "decrement h",
      "code": "h -- ;",
      "indent": 6
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "decrement m by n",
      "code": "m -= n ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "if m / 1 is 7 or m mod 10 is 7",
      "code": "if ( m / 1 == 7 or m % 10 == 7 )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "print c",
      "code": "cout << c << endl ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if h / 10 is 7 or h mod 10 is 7",
      "code": "if ( h / 10 == 7 or h % 10 == 7 )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "print c",
      "code": "cout << c << endl ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> n )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        2
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "while ( { cin >> n )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        2,
        18
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        2,
        8
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "while ( { cin >> n )",
        "int c = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        2,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        18
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        18,
        8
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "n",
        "int c = ' 0 ' ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        18,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "n",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        8,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        25,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "cout << c ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "while ( { cin >> n )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        18
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        18,
        8
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "while ( { cin >> n )",
        "n",
        "int c = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        18,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "while ( { cin >> n )",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "while ( { cin >> n )",
        "int c = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        8,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "while ( { cin >> n )",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        18,
        8
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "n",
        "int c = ' 0 ' ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        18,
        8,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "n",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        18,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "n",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        8,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2
      ],
      "mod_code": [
        "cout << c ;",
        "while ( { cin >> n )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2,
        18
      ],
      "mod_code": [
        "cout << c ;",
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2,
        18,
        8
      ],
      "mod_code": [
        "cout << c ;",
        "while ( { cin >> n )",
        "n",
        "int c = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2,
        18,
        16
      ],
      "mod_code": [
        "cout << c ;",
        "while ( { cin >> n )",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2,
        8
      ],
      "mod_code": [
        "cout << c ;",
        "while ( { cin >> n )",
        "int c = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2,
        8,
        16
      ],
      "mod_code": [
        "cout << c ;",
        "while ( { cin >> n )",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2,
        16
      ],
      "mod_code": [
        "cout << c ;",
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        18
      ],
      "mod_code": [
        "cout << c ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        18,
        8
      ],
      "mod_code": [
        "cout << c ;",
        "n",
        "int c = ' 0 ' ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        18,
        8,
        16
      ],
      "mod_code": [
        "cout << c ;",
        "n",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        18,
        16
      ],
      "mod_code": [
        "cout << c ;",
        "n",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        8,
        16
      ],
      "mod_code": [
        "cout << c ;",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        16
      ],
      "mod_code": [
        "cout << c ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        18,
        8
      ],
      "mod_code": [
        "while ( { cin >> n )",
        "n",
        "int c = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        18,
        8,
        16
      ],
      "mod_code": [
        "while ( { cin >> n )",
        "n",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        18,
        16
      ],
      "mod_code": [
        "while ( { cin >> n )",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( { cin >> n )",
        "int c = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        16
      ],
      "mod_code": [
        "while ( { cin >> n )",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "while ( { cin >> n )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        8
      ],
      "mod_code": [
        "n",
        "int c = ' 0 ' ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        8,
        16
      ],
      "mod_code": [
        "n",
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        16
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "int c = ' 0 ' ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}