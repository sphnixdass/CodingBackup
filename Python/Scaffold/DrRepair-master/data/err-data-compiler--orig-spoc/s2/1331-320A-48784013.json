{
  "meta": {
    "index": 1331,
    "hitid": "31KSVEGZ34MMJPKYEORCIJXTVYAWRH",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "320A",
    "subid": "48784013"
  },
  "lines": [
    {
      "line": 0,
      "text": "in void function READ taking INPUT = string = \" NO \" , OUTPUT = string = \" NO \"",
      "code": "void READ ( string INPUT = \" NO \" , string OUTPUT = \" NO \" )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if INPUT isn ' t \" NO \" then call freopen taking INPUT . c_str ( ) , \" r \" , stdin",
      "code": "if ( INPUT != \" NO \" ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if OUTPUT isn ' t \" NO \" then call freopen with OUTPUT . c_str ( ) , \" w \" , stdout",
      "code": "if ( OUTPUT != \" NO \" ) freopen ( OUTPUT . c_str ( ) , \" w \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "in bool function ok taking string x",
      "code": "bool ok ( string x )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "if size of x isn ' t 0",
      "code": "if ( ! ( int ) x . size ( ) ) return true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if size of x > = 3 and substring of x from 0 to 3 = \" 144 \" and ok of substring of x with 3 isn ' t 0 , then return true",
      "code": "if ( ( int ) x . size ( ) >= 3 && x . substr ( 0 , 3 ) == \" 144 \" && ok ( x . substr ( 3 ) ) ) return true ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if size of x > = 2 and substring of x from 0 to 2 = \" 14 \" and ok of substring of x with 2 isn ' t 0 , then return true",
      "code": "if ( ( int ) x . size ( ) >= 2 && x . substr ( 0 , 2 ) == \" 14 \" && ok ( x . substr ( 2 ) ) ) return true ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if size of x > = 1 and substring of x from 0 to 1 = \" 1 \" and ok of substring of x with 1 isn ' t 0 , then return true",
      "code": "if ( ( int ) x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && ok ( x . substr ( 1 ) ) ) return true ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "x = string",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "is ok of x ? the print YES , else print NO",
      "code": "cout << ( ok ( x ) ? \" YES\\n \" : \" NO\\n \" ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘bool’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "could not convert ‘x’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( OUTPUT != \" NO \" ) freopen ( OUTPUT . c_str ( ) ) , \" w \" , stdout ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( x . size ( ) >= 3 && x . substr ( 0 , 3 ) == \" 144 \" && x . substr ( 0 ) ) return true ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘bool’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( x . size ( ) >= 2 && x . substr ( 0 , 2 ) == \" 14 \" && x . substr ( 2 , 2 ) ) return true ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘bool’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 13,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) )"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        5,
        8
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        5,
        8,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        5,
        8,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        5,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        5,
        14,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        5,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) )",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        8,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        8,
        14,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        8,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        14,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" )",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘bool’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        5,
        8,
        14
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘bool’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        0
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        5,
        8,
        0
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        8,
        0,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        8,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "could not convert ‘x’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        5,
        14,
        0
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        0,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        0,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) )",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘bool’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        8,
        14,
        0
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        8,
        14,
        0,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        8,
        14,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        8,
        0,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( x . size ( ) >= 1 && x . substr ( 0 , 1 ) == \" 1 \" && x . substr ( 0 , 1 ) ) return true ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        14,
        0
      ],
      "mod_code": [
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        14,
        0,
        1
      ],
      "mod_code": [
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "cout << ( x ? \" YES \" : \" NO \" ) << endl ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 1,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (const char [3])’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void READ ( string INPUT = \" NO \" , OUTPUT = \" NO \" ) ;",
        "if ( ! INPUT ( \" NO \" ) ) freopen ( INPUT . c_str ( ) , \" r \" , stdin ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘OUTPUT’ has not been declared"
    }
  ]
}