{
  "meta": {
    "index": 23,
    "hitid": "3D1UCPY6GG3JAM3E5VAAM5RR7DJ38X",
    "workerid": "AIWEXPJAU66D9",
    "probid": "63A",
    "subid": "44027144"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read from the input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let arr be 2d string array with size n by 2",
      "code": "string arr [ n ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read input to arr [ i ] [ 0 ] and arr [ i ] [ 1 ]",
      "code": "cin >> arr [ i ] [ 0 ] >> arr [ i ] [ 1 ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if arr [ i ] [ 1 ] is \" rat \"",
      "code": "if ( arr [ i ] [ 1 ] == \" rat \" )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign \" 0 \" to arr [ i ] [ 1 ]",
      "code": "arr [ i ] [ 1 ] = \" 0 \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if arr [ i ] [ 1 ] is \" child \" or arr [ i ] [ 1 ] is \" woman \"",
      "code": "else if ( arr [ i ] [ 1 ] == \" child \" || arr [ i ] [ 1 ] == \" woman \" )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change arr [ i ] [ 1 ] to \" 1 \"",
      "code": "arr [ i ] [ 1 ] = \" 1 \" ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if arr [ i ] [ 1 ] is \" man \"",
      "code": "else if ( arr [ i ] [ 1 ] == \" man \" )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "change arr [ i ] [ 1 ] to \" 2 \"",
      "code": "arr [ i ] [ 1 ] = \" 2 \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "change arr [ i ] [ 1 ] to \" 3 \"",
      "code": "arr [ i ] [ 1 ] = \" 3 \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare integer variable i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while i < n - 1",
      "code": "while ( i < n - 1 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if arr [ i ] [ 1 ] is greater than arr [ i + 1 ] [ 1 ]",
      "code": "if ( arr [ i ] [ 1 ] > arr [ i + 1 ] [ 1 ] )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "swap arr [ i ] [ 0 ] and arr [ i + 1 ] [ 0 ]",
      "code": "swap ( arr [ i ] [ 0 ] , arr [ i + 1 ] [ 0 ] ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "swap arr [ i ] [ 1 ] and arr [ i + 1 ] [ 1 ]",
      "code": "swap ( arr [ i ] [ 1 ] , arr [ i + 1 ] [ 1 ] ) ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "assign 0 to i",
      "code": "i = 0 ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "skip the rest of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "increment i by one",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 0 to n exclusive print arr [ i ] [ 0 ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] << endl ; }",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char arr [ n ] [ 2 ] ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "arr [ i ] [ 1 ] *= \" 2 \" ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator*=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( arr [ i ] [ 1 ] [ 1 ] > arr [ i + 1 ] )"
      ],
      "err_line": 18,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "swap ( arr [ i ] [ 0 ] , arr [ i + 1 ] [ 0 ] ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "swap ( arr [ i ] [ 1 ] , arr [ i + 1 ] [ 1 ] ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "rest ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        10,
        22
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        10,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        10,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        22
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "rest ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        22,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        22,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "rest ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        7,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        5,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        10,
        22
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        10,
        22,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26,
        10,
        22,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;",
        "int i = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        10,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26,
        10,
        7,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26,
        22
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "rest ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        22,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26,
        22,
        7,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26,
        22,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "rest ;",
        "int i = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26,
        7,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] [ 0 ] ; }",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        22
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        22,
        7
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        22,
        21
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        7
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        7,
        21
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        21
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "rest ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        22,
        7
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        22,
        7,
        21
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        22,
        21
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "rest ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        7,
        21
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "cin >> arr [ i ] [ 0 ] << arr [ i ] [ 1 ] ;",
        "int i = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        22
      ],
      "mod_code": [
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        22,
        7
      ],
      "mod_code": [
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        10,
        22,
        7,
        21
      ],
      "mod_code": [
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        10,
        22,
        21
      ],
      "mod_code": [
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "rest ;",
        "int i = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        10,
        7,
        21
      ],
      "mod_code": [
        "else if ( arr [ i ] [ 1 ] == \" [] \" )",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        22,
        7
      ],
      "mod_code": [
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        22,
        7,
        21
      ],
      "mod_code": [
        "rest ;",
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        22,
        21
      ],
      "mod_code": [
        "rest ;",
        "int i = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "int arr [ i ] [ 1 ] = \" 0 \" ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    }
  ]
}