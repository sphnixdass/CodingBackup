{
  "meta": {
    "index": 1562,
    "hitid": "37NXA7GVST0Y12PGJUPKA55GIXKVLH",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "1028A",
    "subid": "47817088"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "c = array of n pointers to array of char",
      "code": "char * * c = new char * [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive c [ i ] = array of m char",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = new char [ m ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to m exclusive read c [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < m ; j ++ ) { cin >> c [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "found = false",
      "code": "bool found = false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "a , i1 , j1 = int",
      "code": "int a , i1 , j1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "a = 0",
      "code": "a = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "i c [ i ] [ j ] is ' B '",
      "code": "if ( c [ i ] [ j ] == ' B ' )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "i1 = i",
      "code": "i1 = i ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "j1 = j",
      "code": "j1 = j ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "for k = j to m exclusive",
      "code": "for ( int k = j ; k < m ; k ++ )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "increment a",
      "code": "a ++ ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "if c [ i ] [ k + 1 ] is ' W ' or k is m - 1",
      "code": "if ( c [ i ] [ k + 1 ] == ' W ' || k == m - 1 )",
      "indent": 5
    },
    {
      "line": 19,
      "text": "found = true",
      "code": "found = true ;",
      "indent": 6
    },
    {
      "line": 20,
      "text": "break",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if found is true break",
      "code": "if ( found == true ) { break ; }",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if found is true break",
      "code": "if ( found == true ) { break ; }",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print i1 + a / 2 + 1 , space , j1 + a / 2 + 1",
      "code": "cout << i1 + ( a / 2 ) + 1 << \" \" << j1 + ( a / 2 ) + 1 << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "found = false ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char c [ n ] [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘char*’ to ‘char [n]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) c [ i ] = m [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int a = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "i [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( k = j ; k < m ; k ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        13
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        19
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "bool found = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        13
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "c [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        19
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "c [ i ] [ j ] = ' B ' ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        19
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "bool found = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        19,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "found = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        19
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        19
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "found = false ;",
        "bool found = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        19,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "found = false ;",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "found = false ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "c [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        19
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        19,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "c [ i ] [ j ] = ' B ' ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "bool found = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        28
      ],
      "mod_code": [
        "c = [ n ] [ n ] ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        13
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        13,
        19
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        13,
        28
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        19
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "bool found = true ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        19,
        28
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        28
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "found = false ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "c [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        13,
        19
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        13,
        19,
        28
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        13,
        28
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "c [ i ] [ j ] = ' B ' ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "bool found = true ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19,
        28
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        28
      ],
      "mod_code": [
        "for ( char i = 0 ; i < n ; i ++ ) { c [ i ] = m [ i ] ; }",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        19
      ],
      "mod_code": [
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        28
      ],
      "mod_code": [
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        28
      ],
      "mod_code": [
        "found = false ;",
        "c [ i ] [ j ] = ' B ' ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "found = false ;",
        "bool found = true ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        19,
        28
      ],
      "mod_code": [
        "found = false ;",
        "bool found = true ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        28
      ],
      "mod_code": [
        "found = false ;",
        "cout << i1 + a / 2 + 1 << \" \" << j1 + j1 / 2 + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘found’ was not declared in this scope"
    }
  ]
}