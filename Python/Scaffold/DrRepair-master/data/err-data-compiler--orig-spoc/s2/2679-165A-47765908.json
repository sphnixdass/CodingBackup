{
  "meta": {
    "index": 2679,
    "hitid": "3XT3KXP24ZSBWB29XJKZ6XXPK0QI6Q",
    "workerid": "AIWEXPJAU66D9",
    "probid": "165A",
    "subid": "47765908"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let a be 2d int array with size n by 2",
      "code": "int a [ n ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop i from 0 to n exclusive , read a [ i ] [ 0 ] and a [ i ] [ 1 ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] [ 0 ] >> a [ i ] [ 1 ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare int count = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "loop i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "x and y are integers with x = a [ i ] [ 0 ] and y = a [ i ] [ 1 ]",
      "code": "int x = a [ i ] [ 0 ] , y = a [ i ] [ 1 ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "declare bool variables r , l , t and b = false",
      "code": "bool r = false , l = false , t = false , b = false ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if x > a [ j ] [ 0 ] and y = a [ j ] [ 1 ] , set l to true",
      "code": "if ( x > a [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if x < a [ j ] [ 0 ] and y = a [ j ] [ 1 ] , set r to true",
      "code": "if ( x < a [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) r = true ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if x = a [ j ] [ 0 ] and y > a [ j ] [ 1 ] , set b to true",
      "code": "if ( x == a [ j ] [ 0 ] && y > a [ j ] [ 1 ] ) b = true ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if x = a [ j ] [ 0 ] and y < a [ j ] [ 1 ] , set t to true",
      "code": "if ( x == a [ j ] [ 0 ] && y < a [ j ] [ 1 ] ) t = true ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if r , l , t and b are all true , increment count by one",
      "code": "if ( r && l && t && b ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "bool r = false , l , t = false ;"
      ],
      "err_line": 12,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int l ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * a [ n ] [ 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "const int count = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "increment of read-only variable ‘count’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int x = a [ i ] [ 0 ] , y = a [ a ] [ 1 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int [n][2][int [n][2]]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) r = true ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( x == a [ j ] && y < a [ j ] && y < a [ j ] ) t = true ;"
      ],
      "err_line": 13,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        12
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        15
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        15
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        15
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        15,
        10
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        10
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        15,
        10
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "bool r = false , l , t = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        12,
        15
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        8
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "bool r , l , t = false , b = false ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        12,
        8
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "bool r , l , t = false , b = false ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        15,
        8
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "bool r , l , t = false , b = false ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) l = true ;",
        "bool r , l , t = false , b = false ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        8
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "bool r , l , t = false , b = false ;"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        8,
        10
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "bool r , l , t = false , b = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15,
        10
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "bool r , l , t = false , b = false ;"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8,
        10
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "bool r , l , t = false , b = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "if ( x == a [ j ] && y > a [ j ] && y > a [ j ] [ 1 ] ) b = true ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        8,
        10
      ],
      "mod_code": [
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "bool r , l , t = false , b = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "if ( ! r && l == true && t == true && b == true ) count ++ ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "bool r , l , t = false , b = false ;",
        "if ( x [ j ] [ 0 ] && y == a [ j ] [ 1 ] ) { l = true ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}