{
  "meta": {
    "index": 798,
    "hitid": "3M47JKRKCXVI75QWOX88T83BH4L868",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "225A",
    "subid": "37222236"
  },
  "lines": [
    {
      "line": 0,
      "text": "a , b = integers",
      "code": "int a , b ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in the function ok that takes integer j and returns bool",
      "code": "bool ok ( int j )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if j is not a and j is not 7 - a and j is not b and j is not 7 - b , return true",
      "code": "if ( j != a && j != 7 - a && j != b && j != 7 - b ) return true ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "n , top , i , j , f , res = integers with f = 0 , res = 1",
      "code": "int n , top , i , j , f = 0 , res = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read top",
      "code": "cin >> top ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "top = 7 - top",
      "code": "top = 7 - top ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for j = 1 to 6",
      "code": "for ( j = 1 ; j <= 6 ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ok ( j )",
      "code": "if ( ok ( j ) )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if j is top",
      "code": "if ( j == top )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "top = 7 - j",
      "code": "top = 7 - j ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "f = 1",
      "code": "f = 1 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if not f , res = 0",
      "code": "if ( ! f ) { res = 0 ; }",
      "indent": 2
    },
    {
      "line": 21,
      "text": "f = 0",
      "code": "f = 0 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if res",
      "code": "if ( res )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "top ( top ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘top’ cannot be used as a function"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        1,
        13,
        25
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "bool ok ( bool j )",
        "if ( ! ok ( j ) )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        1,
        23,
        25
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "bool ok ( bool j )",
        "if ( ! res )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        1,
        25
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "bool ok ( bool j )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        1,
        25,
        21
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "bool ok ( bool j )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        23,
        25
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "if ( ! ok ( j ) )",
        "if ( ! res )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        25
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "if ( ! ok ( j ) )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        25,
        21
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "if ( ! ok ( j ) )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        23,
        25
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "if ( ! res )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        23,
        25,
        21
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "if ( ! res )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        25
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        25,
        21
      ],
      "mod_code": [
        "for ( int j = 1 ; j < 6 ; j ++ )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        23,
        25
      ],
      "mod_code": [
        "bool ok ( bool j )",
        "if ( ! ok ( j ) )",
        "if ( ! res )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        25
      ],
      "mod_code": [
        "bool ok ( bool j )",
        "if ( ! ok ( j ) )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        25,
        21
      ],
      "mod_code": [
        "bool ok ( bool j )",
        "if ( ! ok ( j ) )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        25
      ],
      "mod_code": [
        "bool ok ( bool j )",
        "if ( ! res )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        25,
        21
      ],
      "mod_code": [
        "bool ok ( bool j )",
        "if ( ! res )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        25
      ],
      "mod_code": [
        "bool ok ( bool j )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        25,
        21
      ],
      "mod_code": [
        "bool ok ( bool j )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        23,
        25
      ],
      "mod_code": [
        "if ( ! ok ( j ) )",
        "if ( ! res )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        23,
        25,
        21
      ],
      "mod_code": [
        "if ( ! ok ( j ) )",
        "if ( ! res )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        25
      ],
      "mod_code": [
        "if ( ! ok ( j ) )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        25,
        21
      ],
      "mod_code": [
        "if ( ! ok ( j ) )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        25
      ],
      "mod_code": [
        "if ( ! res )",
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        25,
        21
      ],
      "mod_code": [
        "if ( ! res )",
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        21
      ],
      "mod_code": [
        "n",
        "int f = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}