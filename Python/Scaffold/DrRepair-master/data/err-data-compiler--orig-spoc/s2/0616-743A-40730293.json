{
  "meta": {
    "index": 616,
    "hitid": "3D17ECOUOEP1ZMJT6A1V7V4JT7F13D",
    "workerid": "AIWEXPJAU66D9",
    "probid": "743A",
    "subid": "40730293"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare const int maxn = 1e6 + 6",
      "code": "const int maxn = 1e6 + 6 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create ints n , a and b",
      "code": "int n , a , b ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare an array of integers arr with size maxn",
      "code": "int arr [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare int variable len = 0",
      "code": "int len = 0 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare string variable str",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read input to n , a and b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read input to str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "loop i from 1 to n inclusive , assign str [ i - 1 ] to arr [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = str [ i - 1 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if arr [ a ] is equal to arr [ b ]",
      "code": "if ( arr [ a ] == arr [ b ] )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" 0 \"",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" 1 \"",
      "code": "cout << \" 1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a + b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int * arr [ maxn ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string str << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "str >> str ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] = str [ i - 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        4
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "string str << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "string str << endl ;",
        "int * arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "string str << endl ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "string str << endl ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "int * arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        2,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "int * arr [ maxn ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        10,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int n , a + b ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "string str << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "string str << endl ;",
        "int * arr [ maxn ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4,
        2,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "string str << endl ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4,
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "string str << endl ;",
        "int * arr [ maxn ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "string str << endl ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4,
        10,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "string str << endl ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "string str << endl ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int * arr [ maxn ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        2,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        2,
        10,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "int * arr [ maxn ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] [ i ] [ i ] = str [ i - 1 ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "string str << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "int n , a + b ;",
        "string str << endl ;",
        "int * arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        4,
        2,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "string str << endl ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        4,
        2,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "string str << endl ;",
        "int * arr [ maxn ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "string str << endl ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        4,
        10,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "string str << endl ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "string str << endl ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , a + b ;",
        "int * arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        2,
        10,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "int * arr [ maxn ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "string str << endl ;",
        "int * arr [ maxn ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2,
        10
      ],
      "mod_code": [
        "string str << endl ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2,
        10,
        6
      ],
      "mod_code": [
        "string str << endl ;",
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "string str << endl ;",
        "int * arr [ maxn ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "string str << endl ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        6
      ],
      "mod_code": [
        "string str << endl ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "string str << endl ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10,
        6
      ],
      "mod_code": [
        "int * arr [ maxn ] ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int * arr [ maxn ] ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘int*’ [-fpermissive]"
    }
  ]
}