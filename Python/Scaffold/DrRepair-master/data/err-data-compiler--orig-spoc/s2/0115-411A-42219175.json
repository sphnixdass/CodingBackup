{
  "meta": {
    "index": 115,
    "hitid": "368IUKXGA523DXPDAEAJFUY16ER6PW",
    "workerid": "AIWEXPJAU66D9",
    "probid": "411A",
    "subid": "42219175"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new integer constants N = 1e3 + 5 and OO = 0x3f3f3f3f",
      "code": "const int N = 1e3 + 5 , OO = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "boolean function check with char argument x",
      "code": "bool check ( char x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return true if x is one of ' ! ' , ' _ ' , ' ? ' , ' . ' or ' , ' or else otherwise",
      "code": "return x == ' ! ' || x == ' _ ' || x == ' ? ' || x == ' . ' || x == ' , ' ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s from the user input",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "a is a new array of integers with size 5",
      "code": "int a [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "change values of first sizeof ( a ) bytes at the pointer a to 0",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare boolean variable with name f and value 1",
      "code": "bool f = 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if length of s is less than 5 , return puts ( \" Too weak \" ) , 0",
      "code": "if ( s . size ( ) < 5 ) return puts ( \" Too weak \" ) , 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "in a for loop , change i from 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s [ i ] is a digit character",
      "code": "if ( s [ i ] >= ' 0 ' && s [ i ] <= ' 9 ' )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment a [ 0 ] by one",
      "code": "a [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if s [ i ] > = ' a ' and s [ i ] < = ' z '",
      "code": "else if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment a [ 1 ] by one",
      "code": "a [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if s [ i ] is a capital letter character",
      "code": "else if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment a [ 2 ] by one",
      "code": "a [ 2 ] ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "in a for loop , change i from 0 to 3 exclusive incrementing i",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if a [ i ] is false , change the value of f to 0",
      "code": "if ( ! a [ i ] ) f = 0 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if f is true",
      "code": "if ( f )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" Correct \" to standard output",
      "code": "puts ( \" Correct \" ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" Too weak \" to standard output",
      "code": "puts ( \" Too weak \" ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int N = 1e3 + 5 , N = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int N’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool check ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 10,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "a [ 5 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "bool f , 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a [ ++ ] ++ ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘]’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12,
        23,
        8
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        12,
        23,
        22
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12,
        23,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        12,
        8
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        12,
        8,
        22
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "memset ( a , 0 ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        12,
        8,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "memset ( a , 0 ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        12,
        22
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12,
        22,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        12,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "if ( s [ i ] >= ' 0 ' )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        23,
        8
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        23,
        8,
        22
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        23,
        8,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        23,
        22
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "cout << \" Too \" << endl ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        23,
        22,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "cout << \" Too \" << endl ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        23,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "cout << \" Too \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        8,
        22
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "memset ( a , 0 ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        8,
        22,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "memset ( a , 0 ) ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        8,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "memset ( a , 0 ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        22
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        22,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "if ( s . size ( ) < 5 ) return puts ( \" Too \" ) , 0 ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        23,
        8
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        12,
        23,
        8,
        22
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        12,
        23,
        8,
        6
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        23,
        22
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        23,
        22,
        6
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        23,
        6
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "cout << \" Too \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        12,
        8,
        22
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "memset ( a , 0 ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        12,
        8,
        22,
        6
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "memset ( a , 0 ) ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        8,
        6
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "memset ( a , 0 ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        22
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        22,
        6
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 0 ' )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        8
      ],
      "mod_code": [
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        23,
        8,
        22
      ],
      "mod_code": [
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        23,
        8,
        22,
        6
      ],
      "mod_code": [
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        8,
        6
      ],
      "mod_code": [
        "cout << \" Too \" << endl ;",
        "memset ( a , 0 ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        22
      ],
      "mod_code": [
        "cout << \" Too \" << endl ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        22,
        6
      ],
      "mod_code": [
        "cout << \" Too \" << endl ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        6
      ],
      "mod_code": [
        "cout << \" Too \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "memset ( a , 0 ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        8,
        22,
        6
      ],
      "mod_code": [
        "memset ( a , 0 ) ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "memset ( a , 0 ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        6
      ],
      "mod_code": [
        "n",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}