{
  "meta": {
    "index": 2077,
    "hitid": "3HEM8MA6H96WNF8XPNOHLZFS6F1PQA",
    "workerid": "A1APYLD4DUK33J",
    "probid": "59A",
    "subid": "42348227"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers upper = 0 , lower = 0",
      "code": "int upper = 0 , lower = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string name",
      "code": "string name ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read name",
      "code": "cin >> name ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of name exclusive",
      "code": "for ( int i = 0 ; i < name . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if name [ i ] is upper case character",
      "code": "if ( isupper ( name [ i ] ) )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment upper by 1",
      "code": "upper += 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment lower by 1",
      "code": "lower += 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if upper is greater than lower",
      "code": "if ( upper > lower )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to length of name exclusive , let name [ i ] be upper case name [ i ]",
      "code": "for ( int i = 0 ; i < name . length ( ) ; i ++ ) { name [ i ] = toupper ( name [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to length of name exclusive , let name [ i ] be lower case name [ i ]",
      "code": "for ( int i = 0 ; i < name . length ( ) ; i ++ ) { name [ i ] = tolower ( name [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print name and newline",
      "code": "cout << name << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int upper = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘lower’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "inline string name ;"
      ],
      "err_line": 2,
      "err_msg": "‘name’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11,
        1
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "if ( upper > 3 )",
        "int upper = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘lower’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11,
        1,
        7
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "if ( upper > 3 )",
        "int upper = 0 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11,
        1,
        3
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "if ( upper > 3 )",
        "int upper = 0 ;",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        11,
        7
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "if ( upper > 3 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11,
        7,
        3
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "if ( upper > 3 )",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        11,
        3
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "if ( upper > 3 )",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "int upper = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘lower’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        7
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "int upper = 0 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        7,
        3
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "int upper = 0 ;",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        1,
        3
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "int upper = 0 ;",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        3
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( name [ i ] )",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        5,
        1
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "if ( name [ i ] == ' 0 ' )",
        "int upper = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘lower’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        5,
        1,
        7
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "if ( name [ i ] == ' 0 ' )",
        "int upper = 0 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        5,
        1,
        3
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "if ( name [ i ] == ' 0 ' )",
        "int upper = 0 ;",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        5,
        7
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "if ( name [ i ] == ' 0 ' )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        5,
        7,
        3
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "if ( name [ i ] == ' 0 ' )",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        5,
        3
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "if ( name [ i ] == ' 0 ' )",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "int upper = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘lower’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1,
        7
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "int upper = 0 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1,
        7,
        3
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "int upper = 0 ;",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        1,
        3
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "int upper = 0 ;",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        7,
        3
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "if ( upper > 3 )",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( name [ i ] == ' 0 ' )",
        "int upper = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘lower’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        7
      ],
      "mod_code": [
        "if ( name [ i ] == ' 0 ' )",
        "int upper = 0 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        7,
        3
      ],
      "mod_code": [
        "if ( name [ i ] == ' 0 ' )",
        "int upper = 0 ;",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        1,
        3
      ],
      "mod_code": [
        "if ( name [ i ] == ' 0 ' )",
        "int upper = 0 ;",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( name [ i ] == ' 0 ' )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        3
      ],
      "mod_code": [
        "if ( name [ i ] == ' 0 ' )",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( name [ i ] == ' 0 ' )",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int upper = 0 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "int upper = 0 ;",
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int upper = 0 ;",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "n",
        "gets ( name ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}