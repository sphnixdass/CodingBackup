{
  "meta": {
    "index": 117,
    "hitid": "3BA7SXOG1JKBTOOGGLB643U7DR4R8U",
    "workerid": "AIWEXPJAU66D9",
    "probid": "411A",
    "subid": "19010836"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new string variable str",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "new string variable called result with a value = \" Correct \"",
      "code": "string result = \" Correct \" ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare new integer called ii",
      "code": "int ii ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create new integer called len",
      "code": "int len ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare new boolean variables haveNum , haveSmallLetter and haveBigLetter = 0",
      "code": "bool haveNum = 0 , haveSmallLetter = 0 , haveBigLetter = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read user input to str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for ii = 0 and len = length of str while ii < len ,",
      "code": "for ( ii = 0 , len = str . size ( ) ; ii < len ; ii ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if str [ ii ] is a digit character",
      "code": "if ( ( str [ ii ] >= ' 0 ' ) && ( str [ ii ] <= ' 9 ' ) )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change the value of haveNum to 1",
      "code": "haveNum = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if str [ ii ] is a capital letter character is true",
      "code": "else if ( ( str [ ii ] >= ' A ' ) && ( str [ ii ] <= ' Z ' ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "assign the new value = 1 to haveBigLetter",
      "code": "haveBigLetter = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if str [ ii ] > = ' a ' and str [ ii ] < = ' z ' is true",
      "code": "else if ( ( str [ ii ] >= ' a ' ) && ( str [ ii ] <= ' z ' ) )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set haveSmallLetter to 1",
      "code": "haveSmallLetter = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if len < 5 or any of haveNum , haveBigLetter or haveSmallLetter is false , assign \" Too weak \" to result",
      "code": "if ( ( len < 5 ) || ! haveNum || ! haveBigLetter || ! haveSmallLetter ) result = \" Too weak \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print result to the standard output",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string str = endl ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string a = \" Correct \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "* haveNum = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "haveBigLetter = l ;"
      ],
      "err_line": 11,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        8
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "if ( str [ ii ] >= ' 0 ' )"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        10
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "if ( str [ ii ] >= ' 0 ' )",
        "else if ( str [ ii ] >= ' A ' )"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        15
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "if ( str [ ii ] >= ' 0 ' )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "if ( str [ ii ] >= ' 0 ' )",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "else if ( str [ ii ] >= ' A ' )"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        15
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "else if ( str [ ii ] >= ' A ' )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "else if ( str [ ii ] >= ' A ' )",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        15
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        15,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "for ( int ii = 0 , len = str . length ( ) ; ii < len ; ii ++ )",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( str [ ii ] >= ' 0 ' )"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        10
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( str [ ii ] >= ' 0 ' )",
        "else if ( str [ ii ] >= ' A ' )"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        15
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( str [ ii ] >= ' 0 ' )",
        "else if ( str [ ii ] >= ' A ' )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( str [ ii ] >= ' 0 ' )",
        "else if ( str [ ii ] >= ' A ' )",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        15
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( str [ ii ] >= ' 0 ' )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( str [ ii ] >= ' 0 ' )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( str [ ii ] >= ' 0 ' )",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "else if ( str [ ii ] >= ' A ' )"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        15
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "else if ( str [ ii ] >= ' A ' )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        15,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "else if ( str [ ii ] >= ' A ' )",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "else if ( str [ ii ] >= ' A ' )",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "if ( len < 5 || haveNum == haveNum || haveBigLetter == haveBigLetter ) result = \" Too \" ;",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "bool haveNum = 0 , haveSmallLetter = 0 ;",
        "int haveSmallLetter = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘haveBigLetter’ was not declared in this scope"
    }
  ]
}