{
  "meta": {
    "index": 2088,
    "hitid": "3S1L4CQSFXZS9MCMMOVQJ5MJ0RSAFL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "59A",
    "subid": "42437902"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "str is a new string",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integers i , count1 = 0 , count2 = 0",
      "code": "int i , count1 = 0 , count2 = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read user input to str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "in a for loop , change i from 0 to length of str exclusive incrementing i",
      "code": "for ( i = 0 ; i < str . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if str [ i ] is an upper case character",
      "code": "if ( isupper ( str [ i ] ) )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment count1 by one",
      "code": "count1 ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment count2 by one",
      "code": "count2 ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if count1 is greater than count2",
      "code": "if ( count1 > count2 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "change all characters in str to the upper case one by one in a for loop",
      "code": "for ( i = 0 ; i < str . length ( ) ; i ++ ) { str [ i ] = toupper ( str [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "change all characters in str to the lower case one by one in a for loop",
      "code": "for ( i = 0 ; i < str . length ( ) ; i ++ ) { str [ i ] = tolower ( str [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print str to the standard output",
      "code": "cout << str << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( ; str = 0 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string str ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i , count2 = 0 , count2 = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( char i = 0 ; i < str ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator<’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do",
        "for ( ; str = 0 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11,
        13,
        3
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do",
        "for ( ; str = 0 ; i ++ )",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11,
        13,
        3
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do",
        "do",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11,
        3
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "for ( ; str = 0 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        13,
        3
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "for ( ; str = 0 ; i ++ )",
        "str = str ;"
      ],
      "err_line": 13,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        3
      ],
      "mod_code": [
        "if ( str [ i ] == ' 0 ' )",
        "do",
        "str = str ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "do",
        "for ( ; str = 0 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13,
        5
      ],
      "mod_code": [
        "do",
        "for ( ; str = 0 ; i ++ )",
        "if ( str [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13,
        5,
        3
      ],
      "mod_code": [
        "do",
        "for ( ; str = 0 ; i ++ )",
        "if ( str [ i ] )",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13,
        3
      ],
      "mod_code": [
        "do",
        "for ( ; str = 0 ; i ++ )",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "do",
        "if ( str [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        13
      ],
      "mod_code": [
        "do",
        "if ( str [ i ] )",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        13,
        3
      ],
      "mod_code": [
        "do",
        "if ( str [ i ] )",
        "do",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        3
      ],
      "mod_code": [
        "do",
        "if ( str [ i ] )",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13,
        3
      ],
      "mod_code": [
        "do",
        "do",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "do",
        "str = str ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "for ( ; str = 0 ; i ++ )",
        "if ( str [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        5,
        3
      ],
      "mod_code": [
        "for ( ; str = 0 ; i ++ )",
        "if ( str [ i ] )",
        "str = str ;"
      ],
      "err_line": 13,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "for ( ; str = 0 ; i ++ )",
        "str = str ;"
      ],
      "err_line": 13,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "if ( str [ i ] )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        3
      ],
      "mod_code": [
        "if ( str [ i ] )",
        "do",
        "str = str ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "do",
        "str = str ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}