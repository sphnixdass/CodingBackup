{
  "meta": {
    "index": 533,
    "hitid": "3DTJ4WT8BD914GKY35RJIGSSXBFZEO",
    "workerid": "A1APYLD4DUK33J",
    "probid": "1040A",
    "subid": "47854971"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer N with N = 20 + 5",
      "code": "const int N = 20 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , a , b , create integer array x with size N",
      "code": "int n , a , b , x [ N ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare inline cost with integer p as argument , returning integer",
      "code": "inline int cost ( int p )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "return ( a if p bitwise xor 1 is true , else b ) if p bitwise xor 2 is true , else 0",
      "code": "return p ^ 2 ? p ^ 1 ? a : b : 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read n read a read b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive , read x [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> x [ i ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer ans with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n - i - 1",
      "code": "for ( int i = 0 ; i <= n - i - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if x [ i ] is 2 , increment ans by result of run cost with ( set x [ i ] to x [ n - i - 1 ] ) as argument",
      "code": "if ( x [ i ] == 2 ) ans += cost ( x [ i ] = x [ n - i - 1 ] ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if x [ n - i - 1 ] is 2 , increment ans by result of run cost with ( set x [ n - i - 1 ] to x [ i ] )",
      "code": "if ( x [ n - i - 1 ] == 2 ) ans += cost ( x [ n - i - 1 ] = x [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if ( x [ i ] bitwise xor x [ n - i - 1 ] ) return print \" - 1 \\ n \" , 0",
      "code": "if ( x [ i ] ^ x [ n - i - 1 ] ) return cout << \" -1\\n \" , 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if x [ i ] is 2 , increment ans by minimum of ( a and b ) bitshift left ( i is less than n - i - 1 )",
      "code": "if ( x [ i ] == 2 ) ans += min ( a , b ) << ( i < n - i - 1 ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int N += 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a [ N ] , a [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int a [25]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "inline int cost ( int p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - i - 1 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) { ans += cost ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( x [ n - i - 1 ] == 2 ) { ans += cost ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        9
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        10
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        11
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        10
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        11
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        11
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        12,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        11
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        11
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        12,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        12,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        10
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        11
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        12
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        12
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        11
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        11,
        12
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        11,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        12
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        12,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        12
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        12,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        12,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "return ( p & 1 ? a : b ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        12,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        12,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - i - 1 ; i ++ )",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        12
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        12,
        13
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        13
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12,
        13
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "if ( x [ i ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        12,
        13
      ],
      "mod_code": [
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( x [ n - i - 1 ] == 2 ) ans += cost ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "if ( ( x [ i ] & x [ n - i - 1 ] ) ) return cout << \" -1\\n \" , 0 ) ;",
        "if ( x [ i ] == 2 ) ans += min ( a , b ) << i << n - i - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}