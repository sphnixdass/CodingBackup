{
  "meta": {
    "index": 1381,
    "hitid": "3OLZC0DJ8J9WB1HAYRS7IPDO1TOIVO",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "54A",
    "subid": "44356922"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , k , c , cnt = integers",
      "code": "int n , k , c , cnt ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "b = bool array of size 500",
      "code": "bool b [ 500 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n , k , c",
      "code": "cin >> n >> k >> c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to c exclusive",
      "code": "for ( int i = 0 ; i < c ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x = integer",
      "code": "int x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "b [ x ] = 1",
      "code": "b [ x ] = 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "b [ 0 ] = 1",
      "code": "b [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to i + k - 1 < = n",
      "code": "for ( int i = 1 ; i + k - 1 <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "f = bool with f = 0",
      "code": "bool f = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "j = integer",
      "code": "int j ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for j = i to i + k exclusive",
      "code": "for ( j = i ; j < i + k ; j ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if ( b [ j ] is 1 )",
      "code": "if ( b [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "f = 1",
      "code": "f = 1 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "i = j",
      "code": "i = j ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if ( not f )",
      "code": "if ( ! f )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "b [ decrement j ] = 1",
      "code": "b [ -- j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        26,
        16,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "cout << cnt ;",
        "int f = 1 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        26,
        15,
        12
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "cout << cnt ;",
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        26,
        15,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "cout << cnt ;",
        "if ( b [ j ] == ' 1 ' )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        26,
        12
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "cout << cnt ;",
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        26,
        12,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "cout << cnt ;",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        26,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "cout << cnt ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        15,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "int f = 1 ;",
        "if ( b [ j ] == ' 1 ' )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        12,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "int f = 1 ;",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "int f = 1 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        12
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        15,
        12,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        15,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "if ( b [ j ] == ' 1 ' )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        12,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "for ( int j = i ; j < i + k ; j ++ )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        16,
        15,
        18
      ],
      "mod_code": [
        "cout << cnt ;",
        "int f = 1 ;",
        "if ( b [ j ] == ' 1 ' )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        16,
        12,
        18
      ],
      "mod_code": [
        "cout << cnt ;",
        "int f = 1 ;",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        16,
        18
      ],
      "mod_code": [
        "cout << cnt ;",
        "int f = 1 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        15,
        12
      ],
      "mod_code": [
        "cout << cnt ;",
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        15,
        12,
        18
      ],
      "mod_code": [
        "cout << cnt ;",
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        15,
        18
      ],
      "mod_code": [
        "cout << cnt ;",
        "if ( b [ j ] == ' 1 ' )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "cout << cnt ;",
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        12,
        18
      ],
      "mod_code": [
        "cout << cnt ;",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        18
      ],
      "mod_code": [
        "cout << cnt ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        15,
        12,
        18
      ],
      "mod_code": [
        "int f = 1 ;",
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        15,
        18
      ],
      "mod_code": [
        "int f = 1 ;",
        "if ( b [ j ] == ' 1 ' )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        12,
        18
      ],
      "mod_code": [
        "int f = 1 ;",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "int f = 1 ;",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        12,
        18
      ],
      "mod_code": [
        "if ( b [ j ] == ' 1 ' )",
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "if ( b [ j ] == ' 1 ' )",
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "bool * f = 0 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    }
  ]
}