{
  "meta": {
    "index": 2453,
    "hitid": "3UUIU9GZC5Z5MLI6MC9YSYLYZMZT56",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "631A",
    "subid": "48675709"
  },
  "lines": [
    {
      "line": 0,
      "text": "N = 1005 = int const",
      "code": "const int N = 1005 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a , b be int arrays of length N",
      "code": "int a [ N ] , b [ N ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a from 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read b from 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "ans = 0 = long long",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare as long long ans1 = a [ i ] and ans2 = b [ i ]",
      "code": "long long ans1 = a [ i ] , ans2 = b [ i ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set ans to the max of ans and ans1 + ans2",
      "code": "ans = max ( ans , ans1 + ans2 ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for j = i + 1 to n inclusive",
      "code": "for ( int j = i + 1 ; j <= n ; ++ j )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if i = 1 then ans bitwise or a [ j ]",
      "code": "if ( i == 1 ) ans1 |= a [ j ] ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "ans2 bitwise or b [ j ]",
      "code": "ans2 |= b [ j ] ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "set ans to the max of ans and ans1 + ans2",
      "code": "ans = max ( ans , ans1 + ans2 ) ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ N ] , a [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int a [1005]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "long long ans1 = a [ i ] = b [ b ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int [1005][int [1005]]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        0
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        0,
        6
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        13,
        0,
        8
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        0,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        6
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        13,
        6,
        8
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        13,
        6,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "b >> b = 1 ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        13,
        8
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        8,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "ans2 ^= b [ j ] ;",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "const int N = 1e9 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        0,
        6
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "const int N = 1e9 ;",
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        0,
        6,
        8
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "const int N = 1e9 ;",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        0,
        6,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "const int N = 1e9 ;",
        "b >> b = 1 ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        0,
        8
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "const int N = 1e9 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        0,
        8,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "const int N = 1e9 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        0,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "const int N = 1e9 ;",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        6,
        8
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        6,
        8,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        6,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "b >> b = 1 ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "if ( i == 1 && ans [ j ] )",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        0,
        6
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        0,
        6,
        8
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        0,
        6,
        3
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "b >> b = 1 ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        0,
        8
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        0,
        8,
        3
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "const int N = 1e9 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        6,
        8
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        6,
        8,
        3
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        6,
        3
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "b >> b = 1 ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        8,
        3
      ],
      "mod_code": [
        "ans2 ^= b [ j ] ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "const int N = 1e9 ;",
        "b >> b = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "const int N = 1e9 ;",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        3
      ],
      "mod_code": [
        "const int N = 1e9 ;",
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        0,
        6,
        3
      ],
      "mod_code": [
        "const int N = 1e9 ;",
        "b >> b = 1 ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1000000000]’ and ‘int [1000000000]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "const int N = 1e9 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        3
      ],
      "mod_code": [
        "const int N = 1e9 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "b >> b = 1 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "b >> b = 1 ;",
        "bool n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [1005]’ and ‘int [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}