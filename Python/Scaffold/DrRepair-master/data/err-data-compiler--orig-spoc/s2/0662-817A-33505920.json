{
  "meta": {
    "index": 662,
    "hitid": "3Z56AA6EK4UXSUS0IYIRYQ460MG6MP",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "817A",
    "subid": "33505920"
  },
  "lines": [
    {
      "line": 0,
      "text": "function gcd ( gets two ints and return int )",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if b return gcd ( b , a modulo b ) else return a",
      "code": "return ( b ) ? gcd ( b , a % b ) : a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "a , b , c , d , x , y = int",
      "code": "int a , b , c , d , x , y ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a , b , c , d , x , y",
      "code": "cin >> a >> b >> c >> d >> x >> y ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "subtract x from a",
      "code": "a -= c ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "subtract d from b",
      "code": "b -= d ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if not ( a modulo x ) and not ( b modulo y ) and absolute value of ( a / x ) modulo 2 is equal to absolute value of ( b / y ) modulo 2",
      "code": "if ( ! ( a % x ) && ! ( b % y ) && abs ( ( a / x ) % 2 ) == abs ( ( b / y ) % 2 ) )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int , int ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int a , b , c , d , x , y , y ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int y’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) ) % 2 )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a -= x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a -= x ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        1
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a -= x ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        9
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a -= x ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        1
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a -= x ;",
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        1,
        9
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a -= x ;",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        9
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a -= x ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        1
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        1,
        9
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        1,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        9
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        9,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "cout << \" YES \" ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "return b ? gcd ( b , a % b ) ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "cout << \" YES \" ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int gcd ( int , int ) ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        1
      ],
      "mod_code": [
        "a -= x ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        8,
        1,
        9
      ],
      "mod_code": [
        "a -= x ;",
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "a -= x ;",
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        1,
        9
      ],
      "mod_code": [
        "a -= x ;",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        9
      ],
      "mod_code": [
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        9,
        6
      ],
      "mod_code": [
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1,
        6
      ],
      "mod_code": [
        "if ( ! ( a % x ) && ( b % y ) && abs ( a / x ) % 2 == abs ( b / y ) % 2 )",
        "return b ? gcd ( b , a % b ) ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9,
        6
      ],
      "mod_code": [
        "return b ? gcd ( b , a % b ) ;",
        "cout << \" YES \" ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "return b ? gcd ( b , a % b ) ;",
        "a = a - x ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    }
  ]
}