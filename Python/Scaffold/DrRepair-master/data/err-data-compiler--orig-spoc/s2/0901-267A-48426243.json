{
  "meta": {
    "index": 901,
    "hitid": "3PR3LXCWSFTV4PT2UCNCTHB6YE59XV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "267A",
    "subid": "48426243"
  },
  "lines": [
    {
      "line": 0,
      "text": "function f with long long arguments n and m that returns long long",
      "code": "long long f ( long long n , long long m )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "count , c and d are new long longs with count = 0",
      "code": "long long count = 0 , c , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while n and m are > 0",
      "code": "while ( n > 0 && m > 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if m is greater than n , swap n and m",
      "code": "if ( m > n ) swap ( n , m ) ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "change c to n - m",
      "code": "c = n - m ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "assign c / m to d",
      "code": "d = c / m ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if d is equal to 0",
      "code": "if ( d == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set n to n - m",
      "code": "n = n - m ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment count by one",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if d * m ! = c , increment d",
      "code": "if ( d * m != c ) d ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increase count by d",
      "code": "count += d ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "decrease n by d * m",
      "code": "n -= d * m ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "return count",
      "code": "return count ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "declare new long long variables n and m",
      "code": "long long n , m ;",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "declare long long variable with name t",
      "code": "long long t ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read user input to t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "while t > 0",
      "code": "while ( t > 0 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "decrement t",
      "code": "t -- ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "read n and m from the input",
      "code": "cin >> n >> m ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print f ( n , m )",
      "code": "cout << f ( n , m ) << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long f ( long long n that long long m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        9
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "while ( n & m )",
        "cin >> n >> m >> m ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "while ( n & m )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        5
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "while ( n & m )",
        "n",
        "d -= m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        15
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "while ( n & m )",
        "n",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        9
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "cin >> n >> m >> m ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        9,
        5
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "cin >> n >> m >> m ;",
        "n",
        "d -= m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        9,
        15
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "cin >> n >> m >> m ;",
        "n",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        5
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "n",
        "d -= m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        5,
        15
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "n",
        "d -= m ;",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        15
      ],
      "mod_code": [
        "long long count , c , d = 0 ;",
        "n",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        23,
        9
      ],
      "mod_code": [
        "while ( n & m )",
        "cin >> n >> m >> m ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        23,
        9,
        5
      ],
      "mod_code": [
        "while ( n & m )",
        "cin >> n >> m >> m ;",
        "n",
        "d -= m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        23,
        9,
        15
      ],
      "mod_code": [
        "while ( n & m )",
        "cin >> n >> m >> m ;",
        "n",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "while ( n & m )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        5
      ],
      "mod_code": [
        "while ( n & m )",
        "n",
        "d -= m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        15
      ],
      "mod_code": [
        "while ( n & m )",
        "n",
        "d -= m ;",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        15
      ],
      "mod_code": [
        "while ( n & m )",
        "n",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        9
      ],
      "mod_code": [
        "cin >> n >> m >> m ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        9,
        5
      ],
      "mod_code": [
        "cin >> n >> m >> m ;",
        "n",
        "d -= m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        9,
        5,
        15
      ],
      "mod_code": [
        "cin >> n >> m >> m ;",
        "n",
        "d -= m ;",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        9,
        15
      ],
      "mod_code": [
        "cin >> n >> m >> m ;",
        "n",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "n",
        "d -= m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        5,
        15
      ],
      "mod_code": [
        "n",
        "d -= m ;",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "n",
        "exit ( count ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}