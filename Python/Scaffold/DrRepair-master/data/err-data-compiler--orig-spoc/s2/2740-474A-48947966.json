{
  "meta": {
    "index": 2740,
    "hitid": "373L46LKP70EQ174H5Z0SHH7YA2JKB",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "474A",
    "subid": "48947966"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = char",
      "code": "char a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "s , s1 , s2 = string with s1 = \" qwertyuiopasdfghjkl ; zxcvbnm , . / \" and s2 = \" \"",
      "code": "string s , s1 = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" , s2 = \" \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a is ' R '",
      "code": "if ( a == ' R ' )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to length of s append s1 [ find of s [ i ] on s1 - 1 ] to s2",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ s1 . find ( s [ i ] ) - 1 ] ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to length of s append s1 [ find of s [ i ] on s1 + 1 ] to s2",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ s1 . find ( s [ i ] ) + 1 ] ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print s2",
      "code": "cout << s2 << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘find’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘find’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "getline ( cin , a ) ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) s2 . append ( s1 [ i ] . length ( ) - 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) s2 += s1 [ i ] . length ( ) + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        10
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        4
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        4
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        4,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        8,
        10
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        8,
        10,
        4
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        8,
        10,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        8,
        4
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        8,
        4,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        8,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "cout << s2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        10,
        4
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "cout << s2 ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        10,
        4,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "cout << s2 ;",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        10,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "cout << s2 ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "string s , s1 = \" qwertyuiopasdfghjkl \" , s2 = \" qwertyuiopasdfghjkl \" , s2 = \" \" ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘find’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘find’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        8,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8,
        4,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘find’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6,
        10,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10,
        4,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘find’ in ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        10,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        10,
        4,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        10,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "cout << s2 ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        4,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s2 += s1 [ i ] . find ( s1 [ i ] ) ; }",
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "cout << s2 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        5
      ],
      "mod_code": [
        "cout << s2 ;",
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "cout << s2 ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( a == ' R ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}