{
  "meta": {
    "index": 1993,
    "hitid": "3BDORL6HKK7D5RETXXRB6PQQ3IOCRK",
    "workerid": "A1AYVATMT88U1W",
    "probid": "818A",
    "subid": "45562054"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , k , mid be long integers",
      "code": "long long n , k , mid ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let l , r be long integers with l = 0 , r = n",
      "code": "long long l = 0 , r = n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let half be a long integer with half is equal to n value is shifted to the right by 1 bit",
      "code": "long long half = n >> 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while l is less than r",
      "code": "while ( l < r )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "mid is equal to ( l + r ) value is shifted to the right by 1 bit",
      "code": "mid = ( l + r ) >> 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if mid is greater than half / ( 1 + k )",
      "code": "if ( mid > half / ( 1 + k ) )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "r is equal to mid",
      "code": "r = mid ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "l is equal to mid + 1",
      "code": "l = mid + 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if ( 1 + k ) * l is greater than half , decrement l by 1",
      "code": "if ( ( 1 + k ) * l > half ) l -- ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if l is true",
      "code": "if ( l )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print l and space and l * k and space and n - ( 1 + k ) * l and new line",
      "code": "cout << l << \" \" << l * k << \" \" << n - ( 1 + k ) * l << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print 0 and space and 0 and space and n and newline",
      "code": "cout << 0 << \" \" << 0 << \" \" << n << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> k )"
      ],
      "err_line": 5,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        6,
        15
      ],
      "mod_code": [
        "long long half = n + 1 ;",
        "mid += r ;",
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        10
      ],
      "mod_code": [
        "long long half = n + 1 ;",
        "mid += r ;",
        "else do",
        "l -= 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        5
      ],
      "mod_code": [
        "long long half = n + 1 ;",
        "mid += r ;",
        "else do",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "long long half = n + 1 ;",
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        15,
        10
      ],
      "mod_code": [
        "long long half = n + 1 ;",
        "else do",
        "l -= 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        15,
        10,
        5
      ],
      "mod_code": [
        "long long half = n + 1 ;",
        "else do",
        "l -= 1 ;",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        15,
        5
      ],
      "mod_code": [
        "long long half = n + 1 ;",
        "else do",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "mid += r ;",
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        10
      ],
      "mod_code": [
        "mid += r ;",
        "else do",
        "l -= 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        10,
        4
      ],
      "mod_code": [
        "mid += r ;",
        "else do",
        "l -= 1 ;",
        "int half = n + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        10,
        5
      ],
      "mod_code": [
        "mid += r ;",
        "else do",
        "l -= 1 ;",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        4
      ],
      "mod_code": [
        "mid += r ;",
        "else do",
        "int half = n + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        4,
        5
      ],
      "mod_code": [
        "mid += r ;",
        "else do",
        "int half = n + 1 ;",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        5
      ],
      "mod_code": [
        "mid += r ;",
        "else do",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "else do",
        "l -= 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        10,
        4
      ],
      "mod_code": [
        "else do",
        "l -= 1 ;",
        "int half = n + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        10,
        4,
        5
      ],
      "mod_code": [
        "else do",
        "l -= 1 ;",
        "int half = n + 1 ;",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        10,
        5
      ],
      "mod_code": [
        "else do",
        "l -= 1 ;",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "else do",
        "int half = n + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        4,
        5
      ],
      "mod_code": [
        "else do",
        "int half = n + 1 ;",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "else do",
        "while ( l < r ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}