{
  "meta": {
    "index": 2716,
    "hitid": "33NOQL7T9OTKVFA7Q25JQ6W6L68Z8B",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1A",
    "subid": "49034107"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m , a , x and y are long longs",
      "code": "long long n , m , a , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , m and a",
      "code": "cin >> n >> m >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n % a ! = 0 and m % a ! = 0",
      "code": "if ( n % a != 0 and m % a != 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "x = n / a + 1",
      "code": "x = n / a + 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "y = m / a + 1",
      "code": "y = m / a + 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else if n % a = 0 and m % a ! = 0",
      "code": "else if ( n % a == 0 and m % a != 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "x = n / a",
      "code": "x = n / a ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "y = m / a + 1",
      "code": "y = m / a + 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if n % a ! = 0 and m % a = 0",
      "code": "else if ( n % a != 0 and m % a == 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "x = n / a + 1",
      "code": "x = n / a + 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "y = m / a",
      "code": "y = m / a ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "x = n / a",
      "code": "x = n / a ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "y = m / a",
      "code": "y = m / a ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print x * y and a new line",
      "code": "cout << x * y << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        2
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "cin >> n >> m , a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        2,
        14
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "cin >> n >> m , a ;",
        "y -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        2,
        13
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "cin >> n >> m , a ;",
        "x -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        2,
        4
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "cin >> n >> m , a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        14
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "y -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        14,
        13
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "y -= a ;",
        "x -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        14,
        4
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "y -= a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        13
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "x -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        13,
        4
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "x -= a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        4
      ],
      "mod_code": [
        "n",
        "int y = m / a + 1 ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "n",
        "cin >> n >> m , a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2,
        14
      ],
      "mod_code": [
        "n",
        "cin >> n >> m , a ;",
        "y -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2,
        14,
        13
      ],
      "mod_code": [
        "n",
        "cin >> n >> m , a ;",
        "y -= a ;",
        "x -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2,
        14,
        4
      ],
      "mod_code": [
        "n",
        "cin >> n >> m , a ;",
        "y -= a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2,
        13
      ],
      "mod_code": [
        "n",
        "cin >> n >> m , a ;",
        "x -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2,
        13,
        4
      ],
      "mod_code": [
        "n",
        "cin >> n >> m , a ;",
        "x -= a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2,
        4
      ],
      "mod_code": [
        "n",
        "cin >> n >> m , a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "n",
        "y -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        14,
        13
      ],
      "mod_code": [
        "n",
        "y -= a ;",
        "x -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        14,
        13,
        4
      ],
      "mod_code": [
        "n",
        "y -= a ;",
        "x -= a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        14,
        4
      ],
      "mod_code": [
        "n",
        "y -= a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "n",
        "x -= a ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        4
      ],
      "mod_code": [
        "n",
        "x -= a ;",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "n",
        "x -= a + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}