{
  "meta": {
    "index": 775,
    "hitid": "3BKZLF990ZTQWT0YGAK0YQ849X5YQ3",
    "workerid": "A1APYLD4DUK33J",
    "probid": "225A",
    "subid": "48951041"
  },
  "lines": [
    {
      "line": 0,
      "text": "create 2d integer array arr with size 7 by 7",
      "code": "int arr [ 7 ] [ 7 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare fun with no arguments , returning void",
      "code": "void fun ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set arr [ 1 ] [ 2 ] to arr [ 2 ] [ 6 ] to arr [ 5 ] [ 1 ] to arr [ 6 ] [ 5 ] to 34",
      "code": "arr [ 1 ] [ 2 ] = arr [ 2 ] [ 6 ] = arr [ 5 ] [ 1 ] = arr [ 6 ] [ 5 ] = 34 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set arr [ 2 ] [ 1 ] to arr [ 6 ] [ 2 ] to arr [ 1 ] [ 5 ] to arr [ 5 ] [ 6 ] to 43",
      "code": "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = arr [ 5 ] [ 6 ] = 43 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set arr [ 1 ] [ 3 ] to arr [ 3 ] [ 6 ] to arr [ 4 ] [ 1 ] to arr [ 6 ] [ 4 ] to 52",
      "code": "arr [ 1 ] [ 3 ] = arr [ 3 ] [ 6 ] = arr [ 4 ] [ 1 ] = arr [ 6 ] [ 4 ] = 52 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set arr [ 3 ] [ 1 ] to arr [ 6 ] [ 3 ] to arr [ 1 ] [ 4 ] to arr [ 4 ] [ 6 ] to 25",
      "code": "arr [ 3 ] [ 1 ] = arr [ 6 ] [ 3 ] = arr [ 1 ] [ 4 ] = arr [ 4 ] [ 6 ] = 25 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set arr [ 2 ] [ 4 ] to arr [ 3 ] [ 2 ] to arr [ 4 ] [ 5 ] to arr [ 5 ] [ 3 ] to 61",
      "code": "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = arr [ 5 ] [ 3 ] = 61 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set arr [ 4 ] [ 2 ] to arr [ 2 ] [ 3 ] to arr [ 5 ] [ 4 ] to arr [ 3 ] [ 5 ] to 16",
      "code": "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] = 16 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "run fun",
      "code": "fun ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create boolean f with f = true",
      "code": "bool f = true ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create integers x , y , z , n",
      "code": "int x , y , z , n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read z",
      "code": "cin >> z ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read x read y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read x read y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if z is not arr [ x ] [ y ] / 10 and z is not arr [ x ] [ y ] % 10 , set f to false",
      "code": "if ( z != arr [ x ] [ y ] / 10 && z != arr [ x ] [ y ] % 10 ) f = false ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if f is true",
      "code": "if ( f )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int arr [ 7 ] by { } ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘by’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void fun ( string )"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void fun(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "x ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        14
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        14
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "z >> z ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        14
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        14,
        6
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "z >> z ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        6
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "z >> z ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 2 ] = 43 [ 5 ] [ 6 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        14
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        3
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        3
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "z >> z ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        14,
        3
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "z >> z ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 2 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        6
      ],
      "mod_code": [
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        6,
        3
      ],
      "mod_code": [
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        3
      ],
      "mod_code": [
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "z >> z ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        6,
        3
      ],
      "mod_code": [
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "arr [ 4 ] [ 2 ] = arr [ 2 ] [ 3 ] = arr [ 5 ] [ 4 ] = arr [ 3 ] [ 5 ] ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "z >> z ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        6,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "z >> z ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "arr [ 2 ] [ 4 ] = arr [ 3 ] [ 2 ] = arr [ 4 ] [ 5 ] = 61 [ 5 ] [ 3 ] ;",
        "arr [ 2 ] [ 1 ] = arr [ 6 ] [ 2 ] = arr [ 1 ] [ 5 ] = 43 [ 5 ] [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}