{
  "meta": {
    "index": 1401,
    "hitid": "3BCRDCM0ODO226SXXM5BJDC2C4N6KX",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "155A",
    "subid": "49121640"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m , p = integers",
      "code": "int n , m , p ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "c = integer with 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a = array of n integers",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "Read n values into array a",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set m = p = a [ 0 ]",
      "code": "m = p = a [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a [ i ] is greater than p",
      "code": "if ( a [ i ] > p )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set p to a [ i ]",
      "code": "p = a [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if a [ i ] is less than m",
      "code": "if ( a [ i ] < m )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set m to a [ i ]",
      "code": "m = a [ i ] ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print c and a new line",
      "code": "cout << c << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int m = p [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "p %= a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        7
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        13
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        2
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "p %= a [ i ] ;",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        13,
        2
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "p %= a [ i ] ;",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        2
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "p %= a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        13
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        13,
        2
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        13,
        2
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "m = p [ 0 ] = a [ 0 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "p %= a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        9,
        7
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        13
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        2
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "p %= a [ i ] ;",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        9,
        13,
        2
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "p %= a [ i ] ;",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        9,
        2
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "p %= a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        7,
        13
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        7,
        13,
        2
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "int m = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        13,
        2
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "int m = p [ 0 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7,
        13
      ],
      "mod_code": [
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7,
        13,
        2
      ],
      "mod_code": [
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7,
        2
      ],
      "mod_code": [
        "p %= a [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        13,
        2
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "int m = a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}