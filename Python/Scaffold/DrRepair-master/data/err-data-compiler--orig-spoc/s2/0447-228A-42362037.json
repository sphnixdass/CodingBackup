{
  "meta": {
    "index": 447,
    "hitid": "3GITHABACYFFSBUZ7XLOLSCUP7P2N5",
    "workerid": "A1APYLD4DUK33J",
    "probid": "228A",
    "subid": "42362037"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array arr with size 4",
      "code": "int arr [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer output with output = 0",
      "code": "int output = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer token with token = 0",
      "code": "int token = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 4 exclusive , read arr [ i ]",
      "code": "for ( int i = 0 ; i < 4 ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 4 exclusive",
      "code": "for ( int i = 0 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = i + 1 to 4 exclusive",
      "code": "for ( int j = i + 1 ; j < 4 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if arr [ i ] is arr [ j ] , increment output",
      "code": "if ( arr [ i ] == arr [ j ] ) { output ++ ; }",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if output % 2 is 0 and output is greater than 3",
      "code": "if ( output % 2 == 0 && output > 3 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set output to output / 2",
      "code": "output /= 2 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else if output is 3",
      "code": "else if ( output == 3 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "decrement output by 1",
      "code": "output -= 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print output print newline",
      "code": "cout << output << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "arr [ 4 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "token = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < 4 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "output = \" / 2 ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        10
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        10,
        5
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        10,
        2
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "int output == 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        10,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        2
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        2
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "int output == 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        2,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "arr [ 4 ] ;",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "token = 0 ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        5
      ],
      "mod_code": [
        "token = 0 ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        2
      ],
      "mod_code": [
        "token = 0 ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "else if ( ! output )"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        2
      ],
      "mod_code": [
        "token = 0 ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3,
        10,
        2,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3,
        10,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "else if ( ! output )"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "token = 0 ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "token = 0 ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3,
        5,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "else if ( ! output )"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "token = 0 ;",
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3,
        2,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "token = 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 3,
      "err_msg": "‘token’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        2
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        12
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "int output == 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        12
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        12
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        12
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "int output == 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        12
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "arr [ 4 ] ;",
        "else if ( ! output )"
      ],
      "err_line": 1,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5,
        2
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        10,
        5,
        2,
        12
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        10,
        5,
        12
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "else if ( ! output )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        10,
        2,
        12
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( output % 2 == 0 && output > 3 ) { output ++ ; }",
        "else if ( ! output )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        5,
        2,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )",
        "else if ( ! output )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int output == 0 ;",
        "else if ( ! output )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘==’ token"
    }
  ]
}