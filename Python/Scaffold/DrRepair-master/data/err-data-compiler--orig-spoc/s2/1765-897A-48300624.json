{
  "meta": {
    "index": 1765,
    "hitid": "3M67TQBQQHIJ8CL9J2VY9908XT1A9X",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "897A",
    "subid": "48300624"
  },
  "lines": [
    {
      "line": 0,
      "text": "i1 , i2 = integers",
      "code": "int i1 , i2 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "c1 , c2 = integers",
      "code": "char c1 , c2 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n , m = integers",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "Read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "Read i1 , i2",
      "code": "cin >> i1 >> i2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "Read c1 , c2",
      "code": "cin >> c1 >> c2 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for i = i1 - 1 to i2 - 1 exclusive",
      "code": "for ( int i = i1 - 1 ; i <= i2 - 1 ; i ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s [ i ] is c1 , then s [ i ] to c2",
      "code": "if ( s [ i ] == c1 ) s [ i ] = c2 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print s and a new line",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "int c1 , c2 ;",
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        6
      ],
      "mod_code": [
        "int c1 , c2 ;",
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        8
      ],
      "mod_code": [
        "int c1 , c2 ;",
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> i1 >> i1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int c1 , c2 ;",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        6
      ],
      "mod_code": [
        "int c1 , c2 ;",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        6,
        8
      ],
      "mod_code": [
        "int c1 , c2 ;",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;",
        "cin >> i1 >> i1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        8
      ],
      "mod_code": [
        "int c1 , c2 ;",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> i1 >> i1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;",
        "cin >> i1 >> i1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        6,
        1
      ],
      "mod_code": [
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;",
        "long long c1 , c2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        8
      ],
      "mod_code": [
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> i1 >> i1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        8,
        1
      ],
      "mod_code": [
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> i1 >> i1 ;",
        "long long c1 , c2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        1
      ],
      "mod_code": [
        "for ( int i = i1 - 1 ; i < i2 - 1 ; i ++ )",
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "long long c1 , c2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        6,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;",
        "cin >> i1 >> i1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        6,
        8,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;",
        "cin >> i1 >> i1 ;",
        "long long c1 , c2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        6,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> n ;",
        "long long c1 , c2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> i1 >> i1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        8,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "cin >> i1 >> i1 ;",
        "long long c1 , c2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' c1 ' ) s [ i ] = c2 [ i ] ;",
        "long long c1 , c2 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    }
  ]
}