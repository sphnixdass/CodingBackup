{
  "meta": {
    "index": 866,
    "hitid": "39AYGO6AFFE3ACD0UZXRB5T66ZN6NX",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "267A",
    "subid": "44435770"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare solve taking in long long ints a and b and returning long long integer",
      "code": "long long solve ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is equal to 0",
      "code": "if ( a == 0 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return ( b / a + solve ( b % a , a ) )",
      "code": "return ( b / a + solve ( b % a , a ) ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create int t",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while t - - is truthy",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create long long ints a and b",
      "code": "long long a , b ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print solve ( min ( a , b ) , max ( a , b ) )",
      "code": "cout << solve ( min ( a , b ) , max ( a , b ) ) << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "end statement",
      "code": ";",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cin >> n >> b ;"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "<< endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "else do",
        "cin >> n >> b ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        9
      ],
      "mod_code": [
        "else do",
        "cin >> n >> b ;",
        "t = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        14
      ],
      "mod_code": [
        "else do",
        "cin >> n >> b ;",
        "t = getchar ( ) ;",
        "<< endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        8
      ],
      "mod_code": [
        "else do",
        "cin >> n >> b ;",
        "t = getchar ( ) ;",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        14
      ],
      "mod_code": [
        "else do",
        "cin >> n >> b ;",
        "<< endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        14,
        8
      ],
      "mod_code": [
        "else do",
        "cin >> n >> b ;",
        "<< endl ;",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        12,
        8
      ],
      "mod_code": [
        "else do",
        "cin >> n >> b ;",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "else do",
        "t = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        9,
        14
      ],
      "mod_code": [
        "else do",
        "t = getchar ( ) ;",
        "<< endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        8
      ],
      "mod_code": [
        "else do",
        "t = getchar ( ) ;",
        "<< endl ;",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        9,
        8
      ],
      "mod_code": [
        "else do",
        "t = getchar ( ) ;",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "else do",
        "<< endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        14,
        8
      ],
      "mod_code": [
        "else do",
        "<< endl ;",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "else do",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "cin >> n >> b ;",
        "t = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        9,
        14
      ],
      "mod_code": [
        "cin >> n >> b ;",
        "t = getchar ( ) ;",
        "<< endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        9,
        14,
        8
      ],
      "mod_code": [
        "cin >> n >> b ;",
        "t = getchar ( ) ;",
        "<< endl ;",
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        9,
        8
      ],
      "mod_code": [
        "cin >> n >> b ;",
        "t = getchar ( ) ;",
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "cin >> n >> b ;",
        "<< endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        8
      ],
      "mod_code": [
        "cin >> n >> b ;",
        "<< endl ;",
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "cin >> n >> b ;",
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "<< endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        14,
        8
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "<< endl ;",
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "<< endl ;",
        "int * t ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    }
  ]
}