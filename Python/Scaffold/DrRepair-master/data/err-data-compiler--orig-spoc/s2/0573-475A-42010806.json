{
  "meta": {
    "index": 573,
    "hitid": "3XJOUITW8ULUF71464X1Q9GPUVPQT8",
    "workerid": "A1APYLD4DUK33J",
    "probid": "475A",
    "subid": "42010806"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d character array xx of size 8 by 30",
      "code": "char xx [ 8 ] [ 30 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read n is true",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create character array yy with size 30 with yy = \" + - - - - - - - - - - - - - - - - - - - - - - - - + \"",
      "code": "char yy [ 30 ] = \" +------------------------+ \" ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "string copy from yy to xx [ 0 ]",
      "code": "strcpy ( xx [ 0 ] , yy ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "create character array zz with size 30 with zz = \" | # . # . # . # . # . # . # . # . # . # . # . | D | ) \"",
      "code": "char zz [ 30 ] = \" |#.#.#.#.#.#.#.#.#.#.#.|D|) \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "string copy from zz to xx [ 1 ]",
      "code": "strcpy ( xx [ 1 ] , zz ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "create character array k with size 30 with k = \" | # . # . # . # . # . # . # . # . # . # . # . | . | \"",
      "code": "char k [ 30 ] = \" |#.#.#.#.#.#.#.#.#.#.#.|.| \" ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "string copy from k to xx [ 2 ]",
      "code": "strcpy ( xx [ 2 ] , k ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "create character array kk with size 30 with kk = \" | # . . . . . . . . . . . . . . . . . . . . . . . | \"",
      "code": "char kk [ 30 ] = \" |#.......................| \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "string copy from kk to xx [ 3 ]",
      "code": "strcpy ( xx [ 3 ] , kk ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "create character array ss with size 30 with ss = \" | # . # . # . # . # . # . # . # . # . # . # . | . | ) \"",
      "code": "char ss [ 30 ] = \" |#.#.#.#.#.#.#.#.#.#.#.|.|) \" ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "string copy from ss to xx [ 4 ]",
      "code": "strcpy ( xx [ 4 ] , ss ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "create character array tt with size 30 with tt = \" + - - - - - - - - - - - - - - - - - - - - - - - - + \"",
      "code": "char tt [ 30 ] = \" +------------------------+ \" ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "string copy from tt to xx [ 5 ]",
      "code": "strcpy ( xx [ 5 ] , tt ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "create integer a with a = 0",
      "code": "int a = 0 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "for i = 0 to 30 exclusive",
      "code": "for ( int i = 0 ; i < 30 ; i ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for j = 0 to 6 exclusive",
      "code": "for ( int j = 0 ; j < 6 ; j ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if xx [ j ] [ i ] is ' # '",
      "code": "if ( xx [ j ] [ i ] == ' # ' )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if xx [ j ] [ i ] is ' O '",
      "code": "xx [ j ] [ i ] = ' O ' ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "increment a",
      "code": "a ++ ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if a is n , break loop",
      "code": "if ( a == n ) break ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "if a is n , break loop",
      "code": "if ( a == n ) break ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "for i = 0 to 6 exclusive , print xx [ i ] print newline",
      "code": "for ( int i = 0 ; i < 6 ; i ++ ) { cout << xx [ i ] << endl ; }",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" + \" } >> 1.0 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "strcpy ( xx [ 0 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char zz [ 30 ] = \" | \" [ 30 ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "strcpy ( xx [ 2 ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "strcpy ( xx [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char ss [ 30 ] = { \" | \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘}’ before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "strcpy ( xx [ 4 ] , xx ) ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘char (*)[30]’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "strcpy ( xx [ 5 ] , xx ) ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘char (*)[30]’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "a = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        8
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        10
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char k [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        10
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char k [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char zz [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        10
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        10
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        14,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        7,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        10
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        10,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        10,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        10,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        12,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        12,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        8,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char k [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10,
        12,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10,
        12,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10,
        14,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        12,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        12,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        14,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "char yy [ 30 ] = { \" -O|OOO-O \" } >> 1.0 << endl ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        10
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        12
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        14
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        20
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10,
        12
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10,
        14
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10,
        20
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        14
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        20
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        14
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        20
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        20
      ],
      "mod_code": [
        "char zz [ 30 ] = { \" | \" } ;",
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        12
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        14
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        12
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        12,
        14
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        12,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        14
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        14,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char k [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        12
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        12,
        14
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        12,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        14
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        14,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char kk [ 30 ] = { \" size \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        14
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        14,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char ss [ 30 ] = { \" | \" } ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        14,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "char tt [ 30 ] = \" -O|OOO-O \" ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "strcpy ( xx [ 1 ] , zz [ 1 ] ) ;",
        "if ( xx [ j ] [ i ] == ' O ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    }
  ]
}