{
  "meta": {
    "index": 291,
    "hitid": "3TUOHPJXYHR6GL6ANNX471JHWFQXW9",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "1082A",
    "subid": "48298550"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant int maxn = 1e5 + 10",
      "code": "const int maxn = 1e5 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let const int inf = 0x3f3f3f3f",
      "code": "const int inf = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let int t",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while t - - is truthy",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create ints n , x , y , d , and ans = inf",
      "code": "int n , x , y , d , ans = inf ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read n , x , y , and d",
      "code": "cin >> n >> x >> y >> d ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if abs ( y - x ) % d is 0 , set ans to min ( ans , abs ( y - x ) / d )",
      "code": "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y - x ) / d ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if ( y - 1 ) modulo d is equal to 0 , set ans to min ( ans , x / d + ( y - 1 ) / d + ( x % d = = 0 ? 0 : 1 ) )",
      "code": "if ( ( y - 1 ) % d == 0 ) ans = min ( ans , x / d + ( y - 1 ) / d + ( x % d == 0 ? 0 : 1 ) ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if ( n - y ) modulo d equals 0 , set ans to min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d = = 0 ? 0 : 1 ) )",
      "code": "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d == 0 ? 0 : 1 ) ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if ans is equal to inf",
      "code": "if ( ans == inf )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool t ;"
      ],
      "err_line": 5,
      "err_msg": "invalid use of Boolean expression as operand to ‘operator--’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int n , x , y , d , ans = inf = inf ;"
      ],
      "err_line": 6,
      "err_msg": "assignment of read-only variable ‘inf’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , x ) / d ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - 0 ) % d : 0 ? 0 ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        10,
        4
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        10,
        4,
        1
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        10,
        4,
        11
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        10,
        4,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        10,
        1
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        10,
        1,
        11
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        10,
        1,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        10,
        11
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        10,
        11,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        10,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "t = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        4,
        1
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        4,
        1,
        11
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        4,
        1,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        4,
        11
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "t = getchar ( ) ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        4,
        11,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "t = getchar ( ) ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        4,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "t = getchar ( ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        1,
        11
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        1,
        11,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        1,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        11,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( abs ( y - x ) % d == 0 ) ans = min ( ans , abs ( y , abs ( y - x ) / d ) ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘abs(int&, int)’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        4,
        1
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        4,
        1,
        11
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        4,
        1,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        4,
        11
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "if ( ! ans )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        4,
        11,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        4,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "t = getchar ( ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        1,
        11
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        1,
        11,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        1,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "if ( ! ans )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        11,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) ans = min ( ans , ( n - x ) / d + ( n - y ) / d + ( ( n - x ) % d : 0 ? 0 ) ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        1,
        11
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        1,
        11,
        7
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        1,
        7
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "const const int inf = 0x3f3f3f3f ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        11,
        7
      ],
      "mod_code": [
        "const const int inf = 0x3f3f3f3f ;",
        "if ( ! ans )",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "const const int inf = 0x3f3f3f3f ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    }
  ]
}