{
  "meta": {
    "index": 2603,
    "hitid": "3FSEU3P2NRUHBT3CFUH6VKPC3JNRR1",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "1043A",
    "subid": "48423157"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "arr = integer vector of size n",
      "code": "vector < int > arr ( n ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "max = maximum integer value , sum = integer = 0",
      "code": "int max = INT_MIN , sum = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "sum = sum + arr [ i ]",
      "code": "sum += arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if max < arr [ i ] , then max = arr [ i ]",
      "code": "if ( max < arr [ i ] ) max = arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if n * max > 2 * sum",
      "code": "if ( n * max > 2 * sum )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print max",
      "code": "cout << max << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ( 2 * sum ) modulo n is 0",
      "code": "if ( ( 2 * sum ) % n == 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print the result of ( 2 * n ) / n + 1",
      "code": "cout << ( 2 * sum ) / n + 1 << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print the result of ( 2 * sum ) / n rounded up to the next whole number",
      "code": "cout << ceil ( ( 2. * sum ) / n ) << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < int > arr [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "puts ( max ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        16,
        8
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        16,
        8,
        4
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        16,
        8,
        15
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        16,
        4,
        15
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "int max = 0 , sum = 1 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        16,
        15
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        8,
        4
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        8,
        4,
        15
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        8,
        15
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        4,
        15
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "int max = 0 , sum = 1 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "cout << ( 2 * n ) / n + 1 << endl ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        8,
        4
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        8,
        4,
        15
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        8,
        4,
        14
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        8,
        15
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        8,
        15,
        14
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "n",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        8,
        14
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        4,
        15
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "int max = 0 , sum = 1 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        4,
        15,
        14
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "int max = 0 , sum = 1 ;",
        "n",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15,
        14
      ],
      "mod_code": [
        "cout << ( ( 2 * sum ) / n ) << endl ;",
        "n",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        4,
        15
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        4,
        15,
        14
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;",
        "n",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        4,
        14
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "int max = 0 , sum = 1 ;",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        14
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "n",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( max [ i ] , arr [ i ] ) max = arr [ i ] ;",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "int max = 0 , sum = 1 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        15,
        14
      ],
      "mod_code": [
        "int max = 0 , sum = 1 ;",
        "n",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "n",
        "cout << ( ( 2 * n ) / n + 1 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}