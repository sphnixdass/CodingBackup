{
  "meta": {
    "index": 3,
    "hitid": "3LB1BGHFL2Q3O9SQXEEV3VJRT48TYG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "63A",
    "subid": "45696959"
  },
  "lines": [
    {
      "line": 0,
      "text": "let s be 2d array of characters with size 1000 by 500",
      "code": "char s [ 1000 ] [ 500 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array b with 1000 elements",
      "code": "int b [ 1000 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare character array kd with size 500",
      "code": "char kd [ 500 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s [ i ] and kd",
      "code": "cin >> s [ i ] >> kd ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if kd is \" rat \"",
      "code": "if ( strcmp ( kd , \" rat \" ) == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "assign value of 1 to b [ i ]",
      "code": "b [ i ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if kd is \" man \"",
      "code": "else if ( strcmp ( kd , \" man \" ) == 0 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "assign value of 3 to b [ i ]",
      "code": "b [ i ] = 3 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if kd is \" captain \"",
      "code": "else if ( strcmp ( kd , \" captain \" ) == 0 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "assign value of 4 to b [ i ]",
      "code": "b [ i ] = 4 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "assign value of 2 to b [ i ]",
      "code": "b [ i ] = 2 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "declare integers t = 0 and k = 1",
      "code": "int k = 1 , t = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "while t < n",
      "code": "while ( t < n )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for integer j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if b [ j ] = k",
      "code": "if ( b [ j ] == k )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "print s [ j ]",
      "code": "cout << s [ j ] << endl ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "increase t",
      "code": "t ++ ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "decrease b [ j ] by 1",
      "code": "b [ j ] == - 1 ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "increase k",
      "code": "k ++ ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "b [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char a [ 500 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘kd’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> s >> i >> kd ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [1000][500]’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "b [ i ] [ 1 ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "b [ i ] [ i ] = 3 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "b [ i ] [ i ] = 4 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "b [ i ] [ i ] = 2 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "else if ( kd == \" man \" )",
        "else if ( kd == \" captain \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        21,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "else if ( kd == \" man \" )",
        "cout << s [ j ] ;",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "else if ( kd == \" man \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        21,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "else if ( kd == \" captain \" )",
        "cout << s [ j ] ;",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        10,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "else if ( kd == \" captain \" )",
        "else if ( kd == \" [] \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "else if ( kd == \" captain \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        21,
        10,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "cout << s [ j ] ;",
        "else if ( kd == \" [] \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        21,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "cout << s [ j ] ;",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "else if ( kd == \" [] \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( kd == \" rat \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        12,
        21,
        0
      ],
      "mod_code": [
        "else if ( kd == \" man \" )",
        "else if ( kd == \" captain \" )",
        "cout << s [ j ] ;",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        12,
        0
      ],
      "mod_code": [
        "else if ( kd == \" man \" )",
        "else if ( kd == \" captain \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        21,
        0
      ],
      "mod_code": [
        "else if ( kd == \" man \" )",
        "cout << s [ j ] ;",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "else if ( kd == \" man \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        21,
        10,
        0
      ],
      "mod_code": [
        "else if ( kd == \" captain \" )",
        "cout << s [ j ] ;",
        "else if ( kd == \" [] \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        21,
        0
      ],
      "mod_code": [
        "else if ( kd == \" captain \" )",
        "cout << s [ j ] ;",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        10,
        0
      ],
      "mod_code": [
        "else if ( kd == \" captain \" )",
        "else if ( kd == \" [] \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "else if ( kd == \" captain \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        10,
        0
      ],
      "mod_code": [
        "cout << s [ j ] ;",
        "else if ( kd == \" [] \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        0
      ],
      "mod_code": [
        "cout << s [ j ] ;",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "else if ( kd == \" [] \" )",
        "char s [ 1000 [ 1000 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}