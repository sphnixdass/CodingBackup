{
  "meta": {
    "index": 1259,
    "hitid": "3Y40HMYLL1CTOHH5SNI3PDYKBZHUX9",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "291A",
    "subid": "42833989"
  },
  "lines": [
    {
      "line": 0,
      "text": "in void function theBrickShot that takes arr = int address and num = int",
      "code": "void theBrickSort ( int arr [ ] , int num )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "sorted = bool = false",
      "code": "bool sorted = false ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while not sorted",
      "code": "while ( ! sorted )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set sorted to true",
      "code": "sorted = true ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "for i = 1 to num - 2 then increment i by 2",
      "code": "for ( int i = 1 ; i <= num - 2 ; i = i + 2 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if arr at i > arr at i + 1",
      "code": "if ( arr [ i ] > arr [ i + 1 ] )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "swap arr at i and arr at i + 1",
      "code": "swap ( arr [ i ] , arr [ i + 1 ] ) ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "set sorted to false",
      "code": "sorted = false ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for i = 0 to num - 2 inclusive , incrementig i by 2",
      "code": "for ( int i = 0 ; i <= num - 2 ; i = i + 2 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if arr at i > arr at i + 1",
      "code": "if ( arr [ i ] > arr [ i + 1 ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "swap arr at i and arr at i + 1",
      "code": "swap ( arr [ i ] , arr [ i + 1 ] ) ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "set sorted to flase",
      "code": "sorted = false ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "return",
      "code": "return ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 20,
      "text": "secnumbs , flag , counter = int with flag = counter = 0",
      "code": "int secnumbs , flag = 0 , counter = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "read secnumbs",
      "code": "cin >> secnumbs ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "spykeId = int array of length secnumbs",
      "code": "int spykeId [ secnumbs ] ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 0 to secnumbs , read spykeId at i",
      "code": "for ( int i = 0 ; i < secnumbs ; i ++ ) { cin >> spykeId [ i ] ; }",
      "indent": 1
    },
    {
      "line": 24,
      "text": "call theBrickShot on spykeId and secnumbs",
      "code": "theBrickSort ( spykeId , secnumbs ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for i = 0 to secnumbs inclusive",
      "code": "for ( int i = 0 ; i <= secnumbs ; i ++ )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set flag to i + 2",
      "code": "flag = i + 2 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if spykeId at i = spykeId at i + 1 and spykeId at i isn ' t 0 then increment counter",
      "code": "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] != 0 ) { counter ++ ; }",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if spykeId at i = spykeId at flag and spykeId at i is not 0",
      "code": "if ( spykeId [ i ] == spykeId [ flag ] && spykeId [ i ] != 0 )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "reset counter to - 1",
      "code": "counter = - 1 ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "exit loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print counter",
      "code": "cout << counter << endl ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘theBrickShot’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void theBrickShot ( int & arr , int num )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( arr [ i ] > arr + i + 1 )"
      ],
      "err_line": 5,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= num - 2 ; i += 2 ) { i += 2 ; }"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( arr [ i ] > arr + i + 1 )"
      ],
      "err_line": 11,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "return return ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘return’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int secnumbs = 0 , flag = 0 ;"
      ],
      "err_line": 27,
      "err_msg": "‘counter’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int * spykeId = [ secnumbs ] ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘{’ before ‘;’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "theBrickShot = spykeId && secnumbs ;"
      ],
      "err_line": 24,
      "err_msg": "‘theBrickShot’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "counter . reset ( ) ;"
      ],
      "err_line": 29,
      "err_msg": "request for member ‘reset’ in ‘counter’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        12
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        24
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        27
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        24
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        24,
        27
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        24,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        27
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        27,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        6,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12,
        24
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12,
        24,
        27
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12,
        24,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12,
        27
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12,
        27,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        24,
        27
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        24,
        27,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        24,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        27,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "void theBrickShot ( int arr , int num )",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12,
        24
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12,
        24,
        27
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12,
        24,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12,
        27
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12,
        27,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        24,
        27
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        24,
        27,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        24,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        27
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        27,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        24,
        27
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        24,
        27,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        24,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "theBrickShot ( spykeId , secnumbs ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        27
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        27,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "swap ( arr [ i ] , arr [ i + 1 ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        27
      ],
      "mod_code": [
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;"
      ],
      "err_line": 24,
      "err_msg": "‘theBrickShot’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        27,
        21
      ],
      "mod_code": [
        "theBrickShot ( spykeId , secnumbs ) ;",
        "if ( spykeId [ i ] == spykeId [ i + 1 ] && spykeId [ i ] == 0 ) counter ++ ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 24,
      "err_msg": "‘theBrickShot’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        21
      ],
      "mod_code": [
        "theBrickShot ( spykeId , secnumbs ) ;",
        "secnumbs >> secnumbs ;"
      ],
      "err_line": 24,
      "err_msg": "‘theBrickShot’ was not declared in this scope"
    }
  ]
}