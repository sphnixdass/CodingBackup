{
  "meta": {
    "index": 1913,
    "hitid": "3D7VY91L65R3Y69VEPZZ96QYFAQBMP",
    "workerid": "AIWEXPJAU66D9",
    "probid": "980A",
    "subid": "41581638"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new string called s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create ints p and l = 0",
      "code": "int p = 0 , l = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read from the input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] = ' - '",
      "code": "if ( s [ i ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment l by one",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment p",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if p = 0 or l % p = 0",
      "code": "if ( ( p == 0 ) || ( l % p == 0 ) )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string s = endl ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "n",
        "string s = endl ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        13
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        13,
        3
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "cout << \" NO \" ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        13,
        11
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        13,
        5
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "cout << \" NO \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        3
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        3,
        11
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        3,
        5
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "s >> s ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        11
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        11,
        5
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        0,
        5
      ],
      "mod_code": [
        "n",
        "string s = endl ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        13,
        3
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        11
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;",
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        5
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;",
        "s >> s ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        13,
        11
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        13,
        11,
        5
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        13,
        5
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "n",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3,
        11
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3,
        11,
        5
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3,
        5
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        5
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "n",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        13,
        3
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" NO \" ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        13,
        3,
        11
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" NO \" ;",
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        13,
        3,
        5
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" NO \" ;",
        "s >> s ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        13,
        11
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        13,
        11,
        5
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        13,
        5
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" NO \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "string s = endl ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        3,
        11
      ],
      "mod_code": [
        "string s = endl ;",
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        3,
        11,
        5
      ],
      "mod_code": [
        "string s = endl ;",
        "s >> s ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "string s = endl ;",
        "s >> s ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        11,
        5
      ],
      "mod_code": [
        "string s = endl ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "string s = endl ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘<unresolved overloaded function type>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        3,
        11
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        3,
        11,
        5
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "s >> s ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        3,
        5
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "s >> s ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" YES \" ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] = ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}