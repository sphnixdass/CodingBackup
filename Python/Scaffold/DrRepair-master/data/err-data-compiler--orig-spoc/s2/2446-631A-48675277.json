{
  "meta": {
    "index": 2446,
    "hitid": "3OEWW2KGQJ5KD6SR515IW033DVGODN",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "631A",
    "subid": "48675277"
  },
  "lines": [
    {
      "line": 0,
      "text": "N = const int with N = 1000 + 10",
      "code": "const int N = 1000 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n = int and a , b , pa , pb = int array of size N each",
      "code": "int n , a [ N ] , b [ N ] , pa [ N ] , pb [ N ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n values into a",
      "code": "for ( int i = 0 ; i != n ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n values into b",
      "code": "for ( int i = 0 ; i != n ; ++ i ) cin >> b [ i ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set pa [ 0 ] to a [ 0 ] then set pb [ 0 ] to b [ 0 ]",
      "code": "pa [ 0 ] = a [ 0 ] , pb [ 0 ] = b [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to n",
      "code": "for ( int i = 1 ; i != n ; ++ i )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if pa [ i - 1 ] bitwise - or a [ i ] + pb [ i - 1 ] bitwise - or b [ i ] > a [ i ] + b [ i ]",
      "code": "if ( pa [ i - 1 ] | a [ i ] + pb [ i - 1 ] | b [ i ] > a [ i ] + b [ i ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set pa [ i ] to pa [ i - 1 ] bitwise - or a [ i ] then set pb [ i ] to pb [ i - 1 ] bitwise - or b [ i ]",
      "code": "pa [ i ] = pa [ i - 1 ] | a [ i ] , pb [ i ] = pb [ i - 1 ] | b [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set pa [ i ] to a [ i ] then set pb [ i ] to b [ i ]",
      "code": "pa [ i ] = a [ i ] , pb [ i ] = b [ i ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "ans = int with ans = pa [ 0 ] + pb [ 0 ]",
      "code": "int ans = pa [ 0 ] + pb [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to n set ans to max of ans , pa [ i ] + pb [ i ]",
      "code": "for ( int i = 0 ; i != n ; ++ i ) { ans = max ( ans , pa [ i ] + pb [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , b [ N ] ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b [1010]’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] = pb [ i - 1 ] | b [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )"
      ],
      "err_line": 8,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        9
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        3,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        6,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        3,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        3,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        9,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘pb’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "int n , a [ N ] , b [ N ] , pa [ N ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        0
      ],
      "mod_code": [
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        0
      ],
      "mod_code": [
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        8,
        0
      ],
      "mod_code": [
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        9,
        3,
        0
      ],
      "mod_code": [
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        9,
        0
      ],
      "mod_code": [
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        3,
        0
      ],
      "mod_code": [
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "pa [ 0 ] = a [ 0 ] = a [ 0 ] = b [ 0 ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        8,
        9,
        3,
        0
      ],
      "mod_code": [
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        8,
        9,
        0
      ],
      "mod_code": [
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        8,
        3,
        0
      ],
      "mod_code": [
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( pa [ i ] && a [ i ] + pb [ i - 1 ] || b [ i ] > a [ i ] + b [ i ] + b [ i ] )",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        9,
        3,
        0
      ],
      "mod_code": [
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "pa [ i ] = pa [ i - 1 ] ^ a [ i ] ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "const int N += 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+=’ token"
    }
  ]
}