{
  "meta": {
    "index": 2559,
    "hitid": "3VJ4PFXFJ31HS49CHDQP55NM9CUAU2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "24A",
    "subid": "41581509"
  },
  "lines": [
    {
      "line": 0,
      "text": "vis is an array of booleans of length 200",
      "code": "bool vis [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a and c are 2d arrays of int with size 101 by 101",
      "code": "int a [ 101 ] [ 101 ] , c [ 101 ] [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integers n , x1 , x2 , i , j , x , y , w , ans1 , ans2 and cur",
      "code": "int n , x1 , x2 , i , j , x , y , w , ans1 , ans2 , cur ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "boolean bo",
      "code": "bool bo ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "call function memset with arguments a , 0 and sizeof ( a )",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "call function memset with arguments c , 0 and sizeof ( c )",
      "code": "memset ( c , 0 , sizeof ( c ) ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read x , y and w",
      "code": "cin >> x >> y >> w ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "a [ x ] [ y ] = 1",
      "code": "a [ x ] [ y ] = 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "a [ y ] [ x ] = - 1",
      "code": "a [ y ] [ x ] = - 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "c [ x ] [ y ] = c [ y ] [ x ] = w",
      "code": "c [ x ] [ y ] = c [ y ] [ x ] = w ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set ans1 to 0",
      "code": "ans1 = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set ans2 = 0",
      "code": "ans2 = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "cur = 1",
      "code": "cur = 1 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "vis [ 1 ] = true",
      "code": "vis [ 1 ] = true ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "while true",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "bo = true",
      "code": "bo = true ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if vis [ i ] is equal to false set bo to false",
      "code": "if ( vis [ i ] == false ) bo = false ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if bo is true , break",
      "code": "if ( bo ) break ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if a [ cur ] [ i ] ! = 0 & & vis [ i ] is false",
      "code": "if ( a [ cur ] [ i ] != 0 && vis [ i ] == false )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "if a [ cur ] [ i ] is less than 0 increase ans1 by c [ cur ] [ i ]",
      "code": "if ( a [ cur ] [ i ] < 0 ) ans1 += c [ cur ] [ i ] ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "set value of cur to i",
      "code": "cur = i ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "set vis [ cur ] to true",
      "code": "vis [ cur ] = true ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if a [ cur ] [ 1 ] is less than 0",
      "code": "if ( a [ cur ] [ 1 ] < 0 ) ans1 += c [ cur ] [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "set value of cur to 1",
      "code": "cur = 1 ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "call function memset with arguments vis , false and sizeof ( vis )",
      "code": "memset ( vis , false , sizeof ( vis ) ) ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "while true",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 35,
      "text": "set bo to true",
      "code": "bo = true ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if vis [ i ] is equal to false set bo to false",
      "code": "if ( vis [ i ] == false ) bo = false ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "if bo is true , break the loop",
      "code": "if ( bo ) break ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "for i = n to 1 inclusive , decrement i",
      "code": "for ( i = n ; i >= 1 ; i -- )",
      "indent": 2
    },
    {
      "line": 40,
      "text": "if ( a [ cur ] [ i ] ! = 0 ) and ( vis [ i ] is false )",
      "code": "if ( ( a [ cur ] [ i ] != 0 ) && ( vis [ i ] == false ) )",
      "indent": 3
    },
    {
      "line": 41,
      "text": "if a [ cur ] [ i ] is less than 0 , increase ans2 by c [ cur ] [ i ]",
      "code": "if ( a [ cur ] [ i ] < 0 ) ans2 += c [ cur ] [ i ] ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "cur = i",
      "code": "cur = i ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "vis [ cur ] = true",
      "code": "vis [ cur ] = true ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "if a [ cur ] [ 2 ] is less than 0 , increase ans2 by c [ cur ] [ 1 ]",
      "code": "if ( a [ cur ] [ 2 ] < 0 ) ans2 += c [ cur ] [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "print min of ans1 and ans2 and a new line",
      "code": "cout << min ( ans1 , ans2 ) << endl ;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool * vis [ 200 ] ;"
      ],
      "err_line": 17,
      "err_msg": "cannot convert ‘bool’ to ‘bool*’ in assignment"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , a [ 101 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int a [101]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool bo ( bool bo )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘memset’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "memset ( a , 0 , sizeof ( a ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "memset ( c , 0 , c ( c ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ cannot be used as a function"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int ans1 = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int ans2 = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "redeclaration of ‘int ans2’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int cur = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "redeclaration of ‘int cur’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "bool vis [ 1 ] = true ;"
      ],
      "err_line": 17,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "* cur = i ;"
      ],
      "err_line": 26,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "bool vis [ cur ] = true ;"
      ],
      "err_line": 27,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "int cur = 1 ;"
      ],
      "err_line": 32,
      "err_msg": "redeclaration of ‘int cur’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "vis ( vis , false , sizeof ( vis ) ) ;"
      ],
      "err_line": 33,
      "err_msg": "‘vis’ cannot be used as a function"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "bool vis [ cur ] = true ;"
      ],
      "err_line": 43,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "if ( a [ cur ] [ 1 ] < 0 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        31,
        44
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        31,
        3
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        12,
        44
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        44,
        3
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        12,
        44,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "break the ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        3
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        12,
        3,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        12,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "c [ x ] [ y ] += w ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "if ( a [ cur ] [ 1 ] < 0 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        31,
        44
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        31,
        44,
        3
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        31,
        3
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        44
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        44,
        3
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        44,
        3,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        44,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "break the ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        3,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        1,
        31
      ],
      "mod_code": [
        "int a [ 101 ] [ 101 ] , c [ 101 ] ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        31,
        44
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "break the ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        31,
        44,
        3
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        12,
        31,
        3
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "if ( a [ cur ] [ 1 ] < 0 )",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        12,
        44
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "break the ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        44,
        3
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        12,
        44,
        3,
        31
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        12,
        44,
        31
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "break the ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        12,
        3,
        31
      ],
      "mod_code": [
        "c [ x ] [ y ] += w ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        31,
        44
      ],
      "mod_code": [
        "if ( a [ cur ] [ 1 ] < 0 )",
        "break the ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        31,
        44,
        3
      ],
      "mod_code": [
        "if ( a [ cur ] [ 1 ] < 0 )",
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        31,
        3
      ],
      "mod_code": [
        "if ( a [ cur ] [ 1 ] < 0 )",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        44,
        3
      ],
      "mod_code": [
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        44,
        3,
        31
      ],
      "mod_code": [
        "break the ;",
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    },
    {
      "mod_line": [
        44,
        31
      ],
      "mod_code": [
        "break the ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        3,
        31
      ],
      "mod_code": [
        "int n , x1 , x2 , i , j , x , y , w , ans1 , ans1 , cur ;",
        "if ( a [ cur ] [ 1 ] <= 0 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ans1’"
    }
  ]
}