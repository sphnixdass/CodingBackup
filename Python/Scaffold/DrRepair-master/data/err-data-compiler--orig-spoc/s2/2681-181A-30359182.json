{
  "meta": {
    "index": 2681,
    "hitid": "329E6HTMSWW35N5FEK7DCA0I1QKK3T",
    "workerid": "AIWEXPJAU66D9",
    "probid": "181A",
    "subid": "30359182"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers m and n",
      "code": "int m , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create maps of int to int called mapOfRow and mapOfColumn",
      "code": "map < int , int > mapOfRow , mapOfColumn ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create map iterator it",
      "code": "map < int , int > :: iterator it ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s [ j ] = ' * '",
      "code": "if ( s [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increase mapOfRow [ i ] by one",
      "code": "mapOfRow [ i ] ++ ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increase mapOfColumn [ j + 1 ] by one",
      "code": "mapOfColumn [ j + 1 ] ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "move it through mapOfRow",
      "code": "for ( it = mapOfRow . begin ( ) ; it != mapOfRow . end ( ) ; it ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if it - > second = 1 , print it - > first and ' '",
      "code": "if ( it -> second == 1 ) cout << it -> first << ' ' ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "move it through mapOfColumn",
      "code": "for ( it = mapOfColumn . begin ( ) ; it != mapOfColumn . end ( ) ; it ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if it - > second = 1 print it - > first",
      "code": "if ( it -> second == 1 ) cout << it -> first << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "map < int , int > mapOfRow ;"
      ],
      "err_line": 11,
      "err_msg": "‘mapOfColumn’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "memset ( mapOfRow . begin ( ) , mapOfRow . end ( ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "memset ( mapOfColumn . begin ( ) , mapOfColumn . end ( ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "cannot convert ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’)"
    },
    {
      "mod_line": [
        3,
        16,
        19
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’)"
    },
    {
      "mod_line": [
        3,
        16,
        19,
        11
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        19,
        7
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        19,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        16,
        11
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        11,
        7
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        11,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s1 [ j + 1 ] ++ ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        16,
        7
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        7,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        16,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ and ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’)"
    },
    {
      "mod_line": [
        3,
        19,
        11
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        11,
        7
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        19,
        11,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        19,
        7
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        19,
        7,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        19,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        11,
        7
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11,
        7,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "s1 [ j + 1 ] ++ ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "map < string , int > :: iterator it ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        19,
        11
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        19,
        11,
        7
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        11,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        19,
        7
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        7,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        19,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        11,
        7
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        11,
        7,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        11,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s1 [ j + 1 ] ++ ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        7,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << ' ' ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        11
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        11,
        7
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        11,
        7,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        11,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s1 [ j + 1 ] ++ ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        7
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        7,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "if ( it -> second = 1 ) cout << it -> first << endl ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        7,
        6
      ],
      "mod_code": [
        "s1 [ j + 1 ] ++ ;",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "s1 [ j + 1 ] ++ ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}