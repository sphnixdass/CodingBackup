{
  "meta": {
    "index": 540,
    "hitid": "3TFJJUELSHJW17X8I7CA5HIIRQ42CR",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1040A",
    "subid": "47289521"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let i , n , a , b , cost , j be integers with cost = 0",
      "code": "int i , n , a , b , cost = 0 , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , a , b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ara1 = array of integers of length n , ara2 = array of integers of length n",
      "code": "int ara1 [ n ] , ara2 [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i is equal to 0 , j is equal to n - 1 , i is less than n , increase i by 1 , decrease j by 1",
      "code": "for ( i = 0 , j = n - 1 ; i < n ; i ++ , j -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read ith element of ara1",
      "code": "cin >> ara1 [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set ara2 [ j ] to ara1 [ i ]",
      "code": "ara2 [ j ] = ara1 [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ara2 [ i ] is equal to 2 and ara2 [ i ] is not equal to ara1 [ i ]",
      "code": "if ( ara2 [ i ] == 2 && ara2 [ i ] != ara1 [ i ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set ara2 [ i ] to ara1 [ i ]",
      "code": "ara2 [ i ] = ara1 [ i ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if ara2 [ i ] is equal to 0",
      "code": "if ( ara2 [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increase cost by a",
      "code": "cost = cost + a ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increase cost by b",
      "code": "cost = cost + b ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if ara2 [ i ] is equal to 2 and ara2 [ i ] is equal to ara1 [ i ]",
      "code": "else if ( ara2 [ i ] == 2 && ara2 [ i ] == ara1 [ i ] )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if a < = b",
      "code": "if ( a <= b )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increase cost by a",
      "code": "cost = cost + a ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increase cost by b",
      "code": "cost = cost + b ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for i = 0 , j = n - 1 , i less than n , increase i by 1 , decrease j by 1",
      "code": "for ( i = 0 , j = n - 1 ; i < n ; i ++ , j -- )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if ara2 [ j ] is not equal to ara2 [ i ]",
      "code": "if ( ara2 [ j ] != ara2 [ i ] )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print - 1 and newline",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print cost and newline",
      "code": "cout << cost << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int ara1 [ n ] , ara1 [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int ara1 [n]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> ara1 [ ara1 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int [n][int [n]]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "ara2 [ j ] [ i ] = ara1 [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "ara2 [ i ] [ i ] = ara1 [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "else do",
        "cin >> n >> a , b ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "else do",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "else do",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        12,
        2,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "cin >> n >> a , b ;",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        12,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        12,
        1,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        12,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "++ cost ;",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do",
        "cin >> n >> a , b ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        13,
        2,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do",
        "cin >> n >> a , b ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        13,
        1,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        13,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        2,
        1,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        2,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "cin >> n >> a , b ;",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        1,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= n - 1 ; i ++ )",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "++ cost ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        2
      ],
      "mod_code": [
        "++ cost ;",
        "else do",
        "cin >> n >> a , b ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        2,
        1
      ],
      "mod_code": [
        "++ cost ;",
        "else do",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        13,
        2,
        19
      ],
      "mod_code": [
        "++ cost ;",
        "else do",
        "cin >> n >> a , b ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        1
      ],
      "mod_code": [
        "++ cost ;",
        "else do",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        13,
        1,
        19
      ],
      "mod_code": [
        "++ cost ;",
        "else do",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        13,
        19
      ],
      "mod_code": [
        "++ cost ;",
        "else do",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        2,
        1
      ],
      "mod_code": [
        "++ cost ;",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        2,
        1,
        19
      ],
      "mod_code": [
        "++ cost ;",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        2,
        19
      ],
      "mod_code": [
        "++ cost ;",
        "cin >> n >> a , b ;",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "++ cost ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        1,
        19
      ],
      "mod_code": [
        "++ cost ;",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "++ cost ;",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "else do",
        "cin >> n >> a , b ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        2,
        1
      ],
      "mod_code": [
        "else do",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        13,
        2,
        1,
        19
      ],
      "mod_code": [
        "else do",
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        13,
        2,
        19
      ],
      "mod_code": [
        "else do",
        "cin >> n >> a , b ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "else do",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        13,
        1,
        19
      ],
      "mod_code": [
        "else do",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "else do",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2,
        1,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "cin >> n >> a , b ;",
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int i , n , a , b , cost , j , j ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    }
  ]
}