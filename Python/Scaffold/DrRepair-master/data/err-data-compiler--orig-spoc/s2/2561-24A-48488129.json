{
  "meta": {
    "index": 2561,
    "hitid": "30UZJB2POH60N4KC7X37ALH04L935H",
    "workerid": "AIWEXPJAU66D9",
    "probid": "24A",
    "subid": "48488129"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variable n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "total and ans are integers = 0 ; a , b and c are arrays of integers with size n",
      "code": "int a [ n ] , b [ n ] , c [ n ] , total = 0 , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a [ i ] , b [ i ] and c [ i ]",
      "code": "cin >> a [ i ] >> b [ i ] >> c [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increase total by c [ i ]",
      "code": "total += c [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create boolean array v with size n + 1 , filled with 0",
      "code": "bool v [ n + 1 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "i , m and second are integers , with i and m = 0",
      "code": "int i = 0 , m = 0 , second ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while v [ i ] is false",
      "code": "while ( ! v [ i ] )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "k is integer = 0",
      "code": "int k = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set value of v [ i ] to 1",
      "code": "v [ i ] = 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if m = 0",
      "code": "if ( m == 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set second to b [ i ]",
      "code": "second = b [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set second to a [ i ]",
      "code": "second = a [ i ] ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "for integer j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if a [ j ] = second and v [ j ] is false",
      "code": "if ( a [ j ] == second && ! v [ j ] )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "i = j",
      "code": "i = j ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "set k to 1",
      "code": "k = 1 ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "assign value of 0 to the m",
      "code": "m = 0 ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if k = 1",
      "code": "if ( k == 1 ) continue ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if b [ j ] = second and v [ j ] is false",
      "code": "if ( b [ j ] == second && ! v [ j ] )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "set i to j",
      "code": "i = j ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "increase ans by c [ j ]",
      "code": "ans += c [ j ] ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "k = m = 1",
      "code": "k = m = 1 ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if k = 1",
      "code": "if ( k == 1 ) continue ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "print min of ans and total - ans and a new line",
      "code": "cout << min ( ans , total - ans ) << endl ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total = 0 , c [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "bool v [ n + 1 ] , 0 ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int i , m = 0 , m = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        25
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        25,
        34
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "if ( k == 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        25,
        22
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        25,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        34
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        34,
        22
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        34,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        22
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        22,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        9,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "int i , m = 0 , second = 0 ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        25,
        34
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "if ( k == 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        25,
        34,
        22
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        25,
        34,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "if ( k == 1 )",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        25,
        22
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        25,
        22,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        25,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        34
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        34,
        22
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        34,
        22,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        34,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( k == 1 )",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        22,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        3,
        27
      ],
      "mod_code": [
        "int total [ n ] , total [ n ] , total [ n ] , ans = 0 ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int total [n]’"
    },
    {
      "mod_line": [
        9,
        25,
        34,
        22
      ],
      "mod_code": [
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        25,
        22
      ],
      "mod_code": [
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        25,
        22,
        27
      ],
      "mod_code": [
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        34,
        22
      ],
      "mod_code": [
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        34,
        22,
        27
      ],
      "mod_code": [
        "int i , m = 0 , second = 0 ;",
        "if ( k == 1 )",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "int i , m = 0 , second = 0 ;",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        22,
        27
      ],
      "mod_code": [
        "int i , m = 0 , second = 0 ;",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        25,
        34,
        22
      ],
      "mod_code": [
        "if ( k == 1 )",
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        25,
        34,
        22,
        27
      ],
      "mod_code": [
        "if ( k == 1 )",
        "if ( k == 1 )",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        25,
        22
      ],
      "mod_code": [
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        25,
        22,
        27
      ],
      "mod_code": [
        "if ( k == 1 )",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        34,
        22
      ],
      "mod_code": [
        "if ( k == 1 )",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        34,
        22,
        27
      ],
      "mod_code": [
        "if ( k == 1 )",
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        27
      ],
      "mod_code": [
        "break the ;",
        "if ( ! b [ j ] && v [ j ] == false )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    }
  ]
}