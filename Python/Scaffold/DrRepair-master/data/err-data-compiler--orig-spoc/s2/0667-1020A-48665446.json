{
  "meta": {
    "index": 667,
    "hitid": "32ZCLEW0BZEF1S4KUX48OY36SK8PJI",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "1020A",
    "subid": "48665446"
  },
  "lines": [
    {
      "line": 0,
      "text": "let N = 2e5 + 100 and PI = 3 . 14159265359 be cont int",
      "code": "const int N = 2e5 + 100 , PI = 3.14159265359 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let ma and mb be both a map form long long to bool",
      "code": "map < long long , bool > ma , mb ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let a be a long long array of length N",
      "code": "long long a [ N ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let p be a pair of int and int of length N",
      "code": "pair < int , int > p [ N ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let v , v1 be vectors of int",
      "code": "vector < int > v , v1 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let s be a set of string",
      "code": "set < string > s ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "n , h , a , b , k = int",
      "code": "int n , h , a , b , k ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n , h , a , b , k",
      "code": "cin >> n >> h >> a >> b >> k ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while decrementing k",
      "code": "while ( k -- )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "x1 , y1 , x2 , y2 = int",
      "code": "int x1 , y1 , x2 , y2 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "read x1 , y1 , x2 , y2",
      "code": "cin >> y1 >> x1 >> y2 >> x2 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "let start = x1 be an int",
      "code": "int start = x1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "let ans = 0",
      "code": "int ans = 0 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if y1 = y2",
      "code": "if ( y1 == y2 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print the abs of x1 - x2",
      "code": "cout << abs ( x1 - x2 ) << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "exit loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if x1 > b and x1 > a",
      "code": "if ( ! ( x1 <= b && x1 >= a ) )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "is abs ( x1 - a ) > abs ( x1 - b ) ? then set start to ans , else set start = a",
      "code": "start = abs ( x1 - a ) > abs ( x1 - b ) ? b : a ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increment ans by abs of ( start - x1 )",
      "code": "ans += abs ( start - x1 ) ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increment ans by abs of ( y1 - y2 )",
      "code": "ans += abs ( y1 - y2 ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "increment ans by abs of start - x2",
      "code": "ans += abs ( start - x2 ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 2e5 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "pair < int , int > p ( N ) ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘std::pair<int, int>::pair(const int&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < int > v ( v1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘v1’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "inline string s ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int n , h , a [ b , b ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 , y2 ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        13
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        13,
        16
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        13,
        18
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        13,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        16
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        16,
        18
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "break ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        16,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "break ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        18
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        18,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        16
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "ans = 0 ;",
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        16,
        18
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "ans = 0 ;",
        "break ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        16,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "ans = 0 ;",
        "break ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        18
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "ans = 0 ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        18,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "ans = 0 ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "ans = 0 ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "break ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        16,
        18
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "break ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        16,
        18,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "break ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        16,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "break ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        18,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "int N = 2e5 + 100 , PI = 3 ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        16
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "break ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        16,
        18
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "break ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        16,
        19
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "break ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        18
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        18,
        19
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        19
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "ans = 0 ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        16,
        18,
        19
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "break ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        19
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "break ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        18,
        19
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        19
      ],
      "mod_code": [
        "cin >> x1 >> y1 >> x2 >> y2 ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "ans = 0 ;",
        "break ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        18
      ],
      "mod_code": [
        "ans = 0 ;",
        "break ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        18,
        19
      ],
      "mod_code": [
        "ans = 0 ;",
        "break ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        19
      ],
      "mod_code": [
        "ans = 0 ;",
        "break ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "ans = 0 ;",
        "if ( x1 > b && x1 > a )"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18,
        19
      ],
      "mod_code": [
        "ans = 0 ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "ans = 0 ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 13,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        19
      ],
      "mod_code": [
        "break ;",
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "break ;",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "if ( x1 > b && x1 > a )",
        "start = abs ( x1 - a ) ? abs ( x1 - b ) ? start = a , start = a ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘:’ before ‘;’ token"
    }
  ]
}