{
  "meta": {
    "index": 1532,
    "hitid": "386659BNTLB5IUKWNNJC5X6CQVV01H",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "750A",
    "subid": "48606915"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k , r , s , l , h , m = integer",
      "code": "int n , k , r , s , l , h , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "r = 240 - k",
      "code": "r = 240 - k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "l = 0",
      "code": "l = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "h = n",
      "code": "h = n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while l < h",
      "code": "while ( l < h )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "m = l + ( h - l ) / 2 + 1",
      "code": "m = l + ( h - l ) / 2 + 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "s = ( 5 * m * ( m + 1 ) ) / 2",
      "code": "s = ( 5 * m * ( m + 1 ) ) / 2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s > r",
      "code": "if ( s > r )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "h = m - 1",
      "code": "h = m - 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "l = m",
      "code": "l = m ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print l",
      "code": "cout << l << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        5
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        6
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "while ( l < h ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        6
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "int h = n ;",
        "while ( l < h ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "int h = n ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "m += ( h - l ) / 2 + 1 ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "r -= k ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        11,
        5
      ],
      "mod_code": [
        "r -= k ;",
        "n",
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        3,
        11,
        5,
        6
      ],
      "mod_code": [
        "r -= k ;",
        "n",
        "int h = n ;",
        "while ( l < h ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        3,
        11,
        5,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "n",
        "int h = n ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "r -= k ;",
        "n",
        "while ( l < h ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        11,
        6,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "n",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        11,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "n",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "r -= k ;",
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "r -= k ;",
        "int h = n ;",
        "while ( l < h ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "int h = n ;",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "int h = n ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "r -= k ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        5
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        7,
        11,
        5,
        6
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "int h = n ;",
        "while ( l < h ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        7,
        11,
        5,
        4
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "int h = n ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "while ( l < h ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        6,
        4
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7,
        11,
        4
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "n",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "int h = n ;",
        "while ( l < h ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        7,
        5,
        6,
        4
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "int h = n ;",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "int h = n ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7,
        6,
        4
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "m += ( h - l ) / 2 + 1 ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "n",
        "int h = n ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        11,
        5,
        6
      ],
      "mod_code": [
        "n",
        "int h = n ;",
        "while ( l < h ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        11,
        5,
        6,
        4
      ],
      "mod_code": [
        "n",
        "int h = n ;",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11,
        5,
        4
      ],
      "mod_code": [
        "n",
        "int h = n ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "n",
        "while ( l < h ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        6,
        4
      ],
      "mod_code": [
        "n",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "n",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "int h = n ;",
        "while ( l < h ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int h’"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "int h = n ;",
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "int h = n ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "while ( l < h ) ;",
        "int l = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    }
  ]
}