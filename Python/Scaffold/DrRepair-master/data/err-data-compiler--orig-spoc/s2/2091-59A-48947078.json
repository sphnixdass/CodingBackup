{
  "meta": {
    "index": 2091,
    "hitid": "3UEDKCTP9VKL6662GWA3PRCY7F3K76",
    "workerid": "A1APYLD4DUK33J",
    "probid": "59A",
    "subid": "48947078"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare max with long longs a , b as arguments , returning long long",
      "code": "long long max ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a if a is greater than b , else b , from function",
      "code": "return a > b ? a : b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare min with long longs a , b as arguments , returning long long",
      "code": "long long min ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return a if a is less than b , else b , from function",
      "code": "return a < b ? a : b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare modd with long long a as argument , returning long long",
      "code": "long long modd ( long long a )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "if a is less than 0LL , return a * - 1LL from function",
      "code": "if ( a < 0LL ) return a * - 1LL ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return a from function",
      "code": "return a ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare 2d integer array dir size 4 by 2 = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } }",
      "code": "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } } ;",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "declare sc = 0 , cc = 0 as integers",
      "code": "int sc = 0 , cc = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if s [ i ] is greater than or equal to ' a ' and s [ i ] is less than or equal to ' z '",
      "code": "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment sc",
      "code": "sc ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment cc",
      "code": "cc ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if cc is greater than sc",
      "code": "if ( cc > sc )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if s [ i ] is greater than or equal to ' a ' and s [ i ] is less than or equal to ' z ' , let s [ i ] be integer casted ( s [ i ] ) - ' a ' + ' A '",
      "code": "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = int ( s [ i ] ) - ' a ' + ' A ' ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if s [ i ] is greater than or equal to ' A ' and s [ i ] is less than or equal to ' Z ' , let s [ i ] be integer casted ( s [ i ] ) + ( ' a ' - ' A ' )",
      "code": "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = int ( s [ i ] ) + ( ' a ' - ' A ' ) ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print s , newline",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long max ( long long a , long long b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int sc = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘cc’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 15,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( cc > sc ) return 1 ;"
      ],
      "err_line": 24,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        23
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        23,
        26
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        23,
        26,
        14
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        23,
        26,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        23,
        14
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        23,
        14,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "s >> s ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        23,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        26
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        26,
        14
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        26,
        14,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        26,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "s >> s ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        14,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "s >> s ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 1 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        26,
        14
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        26,
        14,
        10
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        26,
        14,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;",
        "int sc = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        26,
        10
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        26,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        26,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int sc = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘cc’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        14
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        14,
        10
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "s >> s ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        14,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "s >> s ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        14,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "s >> s ;",
        "int sc = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        10
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        23,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = ( s [ i ] , ' a ' + ' A ' ) ;",
        "int sc = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘cc’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        14
      ],
      "mod_code": [
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        14,
        10
      ],
      "mod_code": [
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        26,
        14,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        26,
        14,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "s >> s ;",
        "int sc = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        10
      ],
      "mod_code": [
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        26,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = ( s [ i ] , ' Z ' - ' A ' ) ;",
        "int sc = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘cc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        10,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "int sc = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "int dir [ 4 ] [ 2 ] = { { 0 , 1 } , { 0 , - 1 } , { 0 , 0 } , { - 1 , 0 } ;",
        "int sc = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘;’ token"
    }
  ]
}