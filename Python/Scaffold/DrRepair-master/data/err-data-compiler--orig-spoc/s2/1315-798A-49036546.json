{
  "meta": {
    "index": 1315,
    "hitid": "36FFXPMST9I1PMXTRXO8NLI15NAOHX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "798A",
    "subid": "49036546"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new string variables s and t",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s from the input",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "assign s to t",
      "code": "t = s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "reverse s",
      "code": "reverse ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer d = 0",
      "code": "int d = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to length of s / 2 exclusive incrementing i",
      "code": "for ( int i = 0 ; i < s . length ( ) / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "increment d if s [ i ] ! = t [ i ]",
      "code": "if ( s [ i ] != t [ i ] ) d ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print \" YES \" if d = 0 or 2 and s is odd , otherwise print \" NO \"",
      "code": "puts ( ( d == 1 or d == 0 and s . length ( ) % 2 != 0 ) ? \" YES \" : \" NO \" ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const string s , t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "d = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "puts ( d == 0 ? \" YES \" : \" NO \" ) ? cout << \" NO \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        2
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        2,
        4
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "s >> s ;",
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        2,
        5
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "s >> s ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        2,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "s >> s ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        4
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        5
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "reverse ( s , s + n ) ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        5
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        5,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        1,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "const string s , t ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2,
        4
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "s >> s ;",
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2,
        4,
        5
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "s >> s ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2,
        4,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "s >> s ;",
        "reverse ( s , s + n ) ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2,
        5
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "s >> s ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2,
        5,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "s >> s ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "s >> s ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4,
        5
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4,
        5,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        8,
        4,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "reverse ( s , s + n ) ;",
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "d = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "cout << ( d == 0 ? \" YES \" : \" NO \" ) << \" NO \" << endl ;",
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "const string s , t ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "const string s , t ;",
        "s >> s ;",
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "const string s , t ;",
        "s >> s ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        3
      ],
      "mod_code": [
        "const string s , t ;",
        "s >> s ;",
        "reverse ( s , s + n ) ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "const string s , t ;",
        "s >> s ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        3
      ],
      "mod_code": [
        "const string s , t ;",
        "s >> s ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "const string s , t ;",
        "s >> s ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘const string {aka const std::__cxx11::basic_string<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "const string s , t ;",
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "const string s , t ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        3
      ],
      "mod_code": [
        "const string s , t ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "const string s , t ;",
        "reverse ( s , s + n ) ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "const string s , t ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "const string s , t ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "const string s , t ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "reverse ( s , s + n ) ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "reverse ( s , s + n ) ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "int t = s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "reverse ( s , s + n ) ;",
        "d = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "reverse ( s , s + n ) ;",
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "reverse ( s , s + n ) ;",
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "d = 0 ;",
        "int t = s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    }
  ]
}