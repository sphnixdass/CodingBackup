{
  "meta": {
    "index": 2748,
    "hitid": "3DWGDA5POFYLBVLCQK71QQW2KR91VB",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "474A",
    "subid": "48590392"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let arr be a char array of length 100 = \" qwertyuiopasdfghjkl ; zxcvbnm , . / \"",
      "code": "char arr [ 100 ] = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let a be a char",
      "code": "char a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let ar be a char array of size 100",
      "code": "char ar [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read ar",
      "code": "cin >> ar ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a = ' L '",
      "code": "if ( a == ' L ' )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 , until ar [ i ] isn ' t ' \\ 0 '",
      "code": "for ( int i = 0 ; ar [ i ] != ' \\0 ' ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 0 , until arr [ j ] isn ' t ' \\ 0 '",
      "code": "for ( int j = 0 ; arr [ j ] != ' \\0 ' ; j ++ )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if arr [ i ] = arr [ j ]",
      "code": "if ( ar [ i ] == arr [ j ] )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set ar [ i ] to arr [ j + 1 ]",
      "code": "ar [ i ] = arr [ j + 1 ] ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "exit loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 until ar [ i ] isn ' t ' \\ 0 '",
      "code": "for ( int i = 0 ; ar [ i ] != ' \\0 ' ; i ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "for j = 0 until ar [ j ] isn ' t ' \\ 0 '",
      "code": "for ( int j = 0 ; arr [ j ] != ' \\0 ' ; j ++ )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if ar [ i ] equals arr [ j ]",
      "code": "if ( ar [ i ] == arr [ j ] )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "set ar [ i ] tp arr [ j - 1 ]",
      "code": "ar [ i ] = arr [ j - 1 ] ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "exit loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print ar and new line",
      "code": "cout << ar << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char * a ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "getline ( cin , a ) ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char * ar [ 100 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [100]’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9,
        17
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( arr [ i ] == arr [ j ] )",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9,
        17,
        2
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( arr [ i ] == arr [ j ] )",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9,
        17,
        11
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( arr [ i ] == arr [ j ] )",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9,
        2
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( arr [ i ] == arr [ j ] )",
        "char * a ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9,
        2,
        11
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( arr [ i ] == arr [ j ] )",
        "char * a ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        9,
        11
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( arr [ i ] == arr [ j ] )",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        17,
        2
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        17,
        2,
        11
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        17,
        11
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char * a ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char * a ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        17,
        2
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ j ] )",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        17,
        2,
        11
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ j ] )",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        17,
        2,
        1
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ j ] )",
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;",
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" } ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ j ] )",
        "char * a ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        2,
        11
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ j ] )",
        "char * a ;",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        2,
        11,
        1
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ j ] )",
        "char * a ;",
        "continue ;",
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" } ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        2,
        1
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ j ] )",
        "char * a ;",
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" } ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        2,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        2,
        11,
        1
      ],
      "mod_code": [
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;",
        "continue ;",
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" } ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        2,
        1
      ],
      "mod_code": [
        "for ( int j = 0 ; ar [ j ] != ' \\0 ' ; j ++ )",
        "char * a ;",
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" } ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "char * a ;",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "char * a ;",
        "continue ;",
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" } ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "char * a ;",
        "char arr [ 100 ] = { \" qwertyuiopasdfghjkl \" } ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}