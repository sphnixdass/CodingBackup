{
  "meta": {
    "index": 607,
    "hitid": "337F8MIIMZ7MATHFA52E3VDF2F540Y",
    "workerid": "AIWEXPJAU66D9",
    "probid": "743A",
    "subid": "48534844"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare an array of booleans vis with size 200005",
      "code": "bool vis [ 200005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare int arrays cnt and freq with 200005 elements",
      "code": "int cnt [ 200005 ] , freq [ 200005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare integers n , a and b",
      "code": "int n , a , b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read input to n , a and b",
      "code": "cin >> n >> a >> b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ a - 1 ] = s [ b - 1 ]",
      "code": "if ( s [ a - 1 ] == s [ b - 1 ] )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" 0 \"",
      "code": "puts ( \" 0 \" ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" 1 \"",
      "code": "puts ( \" 1 \" ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int cnt [ 200005 ] , cnt [ 200005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt [200005]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , a + b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        8
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 1 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "cout << \" 0 \" ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "cout << \" 1 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "s >> s ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int n , a + b ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        7,
        8
      ],
      "mod_code": [
        "int n , a + b ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 0 \" ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        7,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 1 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 1 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        8,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 0 \" ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        8,
        10,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 0 \" ;",
        "cout << \" 1 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        8,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        10,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "cout << \" 1 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int n , a + b ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 0 \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 0 \" ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        10,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cout << \" 1 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ a - 1 ] = s [ b - 1 ] )",
        "cin >> n , a >> b ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" 0 \" ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" 0 \" ;",
        "cout << \" 1 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" 0 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" 1 \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        10,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" 1 \" ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "cin >> n , a >> b ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}