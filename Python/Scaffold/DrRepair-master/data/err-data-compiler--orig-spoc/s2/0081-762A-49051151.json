{
  "meta": {
    "index": 81,
    "hitid": "31ANT7FQN8WFHCRBMIS9EFIAN575H0",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "762A",
    "subid": "49051151"
  },
  "lines": [
    {
      "line": 0,
      "text": "N = 40000000",
      "code": "const int N = 4e7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "p = array of N int",
      "code": "int p [ N ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n , k = long long",
      "code": "long long n , k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "index = 0",
      "code": "int index = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to n / i inclusive",
      "code": "for ( long long i = 1 ; i * i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n modulo i is zero p [ incremented index ] = i",
      "code": "if ( n % i == 0 ) p [ ++ index ] = i ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "is_square = p [ index ] * p [ index ] = = n",
      "code": "bool is_square = ( long long ) p [ index ] * ( long long ) p [ index ] == n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "cnt = index * 2 - is_square",
      "code": "int cnt = index * 2 - is_square ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if k < = index",
      "code": "if ( k <= index )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print p [ k ]",
      "code": "cout << p [ k ] << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if k > cnt",
      "code": "else if ( k > cnt )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print n / p [ 2 * index - k + not is_square ]",
      "code": "cout << n / p [ 2 * index - k + ! is_square ] << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "N = 40000000 ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "index = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 10,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "p [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘p’ does not name a type"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n / i ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "is_square = p [ index ] * p [ index ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cnt = ( index * 2 ) - is_square ;"
      ],
      "err_line": 10,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        7
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        9
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        10
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        9
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        10
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        10
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        10,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "index = 0 ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "N = 40000000 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        7,
        9
      ],
      "mod_code": [
        "N = 40000000 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        10
      ],
      "mod_code": [
        "N = 40000000 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        7,
        10
      ],
      "mod_code": [
        "N = 40000000 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        7,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "N = 40000000 ;",
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        9,
        10
      ],
      "mod_code": [
        "N = 40000000 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        9,
        10,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        9,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "N = 40000000 ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        10,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "N = 40000000 ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        10
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        16
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        16
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        7,
        16
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "index = 0 ;",
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "index = 0 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        16
      ],
      "mod_code": [
        "index = 0 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        9,
        16
      ],
      "mod_code": [
        "index = 0 ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "index = 0 ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        10,
        16
      ],
      "mod_code": [
        "index = 0 ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "index = 0 ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        16
      ],
      "mod_code": [
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        16
      ],
      "mod_code": [
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "is_square = p [ index ] * p [ index ] = n ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 10,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        16
      ],
      "mod_code": [
        "if ( n % i == 0 ) p [ index ++ ] = i ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        16
      ],
      "mod_code": [
        "is_square = p [ index ] * p [ index ] = n ;",
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "is_square = p [ index ] * p [ index ] = n ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 9,
      "err_msg": "‘is_square’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "cnt = index * 2 - is_square ;",
        "cout << n / p [ 2 * index - k + is_square ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘cnt’ was not declared in this scope"
    }
  ]
}