{
  "meta": {
    "index": 1001,
    "hitid": "3X52SWXE0XZIDNVFWR1HTOY7VX6CWQ",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "627A",
    "subid": "47408265"
  },
  "lines": [
    {
      "line": 0,
      "text": "dx = long long with dx = { 1 , 0 , - 1 , 0 }",
      "code": "long long dx [ ] = { 1 , 0 , - 1 , 0 } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "dy = long long with dy = { 0 , 1 , 0 , - 1 }",
      "code": "long long dy [ ] = { 0 , 1 , 0 , - 1 } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "in the function gcd that takes long long x , y and returns long long",
      "code": "long long gcd ( long long x , long long y )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if ( y is 0 )",
      "code": "if ( y == 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return x",
      "code": "return x ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return gcd of y and x modulo y",
      "code": "return gcd ( y , x % y ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "in the function expo that takes long long n , m , p and returns long long",
      "code": "long long expo ( long long n , long long m , long long p )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "r = long long with r = 1",
      "code": "long long r = 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "n = n modulo p",
      "code": "n = n % p ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while ( m > 0 )",
      "code": "while ( m > 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if ( m modulo 2 ) , r = ( r * n ) modulo p",
      "code": "if ( m % 2 ) r = ( r * n ) % p ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "n = ( n * n ) modulo p",
      "code": "n = ( n * n ) % p ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "m = m / 2",
      "code": "m = m / 2 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return r modulo p",
      "code": "return r % p ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "in the function isPrime that takes long long n and returns bool",
      "code": "bool isPrime ( long long n )",
      "indent": 0
    },
    {
      "line": 19,
      "text": "if ( n < = 1 ) , return false",
      "code": "if ( n <= 1 ) return false ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ( n < = 3 ) , return true",
      "code": "if ( n <= 3 ) return true ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if ( n modulo 2 is 0 or n modulo 3 is 0 ) , return false",
      "code": "if ( n % 2 == 0 || n % 3 == 0 ) return false ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = 5 to i * i < = n with i = i + 6",
      "code": "for ( long long i = 5 ; i * i <= n ; i = i + 6 )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if ( n modulo i is 0 or n modulo ( i + 2 ) is 0 ) , return false",
      "code": "if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "in the function z_function that takes string s and returns vector of long long",
      "code": "vector < long long > z_function ( string s )",
      "indent": 0
    },
    {
      "line": 27,
      "text": "n = long long with n = ( cast to long long ) s . length ( )",
      "code": "long long n = ( long long ) s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "z = vector of long long with z = n",
      "code": "vector < long long > z ( n ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for i = 1 , l = 0 , r = 0 to i < n",
      "code": "for ( long long i = 1 , l = 0 , r = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if ( i < = r ) , z [ i ] = min ( r - i + 1 , z [ i - l ] )",
      "code": "if ( i <= r ) z [ i ] = min ( r - i + 1 , z [ i - l ] ) ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "while ( i + z [ i ] < n and s [ z [ i ] ] is s [ i + z [ i ] ] ) , increment z [ i ]",
      "code": "while ( i + z [ i ] < n && s [ z [ i ] ] == s [ i + z [ i ] ] ) ++ z [ i ] ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if ( i + z [ i ] - 1 > r ) , l = i , r = i + z [ i ] - 1",
      "code": "if ( i + z [ i ] - 1 > r ) l = i , r = i + z [ i ] - 1 ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "return z",
      "code": "return z ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 36,
      "text": "s , x = long long",
      "code": "long long s , x ;",
      "indent": 0
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 38,
      "text": "read s , x",
      "code": "cin >> s >> x ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "aa = long long with aa = ( s - x ) / 2",
      "code": "long long aa = ( s - x ) / 2 ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "if ( ( s - x ) modulo 2 is 1 or x > s )",
      "code": "if ( ( s - x ) % 2 == 1 || x > s )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print 0",
      "code": "cout << 0 << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "ans = long long with ans = 0",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "for i = 0 to 39",
      "code": "for ( long long i = 0 ; i < 40 ; i ++ )",
      "indent": 1
    },
    {
      "line": 46,
      "text": "if ( ( x bitwise and ( left shift 1LL i place ) ) and ( ( aa bitwise and ( left shift 1LL i place ) ) is 0 ) )",
      "code": "if ( ( x & ( 1LL << i ) ) && ( ( aa & ( 1LL << i ) ) == 0 ) )",
      "indent": 2
    },
    {
      "line": 47,
      "text": "incremnet ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "else if ( ( x bitewise and ( left shift i 1LL place ) ) and ( ( aa bitwise and ( left shift i 1LL place ) ) ) )",
      "code": "else if ( ( x & ( 1LL << i ) ) && ( ( aa & ( 1LL << i ) ) ) )",
      "indent": 2
    },
    {
      "line": 49,
      "text": "print 0",
      "code": "cout << \" 0 \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 53,
      "text": "ans = ( left shift ans 1LL )",
      "code": "ans = ( 1LL << ans ) ;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "if ( s is x ) , ans = ans - 2",
      "code": "if ( s == x ) ans -= 2 ;",
      "indent": 1
    },
    {
      "line": 55,
      "text": "print ans",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int dx = { 1 , 0 , - 1 , 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int dy = { 0 , 1 , 0 , - 1 } ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "long long expo ( long long n , long long p , long long p )"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int p’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "vector < long long > x ( string s )"
      ],
      "err_line": 36,
      "err_msg": "‘long long int x’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "vector < long long > z = n ;"
      ],
      "err_line": 28,
      "err_msg": "conversion from ‘long long int’ to non-scalar type ‘std::vector<long long int>’ requested"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 ; i < n ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "exit ( z ) ;"
      ],
      "err_line": 34,
      "err_msg": "cannot convert ‘std::vector<long long int>’ to ‘int’ for argument ‘1’ to ‘void exit(int)’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "for ( i = 0 ; i < 39 ; i ++ )"
      ],
      "err_line": 45,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "else if ( ( x << bitewise && ( ( aa << i ) ) && ( ( aa & ( 1LL << i ) ) ) ) )"
      ],
      "err_line": 48,
      "err_msg": "‘bitewise’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        29
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        29,
        46
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        29,
        47
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        29,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        29,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        29,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        46
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        46,
        47
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        46,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        46,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        46,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        47
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        47,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        47,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        47,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        48,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        48,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        53,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        1,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        46
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        46,
        47
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        46,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        46,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        46,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        47
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        47,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        47,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        47,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        48,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        48,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        53,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        29,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        47
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        47,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        47,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        47,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        48,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        48,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        53,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        46,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        47
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans += ans ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        47,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        47,
        48,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans += ans ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        47,
        48,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans += ans ;",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        47,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        47,
        53,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        47,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        48
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "else if ( x )"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        48,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        48,
        53,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        48,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        53
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        53,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        0,
        54
      ],
      "mod_code": [
        "long long dx = { 1 , 0 , - 1 , 0 } ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 0,
      "err_msg": "scalar object ‘dx’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        46
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        46,
        47
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        46,
        48
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        46,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        46,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        47
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        47,
        48
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        47,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        47,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        48
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        48,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        48,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        53,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        29,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        47
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        47,
        48
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        47,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        47,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        48
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        48,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        48,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        53,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        46,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        47
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        47,
        48
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        47,
        48,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        47,
        48,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        47,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        47,
        53,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        47,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        48
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "else if ( x )"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        48,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        48,
        53,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        48,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        53
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        53,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        1,
        54
      ],
      "mod_code": [
        "long long dy = { 0 , 1 , 0 , - 1 } ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 1,
      "err_msg": "scalar object ‘dy’ requires one element in initializer"
    },
    {
      "mod_line": [
        29,
        46
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        47
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        47,
        48
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        47,
        53
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        47,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        48
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        48,
        53
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        48,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        53
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        53,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        46,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        47
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        47,
        48
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "else if ( x )"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        47,
        48,
        53
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        47,
        48,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        47,
        53
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        47,
        53,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        47,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans += ans ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        48
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        48,
        53
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        48,
        53,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        48,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "else if ( x )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        53
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        53,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        29,
        54
      ],
      "mod_code": [
        "for ( int i = 1 , l = 0 , r = 0 ; i < n ; i ++ )",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        46,
        47,
        48,
        53
      ],
      "mod_code": [
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        46,
        47,
        53
      ],
      "mod_code": [
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        46,
        47,
        53,
        54
      ],
      "mod_code": [
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans += ans ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        46,
        48,
        53
      ],
      "mod_code": [
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        46,
        48,
        53,
        54
      ],
      "mod_code": [
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "else if ( x )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        46,
        53
      ],
      "mod_code": [
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        46,
        53,
        54
      ],
      "mod_code": [
        "if ( ( x & ( ( i << 1LL ) ) && ( ( aa & ( i << 1LL ) ) ) == 0 ) )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        47,
        48,
        53
      ],
      "mod_code": [
        "ans += ans ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        47,
        48,
        53,
        54
      ],
      "mod_code": [
        "ans += ans ;",
        "else if ( x )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        47,
        53
      ],
      "mod_code": [
        "ans += ans ;",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        47,
        53,
        54
      ],
      "mod_code": [
        "ans += ans ;",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        48,
        53
      ],
      "mod_code": [
        "else if ( x )",
        "ans = ( left << 1LL ) ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        48,
        53,
        54
      ],
      "mod_code": [
        "else if ( x )",
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        53,
        54
      ],
      "mod_code": [
        "ans = ( left << 1LL ) ;",
        "if ( s == x ) ans *= 2 ;"
      ],
      "err_line": 53,
      "err_msg": "invalid operands of types ‘std::ios_base&(std::ios_base&)’ and ‘long long int’ to binary ‘operator<<’"
    }
  ]
}