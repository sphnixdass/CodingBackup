{
  "meta": {
    "index": 1069,
    "hitid": "3BDORL6HKK7D5RETXXRB6PQQ2VSCRD",
    "workerid": "A23MCHRW2IBC6K",
    "probid": "272A",
    "subid": "26766909"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , i , j , x , y , a , b be ints with y = 0 and a = 0",
      "code": "int n , i , j , x , y = 0 , a = 0 , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set y to y + x",
      "code": "y += x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n equals 1 and y modulo 2 equals 0 do the following",
      "code": "if ( ( n == 1 ) && ( y % 2 == 0 ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print 2 and one newline",
      "code": "cout << \" 2 \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if n equals 1 and y modulo 2 not equal to 0 do the following",
      "code": "else if ( ( n == 1 ) && ( y % 2 != 0 ) )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print 3 and one newline",
      "code": "cout << \" 3 \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( i = 0 ; i < 5 ; i ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if y + i modulo n + 1 not equal to 0 increase a by 1",
      "code": "if ( ( ( y + i ) % ( n + 1 ) ) != 0 ) { a ++ ; }",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print a and one newline",
      "code": "cout << a << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "if ( y + i % n + 1 != 0 ) a ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        13,
        11
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        13,
        11,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        13,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "n",
        "if ( ( y + i ) % n + 1 ) a ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "n",
        "if ( ( y + i ) % n + 1 ) a ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        11,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "if ( ( y + i ) % n + 1 ) a ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        13,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "if ( ( y + i ) % n + 1 ) a ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a , b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "int n , i , j , x , y , a = 0 , a = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        13,
        1,
        11
      ],
      "mod_code": [
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        13,
        1,
        11,
        2
      ],
      "mod_code": [
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        13,
        1,
        2
      ],
      "mod_code": [
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        11,
        2
      ],
      "mod_code": [
        "if ( y + i % n + 1 != 0 ) a ++ ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n",
        "if ( ( y + i ) % n + 1 ) a ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n",
        "if ( ( y + i ) % n + 1 ) a ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        11,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "if ( ( y + i ) % n + 1 ) a ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        13,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "if ( ( y + i ) % n + 1 ) a ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , i , j , x , y , a = 0 , a = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "n",
        "if ( ( y + i ) % n + 1 ) a ++ ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        13,
        2
      ],
      "mod_code": [
        "n",
        "if ( ( y + i ) % n + 1 ) a ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}