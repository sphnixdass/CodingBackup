{
  "meta": {
    "index": 1321,
    "hitid": "3HEADTGN2PM940KTOEMGWHEFOP5VR3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "798A",
    "subid": "49047296"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "A is a new array of long longs with size 26 filled with 0",
      "code": "long long A [ 26 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare new string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s from the user input",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare new long long called n",
      "code": "long long n = ( int ) s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "new long long c = 0",
      "code": "long long c = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "in a for loop , change i from 0 to n / 2 exclusive with step = 1",
      "code": "for ( long long i = 0 ; i < n / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] ! = s [ n - 1 - i ] , increment c",
      "code": "if ( s [ i ] != s [ n - 1 - i ] ) c ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if c is equal to 1",
      "code": "if ( c == 1 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" YES \"",
      "code": "cout << \" YES \"",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if c = 0 and n is odd",
      "code": "else if ( c == 0 && n % 2 == 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" YES \" to the standard output",
      "code": "cout << \" YES \"",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" NO \"",
      "code": "cout << \" NO \"",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print \" \\ n \" to the stdout",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const string s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n / 2 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( c == 1 ) break ;"
      ],
      "err_line": 9,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" YES \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" YES \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << \" NO \" ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        16
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        17
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        16
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        16,
        17
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        16,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        17
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        17,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        13,
        16
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        13,
        16,
        17
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        13,
        16,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        13,
        17
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        13,
        17,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        13,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" YES \" << endl ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        16,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" NO \" << endl ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        4,
        17,
        15
      ],
      "mod_code": [
        "long long n ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "long long n ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        16
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        16,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        16,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        17,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" YES \" << endl ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        16,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        16,
        17,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        16,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        17,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        16,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        16,
        17,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        16,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        17,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        17,
        15
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}