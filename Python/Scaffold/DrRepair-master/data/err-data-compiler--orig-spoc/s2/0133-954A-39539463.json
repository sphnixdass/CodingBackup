{
  "meta": {
    "index": 133,
    "hitid": "30U1YOGZGAQZBYKKCIMRG5D49XMSDG",
    "workerid": "A1APYLD4DUK33J",
    "probid": "954A",
    "subid": "39539463"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long integer n",
      "code": "long long int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n - 1 exclusive",
      "code": "for ( long long int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( s [ i ] is ' U ' and s [ i + 1 ] is ' R ' ) or ( s [ i ] is ' R ' and s [ i + 1 ] is ' U ' ) , replace from i to 2 with \" D \" in s",
      "code": "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( i , 2 , \" D \" ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print length of s print newline",
      "code": "cout << s . length ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::replace(const char [2])’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::replace(const char [2])’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        2
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "string S ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        2,
        4
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "string S ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        2,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "string S ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        4
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "string S ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        4,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "string S ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::replace(const char [2])’"
    },
    {
      "mod_line": [
        6,
        2,
        4
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        4,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' && s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string S ;",
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "string S ;",
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        4
      ],
      "mod_code": [
        "string S ;",
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        5
      ],
      "mod_code": [
        "string S ;",
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "string S ;",
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        4,
        5
      ],
      "mod_code": [
        "string S ;",
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "string S ;",
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        4
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        4,
        5
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "string S ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string S ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "string S ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "string S ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::replace(const char [2])’"
    },
    {
      "mod_line": [
        6,
        2,
        4
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        4,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( ( s [ i ] == ' U ' && s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' R ' ) || ( s [ i + 1 ] == ' U ' ) ) s . replace ( \" D \" ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}