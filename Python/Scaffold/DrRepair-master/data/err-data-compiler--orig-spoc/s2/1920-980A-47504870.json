{
  "meta": {
    "index": 1920,
    "hitid": "3VDVA3ILID92TYVH1P8FQPTSXCN1GO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "980A",
    "subid": "47504870"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variable with name cad",
      "code": "string cad ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read cad from the input",
      "code": "cin >> cad ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare new int variables guiones and perlas = 0",
      "code": "int guiones = 0 , perlas = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to length of cad exclusive incrementing i",
      "code": "for ( int i = 0 ; i < cad . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if cad [ i ] is equal to ' - '",
      "code": "if ( cad [ i ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment guiones by one",
      "code": "guiones ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment perlas",
      "code": "perlas ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if guiones or perlas is equal to 0",
      "code": "if ( guiones == 0 || perlas == 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" YES \\ n \" to the standard output",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if guiones is less than perlas",
      "code": "if ( guiones < perlas )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if guiones = perlas",
      "code": "if ( guiones == perlas )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" YES \\ n \" to the standard output",
      "code": "cout << \" YES\\n \" ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if guiones % perlas = 0",
      "code": "if ( guiones % perlas == 0 )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 21,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int cad ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘cad’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cad >> cad ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 20,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        17
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        5
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "n",
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        3
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "n",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        5
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        5,
        3
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        5,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "else if ( cad [ i ] == ' - ' )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        3
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        3,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "puts ( \" YES\\n \" ) ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "cad >> cad ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        17,
        5
      ],
      "mod_code": [
        "cad >> cad ;",
        "n",
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        17,
        5,
        3
      ],
      "mod_code": [
        "cad >> cad ;",
        "n",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        17,
        5,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "n",
        "else if ( cad [ i ] == ' - ' )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        17,
        3
      ],
      "mod_code": [
        "cad >> cad ;",
        "n",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        17,
        3,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "n",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        17,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "n",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cad >> cad ;",
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "cad >> cad ;",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5,
        3,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "else if ( cad [ i ] == ' - ' )",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cad >> cad ;",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cad >> cad ;",
        "n"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17,
        5
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n",
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        17,
        5,
        3
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        17,
        5,
        7
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n",
        "else if ( cad [ i ] == ' - ' )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        17,
        3
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17,
        3,
        7
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17,
        7
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        5,
        3
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        5,
        3,
        7
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        5,
        7
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "else if ( cad [ i ] == ' - ' )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        3,
        7
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "puts ( \" YES\\n \" ) ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "n",
        "else if ( cad [ i ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        5,
        3
      ],
      "mod_code": [
        "n",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        5,
        3,
        7
      ],
      "mod_code": [
        "n",
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        5,
        7
      ],
      "mod_code": [
        "n",
        "else if ( cad [ i ] == ' - ' )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "n",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        3,
        7
      ],
      "mod_code": [
        "n",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "else if ( cad [ i ] == ' - ' )",
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "else if ( cad [ i ] == ' - ' )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int guiones = 0 , perlas ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}