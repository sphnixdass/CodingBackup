{
  "meta": {
    "index": 668,
    "hitid": "35NNO802AVQJ3W81W06G88JBFQINI8",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "1020A",
    "subid": "48424582"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , h , a , b , k = long long",
      "code": "long long n , h , a , b , k ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "t1 , f1 , t2 , f2 = long long",
      "code": "long long t1 , f1 , t2 , f2 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n , h , a , b , k",
      "code": "cin >> n >> h >> a >> b >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while decrementing k",
      "code": "while ( k -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "ans = long long",
      "code": "long long ans ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read t1 , f1 , t2 , f2",
      "code": "cin >> t1 >> f1 >> t2 >> f2 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if t1 = t2",
      "code": "if ( t1 == t2 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set ans to abs of f1 - f2",
      "code": "ans = abs ( f1 - f2 ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if f1 > b and f2 > b",
      "code": "if ( f1 > b && f2 > b )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set ans to abs ( t1 - t2 ) + f1 + f2 - 2 * b",
      "code": "ans = abs ( t1 - t2 ) + f1 + f2 - 2 * b ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if f1 and f2 are both < a",
      "code": "else if ( f1 < a && f2 < a )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set ans = abs ( t1 - t2 ) + 2 * a - f1 - f2",
      "code": "ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "make ans = abs ( t1 - t2 ) + abs ( f1 - f2 )",
      "code": "ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        4,
        9
      ],
      "mod_code": [
        "else if ( f1 == a && f2 == a )",
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "while ( -- k )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        9
      ],
      "mod_code": [
        "else if ( f1 == a && f2 == a )",
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        9,
        15
      ],
      "mod_code": [
        "else if ( f1 == a && f2 == a )",
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        9
      ],
      "mod_code": [
        "else if ( f1 == a && f2 == a )",
        "while ( -- k )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        9,
        15
      ],
      "mod_code": [
        "else if ( f1 == a && f2 == a )",
        "while ( -- k )",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "else if ( f1 == a && f2 == a )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        9,
        15
      ],
      "mod_code": [
        "else if ( f1 == a && f2 == a )",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        12,
        4,
        9
      ],
      "mod_code": [
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "else if ( f1 < a && f2 == a )",
        "while ( -- k )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        12,
        9
      ],
      "mod_code": [
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "else if ( f1 < a && f2 == a )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        12,
        9,
        15
      ],
      "mod_code": [
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "else if ( f1 < a && f2 == a )",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        4,
        9
      ],
      "mod_code": [
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "while ( -- k )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        4,
        9,
        15
      ],
      "mod_code": [
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "while ( -- k )",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9,
        15
      ],
      "mod_code": [
        "int ans = abs ( t1 - t2 ) + 2 * a - f1 - f2 ;",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        9
      ],
      "mod_code": [
        "else if ( f1 < a && f2 == a )",
        "while ( -- k )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        9,
        15
      ],
      "mod_code": [
        "else if ( f1 < a && f2 == a )",
        "while ( -- k )",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "else if ( f1 < a && f2 == a )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        9,
        15
      ],
      "mod_code": [
        "else if ( f1 < a && f2 == a )",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( -- k )",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        9,
        15
      ],
      "mod_code": [
        "while ( -- k )",
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "n",
        "int ans = abs ( t1 - t2 ) + abs ( f1 - f2 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}