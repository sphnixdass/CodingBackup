{
  "meta": {
    "index": 1771,
    "hitid": "3RZS0FBRWK4STEYEK5NM1UQB204CPW",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "897A",
    "subid": "48707377"
  },
  "lines": [
    {
      "line": 0,
      "text": "MAXN = 205 = int constant",
      "code": "const int MAXN = 205 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let inf = 1e9 + 1e8 be an integer const",
      "code": "const int inf = 1e9 + 1e8 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let INF = 1e18 + 1e17 be a long long const",
      "code": "const long long INF = 1e18 + 1e17 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "MOD1 = 1e9 + 7 = const int",
      "code": "const int MOD1 = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "MOD2 = const int = 998244353",
      "code": "const int MOD2 = 998244353 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "N , M = int",
      "code": "int N , M ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "str = string",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "read N , M",
      "code": "cin >> N >> M ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "increment str by ' 0 '",
      "code": "str = ' 0 ' + str ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to M exclusive",
      "code": "for ( int i = 0 ; i < M ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "l , r = int",
      "code": "int l , r ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "c1 , c2 = char",
      "code": "char c1 , c2 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "read l , r , c1 , c2",
      "code": "cin >> l >> r >> c1 >> c2 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for j = l to r inclusive",
      "code": "for ( int j = l ; j <= r ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if str [ j ] = c1 then set str [ j ] to c2",
      "code": "if ( str [ j ] == c1 ) { str [ j ] = c2 ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print substring of str with arg 1",
      "code": "cout << str . substr ( 1 ) << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const const int inf = 1e9 + 1e8 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const long long INF += 1e17 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const int * MOD2 = 998244353 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int N , N ;"
      ],
      "err_line": 5,
      "err_msg": "redefinition of ‘int N’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 9,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < M ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = l ; j <= r ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16,
        19,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "cout << str . substr ( 1 ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        16,
        9,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "getline ( cin , str ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        16,
        8,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        16,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        19,
        9,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "cout << str . substr ( 1 ) ;",
        "getline ( cin , str ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        19,
        8,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "cout << str . substr ( 1 ) ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        19,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "cout << str . substr ( 1 ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        9,
        8,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "getline ( cin , str ) ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        9,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "getline ( cin , str ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        8,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "str += ' 0 ' ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        16,
        19,
        9,
        13
      ],
      "mod_code": [
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "cout << str . substr ( 1 ) ;",
        "getline ( cin , str ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        16,
        19,
        8,
        13
      ],
      "mod_code": [
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "cout << str . substr ( 1 ) ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        16,
        19,
        13
      ],
      "mod_code": [
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "cout << str . substr ( 1 ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        16,
        9,
        8,
        13
      ],
      "mod_code": [
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "getline ( cin , str ) ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        16,
        9,
        13
      ],
      "mod_code": [
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "getline ( cin , str ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        16,
        8,
        13
      ],
      "mod_code": [
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "if ( str [ j ] == ' c1 ' ) str [ j ] = c2 ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        19,
        9,
        8,
        13
      ],
      "mod_code": [
        "cout << str . substr ( 1 ) ;",
        "getline ( cin , str ) ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        19,
        9,
        13
      ],
      "mod_code": [
        "cout << str . substr ( 1 ) ;",
        "getline ( cin , str ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        19,
        8,
        13
      ],
      "mod_code": [
        "cout << str . substr ( 1 ) ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        19,
        13
      ],
      "mod_code": [
        "cout << str . substr ( 1 ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        9,
        8,
        13
      ],
      "mod_code": [
        "getline ( cin , str ) ;",
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "getline ( cin , str ) ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "cin >> N , M ;",
        "char c1 , c1 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘char c1’"
    }
  ]
}