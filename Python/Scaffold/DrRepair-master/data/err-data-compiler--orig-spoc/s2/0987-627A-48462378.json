{
  "meta": {
    "index": 987,
    "hitid": "3A3KKYU7P3BVM9769GVVWK3JPBAMWI",
    "workerid": "A1AYVATMT88U1W",
    "probid": "627A",
    "subid": "48462378"
  },
  "lines": [
    {
      "line": 0,
      "text": "let func be a function that accepts long long xorr , long long andd and returns a long long value",
      "code": "long long func ( long long xorr , long long andd )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if xorr is equal to 0 and andd is equal to 0 , return 1",
      "code": "if ( xorr == 0 && andd == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if andd is less than 0 or xorr is less than 0 , return 0",
      "code": "if ( andd < 0 || xorr < 0 ) return 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let the long integer value of bit1 = xorr modulo 2",
      "code": "long long bit1 = xorr % 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let the long integer value of bit2 = andd modulo 2",
      "code": "long long bit2 = andd % 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "divide xorr by 2",
      "code": "xorr = xorr / 2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "divide andd by 2",
      "code": "andd = andd / 2 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let the long integer value of mul = 1",
      "code": "long long mul = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if bit1 is equal to 0 and bit2 is equal to 1 , mul is equal to 1",
      "code": "if ( bit1 == 0 && bit2 == 1 ) mul = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if bit1 is equal to 1 and bit2 is equal to 0 , mul is equal to 2",
      "code": "if ( bit1 == 1 && bit2 == 0 ) mul = 2 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if bit1 is equal to 1 and bit2 is equal to 1 , mul is equal to 0",
      "code": "if ( bit1 == 1 && bit2 == 1 ) mul = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if bit1 is equal to 0 and bit2 is equal to 0 , mul is equal to 1",
      "code": "if ( bit1 == 0 && bit2 == 0 ) mul = 1 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return the value of ( mul * func ( xorr , andd ) )",
      "code": "return ( mul * func ( xorr , andd ) ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "let sum , xorr be long integers",
      "code": "long long sum , xorr ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "let andd be long integer",
      "code": "long long andd ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read sum , xorr",
      "code": "cin >> sum >> xorr ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "andd is equal to sum - xorr",
      "code": "andd = sum - xorr ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if andd modulo 2 is equal to 1",
      "code": "if ( andd % 2 == 1 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print 0 and newline",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "divide andd / 2",
      "code": "andd = andd / 2 ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "let the long integer value of ans = func ( xorr , andd )",
      "code": "long long ans = func ( xorr , andd ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if sum is equal to xorr , decrement ans by 2",
      "code": "if ( sum == xorr ) ans = ans - 2 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return mul ( mul * func ( xorr , andd ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "andd -= xorr ;",
        "return mul ( mul * func ( xorr , andd ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    },
    {
      "mod_line": [
        18,
        12,
        17
      ],
      "mod_code": [
        "andd -= xorr ;",
        "return mul ( mul * func ( xorr , andd ) ) ;",
        "cin >> sum >> sum ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    },
    {
      "mod_line": [
        18,
        12,
        17,
        24
      ],
      "mod_code": [
        "andd -= xorr ;",
        "return mul ( mul * func ( xorr , andd ) ) ;",
        "cin >> sum >> sum ;",
        "int ans = func ( xorr , andd ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    },
    {
      "mod_line": [
        18,
        12,
        24
      ],
      "mod_code": [
        "andd -= xorr ;",
        "return mul ( mul * func ( xorr , andd ) ) ;",
        "int ans = func ( xorr , andd ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "return mul ( mul * func ( xorr , andd ) ) ;",
        "cin >> sum >> sum ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        17,
        24
      ],
      "mod_code": [
        "return mul ( mul * func ( xorr , andd ) ) ;",
        "cin >> sum >> sum ;",
        "int ans = func ( xorr , andd ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "return mul ( mul * func ( xorr , andd ) ) ;",
        "int ans = func ( xorr , andd ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘mul’ cannot be used as a function"
    }
  ]
}