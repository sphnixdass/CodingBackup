{
  "meta": {
    "index": 863,
    "hitid": "389A2A304OCP5XUU3K8WMTP3USNC0K",
    "workerid": "A1APYLD4DUK33J",
    "probid": "267A",
    "subid": "47782464"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare a , b as long longs",
      "code": "long long a , b ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "declare ans = 0 as long long",
      "code": "long long ans = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "while a is greater than 0 and b is greater than 0",
      "code": "while ( a > 0 && b > 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "declare integer d = ( a - b ) / b",
      "code": "int d = ( a - b ) / b ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "if a - ( d + 1 ) * b is greater than or equal to 0",
      "code": "if ( a - ( d + 1 ) * b >= 0 )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increment ans by d + 1",
      "code": "ans += ( d + 1 ) ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "decrement a by ( d + 1 ) * b",
      "code": "a -= ( d + 1 ) * b ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 14,
      "text": "increment ans by d",
      "code": "ans += d ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "decrement a by d * b",
      "code": "a -= ( d * b ) ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "declare d = ( b - a ) / a as integer",
      "code": "int d = ( b - a ) / a ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if b - ( d + 1 ) * a is greater than or equal to 0",
      "code": "if ( b - ( d + 1 ) * a >= 0 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increment ans by d + 1",
      "code": "ans += ( d + 1 ) ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "decrement b by ( d + 1 ) * a",
      "code": "b -= ( d + 1 ) * a ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 23,
      "text": "increment ans by d",
      "code": "ans += d ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "decrement b by d * a",
      "code": "b -= ( d * a ) ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print ans , newline",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( a - ( d + 1 ) * b ) b ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        19,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        19,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        19,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "a * ( d + 1 ) * b ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "a * ( d + 1 ) * b ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        21,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> a , b ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( b - ( d + 1 ) * a ) a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        12,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( b - ( d + 1 ) * a ) a ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        21,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( b - ( d + 1 ) * a ) a ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        19,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( b - ( d + 1 ) * a ) a ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a * ( d + 1 ) * b ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        21,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a * ( d + 1 ) * b ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        21,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        19,
        12
      ],
      "mod_code": [
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        19,
        12,
        21
      ],
      "mod_code": [
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        19,
        12,
        22
      ],
      "mod_code": [
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        19,
        21
      ],
      "mod_code": [
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        19,
        21,
        22
      ],
      "mod_code": [
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        19,
        22
      ],
      "mod_code": [
        "cin >> a , b ;",
        "if ( b - ( d + 1 ) * a ) a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12,
        21,
        22
      ],
      "mod_code": [
        "cin >> a , b ;",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12,
        22
      ],
      "mod_code": [
        "cin >> a , b ;",
        "a * ( d + 1 ) * b ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        21,
        22
      ],
      "mod_code": [
        "cin >> a , b ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "cin >> a , b ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        12,
        21
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        12,
        21,
        22
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        12,
        22
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;",
        "a * ( d + 1 ) * b ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;",
        "b * ( d + 1 ) * a ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        21,
        22
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "if ( b - ( d + 1 ) * a ) a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        21,
        22
      ],
      "mod_code": [
        "a * ( d + 1 ) * b ;",
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        22
      ],
      "mod_code": [
        "a * ( d + 1 ) * b ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "b * ( d + 1 ) * a ;",
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}