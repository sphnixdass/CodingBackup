{
  "meta": {
    "index": 821,
    "hitid": "3L1EFR8WWTZE432HUIHQNABZU9A9F5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "255A",
    "subid": "48531794"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read from the input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create new array of integers totals with 3 elements",
      "code": "int totals [ 3 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer variable max = 0",
      "code": "int max = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "index is a new integer with value 0",
      "code": "int index = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare new integer temp",
      "code": "int temp ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read temp",
      "code": "cin >> temp ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change totals [ i % 3 ] to totals [ i % 3 ] + temp",
      "code": "totals [ i % 3 ] += temp ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if totals [ i % 3 ] is greater than max",
      "code": "if ( totals [ i % 3 ] > max )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "assign the new value = totals [ i % 3 ] to max",
      "code": "max = totals [ i % 3 ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "change index to i % 3",
      "code": "index = i % 3 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if index = 0",
      "code": "if ( index == 0 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" chest \"",
      "code": "cout << \" chest \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if index is equal to 1",
      "code": "else if ( index == 1 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" biceps \"",
      "code": "cout << \" biceps \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" back \"",
      "code": "cout << \" back \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int totals [ 3 ] [ 3 ] ;"
      ],
      "err_line": 9,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "index = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( totals [ i % 3 ] ] > max )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        16,
        18,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        20,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" chest \" ;",
        "cout << \" back \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        20,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" chest \" ;",
        "cout << \" -1 \" << endl ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" chest \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        18,
        20,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        18,
        20,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" biceps \" ;",
        "cout << \" -1 \" << endl ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        18,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" biceps \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        20,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" back \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        20,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "cout << \" -1 \" << endl ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "int totals [ 3 ] ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "cout << \" -1 \" << endl ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        20,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" back \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        20,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" -1 \" << endl ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        20,
        17
      ],
      "mod_code": [
        "cout << \" biceps \" ;",
        "cout << \" back \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        20,
        17
      ],
      "mod_code": [
        "cout << \" biceps \" ;",
        "cout << \" -1 \" << endl ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "cout << \" biceps \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        17
      ],
      "mod_code": [
        "cout << \" back \" ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        17
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "else if ( index == l )"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}