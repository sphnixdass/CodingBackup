{
  "meta": {
    "index": 1132,
    "hitid": "3UQ1LLR26A2E9EMI8ZYOEIR3XNFLA2",
    "workerid": "A1APYLD4DUK33J",
    "probid": "844A",
    "subid": "45031142"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integer k",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s and k",
      "code": "cin >> s >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if k is greater than size of s",
      "code": "if ( k > s . size ( ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" impossible \\ n \"",
      "code": "cout << \" impossible\\n \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "sort from beginning of s to end of s",
      "code": "sort ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "remove from ( remove all but first of ( beginning of s to end of s ) ) to end of s from s",
      "code": "s . erase ( unique ( s . begin ( ) , s . end ( ) ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print maximum of ( k - integer casted size of s and 0 ) and newline",
      "code": "cout << max ( k - ( int ) s . size ( ) , 0 ) << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << max ( k - ( int ) s . size ( ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        1
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        3
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        9,
        1
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        9,
        1,
        3
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "char s ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        9,
        3
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        1
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        10,
        1,
        3
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        10,
        3
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        1,
        3
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "char s ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        1
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        10,
        1,
        5
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;",
        "cout << \" LD\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        10,
        1,
        3
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        10,
        5
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "cout << \" LD\\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        5,
        3
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "cout << \" LD\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        10,
        3
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        1,
        5
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "char s ;",
        "cout << \" LD\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        1,
        5,
        3
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "char s ;",
        "cout << \" LD\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        1,
        3
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "char s ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        5,
        3
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "cout << \" LD\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) , s . end ( ) ) ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        1,
        5
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;",
        "cout << \" LD\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        1,
        5,
        3
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;",
        "cout << \" LD\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        1,
        3
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "char s ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "cout << \" LD\\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5,
        3
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "cout << \" LD\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "cout << max ( k - int ( s . size ( ) , 0 ) ) << endl ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char s ;",
        "cout << \" LD\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "char s ;",
        "cout << \" LD\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char s ;",
        "s >> s >> k ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << \" LD\\n \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}