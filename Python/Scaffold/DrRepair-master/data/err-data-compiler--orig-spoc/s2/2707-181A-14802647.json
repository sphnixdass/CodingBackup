{
  "meta": {
    "index": 2707,
    "hitid": "3ZXNP4Z39RFWQCOK1WM44RPDVSB7LO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "181A",
    "subid": "14802647"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer variables n , m and a and integer arrays x and y with size 3",
      "code": "int n , m , x [ 3 ] , y [ 3 ] , a ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "diff is a boolean function with integer arguments i and j",
      "code": "bool diff ( int i , int j )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return false if x [ i ] = x [ j ] or y [ i ] = y [ j ]",
      "code": "if ( x [ i ] == x [ j ] || y [ i ] == y [ j ] ) return false ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = 1 to m inclusive",
      "code": "for ( int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "declare character c",
      "code": "char c ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if c = ' * '",
      "code": "if ( c == ' * ' )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set value of x [ a ] to i",
      "code": "x [ a ] = i ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "assign value of j to y [ a ]",
      "code": "y [ a ] = j ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "increase a by one",
      "code": "a ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if diff ( 0 , 1 ) is true",
      "code": "if ( diff ( 0 , 1 ) )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if x [ 2 ] = x [ 0 ]",
      "code": "if ( x [ 2 ] == x [ 0 ] )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print x [ 1 ] , \" \" and y [ 0 ]",
      "code": "cout << x [ 1 ] << \" \" << y [ 0 ] << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print x [ 0 ] , \" \" and y [ 1 ]",
      "code": "cout << x [ 0 ] << \" \" << y [ 1 ] << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else if diff ( 1 , 2 )",
      "code": "else if ( diff ( 1 , 2 ) )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if x [ 0 ] = x [ 2 ]",
      "code": "if ( x [ 0 ] == x [ 2 ] )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print x [ 1 ] , \" \" and y [ 2 ]",
      "code": "cout << x [ 1 ] << \" \" << y [ 2 ] << endl ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print x [ 2 ] , \" \" and y [ 1 ]",
      "code": "cout << x [ 2 ] << \" \" << y [ 1 ] << endl ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if x [ 1 ] = x [ 0 ]",
      "code": "if ( x [ 1 ] == x [ 0 ] )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print x [ 2 ] , \" \" and y [ 0 ]",
      "code": "cout << x [ 2 ] << \" \" << y [ 0 ] << endl ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 32,
      "text": "print x [ 0 ] , \" \" and y [ 2 ]",
      "code": "cout << x [ 0 ] << \" \" << y [ 2 ] << endl ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool diff = int ( i , j ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 1 ; j <= m ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "void c ;"
      ],
      "err_line": 9,
      "err_msg": "variable or field ‘c’ declared void"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "y [ a ] [ j ] = j ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        28,
        10
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "n",
        "c = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        28,
        10,
        12
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "n",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        28,
        10,
        11
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "n",
        "c = getchar ( ) ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        28,
        12
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "n",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        28,
        12,
        11
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "n",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        28,
        11
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "n",
        "if ( c = ' * ' )"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10,
        12
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10,
        12,
        11
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10,
        11
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        12,
        11
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int n , m , x [ 3 ] , y [ 3 ] ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        28,
        10
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "n",
        "c = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        28,
        10,
        12
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "n",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        28,
        10,
        11
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "n",
        "c = getchar ( ) ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        28,
        12
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "n",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        28,
        12,
        11
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "n",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        28,
        11
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "n",
        "if ( c = ' * ' )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        10,
        12
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        10,
        12,
        11
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        10,
        11
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "c = getchar ( ) ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        12,
        11
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int n , m , x , x [ 3 ] , y [ 3 ] ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int x [3]’"
    },
    {
      "mod_line": [
        28,
        10
      ],
      "mod_code": [
        "n",
        "c = getchar ( ) ;"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        10,
        12
      ],
      "mod_code": [
        "n",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        10,
        12,
        11
      ],
      "mod_code": [
        "n",
        "c = getchar ( ) ;",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        10,
        11
      ],
      "mod_code": [
        "n",
        "c = getchar ( ) ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        12
      ],
      "mod_code": [
        "n",
        "x [ ' a ' ] = i ;"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        12,
        11
      ],
      "mod_code": [
        "n",
        "x [ ' a ' ] = i ;",
        "if ( c = ' * ' )"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        11
      ],
      "mod_code": [
        "n",
        "if ( c = ' * ' )"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}