{
  "meta": {
    "index": 1468,
    "hitid": "3W31J70BASQRIN1Y7DIE5D4C73XCKJ",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "746A",
    "subid": "41952163"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b , c = integers",
      "code": "int a , b , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read a , b , c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a is less than 1 Or b is less than 2 Or c is less than 4",
      "code": "if ( a < 1 || b < 2 || c < 4 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print 0 and a new line",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "k = integer",
      "code": "int k ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for k = 2 to 1000 exclusive",
      "code": "for ( k = 2 ; k <= 1000 ; k ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if k is greater than a OR 2 * k is greater than b OR 4 * k is greater than c",
      "code": "if ( k > a || 2 * k > b || 4 * k > c ) break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "print ( k - 1 ) * 7 and a new line",
      "code": "cout << ( k - 1 ) * 7 << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b OR 4 || 4 * k > c )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "for ( int k = 2 ; k < 1000 ; k ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7,
        8
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        2
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        5
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "cin >> a >> b , c ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7,
        2,
        5
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "if ( k > a || 2 * k > b || 4 * k > c )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8,
        2
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8,
        2,
        5
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8,
        5
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "cin >> a >> b , c ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( a < 1 && b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        2
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        2,
        3
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;",
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        7,
        8,
        2,
        5
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        3
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        7,
        8,
        3,
        5
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "if ( a < 1 Or b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        7,
        8,
        5
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        2,
        3
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "cin >> a >> b , c ;",
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        7,
        2,
        3,
        5
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "cin >> a >> b , c ;",
        "if ( a < 1 Or b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        7,
        2,
        5
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        7,
        3,
        5
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "if ( a < 1 Or b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "for ( int k = 2 ; k < 1000 ; k ++ )",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        2,
        3
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;",
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        8,
        2,
        3,
        5
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;",
        "if ( a < 1 Or b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        8,
        2,
        5
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        8,
        3,
        5
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "if ( a < 1 Or b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "if ( k > a || 2 * k > b || 4 * k > c )",
        "else do"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> a >> b , c ;",
        "if ( a < 1 Or b < 2 ) c < 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "cin >> a >> b , c ;",
        "if ( a < 1 Or b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( a < 1 Or b < 2 ) c < 4 ;",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘Or’"
    }
  ]
}