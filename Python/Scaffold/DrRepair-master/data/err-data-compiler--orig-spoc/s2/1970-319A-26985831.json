{
  "meta": {
    "index": 1970,
    "hitid": "3R16PJFTS3LONJOJEYCWMFSOGD94K2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "319A",
    "subid": "26985831"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant int MAXN = 100",
      "code": "const int MAXN = 100 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare constant long long int MOD = 1e9 + 7",
      "code": "const long long int MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare long long int array dos_a_la with size ( 2 * MAXN ) + 2",
      "code": "long long int dos_a_la [ ( 2 * MAXN ) + 2 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "f is a long long int function with int argument n and const string reference argument & x",
      "code": "long long int f ( int n , const string & x )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "if n = 0 , return 0",
      "code": "if ( n == 0 ) return 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare long long int ret = 2 * f ( n - 1 , x )",
      "code": "long long int ret = 2 * f ( n - 1 , x ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "ret = ret modulo MOD",
      "code": "ret %= MOD ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if x [ n ] is equal to ' 1 '",
      "code": "if ( x [ n ] == ' 1 ' )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "increase ret by dos_a_la [ 2 * ( n - 1 ) ]",
      "code": "ret += dos_a_la [ 2 * ( n - 1 ) ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "ret = ret modulo MOD",
      "code": "ret %= MOD ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "in the function init",
      "code": "void init ( )",
      "indent": 0
    },
    {
      "line": 14,
      "text": "set dos_a_la [ 0 ] to 1",
      "code": "dos_a_la [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i from 1 to 2 * MAXN inclusive",
      "code": "for ( int i = 1 ; i <= ( 2 * MAXN ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "change dos_a_la [ i ] to dos_a_la [ i - 1 ]",
      "code": "dos_a_la [ i ] = dos_a_la [ i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "dos_a_la [ i ] < < = 1",
      "code": "dos_a_la [ i ] <<= 1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "dos_a_la [ i ] % = MOD",
      "code": "dos_a_la [ i ] %= MOD ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "invoke function init",
      "code": "init ( ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "declare string x",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "read input to x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "reverse x",
      "code": "reverse ( x . begin ( ) , x . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "prepend \" 0 \" to x",
      "code": "x = \" 0 \" + x ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print f ( length of x - 1 , x ) and \" \\ n \"",
      "code": "cout << f ( x . size ( ) - 1 , x ) << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int MAXN = 100 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "void init ( ) { }"
      ],
      "err_line": 14,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int dos_a_la [ 0 ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 2 * MAXN ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "init ( ) invoke ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘invoke’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "string x << endl ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "reverse ( x , x + n ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "cout << f ( x - 1 , x ) << \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] += 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        17,
        18
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] += 1 ;",
        "dos_a_la [ i ] = MOD ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        17,
        18,
        11
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] += 1 ;",
        "dos_a_la [ i ] = MOD ;",
        "ret = ret ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        17,
        11
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] += 1 ;",
        "ret = ret ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] = MOD ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        18,
        11
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] = MOD ;",
        "ret = ret ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        18,
        11,
        17
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] = MOD ;",
        "ret = ret ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        18,
        17
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] = MOD ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "ret = ret ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        17
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "ret = ret ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "long long int dos_a_la [ 2 * MAXN ) + 2 ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        18,
        11,
        2
      ],
      "mod_code": [
        "dos_a_la [ i ] += 1 ;",
        "dos_a_la [ i ] = MOD ;",
        "ret = ret ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        18,
        2
      ],
      "mod_code": [
        "dos_a_la [ i ] += 1 ;",
        "dos_a_la [ i ] = MOD ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        11,
        2
      ],
      "mod_code": [
        "dos_a_la [ i ] += 1 ;",
        "ret = ret ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "dos_a_la [ i ] += 1 ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        11,
        2
      ],
      "mod_code": [
        "dos_a_la [ i ] = MOD ;",
        "ret = ret ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        11,
        2,
        17
      ],
      "mod_code": [
        "dos_a_la [ i ] = MOD ;",
        "ret = ret ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "dos_a_la [ i ] = MOD ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        2,
        17
      ],
      "mod_code": [
        "dos_a_la [ i ] = MOD ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "ret = ret ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        2,
        17
      ],
      "mod_code": [
        "ret = ret ;",
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "long long int dos_a_la [ ( 2 * MAXN ) + 2 ) ;",
        "dos_a_la [ i ] <= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}