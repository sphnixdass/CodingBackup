{
  "meta": {
    "index": 964,
    "hitid": "3CIS7GGG65DKIHQOXISB1ODDU68EUB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "778A",
    "subid": "47848496"
  },
  "lines": [
    {
      "line": 0,
      "text": "bool function predicate with string arguments s1 and s2 , reference to a vector of int argument & v and int argument d",
      "code": "bool predicate ( string s1 , string s2 , vector < int > & v , int d )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string temp = \" \"",
      "code": "string temp = \" \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create vector of ints memo with size = size of s1 , filled with 0",
      "code": "vector < int > memo ( s1 . size ( ) , 0 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for integer i = 0 to d exclusive set memo [ v [ i ] - 1 ] = 1",
      "code": "for ( int i = 0 ; i < d ; i ++ ) memo [ v [ i ] - 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of s1 exclusive",
      "code": "for ( int i = 0 ; i < s1 . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ! memo [ i ] add s1 [ i ] to temp",
      "code": "if ( ! memo [ i ] ) temp += s1 [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integer k = 0",
      "code": "int k = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to length of temp exclusive",
      "code": "for ( int i = 0 ; i < temp . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if temp [ i ] = s2 [ k ] increment k",
      "code": "if ( temp [ i ] == s2 [ k ] ) k ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if k = length of s2 return true",
      "code": "if ( k == s2 . size ( ) ) return true ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "declare strings s and f",
      "code": "string s , f ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare integer vector p",
      "code": "vector < int > p ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read line from input into s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read line from input into f",
      "code": "getline ( cin , f ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "n and temp are integers where n = length of s",
      "code": "int n = s . size ( ) , temp ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "read temp",
      "code": "cin >> temp ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "push temp into p",
      "code": "p . push_back ( temp ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "create integers l = 0 and r = n",
      "code": "int l = 0 , r = n ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "while l is less than r",
      "code": "while ( l < r )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "declare integer mid = l + ( r - l + 1 ) / 2",
      "code": "int mid = l + ( r - l + 1 ) / 2 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if predicate ( s , f , p , mid ) is true",
      "code": "if ( predicate ( s , f , p , mid ) )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "assign value of mid to l",
      "code": "l = mid ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 30,
      "text": "set value of r to mid - 1",
      "code": "r = mid - 1 ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print l and \" \\ n \"",
      "code": "cout << l << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v , int & d )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const string temp = \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "vector < int > memo [ s1 . size ( ) , 0 , 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "s , f ;"
      ],
      "err_line": 15,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "vector < vector < int > p ;"
      ],
      "err_line": 16,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "getline ( s , s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘getline(std::__cxx11::string&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "getline ( f , f ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘getline(std::__cxx11::string&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int n , temp = strlen ( s ) ;"
      ],
      "err_line": 19,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "p . push ( temp ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "int mid += ( r - l + 1 ) / 2 ;"
      ],
      "err_line": 26,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "cout << ( l << \" \\n \" ) ;"
      ],
      "err_line": 32,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "int n , temp = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19,
        1
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19,
        1,
        17
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19,
        1,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19,
        17
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "int n , temp = s . length ( ) ;",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19,
        17,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "int n , temp = s . length ( ) ;",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "int n , temp = s . length ( ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "const string temp = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        17
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "const string temp = \" \" ;",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        17,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "const string temp = \" \" ;",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "const string temp = \" \" ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v )",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        1,
        0
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        1,
        0,
        17
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        1,
        0,
        18
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        1,
        17
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "getline ( s , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        1,
        17,
        18
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        1,
        18
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "const string temp = \" \" ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        0
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        0,
        17
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        0,
        17,
        18
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        0,
        18
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        17
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "getline ( s , s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘getline(std::__cxx11::string&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        19,
        17,
        18
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘getline(std::__cxx11::string&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        19,
        18
      ],
      "mod_code": [
        "int n , temp = s . length ( ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘getline(std::__cxx11::string&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "const string temp = \" \" ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        0,
        17
      ],
      "mod_code": [
        "const string temp = \" \" ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        0,
        17,
        18
      ],
      "mod_code": [
        "const string temp = \" \" ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        0,
        18
      ],
      "mod_code": [
        "const string temp = \" \" ;",
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "const string temp = \" \" ;",
        "getline ( s , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        17,
        18
      ],
      "mod_code": [
        "const string temp = \" \" ;",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "const string temp = \" \" ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 5,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( s , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        17,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "bool predicate ( string s1 , int s2 , int & v , int & d )",
        "getline ( f , f ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "getline ( s , s ) ;",
        "getline ( f , f ) ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘getline(std::__cxx11::string&, std::__cxx11::string&)’"
    }
  ]
}