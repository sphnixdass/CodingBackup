{
  "meta": {
    "index": 1343,
    "hitid": "3HUR21WDDUJA5Q1A2OFSSY4X7NVYXE",
    "workerid": "AIWEXPJAU66D9",
    "probid": "320A",
    "subid": "49074955"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n is a new array of integers with 128 elements filled with 0",
      "code": "int n [ 128 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integer variable with name len with value 0",
      "code": "int len = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare new character variable ch",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean variable with name flag and value 0",
      "code": "bool flag = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read character from the input , put it into ch , then , if that character is not ' \\ n ' , change n [ len ] to ch - ' 0 ' and increment len",
      "code": "while ( ( ch = cin . get ( ) ) != ' \\n ' ) n [ len ++ ] = ch - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i from 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n [ i ] ! = 1",
      "code": "if ( n [ i ] != 1 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "assign the new value = 1 to flag",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if n [ i ] is equal to 1",
      "code": "if ( n [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if n [ i + 1 ] = 1 or n [ i + 1 ] is equal to 0",
      "code": "if ( n [ i + 1 ] == 1 || n [ i + 1 ] == 0 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "go to the start of the loop",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else if n [ i + 1 ] is equal to 4",
      "code": "else if ( n [ i + 1 ] == 4 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if n [ i + 2 ] is equal to 1 or n [ i + 2 ] is equal to 0",
      "code": "if ( n [ i + 2 ] == 1 || n [ i + 2 ] == 0 )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "increase i by 1",
      "code": "i += 1 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "go to the start of the loop",
      "code": "continue ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else if n [ i + 2 ] is equal to 4",
      "code": "else if ( n [ i + 2 ] == 4 )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "change i to the sum of i and 2",
      "code": "i += 2 ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char ch [ 4 ] ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool flag , flag = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘bool flag’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "getline ( cin , ch , ' \\n ' ) ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&, char)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "flag = l ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "start ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "start ;"
      ],
      "err_line": 17,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        27,
        3
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [4]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        27,
        3,
        2
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        27,
        3,
        11
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [4]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        27,
        3,
        25
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [4]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        27,
        2
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "cout << \" YES \" ;",
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        27,
        2,
        11
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "cout << \" YES \" ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        27,
        2,
        25
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "cout << \" YES \" ;",
        "int len name = 0 ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "char ch [ 4 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [4]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "char ch [ 4 ] ;",
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        3,
        2,
        11
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "char ch [ 4 ] ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        3,
        2,
        25
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "char ch [ 4 ] ;",
        "int len name = 0 ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        3,
        11
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "char ch [ 4 ] ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [4]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        3,
        11,
        25
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "char ch [ 4 ] ;",
        "if ( n [ i ] == ' 1 ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [4]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        3,
        25
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "char ch [ 4 ] ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [4]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        2,
        11
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        2,
        11,
        25
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5,
        2,
        25
      ],
      "mod_code": [
        "for ( ; ch ; ch >>= ' \\n ' ) n [ len ] = ch - ' \\n ' ;",
        "int len name = 0 ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        27,
        3
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        27,
        3,
        2
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        27,
        3,
        2,
        11
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        27,
        3,
        2,
        25
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "int len name = 0 ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        27,
        3,
        11
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        27,
        3,
        11,
        25
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "if ( n [ i ] == ' 1 ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        27,
        3,
        25
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "char ch [ 4 ] ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        27,
        2
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        27,
        2,
        11
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        27,
        2,
        11,
        25
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        27,
        2,
        25
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int len name = 0 ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "char ch [ 4 ] ;",
        "int len name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        3,
        2,
        11
      ],
      "mod_code": [
        "char ch [ 4 ] ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        3,
        2,
        11,
        25
      ],
      "mod_code": [
        "char ch [ 4 ] ;",
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        3,
        2,
        25
      ],
      "mod_code": [
        "char ch [ 4 ] ;",
        "int len name = 0 ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "char ch [ 4 ] ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        3,
        11,
        25
      ],
      "mod_code": [
        "char ch [ 4 ] ;",
        "if ( n [ i ] == ' 1 ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "char ch [ 4 ] ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘std::basic_istream<char>::int_type {aka int}’ to ‘char [4]’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        11,
        25
      ],
      "mod_code": [
        "int len name = 0 ;",
        "if ( n [ i ] == ' 1 ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        25
      ],
      "mod_code": [
        "int len name = 0 ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    }
  ]
}