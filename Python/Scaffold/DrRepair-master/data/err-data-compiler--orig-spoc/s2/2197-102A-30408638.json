{
  "meta": {
    "index": 2197,
    "hitid": "3XBYQ44Z6PYZZ4XQIDW7IYYBJJ6WTT",
    "workerid": "A3S392MV6HWTTE",
    "probid": "102A",
    "subid": "30408638"
  },
  "lines": [
    {
      "line": 0,
      "text": "M = constant integer set M = 100 + 5",
      "code": "const int M = 100 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = array of integers of size M",
      "code": "int a [ M ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "edge = two dimensional array of integers of size M",
      "code": "int edge [ M ] [ M ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n , m = integers",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "x , y = integers",
      "code": "int x , y ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read x and y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "decrement x",
      "code": "x -- ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "decrement y",
      "code": "y -- ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "edge [ x ] [ y ] = 1",
      "code": "edge [ x ] [ y ] = 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "edge [ y ] [ x ] = 1",
      "code": "edge [ y ] [ x ] = 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set ans = 1E + 9",
      "code": "int ans = 1E+9 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for k = j + 1 to n exclusive",
      "code": "for ( int k = j + 1 ; k < n ; k ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if edge [ i ] [ j ] = 1 and edge [ j ] [ k ] = 1 and edge [ k ] [ i ] = 1",
      "code": "if ( edge [ i ] [ j ] == 1 && edge [ j ] [ k ] == 1 && edge [ k ] [ i ] == 1 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if ans > a [ i ] + a [ j ] set ans = a [ i ] + a [ j ] + a [ k ]",
      "code": "if ( ans > a [ i ] + a [ j ] + a [ k ] ) { ans = a [ i ] + a [ j ] + a [ k ] ; }",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if ans = 1E + 9",
      "code": "if ( ans == 1E+9 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" - 1 \"",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int edge [ M ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "ans += 9 ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 20,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "a [ M ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s [ M ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘edge’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int edge [ y ] [ x ] = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "ans += ' 9 ' ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( k = j + 1 ; k < n ; k ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( edge [ i ] [ j ] == 1 && edge [ j ] [ k ] == 1 && edge [ k ] [ i ] = 1 )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        15
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        15,
        20
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        15,
        25
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        15,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        20
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        20,
        25
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        20,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        25
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        25,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        12,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "int edge [ x ] [ y ] = 1 ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "ans += 9 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        15,
        20
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        15,
        20,
        25
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        15,
        20,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        15,
        25
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "ans += 9 ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        15,
        25,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "ans += 9 ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        15,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "ans += 9 ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        20,
        25
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        20,
        25,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        20,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        25
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        25,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        26
      ],
      "mod_code": [
        "int edge [ M ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        15,
        20
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        15,
        20,
        25
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        15,
        20,
        26
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        15,
        25
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        15,
        25,
        26
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        15,
        26
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "ans += 9 ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        20,
        25
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        20,
        25,
        26
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        20,
        26
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        25
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        25,
        26
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        26
      ],
      "mod_code": [
        "int edge [ x ] [ y ] = 1 ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15,
        20
      ],
      "mod_code": [
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        20,
        25
      ],
      "mod_code": [
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        20,
        25,
        26
      ],
      "mod_code": [
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        20,
        26
      ],
      "mod_code": [
        "ans += 9 ;",
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        25
      ],
      "mod_code": [
        "ans += 9 ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        25,
        26
      ],
      "mod_code": [
        "ans += 9 ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        26
      ],
      "mod_code": [
        "ans += 9 ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        25
      ],
      "mod_code": [
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        25,
        26
      ],
      "mod_code": [
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "if ( ans == ' + ' )",
        "cout << \" -1 \" ;"
      ],
      "err_line": 20,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        26
      ],
      "mod_code": [
        "if ( ans [ i ] + a [ j ] ) ans = a [ i ] + a [ j ] + a [ k ] ;",
        "cout << \" -1 \" ;"
      ],
      "err_line": 20,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}