{
  "meta": {
    "index": 691,
    "hitid": "3Y7LTZE0YTGITCHKT56OMYEVJZDUZ4",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "1020A",
    "subid": "48397283"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make long long ints n , h , a , b , and k",
      "code": "long long n , h , a , b , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , h , a , b , and k",
      "code": "cin >> n >> h >> a >> b >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let long long integers t1 , h1 , t2 , and h2",
      "code": "long long t1 , h1 , t2 , h2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to k exclusive",
      "code": "for ( int i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read t1 , h1 , t2 , and h2",
      "code": "cin >> t1 >> h1 >> t2 >> h2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if t1 is equal to t2",
      "code": "if ( t1 == t2 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "make long long ans1 = fabs ( h2 - h1 )",
      "code": "long long ans1 = fabs ( h2 - h1 ) ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print ans1",
      "code": "cout << ans1 << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "let long long int ans = fabs ( t2 - t1 )",
      "code": "long long ans = fabs ( t2 - t1 ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if h1 is greater than b",
      "code": "if ( h1 > b )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set ans to ans + ( h1 - b ) + fabs ( h2 - b )",
      "code": "ans += ( h1 - b ) + fabs ( h2 - b ) ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else if h1 is less than a",
      "code": "else if ( h1 < a )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "add ( a - h1 ) + fabs ( h2 - a ) to ans",
      "code": "ans += ( a - h1 ) + fabs ( h2 - a ) ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set ans to ans + fabs ( h2 - h1 )",
      "code": "ans += fabs ( h2 - h1 ) ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print ans",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        2
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        2,
        9
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "else do"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        2,
        5
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        2,
        14
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        9
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "else do"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        9,
        5
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        9,
        14
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "else do",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        5
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        5,
        14
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        6,
        14
      ],
      "mod_code": [
        "n",
        "else if ( t1 == t2 )",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        9
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> a , b >> k ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        9,
        5
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> a , b >> k ;",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        9,
        14
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> a , b >> k ;",
        "else do",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        5
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> a , b >> k ;",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        5,
        14
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> a , b >> k ;",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        14
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> a , b >> k ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        9
      ],
      "mod_code": [
        "n",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        9,
        5
      ],
      "mod_code": [
        "n",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        9,
        5,
        14
      ],
      "mod_code": [
        "n",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        9,
        14
      ],
      "mod_code": [
        "n",
        "else do",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "n",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        5,
        14
      ],
      "mod_code": [
        "n",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "n",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        2,
        9
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "else do"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        2,
        9,
        5
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        2,
        9,
        14
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "else do",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        2,
        5,
        14
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        2,
        14
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> n >> h >> a , b >> k ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "else do"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        5
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        5,
        14
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        14
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "else do",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        5,
        14
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "else if ( t1 == t2 )",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "cin >> n >> h >> a , b >> k ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        9,
        5
      ],
      "mod_code": [
        "cin >> n >> h >> a , b >> k ;",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        14
      ],
      "mod_code": [
        "cin >> n >> h >> a , b >> k ;",
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        9,
        14
      ],
      "mod_code": [
        "cin >> n >> h >> a , b >> k ;",
        "else do",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        5,
        14
      ],
      "mod_code": [
        "else do",
        "cin >> t1 >> h1 , t2 >> h2 ;",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "else do",
        "ans -= ( a - h1 ) + fabs ( h2 - a ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}