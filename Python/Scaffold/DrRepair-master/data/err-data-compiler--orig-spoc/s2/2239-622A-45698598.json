{
  "meta": {
    "index": 2239,
    "hitid": "3LXX8KJXPW38AGFATL0GA4KDMA29OS",
    "workerid": "AIWEXPJAU66D9",
    "probid": "622A",
    "subid": "45698598"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new long long called n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x is a new long long = square root of ( 2 * n + 0 . 25 ) - 0 . 5 rounded down",
      "code": "long long x = ( long long ) floor ( sqrt ( 2 * n + 0.25 ) - 0.5 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x squared + x is equal to 2 * n",
      "code": "if ( x * x + x == 2 * n )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print x",
      "code": "cout << x << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print n - ( x * x + x ) / 2",
      "code": "cout << n - ( x * x + x ) / 2 << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "long long x = sqrt ( ( 2 * n + 0 ) - 1.0 ) ;",
        "if ( x % x == 2 * n )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        2
      ],
      "mod_code": [
        "long long x = sqrt ( ( 2 * n + 0 ) - 1.0 ) ;",
        "if ( x % x == 2 * n )",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "long long x = sqrt ( ( 2 * n + 0 ) - 1.0 ) ;",
        "if ( x * x == 2 * n )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        2
      ],
      "mod_code": [
        "long long x = sqrt ( ( 2 * n + 0 ) - 1.0 ) ;",
        "if ( x * x == 2 * n )",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "long long x = sqrt ( ( 2 * n + 0 ) - 1.0 ) ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "long long x = sqrt ( ( 2 * n + 0 ) - 1.0 ) ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( x % x == 2 * n )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "if ( x % x == 2 * n )",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( x % x == 2 * n )",
        "n",
        "n = getchar ( ) ;",
        "long long x = sqrt ( ( 2 * n + 0.5 ) - 1.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "if ( x % x == 2 * n )",
        "n",
        "long long x = sqrt ( ( 2 * n + 0.5 ) - 1.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( x * x == 2 * n )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "if ( x * x == 2 * n )",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( x * x == 2 * n )",
        "n",
        "n = getchar ( ) ;",
        "long long x = sqrt ( ( 2 * n + 0.5 ) - 1.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "if ( x * x == 2 * n )",
        "n",
        "long long x = sqrt ( ( 2 * n + 0.5 ) - 1.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;",
        "long long x = sqrt ( ( 2 * n + 0.5 ) - 1.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "n",
        "long long x = sqrt ( ( 2 * n + 0.5 ) - 1.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}