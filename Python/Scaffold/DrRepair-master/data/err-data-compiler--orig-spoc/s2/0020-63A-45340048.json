{
  "meta": {
    "index": 20,
    "hitid": "39O6Z4JLX2RT1W65XDS8LZ03P6KVXT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "63A",
    "subid": "45340048"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , i and j and integer array arr with 1000 elements",
      "code": "int n , i , j , arr [ 1000 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and keep looping",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare an array of strings s1 with n elements and string variable s2",
      "code": "string s1 [ n ] , s2 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "loop i from 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read s1 [ i ] and s2",
      "code": "cin >> s1 [ i ] >> s2 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "if s2 = \" rat \"",
      "code": "if ( s2 == \" rat \" )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "assign 0 to arr [ i ]",
      "code": "arr [ i ] = 0 ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else if s2 = \" woman \" or s2 = \" child \"",
      "code": "else if ( s2 == \" woman \" || s2 == \" child \" )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "assign 1 to arr [ i ]",
      "code": "arr [ i ] = 1 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else if s2 = \" man \"",
      "code": "else if ( s2 == \" man \" )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "change arr [ i ] to 2",
      "code": "arr [ i ] = 2 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "assign 3 to arr [ i ]",
      "code": "arr [ i ] = 3 ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for j = 0 to 4 exclusive",
      "code": "for ( j = 0 ; j < 4 ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if arr [ i ] is equal to j , print s1 [ i ]",
      "code": "if ( arr [ i ] == j ) { cout << s1 [ i ] << endl ; }",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s1 [ n ] , s1 [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::__cxx11::string s1 [n]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> s1 >> i >> s2 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int arr [ i ] = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "arr [ i ] [ 3 ] = 3 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        6
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "if ( s2 == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        6,
        10
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        6,
        9
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        6,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        10
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "else if ( s2 == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        10,
        9
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "else if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        10,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "else if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        9
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "arr [ i ] = ' 1 ' ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        9,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        17,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( s2 == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        9
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        6,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "else if ( s2 == \" [] \" )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        10,
        9
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "else if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        10,
        9,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "else if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        10,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "else if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "arr [ i ] = ' 1 ' ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "string s1 [ n ] , s2 [ n ] ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’)"
    },
    {
      "mod_line": [
        17,
        6,
        10,
        12
      ],
      "mod_code": [
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        6,
        9,
        12
      ],
      "mod_code": [
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        6,
        12
      ],
      "mod_code": [
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        10,
        9,
        12
      ],
      "mod_code": [
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "else if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        10,
        12
      ],
      "mod_code": [
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "else if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        9,
        12
      ],
      "mod_code": [
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "if ( arr [ i ] == j ) cout << s1 [ i ] ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        9,
        12
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        12
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "else if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        12
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9,
        12
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "else if ( s2 == \" [] \" )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "arr [ i ] = ' 1 ' ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}