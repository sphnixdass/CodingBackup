{
  "meta": {
    "index": 412,
    "hitid": "3FI30CQHVKD193O3R9SIKATCPAF6BE",
    "workerid": "AIWEXPJAU66D9",
    "probid": "205A",
    "subid": "42011382"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define new integer called n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "a is a new array of integers with 100005 elements",
      "code": "int a [ 100005 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and loop further",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let m be a map from integers to integers",
      "code": "map < int , int > m ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "in a for loop , change i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read standard input to a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increment m [ a [ i ] ]",
      "code": "m [ a [ i ] ] ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "create new integer called flag with value 0",
      "code": "int flag = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "move new map iterator it through m in a loop",
      "code": "for ( map < int , int > :: iterator it = m . begin ( ) ; it != m . end ( ) ; it ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if second value at it > 1",
      "code": "if ( it -> second > 1 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set flag to - 1",
      "code": "flag = - 1 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set flag to the value of the first element at it",
      "code": "flag = it -> first ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if flag is equal to - 1",
      "code": "if ( flag == - 1 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print \" Still Rozdil \"",
      "code": "cout << \" Still Rozdil \" << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "skip the rest of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if a [ i ] = flag",
      "code": "if ( a [ i ] == flag )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "change flag to i + 1",
      "code": "flag = i + 1 ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print flag",
      "code": "cout << flag << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "flag = it . first ;"
      ],
      "err_line": 15,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘first’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "a [ 100005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "read ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘read’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "a = a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [100005]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s1 [ a [ i ] ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( it . second > 1 )"
      ],
      "err_line": 11,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘second’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "rest ;"
      ],
      "err_line": 21,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "flag = it . first ;"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        10,
        15,
        20
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "flag = it . first ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        10,
        15,
        20,
        4
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        15,
        20,
        19
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        10,
        15,
        4
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "flag = it . first ;",
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        15,
        4,
        19
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "flag = it . first ;",
        "vector < int > m ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        15,
        19
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "flag = it . first ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        10,
        20
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        10,
        20,
        4
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "cout << \" 2/3 \" ;",
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        20,
        4,
        19
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "cout << \" 2/3 \" ;",
        "vector < int > m ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        20,
        19
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "cout << \" 2/3 \" ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        4,
        19
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "vector < int > m ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "for ( map < int , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘end’"
    },
    {
      "mod_line": [
        15,
        20
      ],
      "mod_code": [
        "flag = it . first ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘first’"
    },
    {
      "mod_line": [
        15,
        20,
        4
      ],
      "mod_code": [
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        20,
        4,
        10
      ],
      "mod_code": [
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "vector < int > m ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        20,
        4,
        19
      ],
      "mod_code": [
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "vector < int > m ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        20,
        10
      ],
      "mod_code": [
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        20,
        10,
        19
      ],
      "mod_code": [
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        20,
        19
      ],
      "mod_code": [
        "flag = it . first ;",
        "cout << \" 2/3 \" ;",
        "if ( ! flag )"
      ],
      "err_line": 15,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘first’"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "flag = it . first ;",
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        4,
        10
      ],
      "mod_code": [
        "flag = it . first ;",
        "vector < int > m ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        4,
        10,
        19
      ],
      "mod_code": [
        "flag = it . first ;",
        "vector < int > m ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        4,
        19
      ],
      "mod_code": [
        "flag = it . first ;",
        "vector < int > m ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "flag = it . first ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        10,
        19
      ],
      "mod_code": [
        "flag = it . first ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "flag = it . first ;",
        "if ( ! flag )"
      ],
      "err_line": 15,
      "err_msg": "‘std::map<int, int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const int, int> >}’ has no member named ‘first’"
    },
    {
      "mod_line": [
        20,
        4
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "vector < int > m ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        20,
        4,
        10
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "vector < int > m ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        20,
        4,
        10,
        19
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "vector < int > m ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        20,
        4,
        19
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "vector < int > m ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        20,
        10
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        20,
        10,
        19
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "vector < int > m ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        4,
        10,
        19
      ],
      "mod_code": [
        "vector < int > m ;",
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "vector < int > m ;",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::vector<int>::iterator {aka __gnu_cxx::__normal_iterator<int*, std::vector<int> >}’ to non-scalar type ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ requested"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "for ( map < string , int > :: iterator it = m . begin ( ) ; it != it . end ( ) ; it ++ )",
        "if ( ! flag )"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::map<int, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const int, int> >}’ to non-scalar type ‘std::map<std::__cxx11::basic_string<char>, int>::iterator {aka std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int> >}’ requested"
    }
  ]
}