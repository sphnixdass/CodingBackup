{
  "meta": {
    "index": 1336,
    "hitid": "38LRF35D5LQH8JAR8YBFIX9G44K3UM",
    "workerid": "A1APYLD4DUK33J",
    "probid": "320A",
    "subid": "41118228"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare character arrays m1 = \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \"",
      "code": "char m1 [ ] = \" 1 \" , m2 [ ] = \" 14 \" , m3 [ ] = \" 144 \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare character array a size 1000",
      "code": "char a [ 1000 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integers i , j , k , l",
      "code": "int i , j , k , l ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to a [ i ]",
      "code": "for ( i = 0 ; a [ i ] ; )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ i ] is m3 [ 0 ] and a [ i + 1 ] is m3 [ 1 ] and a [ i + 2 ] is m3 [ 2 ]",
      "code": "if ( a [ i ] == m3 [ 0 ] && a [ i + 1 ] == m3 [ 1 ] && a [ i + 2 ] == m3 [ 2 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment i by 3",
      "code": "i += 3 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if a [ i ] is m2 [ 0 ] and a [ i + 1 ] is m2 [ 1 ]",
      "code": "else if ( a [ i ] == m2 [ 0 ] && a [ i + 1 ] == m2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment i by 2",
      "code": "i += 2 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if a [ i ] is m1 [ 0 ]",
      "code": "else if ( a [ i ] == m1 [ 0 ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment i by 1",
      "code": "i += 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "exit program with code 0",
      "code": "exit ( 0 ) ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s [ 1000 ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , j , k , l ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "getline ( cin , a ) ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [1000])’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "for ( int i = 0 ; a [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "getline ( cin , a ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        4,
        10
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "getline ( cin , a ) ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "getline ( cin , a ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "getline ( cin , a ) ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        10
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "getline ( cin , a ) ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "getline ( cin , a ) ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char m1 [ 1 ] = { \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "‘m2’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "getline ( cin , a ) ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [1000])’"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "getline ( cin , a ) ;",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        5,
        4,
        1,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "getline ( cin , a ) ;",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        5,
        4,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "getline ( cin , a ) ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [1000])’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        5,
        1,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; a [ i ] ; i ++ )",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [1000])’"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        1,
        10
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "for ( int i = 0 ; i < a [ i ] ; i ++ )",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [1000])’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        1,
        10
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "getline ( cin , a ) ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [1000])’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ i ] ; i ++ )",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        5,
        1,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < a [ i ] ; i ++ )",
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char m1 [ 1 ] == \" 1 \" , m2 = \" 14 \" , m3 = \" 144 \" ;",
        "else if ( a [ i ] != m1 [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘==’ token"
    }
  ]
}