{
  "meta": {
    "index": 832,
    "hitid": "3UL5XDRDNCDMO1QIJEY312PBL9E58T",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "255A",
    "subid": "48558993"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , p , maxc = 0 , maxbi = 0 , maxba = 0 be integers",
      "code": "int n , p , maxc = 0 , maxbi = 0 , maxba = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read p",
      "code": "cin >> p ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if ( i + 1 ) modulo 3 = 1",
      "code": "if ( ( i + 1 ) % 3 == 1 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment maxc by p",
      "code": "maxc += p ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if ( i + 1 ) modulo 3 is 2",
      "code": "else if ( ( i + 1 ) % 3 == 2 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment maxbi by p",
      "code": "maxbi += p ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment maxba by p",
      "code": "maxba += p ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if maxc > maxbi and maxc > maxba",
      "code": "if ( maxc > maxbi && maxc > maxba )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print chest and new line",
      "code": "cout << \" chest \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if maxbi > maxba",
      "code": "else if ( maxbi > maxba )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print biceps and new line",
      "code": "cout << \" biceps \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" back \" and new line",
      "code": "cout << \" back \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << chest << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << biceps << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘biceps’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , p , maxc = 0 , maxbi = 0 , maxbi = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int maxbi’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        9
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        16,
        9,
        17
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "n",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        16,
        9,
        18
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        16,
        9,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        16,
        17
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        18
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        16,
        18
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        18,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        16,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << biceps << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        9,
        17
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        9,
        17,
        18
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        9,
        17,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        9,
        18
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        9,
        18,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        9,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17,
        18
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17,
        18,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        17,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘chest’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "cout << chest << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        9,
        17
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        9,
        17,
        18
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        9,
        17,
        5
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        9,
        18
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        9,
        18,
        5
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        9,
        5
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "‘biceps’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17,
        18
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘biceps’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        5
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        17,
        5
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘biceps’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        5
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "cout << biceps << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        17,
        18
      ],
      "mod_code": [
        "n",
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        17,
        18,
        5
      ],
      "mod_code": [
        "n",
        "n",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        9,
        17,
        5
      ],
      "mod_code": [
        "n",
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        18,
        5
      ],
      "mod_code": [
        "n",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "n",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        18,
        5
      ],
      "mod_code": [
        "n",
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "n",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "if ( ( i + 1 ) % 3 = 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}