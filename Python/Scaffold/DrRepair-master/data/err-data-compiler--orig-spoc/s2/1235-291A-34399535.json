{
  "meta": {
    "index": 1235,
    "hitid": "36U4VBVNQO79RLVTJOCB0VCWAIWURD",
    "workerid": "AIWEXPJAU66D9",
    "probid": "291A",
    "subid": "34399535"
  },
  "lines": [
    {
      "line": 0,
      "text": "create new array of integers sec with 1010 elements",
      "code": "int sec [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "cnt is a new array of integers with size 1010",
      "code": "int cnt [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create new integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n elements into sec",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> sec [ i ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "sort sec",
      "code": "sort ( sec , sec + n ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create new integer variable temp with value sec [ 0 ]",
      "code": "int temp = sec [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare new integer cou with value 0",
      "code": "int cou = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set values of first sizeof ( cnt ) bytes at the pointer cnt to 0",
      "code": "memset ( cnt , 0 , sizeof ( cnt ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if temp = 0",
      "code": "if ( temp == 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "assign sec [ i + 1 ] to temp",
      "code": "temp = sec [ i + 1 ] ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "go to the start of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if temp is equal to sec [ i ]",
      "code": "if ( temp == sec [ i ] )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment cnt [ cou ]",
      "code": "cnt [ cou ] ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else if temp ! = sec [ i ]",
      "code": "else if ( temp != sec [ i ] )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "change the value of temp to sec [ i ]",
      "code": "temp = sec [ i ] ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "increment cou by one",
      "code": "cou ++ ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increment cnt [ cou ]",
      "code": "cnt [ cou ] ++ ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "flag is a new integer = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "start for loop from i = 0 to cou + 1 exclusive incrementing i",
      "code": "for ( int i = 0 ; i < cou + 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if cnt [ i ] is greater than 2",
      "code": "if ( cnt [ i ] > 2 )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "set flag to - 1",
      "code": "flag = - 1 ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "else if cnt [ i ] = 2",
      "code": "else if ( cnt [ i ] == 2 )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "increment flag by one",
      "code": "flag ++ ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if flag = - 1",
      "code": "if ( flag == - 1 )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "else if flag = 0",
      "code": "else if ( flag == 0 )",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print flag",
      "code": "cout << flag << endl ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "sec [ 1010 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cou = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘cou’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "memset ( cnt , 0 ) ;"
      ],
      "err_line": 9,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "start ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        28
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "break the ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        28,
        14
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "break the ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        28,
        37
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "break the ;",
        "cout << flag ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        28,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "break the ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        14
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        14,
        37
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "n",
        "cout << flag ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        14,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "n",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        37
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "cout << flag ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        37,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "sec [ 1010 ] ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        6,
        28
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        28,
        14
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "break the ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        28,
        14,
        37
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "break the ;",
        "n",
        "cout << flag ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        28,
        14,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "break the ;",
        "n",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        28,
        37
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "break the ;",
        "cout << flag ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        28,
        37,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "break the ;",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        28,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "break the ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        14,
        37
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "n",
        "cout << flag ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        14,
        37,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "n",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        14,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "n",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        37
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "cout << flag ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        37,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        6,
        25
      ],
      "mod_code": [
        "sort ( sec . begin ( ) , sec . end ( ) ) ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘sec’, which is of non-class type ‘int [1010]’"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "break the ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        28,
        14
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "break the ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        28,
        14,
        37
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "break the ;",
        "n",
        "cout << flag ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        28,
        14,
        25
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "break the ;",
        "n",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        28,
        37
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "break the ;",
        "cout << flag ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        28,
        37,
        25
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "break the ;",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        28,
        25
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "break the ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        14,
        37
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "n",
        "cout << flag ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        14,
        37,
        25
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "n",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        14,
        25
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "n",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        37
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "cout << flag ;"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        37,
        25
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "sec [ 1010 ] ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘sec’ does not name a type"
    },
    {
      "mod_line": [
        28,
        14
      ],
      "mod_code": [
        "break the ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        14,
        37
      ],
      "mod_code": [
        "break the ;",
        "n",
        "cout << flag ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        14,
        37,
        25
      ],
      "mod_code": [
        "break the ;",
        "n",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        14,
        25
      ],
      "mod_code": [
        "break the ;",
        "n",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        37
      ],
      "mod_code": [
        "break the ;",
        "cout << flag ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        28,
        37,
        25
      ],
      "mod_code": [
        "break the ;",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        25
      ],
      "mod_code": [
        "break the ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        37
      ],
      "mod_code": [
        "n",
        "cout << flag ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        37,
        25
      ],
      "mod_code": [
        "n",
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        25
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        37,
        25
      ],
      "mod_code": [
        "cout << flag ;",
        "for ( i = 0 ; i < cou + 1 ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}