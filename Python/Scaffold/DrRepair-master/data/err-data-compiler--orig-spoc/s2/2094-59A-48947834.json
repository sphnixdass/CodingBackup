{
  "meta": {
    "index": 2094,
    "hitid": "3VCK0Q0PO588W1RLSAHA24JFTW2N0E",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "59A",
    "subid": "48947834"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "l , u = int set l to 0 and u to 0",
      "code": "int l = 0 , u = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to size of s",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] > = ' A ' and s [ i ] < = ' Z '",
      "code": "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment u",
      "code": "u ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if s is a lower case letter",
      "code": "else if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if u > l",
      "code": "if ( u > l )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to size of s",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if s [ i ] is a lower case letter decrement s [ i ] by 32",
      "code": "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) { s [ i ] = s [ i ] - 32 ; }",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if l > = u",
      "code": "else if ( l >= u )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to size of s",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if s [ i ] is an upper case letter increment s [ i ] by 32",
      "code": "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) { s [ i ] = s [ i ] + 32 ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( s )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘s’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s < getchar ( ) )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7,
        12
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7,
        12,
        16
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7,
        12,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7,
        16
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7,
        16,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s < getchar ( ) )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        12,
        16
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        12,
        16,
        7
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "else if ( s )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        12,
        16,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        12,
        7
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "else if ( s )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        12,
        7,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "else if ( s )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        12,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        16,
        7
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "else if ( s )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        16,
        7,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "else if ( s )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        16,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "else if ( s )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int l = 0 , u = 0 , u = 0 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        12,
        16
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        12,
        16,
        3
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        12,
        3
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        16,
        3
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "else if ( s < getchar ( ) )",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        16,
        7
      ],
      "mod_code": [
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "else if ( s )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘s’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        12,
        16,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "else if ( s )",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        16,
        3
      ],
      "mod_code": [
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "else if ( s )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘s’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        12,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "else if ( s )",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] < ' tolower ' ) s [ i ] -= 32 ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "else if ( s )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘s’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        16,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "else if ( s )",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == toupper ( s [ i ] ) ) s [ i ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "else if ( s )",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}