{
  "meta": {
    "index": 498,
    "hitid": "3S4TINXCC0HRY9U7R5EC1AF3AA6OBI",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "261A",
    "subid": "48447703"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long int inf = ( long long ) 1e9",
      "code": "const long long inf = ( long long ) 1e9 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make const long long mod = inf + 7",
      "code": "const long long mod = inf + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let const double pi = acos ( - 1 . 0 )",
      "code": "const double pi = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "make long long ints m and n",
      "code": "long long m , n ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create long long integer mn = inf",
      "code": "long long mn = inf ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let long long array a of size 300300",
      "code": "long long a [ 300300 ] ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to m",
      "code": "for ( long long i = 1 ; i <= m ; ++ i )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create long long int x",
      "code": "long long x ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set mn to min of mn and x",
      "code": "mn = min ( mn , x ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to n , read a [ i ]",
      "code": "for ( long long i = 1 ; i <= n ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "sort a + 1 using a + n + 1",
      "code": "sort ( a + 1 , a + n + 1 ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "create long long lst = n",
      "code": "long long lst = n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "make long long sum = 0",
      "code": "long long sum = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "loop indefinitely",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if lst - 1 + 1 is less than mn",
      "code": "if ( lst - 1 + 1 < mn )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for i = 1 to lst , set sum to sum + a [ i ]",
      "code": "for ( long long i = 1 ; i <= lst ; ++ i ) sum += a [ i ] ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "create long long ind = lst + 1 - mn",
      "code": "long long ind = lst + 1 - mn ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for i = lst to ind , set sum to sum + a [ i ]",
      "code": "for ( long long i = lst ; i >= ind ; -- i ) sum += a [ i ] ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if ind - 2 is greater than or equal to 1",
      "code": "if ( ind - 2 >= 1 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "set ind to ind - 3",
      "code": "ind -= 3 ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else if ind - 1 is greater than or equal to 1",
      "code": "else if ( ind - 1 >= 1 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set ind to ind - 2",
      "code": "ind -= 2 ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 30,
      "text": "subtract 1 from ind",
      "code": "ind -- ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "if ind is equal to 0 , break loop",
      "code": "if ( ind == 0 ) break ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "set lst to ind",
      "code": "lst = ind ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print sum",
      "code": "cout << sum << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int mn = min ( mn , x ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘min(int&, long long int&)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "sort ( a + 1 + a + n + 1 ) ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘long long int*’ and ‘long long int [300300]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29,
        7
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "m = getchar ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "m = getchar ( ) ;",
        "for ( int i = 1 ; i < m ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29,
        7,
        32
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "m = getchar ( ) ;",
        "int lst = ind ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29,
        7,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "m = getchar ( ) ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        29,
        8
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "for ( int i = 1 ; i < m ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29,
        8,
        32
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int lst = ind ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29,
        8,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "for ( int i = 1 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        29,
        32
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "int lst = ind ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        24,
        29,
        32,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        29,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "else do",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        7,
        8,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "m = getchar ( ) ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        7,
        32,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "m = getchar ( ) ;",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        7,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "m = getchar ( ) ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        8,
        32,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        8,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        32,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        21
      ],
      "mod_code": [
        "for ( int i = lst ; i <= ind ; i ++ ) sum += a [ i ] ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        7
      ],
      "mod_code": [
        "else do",
        "m = getchar ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        29,
        7,
        8
      ],
      "mod_code": [
        "else do",
        "m = getchar ( ) ;",
        "for ( int i = 1 ; i < m ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        29,
        7,
        8,
        32
      ],
      "mod_code": [
        "else do",
        "m = getchar ( ) ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int lst = ind ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        29,
        7,
        8,
        21
      ],
      "mod_code": [
        "else do",
        "m = getchar ( ) ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        7,
        32
      ],
      "mod_code": [
        "else do",
        "m = getchar ( ) ;",
        "int lst = ind ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        29,
        7,
        32,
        21
      ],
      "mod_code": [
        "else do",
        "m = getchar ( ) ;",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        7,
        21
      ],
      "mod_code": [
        "else do",
        "m = getchar ( ) ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        8
      ],
      "mod_code": [
        "else do",
        "for ( int i = 1 ; i < m ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        29,
        8,
        32
      ],
      "mod_code": [
        "else do",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int lst = ind ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        29,
        8,
        32,
        21
      ],
      "mod_code": [
        "else do",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        8,
        21
      ],
      "mod_code": [
        "else do",
        "for ( int i = 1 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        32
      ],
      "mod_code": [
        "else do",
        "int lst = ind ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        29,
        32,
        21
      ],
      "mod_code": [
        "else do",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        21
      ],
      "mod_code": [
        "else do",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        8,
        32,
        21
      ],
      "mod_code": [
        "m = getchar ( ) ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        8,
        21
      ],
      "mod_code": [
        "m = getchar ( ) ;",
        "for ( int i = 1 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        32,
        21
      ],
      "mod_code": [
        "m = getchar ( ) ;",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "m = getchar ( ) ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        32,
        21
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "for ( int i = 1 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32,
        21
      ],
      "mod_code": [
        "int lst = ind ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}