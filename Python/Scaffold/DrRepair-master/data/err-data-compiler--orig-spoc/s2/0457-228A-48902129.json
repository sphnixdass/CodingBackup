{
  "meta": {
    "index": 457,
    "hitid": "3MZ3TAMYTLH4IU0TP7NXHSOLF0BIRK",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "228A",
    "subid": "48902129"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "cnt = long long int with value of 0 and a = long long integer array with length of 6",
      "code": "long long int a [ 6 ] , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 4 exclusive read a [ i ]",
      "code": "for ( int i = 0 ; i < 4 ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a [ 1 ] equals a [ 2 ] or a [ 3 ] or a [ 0 ] then add 1 to cnt",
      "code": "if ( a [ 1 ] == a [ 2 ] || a [ 1 ] == a [ 3 ] || a [ 1 ] == a [ 0 ] ) { cnt ++ ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if a [ 2 ] equals a [ 3 ] or a [ 0 ] then add 1 to cnt",
      "code": "if ( a [ 2 ] == a [ 3 ] || a [ 2 ] == a [ 0 ] ) { cnt ++ ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a [ 3 ] equals a [ 0 ] then add 1 to count",
      "code": "if ( a [ 3 ] == a [ 0 ] ) { cnt ++ ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int a [ 6 ] , cnt [ 6 ] ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( a [ 3 ] == a [ 0 ] ) { count ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        5
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        4
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        3
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        5,
        4,
        3
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "long long int cnt [ 6 ] , cnt [ 6 ] ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int cnt [6]’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) cnt ++ ;",
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        5,
        4,
        3
      ],
      "mod_code": [
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 2 ] == a [ 3 ] || a [ 0 ] == a [ 0 ] ) { cnt ++ ; }",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( a [ 3 ] == a [ 0 ] ) count ++ ;",
        "if ( a [ 1 ] == a [ 2 ] || a [ 3 ] == a [ 3 ] ) cnt ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no post-increment operator for type"
    }
  ]
}