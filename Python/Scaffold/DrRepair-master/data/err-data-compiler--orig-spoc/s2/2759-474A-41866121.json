{
  "meta": {
    "index": 2759,
    "hitid": "3XH7ZM9YX2OB7T7QLDHK4ZPIXXK9RZ",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "474A",
    "subid": "41866121"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s , c = string",
      "code": "string s , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s1 = \" qwertyuiopasdfghjkl ; zxcvbnm , . / \"",
      "code": "string s1 = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read c",
      "code": "while ( cin >> c )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for j = 0 to size of s1 exclusive",
      "code": "for ( int j = 0 ; j < s1 . size ( ) ; j ++ )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if s [ i ] = = s1 [ j ]",
      "code": "if ( s [ i ] == s1 [ j ] )",
      "indent": 4
    },
    {
      "line": 8,
      "text": "if c is \" R \"",
      "code": "if ( c == \" R \" )",
      "indent": 5
    },
    {
      "line": 9,
      "text": "print s1 [ j - 1 ]",
      "code": "cout << s1 [ j - 1 ] ;",
      "indent": 6
    },
    {
      "line": 10,
      "text": "else if c is \" L \"",
      "code": "else if ( c == \" L \" )",
      "indent": 5
    },
    {
      "line": 11,
      "text": "print s1 [ j + 1 ]",
      "code": "cout << s1 [ j + 1 ] ;",
      "indent": 6
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( c == ' L \" )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        11
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        11,
        7
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        11,
        3
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "while ( c )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        11,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        9,
        7
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        3
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        9,
        3
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "while ( c )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        3,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j + 1 ] << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        7
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        7,
        3
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        7,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        11,
        3
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "while ( c )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        11,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "if ( s [ i ] != s1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "if ( s [ i ] != s1 [ j ] )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "while ( c )"
      ],
      "err_line": 2,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "s1 = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        11,
        7,
        3
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        9,
        11,
        7,
        8
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        11,
        3
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        9,
        11,
        3,
        8
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        11,
        8
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        7,
        3
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        9,
        7,
        3,
        8
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        7,
        8
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        9,
        3,
        8
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "cout << s1 [ j - 1 ] << endl ;",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        7,
        3
      ],
      "mod_code": [
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        11,
        7,
        3,
        8
      ],
      "mod_code": [
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        7,
        8
      ],
      "mod_code": [
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( s [ i ] != s1 [ j ] )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "cout << s1 [ j + 1 ] << endl ;",
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        11,
        3,
        8
      ],
      "mod_code": [
        "cout << s1 [ j + 1 ] << endl ;",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "cout << s1 [ j + 1 ] << endl ;",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘c’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        7,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ i ] != s1 [ j ] )",
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "if ( s [ i ] != s1 [ j ] )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "while ( c )",
        "if ( c == ' R \" )"
      ],
      "err_line": 8,
      "err_msg": "missing terminating ' character"
    }
  ]
}