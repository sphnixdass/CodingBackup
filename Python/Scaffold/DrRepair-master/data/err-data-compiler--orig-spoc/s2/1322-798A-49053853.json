{
  "meta": {
    "index": 1322,
    "hitid": "3HFWPF5AK9D1T6INJTGF3WRSJ7W3S3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "798A",
    "subid": "49053853"
  },
  "lines": [
    {
      "line": 0,
      "text": "function ispalindrome with string argument s that returns bool",
      "code": "bool ispalindrome ( string s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string variable t = s",
      "code": "string t = s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "reverse s",
      "code": "reverse ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return s = t",
      "code": "return s == t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create new string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s from the input",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if length of s is odd and ispalindrome ( s ) is true",
      "code": "if ( s . size ( ) % 2 && ispalindrome ( s ) )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" YES \" to standard output",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if length of s is even and ispalindrome ( s ) returns true",
      "code": "if ( s . size ( ) % 2 == 0 && ispalindrome ( s ) )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare integer err with value 0",
      "code": "int err = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for integer i = 0 to length of s / 2 exclusive incrementing i",
      "code": "for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if s [ i ] ! = s [ length of s - i - 1 ] , increment err by one",
      "code": "if ( s [ i ] != s [ s . size ( ) - i - 1 ] ) err ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if err is equal to 1",
      "code": "if ( err == 1 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" YES \" to standard output",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" NO \" to stdout",
      "code": "puts ( \" NO \" ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return s = t ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int * err = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "stdout << \" NO \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘_IO_FILE*’ and ‘const char [3]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        3,
        8,
        12
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        3,
        8,
        12,
        0
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        12,
        19
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "if ( ! err )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        3,
        8,
        12,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        8,
        0
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        0,
        19
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        0,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "bool ispalindrome ( string s ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        19
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( ! err )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        3,
        8,
        19,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        8,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 == 1 )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        3,
        12,
        0
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        0,
        19
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        0,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        19
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 == 1 )",
        "if ( ! err )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        3,
        12,
        19,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 == 1 )",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        12,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( s . size ( ) % 2 == 1 )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "return s = t ;",
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        0,
        19
      ],
      "mod_code": [
        "return s = t ;",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        0,
        19,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        0,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "bool ispalindrome ( string s ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "return s = t ;",
        "if ( ! err )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        3,
        19,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "return s = t ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8,
        12,
        0
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        12,
        0,
        19
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        12,
        0,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        12,
        19,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8,
        12,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( s . size ( ) % 2 == 1 )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        19
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        19,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "bool ispalindrome ( string s ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 != 1 && ispalindrome ( s ) )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0,
        19
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0,
        19,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == 1 )",
        "bool ispalindrome ( string s ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        19,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == 1 )",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == 1 )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        19,
        1
      ],
      "mod_code": [
        "bool ispalindrome ( string s ) ;",
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "bool ispalindrome ( string s ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "if ( ! err )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}