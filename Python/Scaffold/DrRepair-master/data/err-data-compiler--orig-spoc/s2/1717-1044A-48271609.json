{
  "meta": {
    "index": 1717,
    "hitid": "3NBFJK3IOHCNPQ2I7R6Q2L60QNXOGY",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1044A",
    "subid": "48271609"
  },
  "lines": [
    {
      "line": 0,
      "text": "let INF be a constant integer with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let mod be a constant integer with mod = 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let N be a constant integer with N = 1e5 + 5",
      "code": "const int N = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "a = array of long integers of length N",
      "code": "long long a [ N ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "flag = array of boolean values of length N",
      "code": "bool flag [ N ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "for i = 0 to N exclusive , flag [ i ] is equal to false",
      "code": "for ( int i = 0 ; i < N ; i ++ ) { flag [ i ] = false ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let n , m be long integers",
      "code": "long long n , m ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "sort the values a , a + n",
      "code": "sort ( a , a + n ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let x1 , x2 , y be integers",
      "code": "int x1 , x2 , y ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "let sum be a long integer with sum = 0",
      "code": "long long sum = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read x1 , x2 , y",
      "code": "cin >> x1 >> x2 >> y ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if x1 is greater than 1 , proceed to next",
      "code": "if ( x1 > 1 ) continue ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if x2 > = 1e9",
      "code": "if ( x2 >= 1e9 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment sum by 1",
      "code": "sum ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "proceed to next",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "let long integer value of Index = upper_bound ( a , a + n , x2 ) - a - 1",
      "code": "long long Index = upper_bound ( a , a + n , x2 ) - a - 1 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "while flag [ Index ] is equal to true and Index > = 0",
      "code": "while ( flag [ Index ] == true && Index >= 0 ) Index -- ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if Index > = 0",
      "code": "if ( Index >= 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "increment sum by 1",
      "code": "sum ++ ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "flag [ Index ] is equal to true",
      "code": "flag [ Index ] = true ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print sum and new line",
      "code": "cout << sum << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool s [ N ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "sort ( ( a , a + n ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘sort(long long int*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "next ;"
      ],
      "err_line": 18,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        0
      ],
      "mod_code": [
        "while ( flag [ Index ] == true && Index >= 0 )",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        21,
        0,
        24
      ],
      "mod_code": [
        "while ( flag [ Index ] == true && Index >= 0 )",
        "const INF = 0x3f3f3f3f ;",
        "flag [ ' Index ' ] = true ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        21,
        0,
        24,
        8
      ],
      "mod_code": [
        "while ( flag [ Index ] == true && Index >= 0 )",
        "const INF = 0x3f3f3f3f ;",
        "flag [ ' Index ' ] = true ;",
        "cin >> n , m ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        21,
        0,
        24,
        14
      ],
      "mod_code": [
        "while ( flag [ Index ] == true && Index >= 0 )",
        "const INF = 0x3f3f3f3f ;",
        "flag [ ' Index ' ] = true ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        21,
        0,
        8
      ],
      "mod_code": [
        "while ( flag [ Index ] == true && Index >= 0 )",
        "const INF = 0x3f3f3f3f ;",
        "cin >> n , m ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        21,
        0,
        8,
        14
      ],
      "mod_code": [
        "while ( flag [ Index ] == true && Index >= 0 )",
        "const INF = 0x3f3f3f3f ;",
        "cin >> n , m ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        21,
        0,
        14
      ],
      "mod_code": [
        "while ( flag [ Index ] == true && Index >= 0 )",
        "const INF = 0x3f3f3f3f ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( flag [ Index ] == true and Index >= 0 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        24
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( flag [ Index ] == true and Index >= 0 )",
        "flag [ ' Index ' ] = true ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        24,
        8
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( flag [ Index ] == true and Index >= 0 )",
        "flag [ ' Index ' ] = true ;",
        "cin >> n , m ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        24,
        14
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( flag [ Index ] == true and Index >= 0 )",
        "flag [ ' Index ' ] = true ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        8
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( flag [ Index ] == true and Index >= 0 )",
        "cin >> n , m ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        8,
        14
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( flag [ Index ] == true and Index >= 0 )",
        "cin >> n , m ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        14
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( flag [ Index ] == true and Index >= 0 )",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "flag [ ' Index ' ] = true ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        24,
        8
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "flag [ ' Index ' ] = true ;",
        "cin >> n , m ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        24,
        8,
        14
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "flag [ ' Index ' ] = true ;",
        "cin >> n , m ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        24,
        14
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "flag [ ' Index ' ] = true ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "cin >> n , m ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        8,
        14
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "cin >> n , m ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "cin >> x1 >> x2 , y ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    }
  ]
}