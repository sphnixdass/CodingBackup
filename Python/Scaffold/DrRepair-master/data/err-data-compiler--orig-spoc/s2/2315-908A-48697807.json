{
  "meta": {
    "index": 2315,
    "hitid": "3ATYLI1PRTWXGSSJFXRTZYYGIFFOJ3",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "908A",
    "subid": "48697807"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "dic = string = 13579aeiou",
      "code": "string dic = \" 13579aeiou \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "cont = integer = 0",
      "code": "int cont = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if i s [ i ] is in dic , the increase cont by 1",
      "code": "if ( dic . find ( s [ i ] ) != string :: npos ) { ++ cont ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print cont",
      "code": "cout << cont << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string dic = 13579aeiou ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string dic = 1e9 ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "if ( i [ i ] == ' dic ' ) cont ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        6,
        1
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        6,
        1,
        5
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "string S ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "string S ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        1,
        6,
        5
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "string S ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "string S ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "string dic = 13579aeiou ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"aeiou\" on integer constant"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "string S ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        5
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "string S ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        5,
        3
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "string S ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "string dic = 1e9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "string S ;",
        "string dic = 1e9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        3
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "string dic = 1e9 ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( i [ i ] == ' dic ' ) cont ++ ;",
        "string dic = 1e9 ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string S ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "string S ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        3
      ],
      "mod_code": [
        "string S ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "string dic = 1e9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "string S ;",
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "string dic = 1e9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string S ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "string S ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "string dic = 1e9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string S ;",
        "string dic = 1e9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        3
      ],
      "mod_code": [
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "string dic = 1e9 ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( dic [ i ] == ' dic ' ) cont ++ ;",
        "string dic = 1e9 ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "string dic = 1e9 ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}