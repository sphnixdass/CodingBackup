{
  "meta": {
    "index": 1964,
    "hitid": "3CVBMEMMXBAU4G5UAB76CZW6FYV7HL",
    "workerid": "A1APYLD4DUK33J",
    "probid": "319A",
    "subid": "46402386"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long mo with mo = 1e9 + 7",
      "code": "const long long mo = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create long longs n , ans",
      "code": "long long n , ans ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare poww with long longs a , x as arguments , returning long long",
      "code": "long long poww ( long long a , long long x )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create long long res with res = 1",
      "code": "long long res = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while x is true",
      "code": "while ( x )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if x bitwise and 1 , set res to res * a , set res to res % mo",
      "code": "if ( x & 1 ) res *= a , res %= mo ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set a to a * a , set a to a % mo , set x to x bitshift right 1",
      "code": "a *= a , a %= mo , x >>= 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return res from function",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare cal with string s as argument , returning long long",
      "code": "long long cal ( string s )",
      "indent": 0
    },
    {
      "line": 12,
      "text": "create long long a with a = 0",
      "code": "long long a = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to n exclusive",
      "code": "for ( long long i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set a to a bitshift left 1",
      "code": "a <<= 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] is ' 1 ' , increment a",
      "code": "if ( s [ i ] == ' 1 ' ) a ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set a to a % mo",
      "code": "a %= mo ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return a from function",
      "code": "return a ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 21,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set n to size of s",
      "code": "n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set ans to result of run poww with 2 , n - 1 as arguments",
      "code": "ans = poww ( 2 , n - 1 ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set ans to ans * result of run cal with s as argument",
      "code": "ans *= cal ( s ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "set ans to ans % mo",
      "code": "ans %= mo ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 21,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "long long cal ( string s ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        16
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        25
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        16
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        7,
        16,
        25
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        7,
        16,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "a %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        7,
        25
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        7,
        25,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a *= a , a %= mo ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        14,
        16
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a >>= 1 ;",
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        25
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a >>= 1 ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a >>= 1 ;",
        "a %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        14,
        25
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a >>= 1 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        14,
        25,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a >>= 1 ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        14,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a >>= 1 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        16,
        25
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        16,
        25,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        16,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "a %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        25
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        25,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "if ( x & 1 ) res *= a , res = res * mo ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        14,
        16
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        25
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        21
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "a %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        14,
        25
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        14,
        25,
        21
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        14,
        21
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a >>= 1 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        16,
        25
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        16,
        25,
        21
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        16,
        21
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "a %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        25
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        25,
        21
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "a *= a , a %= mo ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "a >>= 1 ;",
        "a %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        16,
        25
      ],
      "mod_code": [
        "a >>= 1 ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        16,
        25,
        21
      ],
      "mod_code": [
        "a >>= 1 ;",
        "a %= 5.0 ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        16,
        21
      ],
      "mod_code": [
        "a >>= 1 ;",
        "a %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        25
      ],
      "mod_code": [
        "a >>= 1 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        25,
        21
      ],
      "mod_code": [
        "a >>= 1 ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "a >>= 1 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        25
      ],
      "mod_code": [
        "a %= 5.0 ;",
        "ans %= 5.0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        16,
        25,
        21
      ],
      "mod_code": [
        "a %= 5.0 ;",
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "a %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        25,
        21
      ],
      "mod_code": [
        "ans %= 5.0 ;",
        "s >> s ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}