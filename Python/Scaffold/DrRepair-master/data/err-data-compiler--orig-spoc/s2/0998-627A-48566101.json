{
  "meta": {
    "index": 998,
    "hitid": "3SBX2M1TKDHAYMMER3WTI14XFJ84Q1",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "627A",
    "subid": "48566101"
  },
  "lines": [
    {
      "line": 0,
      "text": "mod = const integer with mod = 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "inf = const integer with inf = 1e9 + 5",
      "code": "const int inf = 1e9 + 5 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "in the function powmod that takes long long a , b and returns long long",
      "code": "long long powmod ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "ret = long long with ret = 1",
      "code": "long long ret = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while ( b )",
      "code": "while ( b )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( b bitwise and 1 ) , ret = ( ret * a ) modulo mod",
      "code": "if ( b & 1 ) ret = ( ret * a ) % mod ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "a = ( a * a ) modulo mod",
      "code": "a = ( a * a ) % mod ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "b = right shift b 1 place",
      "code": "b >>= 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "maxn = const integer with maxn = 2e5 + 5",
      "code": "const int maxn = 2e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 12,
      "text": "s , x = long long",
      "code": "long long s , x ;",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "read s , x",
      "code": "cin >> s >> x ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if ( ( s - x ) bitwise and 1 )",
      "code": "if ( ( s - x ) & 1 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print 0",
      "code": "cout << \" 0\\n \" ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "y = long long and y = ( s - x ) / 2",
      "code": "long long y = ( s - x ) / 2 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ( y bitwise and x )",
      "code": "if ( y & x )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print 0",
      "code": "cout << \" 0\\n \" ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "ways = long long with ways = 0",
      "code": "long long ways = 0 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for i = 0 to 40",
      "code": "for ( int i = 0 ; i <= 40 ; i ++ )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "setbit = long long with setbit = pow ( 2 * 1LL , i * 1LL )",
      "code": "long long setbit = pow ( 2 * 1LL , i * 1LL ) ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if ( x bitwise and setbit ) , increment ways",
      "code": "if ( x & setbit ) ways ++ ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "ways = pow of 2 * 1LL and ways",
      "code": "ways = pow ( 2 * 1LL , ways ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if ( y is 0 ) , ways = ways - 2",
      "code": "if ( y == 0 ) ways -= 2 ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print ways",
      "code": "cout << ways << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "b >>= 1 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        25,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        7,
        29
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        7,
        29,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        7,
        29,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        7,
        29,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        7,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "cout << ' ways ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        7,
        31,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        7,
        31,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "cout << ' ways ' ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        7,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        7,
        30,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        7,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "b >>= 1 << endl ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        29
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "ways = pow ( 2 * 1LL * ways ) ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        25,
        29,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        25,
        29,
        31,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        25,
        29,
        31,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        29,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        25,
        29,
        30,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        29,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        31,
        30,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        31,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "cout << ' ways ' ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        30,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 12 ; i ++ )",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        29
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        29,
        31
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        29,
        31,
        30
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        29,
        31,
        4
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        29,
        30
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        29,
        30,
        4
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        29,
        4
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "ways = pow ( 2 * 1LL * ways ) ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        31
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "cout << ' ways ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        31,
        30
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        31,
        30,
        4
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        31,
        4
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "cout << ' ways ' ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        30
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        30,
        4
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "b >>= 1 << endl ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        29,
        31
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        29,
        31,
        30
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        29,
        31,
        30,
        4
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        29,
        31,
        4
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;",
        "cout << ' ways ' ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        29,
        30
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;",
        "if ( y == 0 ) ways *= 2 ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘pow(long long int)’"
    },
    {
      "mod_line": [
        29,
        30,
        4
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        29,
        4
      ],
      "mod_code": [
        "ways = pow ( 2 * 1LL * ways ) ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        31,
        30,
        4
      ],
      "mod_code": [
        "cout << ' ways ' ;",
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        31,
        4
      ],
      "mod_code": [
        "cout << ' ways ' ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        30,
        4
      ],
      "mod_code": [
        "if ( y == 0 ) ways *= 2 ;",
        "while ( b ) )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}