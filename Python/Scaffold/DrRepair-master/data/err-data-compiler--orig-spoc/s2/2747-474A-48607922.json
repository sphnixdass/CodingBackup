{
  "meta": {
    "index": 2747,
    "hitid": "3CVBMEMMXBAU4G5UAB76CZW6FYYH7Y",
    "workerid": "A1APYLD4DUK33J",
    "probid": "474A",
    "subid": "48607922"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare character array ss size 3 by 12 = { \" qwertyuiop \" , \" asdfghjkl ; \" , \" zxcvbnm , . / \" }",
      "code": "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl; \" , \" zxcvbnm,./ \" } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare character cmd",
      "code": "char cmd ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read cmd",
      "code": "cin >> cmd ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if cmd is ' R '",
      "code": "if ( cmd == ' R ' )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "for k = 0 to 10 exclusive",
      "code": "for ( int k = 0 ; k < 10 ; k ++ )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "if s [ i ] is ss [ j ] [ k ] , print ss [ j ] [ k - 1 ]",
      "code": "if ( s [ i ] == ss [ j ] [ k ] ) cout << ss [ j ] [ k - 1 ] ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "for k = 0 to 10 exclusive",
      "code": "for ( int k = 0 ; k < 10 ; k ++ )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if s [ i ] is ss [ j ] [ k ] , print ss [ j ] [ k + 1 ]",
      "code": "if ( s [ i ] == ss [ j ] [ k ] ) cout << ss [ j ] [ k + 1 ] ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char ans ;"
      ],
      "err_line": 4,
      "err_msg": "‘cmd’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "getline ( cin , cmd ) ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14,
        6
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        14,
        6,
        12
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        14,
        6,
        5
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        14,
        6,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        14,
        12
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14,
        12,
        5
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        14,
        12,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14,
        5
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        14,
        5,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        14,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "else if ( cmd == ' R ' )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        6,
        12
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        5
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "else if ( cmd == ' R ' )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        6,
        5,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "else if ( cmd == ' R ' )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "else if ( cmd == ' R ' )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        12,
        5
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        12,
        5,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        12,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        5,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "char ss [ 3 ] [ 12 ] = { \" qwertyuiop \" , \" asdfghjkl \" , \" zxcvbnm \" } ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        6,
        12
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        6,
        12,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        6,
        12,
        8
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        6,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        6,
        5,
        8
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        6,
        8
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "else if ( cmd == ' R ' )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        12,
        5,
        8
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        12,
        8
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        5,
        8
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "for ( k = 0 ; k < 10 ; k ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        12,
        5
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        12,
        5,
        8
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        12,
        8
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5,
        8
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "else if ( cmd == ' R ' )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        5,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}