{
  "meta": {
    "index": 1398,
    "hitid": "391JB9X4ZY24R9DPK2CS899O241MKM",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "155A",
    "subid": "42225387"
  },
  "lines": [
    {
      "line": 0,
      "text": "create int n , k , a [ 1001 ] , ans",
      "code": "int n , k , a [ 1001 ] , ans ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set a [ i ] = k",
      "code": "a [ i ] = k ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "sort elements between a and a + i + 1",
      "code": "sort ( a , a + i + 1 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a [ 0 ] = k and a [ 1 ] different from k or a [ i ] = k and a [ i - 1 ] different from k and i different from 0",
      "code": "if ( ( ( a [ 0 ] == k && a [ 1 ] != k ) || ( a [ i ] == k && a [ i - 1 ] != k ) ) && i != 0 ) ans ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3,
        4
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "for ( i = 0 ; i < n ; i ++ )",
        "k = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3,
        4,
        0
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "for ( i = 0 ; i < n ; i ++ )",
        "k = getchar ( ) ;",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        7,
        3,
        0
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "k = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        4,
        0
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "k = getchar ( ) ;",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "if ( a [ 0 ] == k && a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "k = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "k = getchar ( ) ;",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        7,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "k = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "k = getchar ( ) ;",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "k = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        4,
        0
      ],
      "mod_code": [
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "k = getchar ( ) ;",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "if ( a [ 0 ] == k and a [ 1 ] != k && a [ i ] == k && a [ i ] == k && a [ i - 1 ] )",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "k = getchar ( ) ;",
        "int n , k , a [ 1001 ] >> ans ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘>>’ token"
    }
  ]
}