{
  "meta": {
    "index": 766,
    "hitid": "37NXA7GVST0Y12PGJUPKA55GHAGLVS",
    "workerid": "A1AYVATMT88U1W",
    "probid": "225A",
    "subid": "47702904"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let boolean possible ( is true )",
      "code": "bool possible ( true ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let n , x , a , b are integers",
      "code": "int n , x , a , b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read the values n and x",
      "code": "cin >> n >> x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while ( n is decremented by 1 )",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a and b values",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if ( x is equal to a or x is equal to b or x is equal to 7 - a or x is equal to 7 - b ) , then { possible is equal to false }",
      "code": "if ( x == a || x == b || x == 7 - a || x == 7 - b ) { possible = false ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "x is equal to 7 - x",
      "code": "x = 7 - x ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print ( check condition ( possible ) then YES or NO ) and newline",
      "code": "cout << ( possible ? \" YES \" : \" NO \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘bool’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( n is 1 )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘bool’ and ‘const char [4]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘bool’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        9,
        4
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "while ( n is 1 )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        9,
        4,
        1
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "while ( n is 1 )",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        4,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "while ( n is 1 )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        9,
        1
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        1,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "while ( n is 1 )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        4,
        9
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "while ( n is 1 )",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        4,
        9,
        1
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "while ( n is 1 )",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        4,
        9,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "while ( n is 1 )",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        4,
        1
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "while ( n is 1 )",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        4,
        1,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "while ( n is 1 )",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "while ( n is 1 )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘bool’ and ‘const char [4]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        9,
        1
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        1,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        1,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( x == a || x == 7 || x == 7 - a || x == 7 - a ) possible = false ;",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "while ( n is 1 )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        9,
        4,
        1
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "while ( n is 1 )",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        9,
        4,
        1,
        5
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "while ( n is 1 )",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        9,
        4,
        5
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "while ( n is 1 )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        9,
        1,
        5
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" \" << ( possible ) << \" \\n \" ;",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( n is 1 )",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        9,
        1
      ],
      "mod_code": [
        "while ( n is 1 )",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        9,
        1,
        5
      ],
      "mod_code": [
        "while ( n is 1 )",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        9,
        5
      ],
      "mod_code": [
        "while ( n is 1 )",
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "while ( n is 1 )",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        1,
        5
      ],
      "mod_code": [
        "while ( n is 1 )",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "while ( n is 1 )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "bool possible ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        9,
        1,
        5
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "cout << ( ( possible ) << \" YES \" << NO ) << endl ;",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "bool possible ( )",
        "for ( cin >> a >> b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    }
  ]
}