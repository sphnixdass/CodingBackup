{
  "meta": {
    "index": 2557,
    "hitid": "3WPCIUYH1A20QYXZ1IRHQA9QB1JTDV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "24A",
    "subid": "47180396"
  },
  "lines": [
    {
      "line": 0,
      "text": "let edges be a 2d array of integers with size 105 by 105",
      "code": "int edges [ 105 ] [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function dfs which takes integer pointer visited , integer index , long pointer ans and integer n",
      "code": "void dfs ( int * visited , int index , long * ans , int n )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "visited [ index ] = 1",
      "code": "visited [ index ] = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if edges [ index ] [ i ] > = 0",
      "code": "if ( edges [ index ] [ i ] >= 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if visited [ i ] is equal to 0",
      "code": "if ( visited [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "* ans = * ans + edges [ index ] [ i ]",
      "code": "* ans = * ans + edges [ index ] [ i ] ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "invoke function dfs with arguments visited , i , ans and n",
      "code": "dfs ( visited , i , ans , n ) ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "void function dfs2 with integer pointer visited , integer index , long pointer ans and integer n as arguments",
      "code": "void dfs2 ( int * visited , int index , long * ans , int n )",
      "indent": 0
    },
    {
      "line": 13,
      "text": "set value of visited [ index ] to 1",
      "code": "visited [ index ] = 1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = n - 1 to 0",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if edges [ index ] [ i ] > = 0",
      "code": "if ( edges [ index ] [ i ] >= 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if visited [ i ] is equal to 0",
      "code": "if ( visited [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "* ans = * ans + edges [ index ] [ i ]",
      "code": "* ans = * ans + edges [ index ] [ i ] ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "invoke function dfs with arguments visited , i , ans and n",
      "code": "dfs ( visited , i , ans , n ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 24,
      "text": "let n be integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "a , b and c = integers",
      "code": "int a , b , c ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "visited is an array of integers of size n",
      "code": "int visited [ n ] ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for integer j = 0 to n exclusive assign - 1 to edges [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { edges [ i ] [ j ] = - 1 ; }",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "decrease a by one",
      "code": "a -- ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "decrease b",
      "code": "b -- ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "edges [ a ] [ b ] = 0",
      "code": "edges [ a ] [ b ] = 0 ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "set edges [ b ] [ a ] to c",
      "code": "edges [ b ] [ a ] = c ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "visited [ i ] = 0",
      "code": "visited [ i ] = 0 ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "long ans = 0",
      "code": "long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "invoke function dfs with arguments visited , 0 , & ans and n",
      "code": "dfs ( visited , 0 , & ans , n ) ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "for integer i = n - 1 to 0",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 42,
      "text": "if edges [ 0 ] [ i ] > = 0",
      "code": "if ( edges [ 0 ] [ i ] >= 0 )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "increase ans by edges [ i ] [ 0 ]",
      "code": "ans += edges [ i ] [ 0 ] ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 47,
      "text": "long ans2 = 0",
      "code": "long ans2 = 0 ;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "for integer i = 0 to n exclusive set visited [ i ] to 0",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { visited [ i ] = 0 ; }",
      "indent": 1
    },
    {
      "line": 49,
      "text": "call function dfs2 with arguments visited , 0 , & ans2 and n",
      "code": "dfs2 ( visited , 0 , & ans2 , n ) ;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 51,
      "text": "if edges [ 0 ] [ i ] > = 0",
      "code": "if ( edges [ 0 ] [ i ] >= 0 )",
      "indent": 2
    },
    {
      "line": 52,
      "text": "increase ans2 by edges [ i ] [ 0 ]",
      "code": "ans2 += edges [ i ] [ 0 ] ;",
      "indent": 3
    },
    {
      "line": 53,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 56,
      "text": "set value of ans to min of ans and ans2",
      "code": "ans = min ( ans , ans2 ) ;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )"
      ],
      "err_line": 12,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int * edges [ 105 ] [ 105 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , long long n )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "ans += ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long int*’ and ‘long int*’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "dfs ( visited , i , ans ) ;"
      ],
      "err_line": 7,
      "err_msg": "too few arguments to function ‘void dfs(int*, int, long int*, int)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "void dfs2 ( int visited , long long ans , long long ans , long long ans )"
      ],
      "err_line": 12,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "ans += ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long int*’ and ‘long int*’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "dfs ( visited , i , ans ) ;"
      ],
      "err_line": 18,
      "err_msg": "too few arguments to function ‘void dfs(int*, int, long int*, int)’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 24,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int * visited [ n ] ;"
      ],
      "err_line": 40,
      "err_msg": "cannot convert ‘int**’ to ‘int*’ for argument ‘1’ to ‘void dfs(int*, int, long int*, int)’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "long long ans = 0 ;"
      ],
      "err_line": 40,
      "err_msg": "invalid conversion from ‘long long int*’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "dfs ( visited , 0 , ans , n ) ;"
      ],
      "err_line": 40,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "long long ans2 = 0 ;"
      ],
      "err_line": 49,
      "err_msg": "invalid conversion from ‘long long int*’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "dfs2 ( visited , 0 , ans2 , n ) ;"
      ],
      "err_line": 49,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 50,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "* ans = min ( ans , ans2 ) ;"
      ],
      "err_line": 56,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long int’)"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        12
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        17
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        4
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        17
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        4
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        4,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        12,
        17
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        12,
        17,
        4
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        12,
        17,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        12,
        4
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        12,
        4,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        12,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        17,
        4
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        17,
        4,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        17,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "void dfs ( int visited , long long ans , long long ans , int n )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        17
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        17,
        4
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        17,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        4
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        4,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        17,
        4
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        17,
        4,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        12,
        17,
        4
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 12,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        12,
        17,
        4,
        3
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17,
        3
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 12,
      "err_msg": "redefinition of ‘long long int ans’"
    },
    {
      "mod_line": [
        12,
        4,
        3
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "void dfs2 ( int * visited , long long ans , long long ans , int n )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        4
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘long int’ to ‘long int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        4,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "ans = * ans + edges [ index ] [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "if ( ! edges [ index ] [ i ] >= 0 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}