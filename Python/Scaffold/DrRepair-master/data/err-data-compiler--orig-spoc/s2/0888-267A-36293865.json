{
  "meta": {
    "index": 888,
    "hitid": "3JHB4BPSFK3BVSSQ8YSKZ9FD1BI9QY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "267A",
    "subid": "36293865"
  },
  "lines": [
    {
      "line": 0,
      "text": "create new integer variable N",
      "code": "int N ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new long longs A and B",
      "code": "long long A , B ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "Calc is a long long function with long long arguments a and b",
      "code": "long long Calc ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if b = 0 , return 0LL",
      "code": "if ( b == 0 ) return 0LL ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare new long long variable ret = a / b",
      "code": "long long ret = a / b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "increase ret by the result of Calc ( b , a % b )",
      "code": "ret += Calc ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "read N from the input",
      "code": "cin >> N ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while N ! = 0 , decrement it and continue the loop",
      "code": "while ( N -- )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read standard input to A and B",
      "code": "cin >> A >> B ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print the result of Calc ( A , B ) to the output",
      "code": "cout << Calc ( A , B ) << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        6
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "ret = ret ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        6,
        11
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "ret = ret ;",
        "A >> A >> B ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        6,
        9
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "ret = ret ;",
        "N = N ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        6,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "ret = ret ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        11
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "A >> A >> B ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        11,
        9
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "A >> A >> B ;",
        "N = N ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        11,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "A >> A >> B ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        9
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "N = N ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        9,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "N = N ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "while ( N != 0 ) continue ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "ret = ret ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "ret = ret ;",
        "A >> A >> B ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        9
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "ret = ret ;",
        "A >> A >> B ;",
        "N = N ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "ret = ret ;",
        "A >> A >> B ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "ret = ret ;",
        "N = N ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "ret = ret ;",
        "N = N ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "ret = ret ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "A >> A >> B ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11,
        9
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "A >> A >> B ;",
        "N = N ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11,
        9,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "A >> A >> B ;",
        "N = N ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "A >> A >> B ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "N = N ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "N = N ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "ret += Calc ( Calc , a % b ) ;",
        "cout << Calc ( A , B ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    }
  ]
}