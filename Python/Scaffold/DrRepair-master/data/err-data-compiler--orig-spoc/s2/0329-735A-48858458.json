{
  "meta": {
    "index": 329,
    "hitid": "3LOJFQ4BOX91NF7C79DPPJMUTQADKW",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "735A",
    "subid": "48858458"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , k , temp , l , m , set temp = 0",
      "code": "int n , k , temp = 0 , l , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "c = 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] = G",
      "code": "if ( s [ i ] == ' G ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "l = i",
      "code": "l = i ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if s [ i ] = T",
      "code": "else if ( s [ i ] == ' T ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "m = i",
      "code": "m = i ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if l < m",
      "code": "if ( l < m )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = l to m inclusive",
      "code": "for ( int i = l ; i <= m ; i += k )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] different from #",
      "code": "if ( s [ i ] != ' # ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else if s [ i ] = T",
      "code": "else if ( s [ i ] == ' T ' )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else if s [ i ] = #",
      "code": "else if ( s [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "add 1 to c",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "continue",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else if l > m",
      "code": "else if ( l > m )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = l to m inclusive , with i = i - k",
      "code": "for ( int i = l ; i >= m ; i -= k )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if s [ i ] = #",
      "code": "if ( s [ i ] != ' # ' )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "else if s [ i ] = T",
      "code": "else if ( s [ i ] == ' T ' )",
      "indent": 3
    },
    {
      "line": 32,
      "text": "c = c + 1",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "else if s [ i ] = #",
      "code": "else if ( s [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 35,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 37,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "continue",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "answer = ( c - 1 ) * k",
      "code": "int answer = ( c - 1 ) * k ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "set hap = abs ( l - m )",
      "code": "int hap = abs ( l - m ) ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "if answer = hap",
      "code": "if ( answer == hap )",
      "indent": 1
    },
    {
      "line": 45,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 46,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 47,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , temp , l , m , m = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> k )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ i ] == G )"
      ],
      "err_line": 7,
      "err_msg": "‘G’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( s [ i ] == T )"
      ],
      "err_line": 9,
      "err_msg": "‘T’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = l ; i <= m ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( s [ i ] == T )"
      ],
      "err_line": 17,
      "err_msg": "‘T’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "else if ( s [ i ] == T )"
      ],
      "err_line": 31,
      "err_msg": "‘T’ was not declared in this scope"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "hap = abs ( l - m ) ;"
      ],
      "err_line": 43,
      "err_msg": "‘hap’ was not declared in this scope"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        28
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        28,
        29
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        28,
        42
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        28,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        29
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( s [ i ] == ' # ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        29,
        42
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        29,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( s [ i ] == ' # ' )",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        42
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        42,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        14,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i += k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        28,
        29
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        28,
        29,
        42
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        28,
        29,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        28,
        42
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i += k )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        28,
        42,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i += k )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        28,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "if ( s [ i ] == ' # ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        29,
        42
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        29,
        42,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        29,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "if ( s [ i ] == ' # ' )",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        42
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        42,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        1,
        44
      ],
      "mod_code": [
        "int n , k , temp , l , m , temp = 0 ;",
        "if ( answer == endl )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        14,
        28,
        29,
        42
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        28,
        29,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )",
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        14,
        28,
        42
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        28,
        42,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        28,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "for ( int i = l ; i <= m ; i += k )",
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        14,
        29,
        42
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        42,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( s [ i ] == ' # ' )",
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        14,
        42
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i ++ )",
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        28,
        29,
        42
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        29,
        42,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        29,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i += k )",
        "if ( s [ i ] == ' # ' )",
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        28,
        42
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i += k )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        42,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i += k )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        44
      ],
      "mod_code": [
        "for ( int i = l ; i <= m ; i += k )",
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        29,
        42
      ],
      "mod_code": [
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42,
        44
      ],
      "mod_code": [
        "if ( s [ i ] == ' # ' )",
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        44
      ],
      "mod_code": [
        "if ( s [ i ] == ' # ' )",
        "if ( answer == endl )"
      ],
      "err_line": 44,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        42,
        44
      ],
      "mod_code": [
        "answer = ( c - 1 ) * k ;",
        "if ( answer == endl )"
      ],
      "err_line": 42,
      "err_msg": "‘answer’ was not declared in this scope"
    }
  ]
}