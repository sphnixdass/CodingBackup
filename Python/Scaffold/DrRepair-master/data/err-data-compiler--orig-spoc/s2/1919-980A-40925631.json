{
  "meta": {
    "index": 1919,
    "hitid": "3TX9T2ZCB9VVLG6PO5LP4MZS4FPWZ6",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "980A",
    "subid": "40925631"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "count , p , i , n = integers with count = 0 , p = 0",
      "code": "int count = 0 , p = 0 , i , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "a = string",
      "code": "string a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "Read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set n to length of string a",
      "code": "n = a . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ i ] is -",
      "code": "if ( a [ i ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment p",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if count is 0 OR p is 0",
      "code": "if ( count == 0 || p == 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print YES and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if count modulo p is 0",
      "code": "else if ( count % p == 0 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print YES and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print NO and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        6
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "if ( ! a [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        6,
        11
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        6,
        8
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "if ( ! a [ i ] )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        6,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "if ( ! a [ i ] )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        11
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        11,
        8
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "if ( count == 0 OR p == 0 )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        11,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "if ( count == 0 OR p == 0 )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        8
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        8,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        15,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( ! a [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        11
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        11,
        8
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        11,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( ! a [ i ] )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( ! a [ i ] )",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( ! a [ i ] )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        11,
        8
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( count == 0 OR p == 0 )",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        11,
        8,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( count == 0 OR p == 0 )",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        11,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "if ( count == 0 OR p == 0 )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int count = 0 , p , i , n , n ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "else do",
        "if ( ! a [ i ] )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        6,
        11
      ],
      "mod_code": [
        "else do",
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        15,
        6,
        11,
        8
      ],
      "mod_code": [
        "else do",
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        6,
        11,
        3
      ],
      "mod_code": [
        "else do",
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        15,
        6,
        8
      ],
      "mod_code": [
        "else do",
        "if ( ! a [ i ] )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        6,
        8,
        3
      ],
      "mod_code": [
        "else do",
        "if ( ! a [ i ] )",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        6,
        3
      ],
      "mod_code": [
        "else do",
        "if ( ! a [ i ] )",
        "cin >> n ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "else do",
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        15,
        11,
        8
      ],
      "mod_code": [
        "else do",
        "if ( count == 0 OR p == 0 )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        11,
        8,
        3
      ],
      "mod_code": [
        "else do",
        "if ( count == 0 OR p == 0 )",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        11,
        3
      ],
      "mod_code": [
        "else do",
        "if ( count == 0 OR p == 0 )",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "else do",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        8,
        3
      ],
      "mod_code": [
        "else do",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "else do",
        "cin >> n ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        6,
        11,
        8
      ],
      "mod_code": [
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11,
        8,
        3
      ],
      "mod_code": [
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11,
        3
      ],
      "mod_code": [
        "if ( ! a [ i ] )",
        "if ( count == 0 OR p == 0 )",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( ! a [ i ] )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "if ( ! a [ i ] )",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "if ( count == 0 OR p == 0 )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        8,
        3
      ],
      "mod_code": [
        "if ( count == 0 OR p == 0 )",
        "else do",
        "cin >> n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "if ( count == 0 OR p == 0 )",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘OR’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "else do",
        "cin >> n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}