{
  "meta": {
    "index": 351,
    "hitid": "3CMIQF80GNKOD9QSARP8FZOBBA8Q62",
    "workerid": "A1APYLD4DUK33J",
    "probid": "814A",
    "subid": "48685706"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd with long longs a , b as arguments , returning long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return result of run gcd with b , a % b as arguments if b is true , else a , from function",
      "code": "return b ? gcd ( b , a % b ) : a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare lcm with long longs a , b as arguments , returning long long",
      "code": "long long lcm ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return ( a / result of run gcd with a , b as arguments ) * b from function",
      "code": "return a / gcd ( a , b ) * b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare powmod with long longs a , b , MOD as arguments , returning long long",
      "code": "long long powmod ( long long a , long long b , long long MOD )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "create long long ans with ans = 1",
      "code": "long long ans = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while b is true",
      "code": "while ( b )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if b % 2 , set ans to ans * a % MOD",
      "code": "if ( b % 2 ) ans = ans * a % MOD ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set a to a * a % MOD",
      "code": "a = a * a % MOD ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set b to b / 2",
      "code": "b /= 2 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return ans from function",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "declare inline getInt with integer pointer p as argument , returning void",
      "code": "inline void getInt ( int * p ) ;",
      "indent": 0
    },
    {
      "line": 16,
      "text": "create constant integer maxn with maxn = 1000010",
      "code": "const int maxn = 1000010 ;",
      "indent": 0
    },
    {
      "line": 17,
      "text": "create constant integer inf with inf = 0x3f3f3f3f",
      "code": "const int inf = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 18,
      "text": "create integers n , k",
      "code": "int n , k ;",
      "indent": 0
    },
    {
      "line": 19,
      "text": "create integer array a with size maxn",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 20,
      "text": "create integer array b with size maxn",
      "code": "int b [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 1 to n inclusive , read a [ j ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for j = 1 to k inclusive , read b [ j ]",
      "code": "for ( int j = 1 ; j <= k ; j ++ ) { cin >> b [ j ] ; }",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if k is greater than or equal to 2",
      "code": "if ( k >= 2 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" Yes \" print newline",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "create integer ok with ok = 0",
      "code": "int ok = 0 ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "create integer j with j = 1",
      "code": "int j = 1 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if a [ i ] is 0",
      "code": "if ( a [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 32,
      "text": "set j to i",
      "code": "j = i ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 35,
      "text": "if a [ i ] is greater than or equal to b [ i ] or a [ i ] is less than or equal to a [ i - 1 ] , set ok to 1",
      "code": "if ( a [ i ] >= b [ 1 ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "for i = j + 1 to n inclusive",
      "code": "for ( int i = j + 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "if a [ i ] is less than or equal to b [ i ] , set ok to 1",
      "code": "if ( a [ i ] <= b [ 1 ] ) ok = 1 ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "for i = j + 2 to n inclusive",
      "code": "for ( int i = j + 2 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if a [ i ] is less than or equal to a [ i - 1 ] , set ok to 1",
      "code": "if ( a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if ok is true",
      "code": "if ( ok )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "print \" Yes \" print newline",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 47,
      "text": "print \" No \" print newline",
      "code": "cout << \" No \" << endl ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 51,
      "text": "declare getInt with integer pointer p as argument , returning void",
      "code": "inline void getInt ( int * p )",
      "indent": 0
    },
    {
      "line": 52,
      "text": "create character ch",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "start loop ( set ch to read character ) while ( ch is ' ' or ch is ' \\ n ' )",
      "code": "do { ch = getchar ( ) ; } while ( ch == ' ' || ch == ' \\n ' ) ;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "if ch is ' - '",
      "code": "if ( ch == ' - ' )",
      "indent": 1
    },
    {
      "line": 55,
      "text": "set value of p to - ( read character - ' 0 ' )",
      "code": "* p = - ( getchar ( ) - ' 0 ' ) ;",
      "indent": 2
    },
    {
      "line": 56,
      "text": "while set ch to read character is greater than or equal to ' 0 ' and ch is less than or equal to ' 9 ' , set value of p to value of p * 10 - ch + ' 0 '",
      "code": "while ( ( ch = getchar ( ) ) >= ' 0 ' && ch <= ' 9 ' ) { * p = * p * 10 - ch + ' 0 ' ; }",
      "indent": 2
    },
    {
      "line": 57,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 58,
      "text": "set value of p to ch - ' 0 '",
      "code": "* p = ch - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 59,
      "text": "while set ch to read character is greater than or equal to ' 0 ' and ch is less than or equal to ' 9 ' , set value of p to value of p * 10 + ch - ' 0 '",
      "code": "while ( ( ch = getchar ( ) ) >= ' 0 ' && ch <= ' 9 ' ) { * p = * p * 10 + ch - ' 0 ' ; }",
      "indent": 2
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "inline void getInt ( int * p )"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        55
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        58
      ],
      "mod_code": [
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 58,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 59,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return b ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long powmod ( long long a , long long b , long long MOD ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "return ans )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "const inf = 0x3f3f3f3f ;"
      ],
      "err_line": 17,
      "err_msg": "‘inf’ does not name a type"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n , k ;"
      ],
      "err_line": 18,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int s [ maxn ] ;"
      ],
      "err_line": 23,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int s [ maxn ] ;"
      ],
      "err_line": 24,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ j ] ; }"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "ok = 0 ;"
      ],
      "err_line": 28,
      "err_msg": "‘ok’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "j = 1 ;"
      ],
      "err_line": 29,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "for ( i = j + 1 ; i <= n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "for ( i = j + 2 ; i <= n ; i ++ )"
      ],
      "err_line": 41,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "void getInt ( int * p ) ;"
      ],
      "err_line": 52,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "char ch [ 100 ] ;"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘char [100]’"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "do { ch = getchar ( ) ; }"
      ],
      "err_line": 54,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        54
      ],
      "mod_code": [
        "if ( ch is ' - ' )"
      ],
      "err_line": 54,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        55
      ],
      "mod_code": [
        "p = - ( ( getchar ( ) - ' 0 ' ) ) ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "while ( ch >= ' 9 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 58,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        58
      ],
      "mod_code": [
        "p = ( ch - ' 0 ' ) ;"
      ],
      "err_line": 58,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "while ( ch >= ' 9 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 59,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        35
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        35,
        55
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        35,
        56
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        35,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        35,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        55
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        55,
        56
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        55,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        55,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        56
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        56,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        56,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        58,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        23,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        55
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        55,
        56
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        55,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        55,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        56
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        56,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        56,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        58,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        35,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        55
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        55,
        56
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        55,
        56,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        55,
        56,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        55,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        55,
        58,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        55,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        56
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        56,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        56,
        58,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        56,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        58
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        58,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        59
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        23,
        35
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        55
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        55,
        56
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        55,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        55,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        56
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        56,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        56,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        58,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        35,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        55
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        55,
        56
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        55,
        56,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        55,
        56,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        55,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        55,
        58,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        55,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        56
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        56,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        56,
        58,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        56,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        58,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        59
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ j ] ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        35,
        55
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        55,
        56
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        55,
        56,
        58
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        55,
        56,
        59
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        55,
        58
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        55,
        58,
        59
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        55,
        59
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        56
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        35,
        56,
        58
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        35,
        56,
        58,
        59
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        35,
        56,
        59
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        35,
        58
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 58,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        58,
        59
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 58,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        59
      ],
      "mod_code": [
        "if ( a [ i ] >= b [ i ] || a [ i ] <= a [ i - 1 ] ) ok = 1 ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 59,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        55,
        56
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        55,
        56,
        58
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        55,
        56,
        58,
        59
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        55,
        56,
        59
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        55,
        58
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        55,
        58,
        59
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        55,
        59
      ],
      "mod_code": [
        "p = - ( getchar ( ) - ' 0 ' ) ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        56,
        58
      ],
      "mod_code": [
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        56,
        58,
        59
      ],
      "mod_code": [
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        56,
        59
      ],
      "mod_code": [
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 - ch + ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 56,
      "err_msg": "invalid operands of types ‘int*’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        58,
        59
      ],
      "mod_code": [
        "p = ch - ' 0 ' ;",
        "while ( ch >= ' 0 ' && ch <= ' 9 ' ) p = p * p * 10 + ch - ' 0 ' ;"
      ],
      "err_line": 58,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    }
  ]
}