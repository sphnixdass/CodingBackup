{
  "meta": {
    "index": 1202,
    "hitid": "329E6HTMSWW35N5FEK7DCA0I2DLK35",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "629A",
    "subid": "38622445"
  },
  "lines": [
    {
      "line": 0,
      "text": "n = int",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = 105x105 char matrix",
      "code": "char a [ 105 ] [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read the first n elements of a",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "all = 0 , sum be ints",
      "code": "int all = 0 , sum ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "reset sum to 0",
      "code": "sum = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] [ j ] = ' C ' then increment sum",
      "code": "if ( a [ i ] [ j ] == ' C ' ) sum ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment all by half of ( sum - 1 ) * sum",
      "code": "all += ( sum - 1 ) * sum / 2 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "reset sum to 0",
      "code": "sum = 0 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if a [ j ] [ i ] = ' C ' then increment sum",
      "code": "if ( a [ j ] [ i ] == ' C ' ) sum ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment all by ( sum - 1 ) * sum / 2",
      "code": "all += ( sum - 1 ) * sum / 2 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print all",
      "code": "cout << all << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 110 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        18
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        18,
        12
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        18,
        0
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "bool n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        18,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        0
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        0
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "bool n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        0,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "all += ( sum - 1 ) * sum ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "cout << \" all \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        12
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        12,
        0
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        12,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        0
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "cout << \" all \" << endl ;",
        "bool n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        0,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "cout << \" all \" << endl ;",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "cout << \" all \" << endl ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        0
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        0,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "bool n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        0,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "char a [ 110 ] ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        18,
        12
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        12,
        0
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        12,
        13
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        0,
        13
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        13
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "cout << \" all \" << endl ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12,
        0
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12,
        0,
        13
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12,
        13
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        0,
        13
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "all += ( sum - 1 ) * sum ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        12,
        0
      ],
      "mod_code": [
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        12,
        0,
        13
      ],
      "mod_code": [
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        12,
        13
      ],
      "mod_code": [
        "cout << \" all \" << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        0,
        13
      ],
      "mod_code": [
        "cout << \" all \" << endl ;",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        13
      ],
      "mod_code": [
        "cout << \" all \" << endl ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        0,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "bool n ;",
        "memset ( sum , 0 , sizeof ( sum ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    }
  ]
}