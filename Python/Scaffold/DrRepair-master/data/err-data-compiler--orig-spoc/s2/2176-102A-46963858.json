{
  "meta": {
    "index": 2176,
    "hitid": "32LAQ1JNT9JM708LNDH60ADEY3VTUR",
    "workerid": "A1APYLD4DUK33J",
    "probid": "102A",
    "subid": "46963858"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer array a size 110 by 110 = { 0 }",
      "code": "int a [ 110 ] [ 110 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer ax size 110 = { 0 }",
      "code": "int ax [ 110 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive , read ax [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> ax [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integers a1 , a2",
      "code": "int a1 , a2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read a1 , a2",
      "code": "cin >> a1 >> a2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "decrement a1 by 1",
      "code": "a1 -= 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "decrement a2 by 1",
      "code": "a2 -= 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "let a [ a1 ] [ a2 ] be 1",
      "code": "a [ a1 ] [ a2 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "let a [ a2 ] [ a1 ] be 1",
      "code": "a [ a2 ] [ a1 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "declare integer min = 99999999",
      "code": "int min = 99999999 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "declare boolean y = 0",
      "code": "bool y = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to n - 2 exclusive",
      "code": "for ( int i = 0 ; i < n - 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j = i + 1 to n - 1 exclusive",
      "code": "for ( int j = i + 1 ; j < n - 1 ; j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for k = j + 1 to n exclusive",
      "code": "for ( int k = j + 1 ; k < n ; k ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] [ i ] is 3",
      "code": "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] [ i ] == 3 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "declare minx = ax [ i ] + ax [ j ] + ax [ k ] as integer",
      "code": "int minx = ax [ i ] + ax [ j ] + ax [ k ] ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "if minx is less than min",
      "code": "if ( minx < min )",
      "indent": 5
    },
    {
      "line": 22,
      "text": "let min be minx",
      "code": "min = minx ;",
      "indent": 6
    },
    {
      "line": 23,
      "text": "let y be 1",
      "code": "y = 1 ;",
      "indent": 6
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if y is true",
      "code": "if ( y )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print min and newline",
      "code": "cout << min << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print - 1 and newline",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int l , m ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int n , a2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘a1’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int a [ a1 ] [ a2 ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "bool y = l ;"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( k = j + 1 ; k < n ; k ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] [ i ] == 3 )"
      ],
      "err_line": 20,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "minx = ax [ i ] + ax [ j ] + ax [ k ] ;"
      ],
      "err_line": 20,
      "err_msg": "‘minx’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        16
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16,
        2
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16,
        2,
        6
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16,
        2,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        16,
        2,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "int min = minx ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16,
        6
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16,
        6,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        16,
        6,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        16,
        4,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        16,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "cin >> n , m ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2,
        6
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2,
        6,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        2,
        6,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "cin >> n , m ;",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        2,
        4,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "cin >> n , m ;",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        2,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "cin >> n , m ;",
        "int min = minx ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        6,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        6,
        4,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        6,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        4,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] + a [ j ] [ k ] + a [ k ] == 3 )",
        "int min = minx ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        2,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        2,
        6,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        16,
        2,
        6,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        2,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        16,
        2,
        4,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        16,
        2,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "cin >> n , m ;",
        "int min = minx ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        6,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        16,
        6,
        4,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        16,
        6,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "for ( i = 0 ; i < m ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        16,
        4,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 2 ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        4
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        2,
        6,
        4,
        22
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        2,
        6,
        22
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( i = 0 ; i < m ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "cin >> n , m ;",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        2,
        4,
        22
      ],
      "mod_code": [
        "cin >> n , m ;",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        6,
        4,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    },
    {
      "mod_line": [
        6,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )",
        "int min = minx ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "int ax = { 0 } = { 0 } ;",
        "int min = minx ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘;’ before ‘=’ token"
    }
  ]
}