{
  "meta": {
    "index": 1815,
    "hitid": "3D42WVSDH8PT54AP2U96MR4Q3I0YFO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "569A",
    "subid": "36182977"
  },
  "lines": [
    {
      "line": 0,
      "text": "create new integer constant called maxn with value 2e3 + 10",
      "code": "const int maxn = 2e3 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant integer eps = 1e - 14",
      "code": "const int eps = 1e-14 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "mod is a new constant integer with value 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare long long constant inf = 1e18",
      "code": "const long long inf = 1e18 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "define integers t , s and p",
      "code": "int t , s , p ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read standard input to t , s and p",
      "code": "cin >> t >> s >> p ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "cnt is a new integer with value 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while s < t",
      "code": "while ( s < t )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "multiply s by p",
      "code": "s *= p ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "add 1 to cnt",
      "code": "++ cnt ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "s *= s ;",
        "const int maxn + 2e3 + 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        9,
        0,
        12
      ],
      "mod_code": [
        "s *= s ;",
        "const int maxn + 2e3 + 10 ;",
        "cout << cnt ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        9,
        0,
        12,
        8
      ],
      "mod_code": [
        "s *= s ;",
        "const int maxn + 2e3 + 10 ;",
        "cout << cnt ;",
        "while ( s < t ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        9,
        0,
        12,
        6
      ],
      "mod_code": [
        "s *= s ;",
        "const int maxn + 2e3 + 10 ;",
        "cout << cnt ;",
        "cin >> t , s >> p ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        9,
        0,
        8
      ],
      "mod_code": [
        "s *= s ;",
        "const int maxn + 2e3 + 10 ;",
        "while ( s < t ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        9,
        0,
        8,
        6
      ],
      "mod_code": [
        "s *= s ;",
        "const int maxn + 2e3 + 10 ;",
        "while ( s < t ) ;",
        "cin >> t , s >> p ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        9,
        0,
        6
      ],
      "mod_code": [
        "s *= s ;",
        "const int maxn + 2e3 + 10 ;",
        "cin >> t , s >> p ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;",
        "cout << cnt ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        12,
        8
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;",
        "cout << cnt ;",
        "while ( s < t ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        12,
        8,
        6
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;",
        "cout << cnt ;",
        "while ( s < t ) ;",
        "cin >> t , s >> p ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        12,
        6
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;",
        "cout << cnt ;",
        "cin >> t , s >> p ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;",
        "while ( s < t ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        8,
        6
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;",
        "while ( s < t ) ;",
        "cin >> t , s >> p ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "const int maxn + 2e3 + 10 ;",
        "cin >> t , s >> p ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘+’ token"
    }
  ]
}