{
  "meta": {
    "index": 1004,
    "hitid": "304QEQWKZPEQEMRXTPHNHTJKJ6CO0Z",
    "workerid": "AIWEXPJAU66D9",
    "probid": "760A",
    "subid": "38826596"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare int variables m and n",
      "code": "int m , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read m and n from the user input",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if m is one of : 1 , 3 , 5 , 7 , 8 , 10 or 12",
      "code": "if ( m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n = 6 or 7",
      "code": "if ( n == 6 || n == 7 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print 6",
      "code": "cout << 6 << endl ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print 5",
      "code": "cout << 5 << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if m is 4 , 6 , 9 or 11",
      "code": "if ( m == 4 || m == 6 || m == 9 || m == 11 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if n = 7",
      "code": "if ( n == 7 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print 6 to the output",
      "code": "cout << 6 << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print 5",
      "code": "cout << 5 << endl ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if m is 2",
      "code": "if ( m == 2 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if n is equal to 1",
      "code": "if ( n == 1 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print 4 to the output stream",
      "code": "cout << 4 << endl ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print 5",
      "code": "cout << 5 << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int m and n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "puts ( 4 ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        3,
        16,
        1
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "int m and n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        16,
        1,
        15
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "if ( ! m )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        16,
        1,
        6
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        16,
        1,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        16,
        15
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "if ( ! m )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        3,
        16,
        15,
        6
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "if ( ! m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        16,
        15,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "if ( ! m )",
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        16,
        6
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        16,
        6,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        16,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( n == 1 ) return 1 ;",
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "int m and n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        15
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "int m and n ;",
        "if ( ! m )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        15,
        6
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "int m and n ;",
        "if ( ! m )",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        15,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "int m and n ;",
        "if ( ! m )",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "int m and n ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        6,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "int m and n ;",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "int m and n ;",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        15,
        6
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( ! m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        6,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( ! m )",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "if ( ! m )",
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "if ( m == 1 || m == 5 , 5 , 5 , 8 , 10 )",
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "int m and n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        1,
        15
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "if ( ! m )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        1,
        15,
        6
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "if ( ! m )",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        1,
        15,
        11
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "if ( ! m )",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        1,
        6
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        1,
        6,
        11
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        1,
        11
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "int m and n ;",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "if ( ! m )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        16,
        15,
        6
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "if ( ! m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15,
        6,
        11
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "if ( ! m )",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        15,
        11
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "if ( ! m )",
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        6,
        11
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "if ( n == 1 ) return 1 ;",
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int m and n ;",
        "if ( ! m )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        15,
        6
      ],
      "mod_code": [
        "int m and n ;",
        "if ( ! m )",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        15,
        6,
        11
      ],
      "mod_code": [
        "int m and n ;",
        "if ( ! m )",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        15,
        11
      ],
      "mod_code": [
        "int m and n ;",
        "if ( ! m )",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int m and n ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        6,
        11
      ],
      "mod_code": [
        "int m and n ;",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int m and n ;",
        "puts ( 6 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "if ( ! m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        6,
        11
      ],
      "mod_code": [
        "if ( ! m )",
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "if ( ! m )",
        "puts ( 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "n",
        "puts ( 6 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}