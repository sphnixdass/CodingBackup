{
  "meta": {
    "index": 1443,
    "hitid": "3CMIQF80GNKOD9QSARP8FZOBANE6QD",
    "workerid": "AIWEXPJAU66D9",
    "probid": "746A",
    "subid": "41455568"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers a , b , c , i , f and sum where f = 0",
      "code": "int a , b , c , i , f = 0 , sum ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set value of i to a",
      "code": "i = a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "start infinite loop",
      "code": "for ( ; ; )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( i * 2 < = b & & ( i * 2 * 2 ) < = c ) | | ( i = 0 )",
      "code": "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i == 0 ) )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "f = 1",
      "code": "f = 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "sum = i + ( i * 2 ) + ( i * 2 * 2 )",
      "code": "sum = i + ( i * 2 ) + ( i * 2 * 2 ) ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "decrease i by one",
      "code": "i -- ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print sum",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "* i = a ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 9,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        2
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        8
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "cin >> a , b >> c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        2,
        8
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "cin >> a , b >> c ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        2,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "cin >> a , b >> c ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "* i = a ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        8
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "cin >> a , b >> c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "cin >> a , b >> c ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "cin >> a , b >> c ;",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "cin >> a , b >> c ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int a , b , c , i , f , f = 0 ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        8
      ],
      "mod_code": [
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        7
      ],
      "mod_code": [
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        7
      ],
      "mod_code": [
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "* i = a ;",
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "* i = a ;",
        "cin >> a , b >> c ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        2,
        8
      ],
      "mod_code": [
        "* i = a ;",
        "cin >> a , b >> c ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        2,
        8,
        7
      ],
      "mod_code": [
        "* i = a ;",
        "cin >> a , b >> c ;",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "* i = a ;",
        "cin >> a , b >> c ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "* i = a ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        8,
        7
      ],
      "mod_code": [
        "* i = a ;",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "* i = a ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        2,
        8
      ],
      "mod_code": [
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;",
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        7
      ],
      "mod_code": [
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "cin >> a , b >> c ;",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        5,
        8,
        7
      ],
      "mod_code": [
        "if ( ( i * 2 <= b && ( i * 2 * 2 ) <= c ) || ( i = 0 ) )",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cin >> a , b >> c ;",
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        8,
        7
      ],
      "mod_code": [
        "cin >> a , b >> c ;",
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "break the ;",
        "sum += ( i * 2 ) + ( i * 2 * 2 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    }
  ]
}