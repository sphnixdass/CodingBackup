{
  "meta": {
    "index": 452,
    "hitid": "3I6NF2WGIGQ1HGW02CARTF6985UG5C",
    "workerid": "AIWEXPJAU66D9",
    "probid": "228A",
    "subid": "48687457"
  },
  "lines": [
    {
      "line": 0,
      "text": "inline character function small_letter with character argument ch",
      "code": "inline char small_letter ( char ch )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return ch + 32 if ch < 97 , or ch",
      "code": "return ( ch < 97 ) ? ch + 32 : ch ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let s be integer array with size 4",
      "code": "int s [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s [ 0 ] , s [ 1 ] , s [ 2 ] and s [ 3 ]",
      "code": "cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] >> s [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "sort array s",
      "code": "sort ( s , s + sizeof ( s ) / sizeof ( s [ 0 ] ) ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let ans and i be integers where ans = 0",
      "code": "int ans = 0 , i ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "increment ans if s [ 0 ] = s [ 1 ]",
      "code": "if ( s [ 0 ] == s [ 1 ] ) ans ++ ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "increment ans if s [ 2 ] = s [ 1 ]",
      "code": "if ( s [ 2 ] == s [ 1 ] ) ans ++ ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "increment ans if s [ 2 ] = s [ 3 ]",
      "code": "if ( s [ 2 ] == s [ 3 ] ) ans ++ ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "inline void small_letter ( char ch )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "sort ( s , s + n ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "inline void small_letter ( char ch )",
        "sort ( s , s + n ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "inline void small_letter ( char ch )",
        "sort ( s , s + n ) ;",
        "cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] >> s [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "inline void small_letter ( char ch )",
        "sort ( s , s + 3 ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "inline void small_letter ( char ch )",
        "sort ( s , s + 3 ) ;",
        "cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] >> s [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "inline void small_letter ( char ch )",
        "cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] >> s [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "sort ( s , s + n ) ;",
        "cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ] >> s [ 2 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}