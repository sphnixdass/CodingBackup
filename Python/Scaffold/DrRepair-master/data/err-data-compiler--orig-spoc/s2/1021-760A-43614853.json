{
  "meta": {
    "index": 1021,
    "hitid": "3PUV2Q8SV4Y0UC3I1W0WQG346W2DBD",
    "workerid": "AIWEXPJAU66D9",
    "probid": "760A",
    "subid": "43614853"
  },
  "lines": [
    {
      "line": 0,
      "text": "define function read that returns integer",
      "code": "int read ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new integer variables v = 0 and f = 1",
      "code": "int v = 0 , f = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create character c with value read from the input",
      "code": "char c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while c < 48 or c < 57",
      "code": "while ( c < 48 || 57 < c )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if c = ' - ' , change the value of f to - 1",
      "code": "if ( c == ' - ' ) f = - 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "change the value of c to character from the input",
      "code": "c = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while 48 < = c and c < = 57 , change v to ( v < < 3 ) + v + v + c - 48 and read the new value of c from the input",
      "code": "while ( 48 <= c && c <= 57 ) v = ( v << 3 ) + v + v + c - 48 , c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return v * f",
      "code": "return v * f ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "let m , d and flag be ints with flag = 0",
      "code": "int m , d , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "change m to the resulf of read ( )",
      "code": "m = read ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "assign the new value = read ( ) to d",
      "code": "d = read ( ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if m = 2",
      "code": "if ( m == 2 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if d is equal to 1",
      "code": "if ( d == 1 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print \" 4 \" and ' \\ n '",
      "code": "cout << \" 4 \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" 5 \" and ' \\ n '",
      "code": "cout << \" 5 \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if m = 1 or m = 3 or m = 5 or m = 7 or m = 8 or m = 10 or m = 12",
      "code": "if ( m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "change the value of flag to 1",
      "code": "flag = 1 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else if m ! = 2",
      "code": "else if ( m != 2 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if flag = 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if d > = 1 and d < = 5",
      "code": "if ( d >= 1 && d <= 5 )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print \" 5 \" and ' \\ n ' to the output",
      "code": "cout << \" 5 \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else if d = 6 or d = 7",
      "code": "else if ( d == 6 || d == 7 )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "print \" 6 \" and ' \\ n ' to the output stream",
      "code": "cout << \" 6 \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "else if flag = 0",
      "code": "else if ( flag == 0 )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "if d > = 1 and d < = 6",
      "code": "if ( d >= 1 && d <= 6 )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "print \" 5 \" and ' \\ n '",
      "code": "cout << \" 5 \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "else if d is equal to 7",
      "code": "else if ( d == 7 )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "print \" 6 \" and ' \\ n ' to the standard output",
      "code": "cout << \" 6 \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int read ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "c = from ;"
      ],
      "err_line": 5,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int m , d , d = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "m = read ( ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "d = read ( ( ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( d == 1 ) break ;"
      ],
      "err_line": 15,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "flag = l ;"
      ],
      "err_line": 24,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}