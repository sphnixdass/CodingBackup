{
  "meta": {
    "index": 1017,
    "hitid": "3OPLMF3EU5HLTXG7H33T0OB3WUILNQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "760A",
    "subid": "46550932"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and d",
      "code": "int n , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read variables n and d from the input",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n is equal to 2",
      "code": "if ( n == 2 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if d is equal to 1",
      "code": "if ( d == 1 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print \" 4 \"",
      "code": "cout << \" 4 \" ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" 5 \"",
      "code": "cout << \" 5 \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if n = 4 , 6 , 9 or 11",
      "code": "else if ( n == 4 || n == 6 || n == 9 || n == 11 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integer variable ans with value 5",
      "code": "int ans = 5 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if d is equal to 7 , increment ans by one",
      "code": "if ( d == 7 ) ans ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print ans",
      "code": "cout << ans ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create new integer ans with value 5",
      "code": "int ans = 5 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if d > = 6 , increment ans",
      "code": "if ( d >= 6 ) ans ++ ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print ans",
      "code": "cout << ans ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "n , d ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( d == 1 ) break ;"
      ],
      "err_line": 4,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "ans = 5 ;"
      ],
      "err_line": 9,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        12
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        5,
        7,
        15,
        12
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        7,
        15,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << \" 5 \" << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << \" 5 \" << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        7,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << \" 5 \" << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        5,
        11,
        15,
        12
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        11,
        15,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        5,
        11,
        12
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        11,
        12,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        11,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        5,
        15,
        12
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        15,
        12,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        15,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "cout << \" 4 \" << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        7,
        11,
        15,
        12
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        15,
        13
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        7,
        11,
        12
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        13
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        13
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        7,
        15,
        12
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15,
        12,
        13
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15,
        13
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        12,
        13
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "cout << \" 5 \" << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        11,
        15,
        12
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        12,
        13
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "cout << ans << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        13
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        12,
        13
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        12,
        13
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "cout << ans << endl ;",
        "const int ans = 5 ;"
      ],
      "err_line": 14,
      "err_msg": "increment of read-only variable ‘ans’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "n",
        "const int ans = 5 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}