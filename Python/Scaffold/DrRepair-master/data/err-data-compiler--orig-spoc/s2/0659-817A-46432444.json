{
  "meta": {
    "index": 659,
    "hitid": "3XBYQ44Z6PYZZ4XQIDW7IYYBIW4TWD",
    "workerid": "A1APYLD4DUK33J",
    "probid": "817A",
    "subid": "46432444"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer INF with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create long longs i , j , k , l , with k = 0 , l = 2",
      "code": "long long i , j , k = 0 , l = 2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long longs n , m , t , a , b , c , d , x , y",
      "code": "long long n , m , t , a , b , c , d , x , y ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a read b read c read d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read x read y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set a to absolute value of ( a - c )",
      "code": "a = abs ( a - c ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set b to absolute value of ( b - d )",
      "code": "b = abs ( b - d ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a % x is 0 and b % y is 0",
      "code": "if ( a % x == 0 && b % y == 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set a to a / x",
      "code": "a /= x ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set b to b / x",
      "code": "b /= y ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if ( a % 2 and b % 2 ) or ( a % 2 is 0 and b % 2 is 0 )",
      "code": "if ( ( a % 2 && b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        11,
        13
      ],
      "mod_code": [
        "b /= x ;",
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        11,
        13,
        0
      ],
      "mod_code": [
        "b /= x ;",
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        11,
        13,
        15
      ],
      "mod_code": [
        "b /= x ;",
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        11,
        0
      ],
      "mod_code": [
        "b /= x ;",
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        11,
        0,
        15
      ],
      "mod_code": [
        "b /= x ;",
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        11,
        15
      ],
      "mod_code": [
        "b /= x ;",
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "b /= x ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        0
      ],
      "mod_code": [
        "b /= x ;",
        "n",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        13,
        0,
        15
      ],
      "mod_code": [
        "b /= x ;",
        "n",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        13,
        15
      ],
      "mod_code": [
        "b /= x ;",
        "n",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "b /= x ;",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        0,
        15
      ],
      "mod_code": [
        "b /= x ;",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "b /= x ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        13,
        10
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "b = b / x ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        13,
        10,
        0
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "b = b / x ;",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11,
        13,
        10,
        15
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "b = b / x ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        13,
        0
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11,
        13,
        0,
        15
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10,
        0
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "b = b / x ;",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11,
        10,
        0,
        15
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "b = b / x ;",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11,
        10,
        15
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "b = b / x ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11,
        0,
        15
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "if ( ( a % 2 , b % 2 ) || ( a % 2 == 0 && b % 2 == 0 ) )",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "n",
        "b = b / x ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        10,
        0
      ],
      "mod_code": [
        "n",
        "b = b / x ;",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        10,
        0,
        15
      ],
      "mod_code": [
        "n",
        "b = b / x ;",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        10,
        15
      ],
      "mod_code": [
        "n",
        "b = b / x ;",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "n",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        15
      ],
      "mod_code": [
        "n",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "b = b / x ;",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        0,
        15
      ],
      "mod_code": [
        "b = b / x ;",
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "b = b / x ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    }
  ]
}