{
  "meta": {
    "index": 298,
    "hitid": "30IRMPJWDZDVOPQHPA89U83Y8R1KR9",
    "workerid": "AIWEXPJAU66D9",
    "probid": "735A",
    "subid": "41268800"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define integers n and k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and k from the user input",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read user input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "define integers m , f = 1 , ss = 0",
      "code": "int m , f = 1 , ss = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is equal to ' G ' or ' T '",
      "code": "if ( s [ i ] == ' G ' || s [ i ] == ' T ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "change the value of m to i",
      "code": "m = i ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "looping infinitely",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "increase m by k",
      "code": "m += k ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if s [ m ] is equal to ' T ' or ' G '",
      "code": "if ( s [ m ] == ' T ' || s [ m ] == ' G ' )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if s [ m ] = ' # ' or m + k > = n",
      "code": "if ( s [ m ] == ' # ' || m + k >= n )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "* m = i ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        19,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        14,
        19,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "* m = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        19,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        14,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "char s ;",
        "* m = i ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        14,
        3,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "char s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        14,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "* m = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        8,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "char s ;",
        "* m = i ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19,
        3,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "char s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "* m = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        8,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" NO \" ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;",
        "* m = i ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3,
        8,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "* m = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        19,
        3
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        19,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "char s ;",
        "* m = i ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        19,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "char s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        19,
        8
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "* m = i ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        19,
        8,
        2
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "cout << \" NO \" ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "char s ;",
        "* m = i ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        3,
        8,
        2
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "char s ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "char s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "* m = i ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        8,
        2
      ],
      "mod_code": [
        "if ( s [ m ] == ' T ' || s [ m ] == ' T ' )",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19,
        3
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        3,
        8
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "char s ;",
        "* m = i ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        3,
        8,
        2
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "char s ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        3,
        2
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "char s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        8
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "* m = i ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19,
        8,
        2
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "char s ;",
        "* m = i ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        2
      ],
      "mod_code": [
        "char s ;",
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "char s ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "* m = i ;",
        "cin >> n >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}