{
  "meta": {
    "index": 2564,
    "hitid": "38DCH97KHHW0145ZUAJXO3TGWEHQJS",
    "workerid": "A1APYLD4DUK33J",
    "probid": "24A",
    "subid": "45661041"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers n , a , b , c , sum , gtw with sum = 0 , gtw = 0",
      "code": "int n , a , b , c , sum = 0 , gtw = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d integer array edge with size 100 by 100",
      "code": "int edge [ 100 ] [ 100 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare ada_edge with no arguments , returning boolean",
      "code": "bool ada_edge ( )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create boolean ro with ro = 0",
      "code": "bool ro = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to n exclusive , set ro to ro or ( edge [ i ] [ j ] is not 0 )",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { ro = ro or ( edge [ i ] [ j ] != 0 ) ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return ro from function",
      "code": "return ro ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read a read b read c",
      "code": "cin >> a >> b >> c ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set sum to sum + c",
      "code": "sum = sum + c ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "decrement a",
      "code": "a -- ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "decrement b",
      "code": "b -- ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set edge [ a ] [ b ] to c",
      "code": "edge [ a ] [ b ] = c ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set a to 0",
      "code": "a = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while result of run ada_edge is true",
      "code": "while ( ada_edge ( ) )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "create integer ada_out_edge with ada_out_edge = 0",
      "code": "int ada_out_edge = 0 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "for i = 0 to n exclusive , set ada_out_edge to ada_out_edge or ( edge [ a ] [ i ] is not 0 )",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { ada_out_edge = ada_out_edge or ( edge [ a ] [ i ] != 0 ) ; }",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if ada_out_edge is true",
      "code": "if ( ada_out_edge )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if edge [ a ] [ i ] is not 0",
      "code": "if ( edge [ a ] [ i ] != 0 )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "set edge [ a ] [ i ] to 0",
      "code": "edge [ a ] [ i ] = 0 ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "set a to i",
      "code": "a = i ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 31,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 32,
      "text": "if edge [ i ] [ a ] is not 0",
      "code": "if ( edge [ i ] [ a ] != 0 )",
      "indent": 4
    },
    {
      "line": 33,
      "text": "set gtw to gtw + edge [ i ] [ a ]",
      "code": "gtw = gtw + edge [ i ] [ a ] ;",
      "indent": 5
    },
    {
      "line": 34,
      "text": "set edge [ i ] [ a ] to 0",
      "code": "edge [ i ] [ a ] = 0 ;",
      "indent": 5
    },
    {
      "line": 35,
      "text": "set a to i",
      "code": "a = i ;",
      "indent": 5
    },
    {
      "line": 36,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print minimum of gtw and sum - gtw print ' \\ n '",
      "code": "cout << min ( gtw , sum - gtw ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 34,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , a , b , c , sum = 0 , sum = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int sum’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int arr [ 100 ] [ 100 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘edge’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool ada_edge ( string ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool ro = l ;"
      ],
      "err_line": 3,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) { ro = ro [ i ] [ j ] ; }"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "return ro ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int edge [ a ] [ b ] = c ;"
      ],
      "err_line": 16,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "ada_out_edge = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘ada_out_edge’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "cout << min ( gtw - sum - gtw ) << ' \\n ' ;"
      ],
      "err_line": 41,
      "err_msg": "no matching function for call to ‘min(int)’"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        24,
        25
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        24,
        32
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        24,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        25
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        25,
        32
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        25,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "int edge [ a ] [ i ] = 0 ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        32
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        32,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        19,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "while ( ada_edge ( true ) )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ a ] [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        24,
        25
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        32
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        24,
        32
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ a ] [ i ] )",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        24,
        32,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ a ] [ i ] )",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        24,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        25
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        25,
        32
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        25,
        32,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        25,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "int edge [ a ] [ i ] = 0 ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        32
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        32,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        34
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ ) ro = ro [ i ] [ j ] ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        24,
        25
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        24,
        25,
        32
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        24,
        25,
        34
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        24,
        32
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        24,
        32,
        34
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        24,
        34
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        25
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        25,
        32
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        25,
        32,
        34
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        25,
        34
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "int edge [ a ] [ i ] = 0 ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        32
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        32,
        34
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        19,
        34
      ],
      "mod_code": [
        "while ( ada_edge ( true ) )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "too many arguments to function ‘bool ada_edge()’"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        25,
        32
      ],
      "mod_code": [
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        25,
        32,
        34
      ],
      "mod_code": [
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        25,
        34
      ],
      "mod_code": [
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ a ] [ i ] = 0 ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        32,
        34
      ],
      "mod_code": [
        "if ( ! edge [ a ] [ i ] )",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 34,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        34
      ],
      "mod_code": [
        "if ( ! edge [ a ] [ i ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 34,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        25,
        32
      ],
      "mod_code": [
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        25,
        32,
        34
      ],
      "mod_code": [
        "int edge [ a ] [ i ] = 0 ;",
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        25,
        34
      ],
      "mod_code": [
        "int edge [ a ] [ i ] = 0 ;",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        32,
        34
      ],
      "mod_code": [
        "if ( ! edge [ i ] [ a ] )",
        "int edge [ i ] [ a ] = 0 ;"
      ],
      "err_line": 34,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    }
  ]
}