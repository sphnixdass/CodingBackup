{
  "meta": {
    "index": 931,
    "hitid": "3566S7OX5DDJ05KG8M4LKCGZY9317K",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "146A",
    "subid": "48451323"
  },
  "lines": [
    {
      "line": 0,
      "text": "INF = const integer with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "PI = const double with PI = acos ( - 1 . 0 )",
      "code": "const double PI = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = cast to int ( 0 ) to cast to int ( n ) exclusive",
      "code": "for ( int i = int ( 0 ) ; i < int ( n ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] is not 4 and s [ i ] is not 7",
      "code": "if ( s [ i ] != ' 4 ' && s [ i ] != ' 7 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "r4 , r7 , l4 , l7 = integer with r4 = 0 , r7 = 0 , l4 = 0 , l7 = 0",
      "code": "int r4 = 0 , r7 = 0 , l4 = 0 , l7 = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = cast to int ( 0 ) to int ( n / 2 ) exclusive",
      "code": "for ( int i = int ( 0 ) ; i < int ( n / 2 ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if s [ i ] is 4",
      "code": "if ( s [ i ] == ' 4 ' )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment l4",
      "code": "l4 ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment l7",
      "code": "l7 ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = cast to int ( n / 2 ) to cast to int ( n ) exclusive",
      "code": "for ( int i = int ( n / 2 ) ; i < int ( n ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if s [ i ] is 4",
      "code": "if ( s [ i ] == ' 4 ' )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increment r4",
      "code": "r4 ++ ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "increment r7",
      "code": "r7 ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if r4 is l4 and r7 is l7",
      "code": "if ( r4 == l4 && r7 == l7 )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        21
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        21,
        4
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        21,
        6
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        21,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        4
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        4,
        6
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        4,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        6
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        6,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        0,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        13,
        21
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        13,
        21,
        4
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        13,
        21,
        4,
        6
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        21,
        4,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        13,
        21,
        6
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        21,
        6,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        21,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        13,
        4,
        6
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4,
        6,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "n = getchar ( ) ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        6,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "int r4 = 0 , r7 = 0 , l4 = 0 , l4 = 0 ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int l4’"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        4
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        4,
        6
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        4,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        6
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        6,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        4,
        6
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        4,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        6,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        21,
        4,
        6
      ],
      "mod_code": [
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        4,
        6,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == 4 )",
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        6
      ],
      "mod_code": [
        "if ( s [ i ] == 4 )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        6,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == 4 )",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        15
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == 4 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}