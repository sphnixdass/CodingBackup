{
  "meta": {
    "index": 1350,
    "hitid": "3RSBJ6YZECKHBQ6NW708K06OP80OF2",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "320A",
    "subid": "40989770"
  },
  "lines": [
    {
      "line": 0,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while ( n )",
      "code": "while ( n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if ( n modulo 10 is 1 )",
      "code": "if ( n % 10 == 1 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "n = n / 10",
      "code": "n /= 10 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if ( n modulo 100 is 14 )",
      "code": "else if ( n % 100 == 14 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "n = n / 100",
      "code": "n /= 100 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if ( n modulo 1000 is 144 )",
      "code": "else if ( n % 1000 == 144 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "n = n / 1000",
      "code": "n /= 1000 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( n ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "n",
        "n -= 100 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        7,
        3
      ],
      "mod_code": [
        "n",
        "n -= 100 ;",
        "while ( n ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        7,
        3,
        2
      ],
      "mod_code": [
        "n",
        "n -= 100 ;",
        "while ( n ) )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        7,
        3,
        6
      ],
      "mod_code": [
        "n",
        "n -= 100 ;",
        "while ( n ) )",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        7,
        2
      ],
      "mod_code": [
        "n",
        "n -= 100 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        7,
        2,
        6
      ],
      "mod_code": [
        "n",
        "n -= 100 ;",
        "n = getchar ( ) ;",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        7,
        6
      ],
      "mod_code": [
        "n",
        "n -= 100 ;",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "n",
        "while ( n ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        3,
        2
      ],
      "mod_code": [
        "n",
        "while ( n ) )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        3,
        2,
        6
      ],
      "mod_code": [
        "n",
        "while ( n ) )",
        "n = getchar ( ) ;",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        3,
        6
      ],
      "mod_code": [
        "n",
        "while ( n ) )",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "n",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "n -= 100 ;",
        "while ( n ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "n -= 100 ;",
        "while ( n ) )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        3,
        2,
        6
      ],
      "mod_code": [
        "n -= 100 ;",
        "while ( n ) )",
        "n = getchar ( ) ;",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        3,
        6
      ],
      "mod_code": [
        "n -= 100 ;",
        "while ( n ) )",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( n ) )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "while ( n ) )",
        "n = getchar ( ) ;",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( n ) )",
        "else if ( 100 % 100 == 14 )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}