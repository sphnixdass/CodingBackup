{
  "meta": {
    "index": 276,
    "hitid": "372AGES0I4Z18PPOOTNYK2B040BXR6",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1082A",
    "subid": "48950501"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer variable t",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t from the user input",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare long longs n , x , y and d",
      "code": "long long n , x , y , d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while t ! = 0 , decrement it and continue the loop",
      "code": "while ( t -- > 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read variables n , x , y and d from the input",
      "code": "cin >> n >> x >> y >> d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "arr is a new long long array with 3 elements - 1000000000 , 1000000000 and 1000000000",
      "code": "long long arr [ 3 ] = { 1000000000 , 1000000000 , 1000000000 } ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if ( y - 1 ) modulo d is equal to 0",
      "code": "if ( ( y - 1 ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "change arr [ 0 ] to x / ( d * 1 . 0 ) rounded up",
      "code": "arr [ 0 ] = ceil ( ( x ) / ( d * 1.0 ) ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "add ( ( y - 1 ) / ( d * 1 . 0 ) ) rounded up to arr [ 0 ]",
      "code": "arr [ 0 ] += ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if ( n - y ) % d = 0",
      "code": "if ( ( n - y ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "change arr [ 1 ] to ceil ( ( n - x ) / ( d * 1 . 0 ) )",
      "code": "arr [ 1 ] = ceil ( ( n - x ) / ( d * 1.0 ) ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increase arr [ 1 ] by rounded up result of ( ( n - y ) / ( d * 1 . 0 ) )",
      "code": "arr [ 1 ] += ceil ( ( n - y ) / ( d * 1.0 ) ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "w is a new integer with value = absolute value of x - y",
      "code": "int w = abs ( x - y ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if w % d = 0 , change arr [ 2 ] to w / d",
      "code": "if ( w % d == 0 ) { arr [ 2 ] = w / d ; }",
      "indent": 2
    },
    {
      "line": 17,
      "text": "sort 3 elements of arr",
      "code": "sort ( arr , arr + 3 ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if arr [ 0 ] is equal to 1000000000",
      "code": "if ( arr [ 0 ] == 1000000000 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print - 1 to the standard output",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print arr [ 0 ]",
      "code": "cout << arr [ 0 ] << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( ( n - y ) % d = 0 )"
      ],
      "err_line": 11,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "arr [ 1 ] = ceil ( ( ( n - x ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "sort ( arr . begin ( ) , arr . end ( ) ) ;"
      ],
      "err_line": 17,
      "err_msg": "request for member ‘begin’ in ‘arr’, which is of non-class type ‘long long int [3]’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        9,
        13,
        5
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        13,
        5
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        13,
        5,
        9
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        13,
        9
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5,
        9
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "cin >> n >> x , y >> d ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 , 1000000000 , 1000000000 } ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        13,
        5
      ],
      "mod_code": [
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        13,
        5,
        6
      ],
      "mod_code": [
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9,
        13,
        6
      ],
      "mod_code": [
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9,
        5,
        6
      ],
      "mod_code": [
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "arr [ 0 ] = ceil ( ( y - 1 ) / ( d * 1.0 ) ) ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        5,
        6
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        13,
        5,
        6,
        9
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        13,
        5,
        9
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "cin >> n >> x , y >> d ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        13,
        6,
        9
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "arr [ 1 ] += ceil ( ( ( n - y ) / ( d * 1.0 ) ) ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cin >> n >> x , y >> d ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "cin >> n >> x , y >> d ;",
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "cin >> n >> x , y >> d ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "long long arr [ 3 ] = { - 1000000000 } , 1000000000 [ 1000000000 ] ;",
        "arr [ 0 ] = cout << ( ( y - 1 ) / ( d * 1.0 ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before numeric constant"
    }
  ]
}