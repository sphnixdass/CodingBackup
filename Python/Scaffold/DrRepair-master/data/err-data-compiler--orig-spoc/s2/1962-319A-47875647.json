{
  "meta": {
    "index": 1962,
    "hitid": "31S7M7DAGGKJOALREZP59NHVLCVLTI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "319A",
    "subid": "47875647"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare const int INF = 1e9",
      "code": "const int INF = ( int ) 1e9 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare const long long INFl = 1e18",
      "code": "const long long INFl = ( long long ) 1e18 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare const long long MOD = 1e9 + 7",
      "code": "const long long MOD = ( long long ) 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "myPow is a long long function with long long arguments a and b",
      "code": "long long myPow ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare long long ret = 1",
      "code": "long long ret = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while b is not 0",
      "code": "while ( b )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if b & 1 is not 0 , change ret to ret * a % MOD",
      "code": "if ( b & 1 ) ret = ret * a % MOD ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "change a to ( a * a ) % MOD",
      "code": "a = ( a * a ) % MOD ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "divide b by 2",
      "code": "b /= 2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return ret % MOD",
      "code": "return ret % MOD ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "declare int variable N = length of s",
      "code": "int N = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "create long long ats = 0",
      "code": "long long ats = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to N exclusive",
      "code": "for ( int i = 0 ; i < N ; ++ i )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if s [ i ] - ' 0 ' = 1",
      "code": "if ( ( s [ i ] - ' 0 ' ) == 1 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "add myPow ( 2 , ( N - i - 1 ) ) to ats",
      "code": "ats += myPow ( 2 , ( N - i - 1 ) ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "ats = ats modulo MOD",
      "code": "ats %= MOD ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "assign ats * myPow ( 2 , N - 1 ) % MOD to ats",
      "code": "ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "ats = ats modulo MOD",
      "code": "ats %= MOD ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print ats and \" \\ n \"",
      "code": "cout << ats << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 14,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 23,
      "err_msg": "conflicting declaration ‘int ats’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        25,
        19
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        19,
        17
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        19,
        17,
        23
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        19,
        17,
        14
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        19,
        17,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        19,
        23
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 19,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        19,
        23,
        14
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        19,
        23,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        19,
        14
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        19,
        14,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        19,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        17
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        17,
        23
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        17,
        23,
        14
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        17,
        23,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        17,
        14
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        17,
        14,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        17,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        23
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 23,
      "err_msg": "conflicting declaration ‘int ats’"
    },
    {
      "mod_line": [
        25,
        23,
        14
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        23,
        14,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        23,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        14
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        14,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        7
      ],
      "mod_code": [
        "cout << ( ats << \" \\n \" ) ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        17
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        17,
        23
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        17,
        23,
        14
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        17,
        23,
        7
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        17,
        14
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        17,
        14,
        7
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        17,
        7
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "for ( i = 0 ; i < N ; i ++ )",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        23
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 19,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        23,
        14
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        23,
        14,
        7
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        23,
        7
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        14
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        14,
        7
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        7
      ],
      "mod_code": [
        "ats += myPow ( myPow , ( N - i - 1 ) ) ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        23,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        23,
        14,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        23,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )",
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        14,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        14
      ],
      "mod_code": [
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        14,
        7
      ],
      "mod_code": [
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        7
      ],
      "mod_code": [
        "int ats = ats * myPow ( 2 , N - 1 ) % MOD ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "a -= a ) % MOD ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}