{
  "meta": {
    "index": 334,
    "hitid": "3V7ICJJAZAANUGKP8LZ3NC9YTJ8B4X",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "735A",
    "subid": "40207162"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , k , i",
      "code": "int n , k , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if str [ i ] = T or str [ i ] = G",
      "code": "if ( str [ i ] == ' T ' || str [ i ] == ' G ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = i + k to n inclusive , with increment i = i + k",
      "code": "for ( i = i + k ; i <= n ; i = i + k )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if str [ i ] = T or str [ i ] = G",
      "code": "if ( str [ i ] == ' T ' || str [ i ] == ' G ' )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "else if str [ i ] = .",
      "code": "else if ( str [ i ] == ' . ' )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "continue",
      "code": "continue ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 14,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int int n , k , i ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘n’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string str << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        8,
        13
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        8,
        13,
        11
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        7,
        8,
        13,
        6
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        7,
        8,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "else if ( str [ i ] == endl )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        13,
        11
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "n",
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        7,
        13,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "n",
        "else if ( str [ i ] == endl )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        7,
        13,
        6
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "n",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = i + k ; i <= n ; i += k )",
        "else if ( str [ i ] == endl )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        11
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8,
        13,
        11,
        7
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "else if ( str [ i ] == endl )",
        "for ( int i = i + k ; i <= n ; i = i + k )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8,
        13,
        11,
        6
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "else if ( str [ i ] == endl )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8,
        13,
        7
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "for ( int i = i + k ; i <= n ; i = i + k )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        7,
        6
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "for ( int i = i + k ; i <= n ; i = i + k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        6
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "n",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8,
        11,
        7
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "else if ( str [ i ] == endl )",
        "for ( int i = i + k ; i <= n ; i = i + k )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8,
        11,
        7,
        6
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "else if ( str [ i ] == endl )",
        "for ( int i = i + k ; i <= n ; i = i + k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8,
        11,
        6
      ],
      "mod_code": [
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )",
        "else if ( str [ i ] == endl )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "n",
        "else if ( str [ i ] == endl )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        13,
        11,
        7
      ],
      "mod_code": [
        "n",
        "else if ( str [ i ] == endl )",
        "for ( int i = i + k ; i <= n ; i = i + k )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        13,
        11,
        7,
        6
      ],
      "mod_code": [
        "n",
        "else if ( str [ i ] == endl )",
        "for ( int i = i + k ; i <= n ; i = i + k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        13,
        11,
        6
      ],
      "mod_code": [
        "n",
        "else if ( str [ i ] == endl )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "n",
        "for ( int i = i + k ; i <= n ; i = i + k )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        7,
        6
      ],
      "mod_code": [
        "n",
        "for ( int i = i + k ; i <= n ; i = i + k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "n",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "else if ( str [ i ] == endl )",
        "for ( int i = i + k ; i <= n ; i = i + k )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        11,
        7,
        6
      ],
      "mod_code": [
        "else if ( str [ i ] == endl )",
        "for ( int i = i + k ; i <= n ; i = i + k )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "else if ( str [ i ] == endl )",
        "if ( str [ i ] == ' T ' || str [ i ] == ' T ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator==’"
    }
  ]
}