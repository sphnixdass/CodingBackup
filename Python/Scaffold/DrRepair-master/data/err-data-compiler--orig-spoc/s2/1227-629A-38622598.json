{
  "meta": {
    "index": 1227,
    "hitid": "3TD33TP5DLW2W506HM9U0FVYLT4AB7",
    "workerid": "AIWEXPJAU66D9",
    "probid": "629A",
    "subid": "38622598"
  },
  "lines": [
    {
      "line": 0,
      "text": "define new constant integer maxn with value 1e5 + 10",
      "code": "const int maxn = 1e5 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function C with int argument x that returns int",
      "code": "int C ( int x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if x is 0 , return 0",
      "code": "if ( ! x ) return 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return x * ( x - 1 ) / 2",
      "code": "return x * ( x - 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare new integers n and ans where ans = 0",
      "code": "int n , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create new array of strings s with size 101",
      "code": "string s [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create an arrays of integers fa , cntc and cntr with 101 element",
      "code": "int fa [ 101 ] , cntc [ 101 ] , cntr [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set first sizeof ( cntc ) bytes at the pointer cntc to 0",
      "code": "memset ( cntc , 0 , sizeof ( cntc ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set the values of first sizeof ( cntr ) bytes at the pointer cntr to 0",
      "code": "memset ( cntr , 0 , sizeof ( cntr ) ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read user input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n elements from from the input to array s",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "in a for loop , change j from 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] [ j ] is equal to ' C '",
      "code": "if ( s [ i ] [ j ] == ' C ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment cntc [ i ]",
      "code": "cntc [ i ] ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "increment cntr [ j ] by one",
      "code": "cntr [ j ] ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "in a for loop , change i from 0 to n exclusive , and set ans to the sum of ans and C ( cntc [ i ] ) + C ( cntr [ i ] ) on each iteration",
      "code": "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc [ i ] ) + C ( cntr [ i ] ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int C ( int x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "memset ( cntc , 0 ) ;"
      ],
      "err_line": 9,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C , C ( cntc [ i ] ) ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        20
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        20,
        10
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        20,
        10,
        7
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        20,
        10,
        17
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        20,
        10,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        20,
        7
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        20,
        7,
        17
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        20,
        7,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "101 [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        20,
        17
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        20,
        17,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        20,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "memset ( cntr , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10,
        7
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        7,
        17
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        7,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        17
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "memset ( cntr , 0 ) ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10,
        17,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "memset ( cntr , 0 ) ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "memset ( cntr , 0 ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        7,
        17
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        7,
        17,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        7,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "101 [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        17,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "int fa [ 101 ] , cntc [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘cntr’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        20,
        10,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        10,
        7,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        10,
        7,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        10,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        20,
        10,
        17,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        20,
        10,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "memset ( cntr , 0 ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        20,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        7,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        7,
        17,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        7,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "101 [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        17,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) ans += C ( cntc , C ( cntc [ i ] ) + C [ i ] ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        7,
        17
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        7,
        17,
        11
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        7,
        11
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;",
        "101 [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        17,
        11
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "memset ( cntr , 0 ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        11
      ],
      "mod_code": [
        "101 [ 101 ] ;",
        "cntr [ j ++ ] ++ ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "101 [ 101 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}