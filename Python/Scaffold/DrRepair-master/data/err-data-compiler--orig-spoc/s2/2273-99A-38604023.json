{
  "meta": {
    "index": 2273,
    "hitid": "3RIHDBQ1NESDPJCHEH9VVHTWANWHMC",
    "workerid": "A1APYLD4DUK33J",
    "probid": "99A",
    "subid": "38604023"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare desperate_optimization with integer precision as argument , returning void",
      "code": "void desperate_optimization ( int precision )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set cout flag ios : : fixed",
      "code": "cout . setf ( ios :: fixed ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set cout flag ios : : showpoint",
      "code": "cout . setf ( ios :: showpoint ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set cout precision to precision",
      "code": "cout . precision ( precision ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "run desperate_optimization ( 10 )",
      "code": "desperate_optimization ( 10 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integer ada = 0",
      "code": "int ada = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare integer num = 0",
      "code": "int num = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare integer dotted = 0",
      "code": "int dotted = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s [ 0 ] is ' - ' , abort program if 0 is false",
      "code": "if ( s [ 0 ] == ' - ' ) assert ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if s [ i ] is ' . '",
      "code": "if ( s [ i ] == ' . ' )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "let dotted be 1",
      "code": "dotted = 1 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "end current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if dotted is 1",
      "code": "if ( dotted == 1 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if num is 9",
      "code": "if ( num == 9 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "print \" GOTO Vasilisa . \" and \" \\ n \"",
      "code": "cout << \" GOTO Vasilisa. \" << ' \\n ' ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if s [ i ] is greater than or equal to ' 5 ' , let ada be 1",
      "code": "if ( s [ i ] >= ' 5 ' ) ada = 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increment num be ada",
      "code": "num += ada ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "for j = 0 to i - 2 exclusive , print s [ j ]",
      "code": "for ( int j = 0 ; j < i - 2 ; j ++ ) cout << s [ j ] ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "print num and ' \\ n '",
      "code": "cout << num << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 29,
      "text": "let num be s [ i ] - ' 0 '",
      "code": "num = s [ i ] - ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print s and ' \\ n '",
      "code": "cout << s << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "cout << ios fixed ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void desperate_optimization ( int precision ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cout . set ( ios :: showpoint ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘std::ostream {aka class std::basic_ostream<char>}’ has no member named ‘set’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cout . setf ( precision ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::fmtflags {aka std::_Ios_Fmtflags}’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "ada = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘ada’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "num = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "dotted = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘dotted’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 28,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "cout << s << \" \\n ' ;"
      ],
      "err_line": 32,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        12
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "if ( s [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        12,
        13
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        12,
        15
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "if ( s [ 0 ] == ' - ' )",
        "int dotted = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        12,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "if ( s [ 0 ] == ' - ' )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        13
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        13,
        15
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        13,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        15
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "int dotted = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        15,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "int dotted = 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        24,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "num = ada + 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "if ( s [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        12,
        13
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        15
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        12,
        15
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "if ( s [ 0 ] == ' - ' )",
        "int dotted = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        12,
        15,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "if ( s [ 0 ] == ' - ' )",
        "int dotted = 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        12,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "if ( s [ 0 ] == ' - ' )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        13,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "int dotted = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        15,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "int dotted = 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "cout << ios fixed ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘fixed’"
    },
    {
      "mod_line": [
        24,
        12,
        13
      ],
      "mod_code": [
        "num = ada + 1 ;",
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        12,
        13,
        15
      ],
      "mod_code": [
        "num = ada + 1 ;",
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        12,
        13,
        29
      ],
      "mod_code": [
        "num = ada + 1 ;",
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        13
      ],
      "mod_code": [
        "num = ada + 1 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        13,
        15
      ],
      "mod_code": [
        "num = ada + 1 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        13,
        15,
        29
      ],
      "mod_code": [
        "num = ada + 1 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        13,
        29
      ],
      "mod_code": [
        "num = ada + 1 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        15
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        15,
        29
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        29
      ],
      "mod_code": [
        "if ( s [ 0 ] == ' - ' )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "int dotted = 1 ;",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "char num = s [ i ] - ' 0 ' ;"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}