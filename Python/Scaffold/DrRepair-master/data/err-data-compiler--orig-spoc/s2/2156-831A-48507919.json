{
  "meta": {
    "index": 2156,
    "hitid": "3E9VAUV7BW8Y9DTHRENE8QTZ5FKAY9",
    "workerid": "A1APYLD4DUK33J",
    "probid": "831A",
    "subid": "48507919"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long INF with INF = 1e18",
      "code": "const long long INF = 1e18 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with integers a , b as arguments",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if b is 0 , return a from function",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return result of run gcd with b , a % b as arguments",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create integers n , pos with pos = 0",
      "code": "int n , pos = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer array arr with size n",
      "code": "int arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n exclusive , read arr [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create integers l , r , with l = 0 , r = n - 1",
      "code": "int l = 0 , r = n - 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while arr [ l ] is less than arr [ l + 1 ] and l is less than n - 1 , increment l",
      "code": "while ( arr [ l ] < arr [ l + 1 ] && l < n - 1 ) l ++ ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while arr [ r ] is less than arr [ r - 1 ] and r is greater than 0 , decrement r",
      "code": "while ( arr [ r ] < arr [ r - 1 ] && r > 0 ) r -- ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = l to r exclusive",
      "code": "for ( int i = l ; i < r ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if arr [ i ] is not arr [ i + 1 ]",
      "code": "if ( arr [ i ] != arr [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" NO \"",
      "code": "cout << \" NO \"",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" YES \"",
      "code": "cout << \" YES \"",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int a [ n ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" NO \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << \" YES \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        20
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        20,
        16
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        20,
        16,
        0
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        20,
        16,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        20,
        16,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        20,
        0
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        20,
        0,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        20,
        0,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "const long long const INF = 1e18 ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        20,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        20,
        7,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        20,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        0
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        16,
        0,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        16,
        0,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        16,
        7,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        0,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        0,
        7,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        0,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "const long long const INF = 1e18 ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        7,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        16
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        20,
        16,
        0
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        20,
        16,
        0,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        20,
        16,
        0,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        20,
        16,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        20,
        16,
        7,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        16,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        20,
        0,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        20,
        0,
        7,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        20,
        0,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "const long long const INF = 1e18 ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        20,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        7,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        7
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        7,
        13
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        13
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "const long long const INF = 1e18 ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16,
        7,
        13
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        7,
        13
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = l ; i < r ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}