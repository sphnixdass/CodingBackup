{
  "meta": {
    "index": 1751,
    "hitid": "374UMBUHN5JQL6RL1MW664R8R3PCT1",
    "workerid": "A1AYVATMT88U1W",
    "probid": "897A",
    "subid": "41621131"
  },
  "lines": [
    {
      "line": 0,
      "text": "let read be a inline stream that reads a integer",
      "code": "inline int read ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let x , f be integers with x = 0 , f = 1",
      "code": "int x = 0 , f = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a character and return its value to ch",
      "code": "char ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while ch is less than 0 or 9 is less than ch",
      "code": "while ( ch < ' 0 ' || ' 9 ' < ch )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if ch is equal to - , f is equal to - 1",
      "code": "if ( ch == ' - ' ) f = - 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read a character and return its value to ch",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while 0 < = ch and ch < = 0",
      "code": "while ( ' 0 ' <= ch && ch <= ' 9 ' )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "x is equal to x * 10 + ch - 0",
      "code": "x = x * 10 + ch - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read a character and return its value to ch",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return the value of x * f",
      "code": "return x * f ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "let n , m be integers",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 14,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 15,
      "text": "let l1 , l2 be integers",
      "code": "int l1 , l2 ;",
      "indent": 0
    },
    {
      "line": 16,
      "text": "let c1 , c2 be characters",
      "code": "char c1 , c2 ;",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "read a integer and assign to n",
      "code": "n = read ( ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read a integer and assign to m",
      "code": "m = read ( ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "read a integer and assign to l1",
      "code": "l1 = read ( ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "read a integer and assign to l2",
      "code": "l2 = read ( ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "shift the value of c1 to the right",
      "code": "cin >> c1 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "shift the value of c2 to the right",
      "code": "cin >> c2 ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "for j = l1 - 1 to l2 exclusive , increment j by 1",
      "code": "for ( int j = l1 - 1 ; j < l2 ; j ++ )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if s [ j ] is equal to c1 , s [ j ] is equal to c2",
      "code": "if ( s [ j ] == c1 ) s [ j ] = c2 ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print s and newline",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "inline void read ( )"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int x , f = 1 , f = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> ch ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( ch == \" - \" ) f = - 1 ;"
      ],
      "err_line": 4,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 20,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "l1 , l2 ;"
      ],
      "err_line": 15,
      "err_msg": "‘l1’ does not name a type"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "char ans , c2 ;"
      ],
      "err_line": 24,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cin >> a ;"
      ],
      "err_line": 23,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        5
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        7
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        7
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        22,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        22,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        22,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        7
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( ch < 0 || ch < ch )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        8,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        8,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        8,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        8,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        8,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        22,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        22,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        22,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        22,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        22,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        22,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        9,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        9,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        9,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        9,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        22,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        22,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        22,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        22,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        22,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        22,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "inline void read ( )",
        "cin >> a ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "inline void read ( )",
        "c1 >> c1 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "inline void read ( )",
        "c2 >> right ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "inline void read ( )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( ch < 0 || ch < ch )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        22,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        22,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        22,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        8
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        9
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        9
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        22,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        22,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        22,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        24,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        24,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        25,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        9
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        22,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        22,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        22,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        24,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        7,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        7,
        25,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        8,
        9
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        22,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        22,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        22,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        24,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        8,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        8,
        25,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        22,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        22,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        22,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        24,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        24,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        25,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        24
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        24,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        24,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        25,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        24,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        24,
        25,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        25,
        27
      ],
      "mod_code": [
        "while ( ch < 0 || ch < ch )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "while ( 0 <= ch && ch <= 0 )",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "x = x * 10 + ch - 0 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        9
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        22
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        24
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        22
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        22,
        24
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        22,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        22,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        24,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        8,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        8,
        25,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        22
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        22,
        24
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        22,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        22,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        24
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        24,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        24,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        25,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        22,
        24
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        22,
        24,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        22,
        24,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        22,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        22,
        25,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        22,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        24,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        24,
        25,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        25
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        25,
        27
      ],
      "mod_code": [
        "while ( 0 <= ch && ch <= 0 )",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        22
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        22,
        24
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        22,
        25
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        22,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        24
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        24,
        25
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        24,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        25
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        25,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        22,
        24
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        22,
        24,
        25
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        22,
        24,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        22,
        25
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        22,
        25,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        22,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        24,
        25
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        24,
        25,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        25,
        27
      ],
      "mod_code": [
        "x = x * 10 + ch - 0 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        22,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        24,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        24,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        24,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        25
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c2 >> right ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        25,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        27
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        24
      ],
      "mod_code": [
        "cin >> a ;",
        "c1 >> c1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        24,
        25
      ],
      "mod_code": [
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        24,
        25,
        27
      ],
      "mod_code": [
        "cin >> a ;",
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        24,
        27
      ],
      "mod_code": [
        "cin >> a ;",
        "c1 >> c1 ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        25
      ],
      "mod_code": [
        "cin >> a ;",
        "c2 >> right ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        25,
        27
      ],
      "mod_code": [
        "cin >> a ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        27
      ],
      "mod_code": [
        "cin >> a ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "c1 >> c1 ;",
        "c2 >> right ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        24,
        25,
        27
      ],
      "mod_code": [
        "c1 >> c1 ;",
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        25,
        27
      ],
      "mod_code": [
        "c2 >> right ;",
        "if ( s [ j ] == ' c1 ' ) s [ j ] = c2 ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char’ and ‘std::ios_base&(std::ios_base&)’ to binary ‘operator>>’"
    }
  ]
}