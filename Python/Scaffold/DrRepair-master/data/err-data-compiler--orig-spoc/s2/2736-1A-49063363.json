{
  "meta": {
    "index": 2736,
    "hitid": "3MYASTQBG75NYI57KEXML5Y3SWTQDS",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "1A",
    "subid": "49063363"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b , c , d = integers",
      "code": "long long a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read a , b , c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if c is greater than or equal to a and c is greater than or equal to b",
      "code": "if ( c >= a && c >= b )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print 1 and a new line",
      "code": "cout << \" 1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if c is less than a and c is greater than or equal to b",
      "code": "if ( c < a && c >= b )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a modulo c is 0",
      "code": "if ( a % c == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print a / c and a new line",
      "code": "cout << a / c << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print a / c + 1 and a new line",
      "code": "cout << a / c + 1 << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if c is greater than or equal to a and c is less than b",
      "code": "if ( c >= a && c < b )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if b modulo c is 0",
      "code": "if ( b % c == 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print b / c and a new line",
      "code": "cout << b / c << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print b / c + 1 and a new line",
      "code": "cout << b / c + 1 << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if c is less than a and c is less than b",
      "code": "if ( c < a && c < b )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if b modulo c is 0 and a modulo c is 0",
      "code": "if ( b % c == 0 && a % c == 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print ( a * b ) / ( c * c ) and a new line",
      "code": "cout << ( a * b ) / ( c * c ) << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else if b modulo c is not 0 and a modulo c is 0",
      "code": "else if ( b % c != 0 && a % c == 0 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print ( a / c ) * ( b / c + 1 ) and a new line",
      "code": "cout << ( a / c ) * ( b / c + 1 ) << endl ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else if b modulo c is 0 and a modulo c is not 0",
      "code": "else if ( b % c == 0 && a % c != 0 )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print ( b / c ) * ( a / c + 1 ) and a new line",
      "code": "cout << ( b / c ) * ( a / c + 1 ) << endl ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print ( a / c + 1 ) * ( b / c + 1 ) and a new line",
      "code": "cout << ( a / c + 1 ) * ( b / c + 1 ) << endl ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        10
      ],
      "mod_code": [
        "else do",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        10,
        2
      ],
      "mod_code": [
        "else do",
        "else do",
        "cin >> a >> b , c ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        10,
        2,
        28
      ],
      "mod_code": [
        "else do",
        "else do",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        10,
        28
      ],
      "mod_code": [
        "else do",
        "else do",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "else do",
        "cin >> a >> b , c ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        2,
        28
      ],
      "mod_code": [
        "else do",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        28
      ],
      "mod_code": [
        "else do",
        "else do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "else do",
        "cin >> a >> b , c ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        2,
        28
      ],
      "mod_code": [
        "else do",
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        28
      ],
      "mod_code": [
        "else do",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        28
      ],
      "mod_code": [
        "cin >> a >> b , c ;",
        "else do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}