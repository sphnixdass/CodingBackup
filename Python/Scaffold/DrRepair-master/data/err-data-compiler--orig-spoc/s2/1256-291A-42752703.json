{
  "meta": {
    "index": 1256,
    "hitid": "3WPCIUYH1A20QYXZ1IRHQA9QC3YDTZ",
    "workerid": "A1AYVATMT88U1W",
    "probid": "291A",
    "subid": "42752703"
  },
  "lines": [
    {
      "line": 0,
      "text": "let getNextGap be a function that accepts integer gap and returns integer values",
      "code": "int getNextGap ( int gap )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "gap is equal to ( gap * 10 ) / 13",
      "code": "gap = ( gap * 10 ) / 13 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if gap is less than 1 , return 1",
      "code": "if ( gap < 1 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return the value of gap",
      "code": "return gap ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let combSort be a void funcion that accepts long integer array a , long integer n",
      "code": "void combSort ( long long int a [ ] , long long int n )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let gap be a integer with gap = n",
      "code": "int gap = n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set boolean value swapped to true",
      "code": "bool swapped = true ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while gap is not equal to 1 or swapped is equal to true",
      "code": "while ( gap != 1 || swapped == true )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "gap is equal to getNextGap ( gap )",
      "code": "gap = getNextGap ( gap ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "swapped is equal to false",
      "code": "swapped = false ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i = 0 to n - gap exclusive",
      "code": "for ( int i = 0 ; i < n - gap ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if a [ i ] is greater than a [ i + gap ]",
      "code": "if ( a [ i ] > a [ i + gap ] )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "swap the values a [ i ] , a [ i + gap ]",
      "code": "swap ( a [ i ] , a [ i + gap ] ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "swapped is equal to true",
      "code": "swapped = true ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 20,
      "text": "let numberOfElements be a long integer",
      "code": "long long int numberOfElements ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "read numberOfElements",
      "code": "cin >> numberOfElements ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "arr = array of long integers of length numberOfElements",
      "code": "long long int arr [ numberOfElements ] ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 0 to numberOfElements exclusive , read arr [ i ]",
      "code": "for ( int i = 0 ; i < numberOfElements ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 24,
      "text": "combSort the values of arr , numberOfElements",
      "code": "combSort ( arr , numberOfElements ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "let counter be a integer with counter = 0",
      "code": "int counter = 0 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 0 to numberOfElements exclusive",
      "code": "for ( int i = 0 ; i < numberOfElements ; i ++ )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if arr [ i ] is equal to 0 , proceed to next",
      "code": "if ( arr [ i ] == 0 ) { continue ; }",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if arr [ i ] is equal to arr [ i + 1 ]",
      "code": "if ( arr [ i ] == arr [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "increment counter by 1",
      "code": "counter ++ ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if arr [ i + 1 ] is equal to arr [ i + 2 ]",
      "code": "if ( arr [ i + 1 ] == arr [ i + 2 ] )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "print - 1 and newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "print counter and newline",
      "code": "cout << counter << endl ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "getNextGap ( gap ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gap = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘gap’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "bool swapped to true ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - gap ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "swap ( a [ i ] ) , a [ i + gap ] ;"
      ],
      "err_line": 13,
      "err_msg": "no matching function for call to ‘swap(long long int&)’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "max ( arr , numberOfElements ) ;"
      ],
      "err_line": 24,
      "err_msg": "no matching function for call to ‘max(long long int [numberOfElements], long long int&)’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "counter = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "‘counter’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        26
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        26,
        5
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        26,
        5,
        12
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        26,
        5,
        3
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "exit ( gap ) ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        26,
        5,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        26,
        12
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        26,
        12,
        3
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        26,
        12,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        26,
        3
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "exit ( gap ) ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        26,
        3,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        26,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "void funcion ( long long a [ ] , long long n )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        5,
        12
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        5,
        12,
        3
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        5,
        12,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        5,
        3
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "void funcion ( long long a [ ] , long long n )",
        "exit ( gap ) ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        5,
        3,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "void funcion ( long long a [ ] , long long n )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        5,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "void funcion ( long long a [ ] , long long n )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        12
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        12,
        3
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        12,
        3,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        12,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        3
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "exit ( gap ) ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        3,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        24,
        21
      ],
      "mod_code": [
        "cin >> arr , numberOfElements ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [numberOfElements]’)"
    },
    {
      "mod_line": [
        26,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        5,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        5,
        12,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        5,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        5,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "exit ( gap ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        5,
        3,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        5,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "void funcion ( long long a [ ] , long long n )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        12,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        12,
        3,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "exit ( gap ) ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        3,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < numberOfElements ; i ++ )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        12,
        3
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        12,
        3,
        21
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        12,
        21
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )",
        "if ( a [ i ] ] > a [ i + gap ] )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )",
        "exit ( gap ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3,
        21
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "void funcion ( long long a [ ] , long long n )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 24,
      "err_msg": "‘combSort’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        3,
        21
      ],
      "mod_code": [
        "if ( a [ i ] ] > a [ i + gap ] )",
        "exit ( gap ) ;",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "if ( a [ i ] ] > a [ i + gap ] )",
        "numberOfElements >> numberOfElements ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}