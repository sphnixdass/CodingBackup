{
  "meta": {
    "index": 631,
    "hitid": "33TGB4G0LPBEO42GSISTKHCIRYATX6",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "817A",
    "subid": "44757235"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "x1 , y1 , x2 , y2 , x , y = integers",
      "code": "int x1 , y1 , x2 , y2 , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read x1 , y1 , x2 , y2 , x , y",
      "code": "cin >> x1 >> y1 >> x2 >> y2 >> x >> y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a , b , c , d = integers",
      "code": "int a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set a to absolute value of x1 - x2",
      "code": "a = abs ( x1 - x2 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set b to absolute value of y1 - y2",
      "code": "b = abs ( y1 - y2 ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set c to a / x",
      "code": "c = a / x ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set d to b / y",
      "code": "d = b / y ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set c to c modulo 2",
      "code": "c %= 2 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set d to c modulo 2",
      "code": "d %= 2 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if a modulo x is equal to 0 and b modulo y is equal to 0 and c is equal to d",
      "code": "if ( a % x == 0 && b % y == 0 && c == d )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print YES",
      "code": "cout << \" YES \"",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print a new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print NO",
      "code": "cout << \" NO \"",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print a new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        12,
        14
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        12,
        14,
        9
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        12,
        14,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        12,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        12,
        15,
        9
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        12,
        15,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        14,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        14,
        15,
        9
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        14,
        15,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        14,
        9
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        14,
        9,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        14,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15,
        9
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15,
        9,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        15,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        9,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        14,
        15
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        9
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        14,
        9
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        14,
        9,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        14,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        15,
        9
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        15,
        9,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        15,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "cout << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        9,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        9,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        9
      ],
      "mod_code": [
        "cout << endl ;",
        "d = c % 2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        9,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "d = c % 2 ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "cout << endl ;",
        "cin >> x1 >> y1 >> x2 >> y2 >> x , y ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}