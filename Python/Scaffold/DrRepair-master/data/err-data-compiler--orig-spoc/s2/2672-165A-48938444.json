{
  "meta": {
    "index": 2672,
    "hitid": "38F60IALAGB6REW5P63MB3P7IEKT0H",
    "workerid": "AIWEXPJAU66D9",
    "probid": "165A",
    "subid": "48938444"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long longs i , j , n , l , r , u , d , x and y",
      "code": "long long i , j , n , l , r , u , d , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and keep looping",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare an arrays of long longs X and Y with size n + 1",
      "code": "long long X [ n + 1 ] , Y [ n + 1 ] ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "loop i from 0 to n exclusive , read X [ i ] and Y [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) { cin >> X [ i ] >> Y [ i ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "declare long long variable point = 0",
      "code": "long long point = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign set r to assign change d to 0 to u to l",
      "code": "l = r = u = d = 0 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "change x to X [ i ]",
      "code": "x = X [ i ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "change y to Y [ i ]",
      "code": "y = Y [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "loop j from 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if X [ j ] = x",
      "code": "if ( X [ j ] == x )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if Y [ j ] is greater than y , increment u by one",
      "code": "if ( Y [ j ] > y ) u ++ ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "if Y [ j ] is less than y , increment d",
      "code": "if ( Y [ j ] < y ) d ++ ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if Y [ j ] = y",
      "code": "if ( Y [ j ] == y )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if X [ j ] is greater than x , increment r",
      "code": "if ( X [ j ] > x ) r ++ ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "if X [ j ] is less than x , increment l",
      "code": "if ( X [ j ] < x ) l ++ ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if l , r , d and u are all > 0 , increment point by one",
      "code": "if ( l > 0 && r > 0 && d > 0 && u > 0 ) point ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print point",
      "code": "cout << point << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long X [ n + 1 ] , X [ n + 1 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int X [(((ssizetype)n) + 1)]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        7,
        20,
        11,
        8
      ],
      "mod_code": [
        "u = d = d = 0 ;",
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "if ( ! X [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        7,
        20,
        15,
        8
      ],
      "mod_code": [
        "u = d = d = 0 ;",
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "if ( ! Y [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        7,
        20,
        8
      ],
      "mod_code": [
        "u = d = d = 0 ;",
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        7,
        11,
        15,
        8
      ],
      "mod_code": [
        "u = d = d = 0 ;",
        "if ( ! X [ j ] )",
        "if ( ! Y [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        7,
        11,
        8
      ],
      "mod_code": [
        "u = d = d = 0 ;",
        "if ( ! X [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        7,
        15,
        8
      ],
      "mod_code": [
        "u = d = d = 0 ;",
        "if ( ! Y [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "u = d = d = 0 ;",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        20,
        11,
        15,
        8
      ],
      "mod_code": [
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "if ( ! X [ j ] )",
        "if ( ! Y [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        20,
        11,
        8
      ],
      "mod_code": [
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "if ( ! X [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        20,
        11,
        8,
        7
      ],
      "mod_code": [
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "if ( ! X [ j ] )",
        "x %= X ;",
        "u = d = 0 , d = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        20,
        15,
        8
      ],
      "mod_code": [
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "if ( ! Y [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        20,
        15,
        8,
        7
      ],
      "mod_code": [
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "if ( ! Y [ j ] )",
        "x %= X ;",
        "u = d = 0 , d = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        20,
        8
      ],
      "mod_code": [
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        20,
        8,
        7
      ],
      "mod_code": [
        "if ( l > 0 && r > 0 && d == 0 ) point ++ ;",
        "x %= X ;",
        "u = d = 0 , d = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        11,
        15,
        8
      ],
      "mod_code": [
        "if ( ! X [ j ] )",
        "if ( ! Y [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        11,
        15,
        8,
        7
      ],
      "mod_code": [
        "if ( ! X [ j ] )",
        "if ( ! Y [ j ] )",
        "x %= X ;",
        "u = d = 0 , d = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "if ( ! X [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        11,
        8,
        7
      ],
      "mod_code": [
        "if ( ! X [ j ] )",
        "x %= X ;",
        "u = d = 0 , d = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "if ( ! Y [ j ] )",
        "x %= X ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        15,
        8,
        7
      ],
      "mod_code": [
        "if ( ! Y [ j ] )",
        "x %= X ;",
        "u = d = 0 , d = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "x %= X ;",
        "u = d = 0 , d = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid use of non-lvalue array"
    }
  ]
}