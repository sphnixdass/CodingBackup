{
  "meta": {
    "index": 955,
    "hitid": "3Z56AA6EK4UXSUS0IYIRYQ4619E6MY",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "146A",
    "subid": "48209587"
  },
  "lines": [
    {
      "line": 0,
      "text": "a , b , c , d , e , f , g , h , i , j , k , l , m , n , o , p , q , r = integers",
      "code": "int a , b , c , d , e , f , g , h , i , j , k , l , m , n , o , p , q , r ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read a , s",
      "code": "cin >> a >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "ok = bool with ok = 1",
      "code": "bool ok = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for q = 0 to a exclusive",
      "code": "for ( int q = 0 ; q < a ; q ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ q ] is not 4 and s [ q ] is not 7",
      "code": "if ( s [ q ] != ' 4 ' && s [ q ] != ' 7 ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "ok = 0",
      "code": "ok = 0 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if not ok",
      "code": "if ( not ok )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for q = 0 to a exclusive",
      "code": "for ( int q = 0 ; q < a ; q ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if q < ( a + 1 ) / 2",
      "code": "if ( q < ( a + 1 ) / 2 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "d = d + ( cast to int ) s [ q ]",
      "code": "d += ( int ) s [ q ] ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "c = c + ( cast to int ) s [ q ]",
      "code": "c += ( int ) s [ q ] ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if ( d is c )",
      "code": "if ( d == c )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( d == c ) )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "cin >> a , s ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        18
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "cin >> a , s ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        22
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "cin >> a , s ;",
        "if ( d == c ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "cin >> a , s ;",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        18
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        18,
        22
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "n",
        "if ( d == c ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        18,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "n",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        22
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "if ( d == c ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        22,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "string S ;",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "cin >> a , s ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3,
        18
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "cin >> a , s ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3,
        18,
        22
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "cin >> a , s ;",
        "n",
        "if ( d == c ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3,
        18,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "cin >> a , s ;",
        "n",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3,
        22
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "cin >> a , s ;",
        "if ( d == c ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "cin >> a , s ;",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "cin >> a , s ;",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        18,
        22
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "n",
        "if ( d == c ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        18,
        22,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "n",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        18,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "n",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "if ( d == c ) )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        22,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f , g , h , i , j , k , i , m , n , o , p , q , r ;",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string S ;",
        "cin >> a , s ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        18
      ],
      "mod_code": [
        "string S ;",
        "cin >> a , s ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        18,
        22
      ],
      "mod_code": [
        "string S ;",
        "cin >> a , s ;",
        "n",
        "if ( d == c ) )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        18,
        6
      ],
      "mod_code": [
        "string S ;",
        "cin >> a , s ;",
        "n",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        22
      ],
      "mod_code": [
        "string S ;",
        "cin >> a , s ;",
        "if ( d == c ) )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        22,
        6
      ],
      "mod_code": [
        "string S ;",
        "cin >> a , s ;",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "string S ;",
        "cin >> a , s ;",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "string S ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        22
      ],
      "mod_code": [
        "string S ;",
        "n",
        "if ( d == c ) )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        22,
        6
      ],
      "mod_code": [
        "string S ;",
        "n",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        6
      ],
      "mod_code": [
        "string S ;",
        "n",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "string S ;",
        "if ( d == c ) )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        22,
        6
      ],
      "mod_code": [
        "string S ;",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string S ;",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "cin >> a , s ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        18,
        22
      ],
      "mod_code": [
        "cin >> a , s ;",
        "n",
        "if ( d == c ) )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        18,
        22,
        6
      ],
      "mod_code": [
        "cin >> a , s ;",
        "n",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        18,
        6
      ],
      "mod_code": [
        "cin >> a , s ;",
        "n",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "cin >> a , s ;",
        "if ( d == c ) )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        22,
        6
      ],
      "mod_code": [
        "cin >> a , s ;",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        22
      ],
      "mod_code": [
        "n",
        "if ( d == c ) )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        22,
        6
      ],
      "mod_code": [
        "n",
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        6
      ],
      "mod_code": [
        "n",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        6
      ],
      "mod_code": [
        "if ( d == c ) )",
        "if ( s [ q ] != 4 && s [ q ] != ' 7 ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}