{
  "meta": {
    "index": 2791,
    "hitid": "3YLTXLH3DF0JAM9U6X1NCLNRFS8PHH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "900A",
    "subid": "48953905"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n is a new integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "define new integers a and b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "define new integers cnt1 and cnt2 = 0",
      "code": "int cnt1 = 0 , cnt2 = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "loop , decrementing n while n is not 0",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read user input to a and b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a is greater than 0 , increment cnt1",
      "code": "if ( a > 0 ) cnt1 ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment cnt2 if a is less than 0",
      "code": "if ( a < 0 ) cnt2 ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if cnt1 or cnt2 < = 1",
      "code": "if ( cnt1 <= 1 || cnt2 <= 1 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" Yes \" to the output stream",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" No \" to the stdout",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        12
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "int cnt1 = 0 , cnt2 ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        12,
        6
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "cin >> n >> b ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        12,
        5
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "while ( n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        12,
        4
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12,
        6
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "n",
        "cin >> n >> b ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12,
        6,
        5
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "n",
        "cin >> n >> b ;",
        "while ( n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12,
        6,
        4
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "n",
        "cin >> n >> b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12,
        5
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "n",
        "while ( n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12,
        5,
        4
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "n",
        "while ( n )",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        12,
        4
      ],
      "mod_code": [
        "if ( cnt1 || cnt2 <= 1 )",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        6
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "cin >> n >> b ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        6,
        5
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "cin >> n >> b ;",
        "while ( n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        6,
        4
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "cin >> n >> b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        5
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "while ( n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        5,
        4
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "while ( n )",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12,
        4
      ],
      "mod_code": [
        "int cnt1 = 0 , cnt2 ;",
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "n",
        "cin >> n >> b ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        6,
        5
      ],
      "mod_code": [
        "n",
        "cin >> n >> b ;",
        "while ( n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        6,
        5,
        4
      ],
      "mod_code": [
        "n",
        "cin >> n >> b ;",
        "while ( n )",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        6,
        4
      ],
      "mod_code": [
        "n",
        "cin >> n >> b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "n",
        "while ( n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        5,
        4
      ],
      "mod_code": [
        "n",
        "while ( n )",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}