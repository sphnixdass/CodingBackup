{
  "meta": {
    "index": 1612,
    "hitid": "3UDTAB6HH6TN7ZNRR0Y5K3OVO7J90Z",
    "workerid": "AIWEXPJAU66D9",
    "probid": "913A",
    "subid": "48326608"
  },
  "lines": [
    {
      "line": 0,
      "text": "long long function fun with long long argument n",
      "code": "long long fun ( long long n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long ans",
      "code": "long long ans = ( long long ) 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare long long x",
      "code": "long long x = ( long long ) 2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while n > 0",
      "code": "while ( n > 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n is odd , multiply ans by x",
      "code": "if ( n % 2 != 0 ) { ans = ans * x ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "assign x squared to x",
      "code": "x = x * x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "assign n / 2 to n",
      "code": "n = n / 2 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare long longs n and m",
      "code": "long long n , m ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if n > = m or n > = 27",
      "code": "if ( n >= m || n >= 27 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "declare long long t = fun ( n )",
      "code": "long long t = fun ( n ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print m % t",
      "code": "cout << m % t << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "long long t += fun ( n ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "long long x ;",
        "ans = ans ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "long long x ;",
        "cout << ' m ' ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "long long x ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "long long x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "ans = ans ;",
        "cout << ' m ' ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "ans = ans ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "ans = ans ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14,
        5,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "cout << ' m ' ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "cout << ' m ' ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        5,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "long long ans ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        0
      ],
      "mod_code": [
        "long long x ;",
        "ans = ans ;",
        "cout << ' m ' ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        5,
        0
      ],
      "mod_code": [
        "long long x ;",
        "ans = ans ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "long long x ;",
        "ans = ans ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        5,
        0
      ],
      "mod_code": [
        "long long x ;",
        "cout << ' m ' ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        0
      ],
      "mod_code": [
        "long long x ;",
        "cout << ' m ' ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        0
      ],
      "mod_code": [
        "long long x ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "long long x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        14,
        5,
        0
      ],
      "mod_code": [
        "ans = ans ;",
        "cout << ' m ' ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        14,
        0
      ],
      "mod_code": [
        "ans = ans ;",
        "cout << ' m ' ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        5,
        0
      ],
      "mod_code": [
        "ans = ans ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "ans = ans ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        5,
        0
      ],
      "mod_code": [
        "cout << ' m ' ;",
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        0
      ],
      "mod_code": [
        "cout << ' m ' ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "x = x % x ;",
        "long long fun ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}