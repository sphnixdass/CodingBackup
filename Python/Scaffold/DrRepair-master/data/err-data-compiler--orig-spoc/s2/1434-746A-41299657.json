{
  "meta": {
    "index": 1434,
    "hitid": "309D674SHZFQPKX4105L6ALMK9OCBZ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "746A",
    "subid": "41299657"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers l , a , p , count1 with count1 = 0",
      "code": "int l , a , p , count1 = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "end statement",
      "code": ";",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read l read a read p",
      "code": "cin >> l >> a >> p ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while l and a and p",
      "code": "while ( l && a && p )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if p - 4 is greater than or equal to 0",
      "code": "if ( p - 4 >= 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "decrement p by 4",
      "code": "p -= 4 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if a - 2 is greater than or equal to 0",
      "code": "if ( a - 2 >= 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "decrement a by 2",
      "code": "a -= 2 ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "decrement l",
      "code": "l -- ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "increment count1 by 7",
      "code": "count1 += 7 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set a to 0",
      "code": "a = 0 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set p to 0",
      "code": "p = 0 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print count1 print \" \\ n \"",
      "code": "cout << count1 << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int l , a , p , p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "<< endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "<< endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2,
        16
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        2,
        16,
        10
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        2,
        16,
        14
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        2,
        10
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "<< endl ;",
        "count1 = count1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2,
        10,
        14
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "<< endl ;",
        "count1 = count1 ++ ;",
        "int p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2,
        14
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "<< endl ;",
        "int p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "cout << count1 << \" \\n count1 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        16,
        10
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        16,
        10,
        14
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        16,
        14
      ],
      "mod_code": [
        "while ( cin >> l >> p )",
        "cout << count1 << \" \\n count1 ;",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        16,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        16,
        10,
        4
      ],
      "mod_code": [
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;",
        "while ( ! l && a && p )"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        16,
        10,
        14
      ],
      "mod_code": [
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        16,
        4
      ],
      "mod_code": [
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "while ( ! l && a && p )"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        16,
        4,
        14
      ],
      "mod_code": [
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "while ( ! l && a && p )",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        16,
        14
      ],
      "mod_code": [
        "<< endl ;",
        "cout << count1 << \" \\n count1 ;",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "count1 = count1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        10,
        4
      ],
      "mod_code": [
        "<< endl ;",
        "count1 = count1 ++ ;",
        "while ( ! l && a && p )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        10,
        4,
        14
      ],
      "mod_code": [
        "<< endl ;",
        "count1 = count1 ++ ;",
        "while ( ! l && a && p )",
        "int p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        10,
        14
      ],
      "mod_code": [
        "<< endl ;",
        "count1 = count1 ++ ;",
        "int p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "<< endl ;",
        "while ( ! l && a && p )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "<< endl ;",
        "while ( ! l && a && p )",
        "int p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "<< endl ;",
        "int p = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        10,
        4
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;",
        "while ( ! l && a && p )"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        10,
        4,
        14
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;",
        "while ( ! l && a && p )",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        10,
        14
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;",
        "count1 = count1 ++ ;",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        4
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;",
        "while ( ! l && a && p )"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        4,
        14
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;",
        "while ( ! l && a && p )",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        14
      ],
      "mod_code": [
        "cout << count1 << \" \\n count1 ;",
        "int p = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "missing terminating \" character"
    }
  ]
}