{
  "meta": {
    "index": 792,
    "hitid": "3R15W654VDN6WUTZXVVA4I680I1LQY",
    "workerid": "A1AYVATMT88U1W",
    "probid": "225A",
    "subid": "24848009"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , sum , vv , p be integers , sum = 1 and p = 0",
      "code": "int n , sum = 1 , vv , p = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let s , l , k , nn be strings",
      "code": "string s , l , k , nn ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a line in nn",
      "code": "getline ( cin , nn ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a line in k",
      "code": "getline ( cin , k ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let stringstream ( nn ) > > n",
      "code": "stringstream ( nn ) >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let stringstream ( k ) > > sum",
      "code": "stringstream ( k ) >> sum ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read a line in l",
      "code": "getline ( cin , l ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to i < n - 1 exclusively",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read a line in s",
      "code": "getline ( cin , s ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "stringstream my ( s ) is declared",
      "code": "stringstream my ( s ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "while my is shifted right to vv",
      "code": "while ( my >> vv )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if ( sum = = vv | | ( 7 - sum ) = = vv ) , increment the value of p by 1",
      "code": "if ( sum == vv || ( 7 - sum ) == vv ) { p ++ ; }",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "7 - sum is assigned to sum",
      "code": "sum = 7 - sum ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if p is greater than 0",
      "code": "if ( p > 0 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print NO and endline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else do this",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print YES and endline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘==’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( my + right ) vv ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’ and ‘std::ios_base&(std::ios_base&)’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p , p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s , l , v , nn ;"
      ],
      "err_line": 4,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "getline ( nn , nn ) ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::__cxx11::string&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "stringstream ( nn >= n ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "stringstream ( k >= sum ) ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "stringstream my ( s ) == declared ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘==’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( my + right ) vv . substr ( right ) ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’ and ‘std::ios_base&(std::ios_base&)’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else this"
      ],
      "err_line": 18,
      "err_msg": "invalid use of ‘this’ in non-member function"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        10
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( nn >> > n ) ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( k >> sum ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( k >> sum ) ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( k >> sum ) ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream ( k >> sum ) ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "stringstream my ( s ) == ' declared ' ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        11,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , sum = 0 , vv , p , p = 0 ;",
        "cin >> l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        11
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        7
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "cin >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        7
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream ( k >> sum ) ;",
        "cin >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        10,
        11
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        10,
        11,
        7
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        10,
        7
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "cin >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        11,
        7
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "stringstream ( nn >> > n ) ;",
        "cin >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘(’ token"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        10,
        11
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        10,
        11,
        7
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        10,
        7
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;",
        "stringstream my ( s ) == ' declared ' ;",
        "cin >> l ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        11,
        7
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "stringstream ( k >> sum ) ;",
        "cin >> l ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘==’ token"
    },
    {
      "mod_line": [
        10,
        11,
        7
      ],
      "mod_code": [
        "stringstream my ( s ) == ' declared ' ;",
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘==’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "stringstream my ( s ) == ' declared ' ;",
        "cin >> l ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘,’ or ‘;’ before ‘==’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "while ( my + right ) vv ;",
        "cin >> l ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’ and ‘std::ios_base&(std::ios_base&)’)"
    }
  ]
}