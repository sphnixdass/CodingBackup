{
  "meta": {
    "index": 1641,
    "hitid": "3JGHED38EDLGQBVJKBBUYZR95UHY7K",
    "workerid": "AIWEXPJAU66D9",
    "probid": "586A",
    "subid": "26809092"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define longs n and counter with counter = 0 and an array of arr with size 10000",
      "code": "long n , arr [ 10000 ] , counter = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer variable with name akmal with value 0",
      "code": "int akmal = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read input to n consecutive items in arr",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "start for loop from i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if arr [ i ] = 1",
      "code": "if ( arr [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment counter",
      "code": "counter ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set the value of akmal to 1",
      "code": "akmal = 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if arr [ i ] ! = arr [ i + 1 ] and akmal = 1",
      "code": "else if ( arr [ i ] != arr [ i + 1 ] && akmal == 1 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment counter by one",
      "code": "counter ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if arr [ i ] is equal to arr [ i + 1 ] and arr [ i ] = 0",
      "code": "else if ( arr [ i ] == arr [ i + 1 ] && arr [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "add 1 to i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "assign the new value = 0 to akmal",
      "code": "akmal = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print counter",
      "code": "cout << counter << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int akmal name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "akmal = l ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        8
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "akmal = l ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        9
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "akmal = l ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        9
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "akmal = l ;",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "int akmal name = 0 ;",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "if ( ! arr [ i ] )",
        "akmal = l ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        9
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "if ( ! arr [ i ] )",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "if ( ! arr [ i ] )",
        "akmal = l ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        9
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "if ( ! arr [ i ] )",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "if ( ! arr [ i ] )",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "akmal = l ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        9
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        9,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "akmal = l ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        9,
        3
      ],
      "mod_code": [
        "int arr [ 0 ] , n = 0 , counter ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "akmal = l ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        9
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        3
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "akmal = l ;",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        3
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "if ( ! arr [ i ] )",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "akmal = l ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        3
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "akmal = l ;",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        9,
        3
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int akmal name = 0 ;",
        "cin >> n >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘name’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( ! arr [ i ] )",
        "akmal = l ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "if ( ! arr [ i ] )",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        3
      ],
      "mod_code": [
        "if ( ! arr [ i ] )",
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "if ( ! arr [ i ] )",
        "akmal = l ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( ! arr [ i ] )",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        6,
        9,
        3
      ],
      "mod_code": [
        "if ( ! arr [ i ] )",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        3
      ],
      "mod_code": [
        "akmal = l ;",
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "akmal = l ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "else if ( arr [ i ] != arr [ i + 1 ] && akmal = 1 )",
        "cin >> n >> n ;"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}