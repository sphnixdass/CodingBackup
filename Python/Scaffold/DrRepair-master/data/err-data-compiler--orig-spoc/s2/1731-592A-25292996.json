{
  "meta": {
    "index": 1731,
    "hitid": "3BAKUKE49H6TIO4VH02RPT7ZZL01RM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "592A",
    "subid": "25292996"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long oo = 2 * 1000 * 1000 * 1000",
      "code": "const long long oo = 2 * 1000 * 1000 * 1000 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "new integer constant _cnt = 1000 * 1000",
      "code": "const int _cnt = 1000 * 1000 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define integer constant _p with value 1000 * 1000 * 1000 + 7",
      "code": "const int _p = 1000 * 1000 * 1000 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "o is a long long function with long long argument x",
      "code": "long long o ( long long x )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return x modulo _p",
      "code": "return x % _p ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "function gcd with int arguments a and b that returns int",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "return gcd ( b , a % b ) if b is not 0 , or a otherwise",
      "code": "return b ? gcd ( b , a % b ) : a ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "function lcm with int arguments a and b that returns integer",
      "code": "int lcm ( int a , int b )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "return a * b / gcd ( a , b )",
      "code": "return a * b / gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "in the function file_put",
      "code": "void file_put ( )",
      "indent": 0
    },
    {
      "line": 13,
      "text": "open file called \" filename . in \" to the input stream",
      "code": "freopen ( \" filename.in \" , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "use the file called \" filename . out \" as the output stream",
      "code": "freopen ( \" filename.out \" , \" w \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "create new array of strings s with 10 elements",
      "code": "string s [ 10 ] ;",
      "indent": 0
    },
    {
      "line": 17,
      "text": "declare integers ans = oo and ans2 = oo",
      "code": "int ans = oo , ans2 = oo ;",
      "indent": 0
    },
    {
      "line": 18,
      "text": "define new boolean called t with value = false",
      "code": "bool t = false ;",
      "indent": 0
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 20,
      "text": "in a for loop , change i from 1 to 8 inclusive",
      "code": "for ( int i = 1 ; i <= 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "read user input to s [ i ]",
      "code": "cin >> s [ i ] ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "read and discard data from the user input",
      "code": "cin . ignore ( ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "in a for loop , change i from 1 to 8 inclusive",
      "code": "for ( int i = 1 ; i <= 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for j from 0 to 7 inclusive",
      "code": "for ( int j = 0 ; j <= 7 ; j ++ )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if s [ i ] [ j ] ! = ' W ' , go to the start of the loop",
      "code": "if ( s [ i ] [ j ] != ' W ' ) continue ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "assign false to t",
      "code": "t = false ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "for k from i - 1 to 1 inclusive decrementing k",
      "code": "for ( int k = i - 1 ; k >= 1 ; k -- )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if s [ k ] [ j ] = ' B '",
      "code": "if ( s [ k ] [ j ] == ' B ' )",
      "indent": 4
    },
    {
      "line": 30,
      "text": "assign true to t",
      "code": "t = true ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 33,
      "text": "if t is true , skip the rest of the loop",
      "code": "if ( t ) continue ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "change the value of ans to i - 1 if ans > = i - 1",
      "code": "ans = ( ( ans ) < ( i - 1 ) ? ( ans ) : ( i - 1 ) ) ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "for integer i = 1 to 8 inclusive incrementing i",
      "code": "for ( int i = 1 ; i <= 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 37,
      "text": "start for loop from j = 0 to 7 inclusive",
      "code": "for ( int j = 0 ; j <= 7 ; j ++ )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "if s [ i ] [ j ] ! = ' B ' , skip the rest of the loop",
      "code": "if ( s [ i ] [ j ] != ' B ' ) continue ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "assign the new value = false to t",
      "code": "t = false ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "change integer in a loop from i + 1 to 8 inclusive",
      "code": "for ( int k = i + 1 ; k <= 8 ; k ++ )",
      "indent": 3
    },
    {
      "line": 41,
      "text": "if s [ k ] [ j ] is equal to ' W '",
      "code": "if ( s [ k ] [ j ] == ' W ' )",
      "indent": 4
    },
    {
      "line": 42,
      "text": "change the value of t to true",
      "code": "t = true ;",
      "indent": 5
    },
    {
      "line": 43,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 45,
      "text": "if t is true , go to the start of the loop",
      "code": "if ( t ) continue ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "if ans2 > = 8 - i , change it ' s value to 8 - i",
      "code": "ans2 = ( ( ans2 ) < ( 8 - i ) ? ( ans2 ) : ( 8 - i ) ) ;",
      "indent": 3
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 48,
      "text": "if ans < = ans2",
      "code": "if ( ans <= ans2 )",
      "indent": 1
    },
    {
      "line": 49,
      "text": "print \" A \\ n \"",
      "code": "cout << \" A\\n \" ;",
      "indent": 2
    },
    {
      "line": 50,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 51,
      "text": "print \" B \\ n \"",
      "code": "cout << \" B\\n \" ;",
      "indent": 2
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cin . ignore ( data ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 46,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const int _cnt -= 1000 * 1000 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long o = long long x ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int gcd ( int a that int b )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "return b ? gcd ( b , gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int lcm ( int a that int b )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int ans = oo && ans2 = oo ;"
      ],
      "err_line": 17,
      "err_msg": "‘ans2’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 8 ; i ++ )"
      ],
      "err_line": 20,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "s = s [ i ] ;"
      ],
      "err_line": 21,
      "err_msg": "incompatible types in assignment of ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 8 ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; ++ i )"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "* t = true ;"
      ],
      "err_line": 42,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 50,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        40
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        40,
        46
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        40,
        49
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" max \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        40,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        46
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        46,
        49
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        46,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        49
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "cout << \" max \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        49,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        22,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cin . ignore ( data ) ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        40
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        40,
        46
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        40,
        46,
        49
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        40,
        46,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        40,
        49
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" max \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        40,
        49,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        40,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        46
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        46,
        49
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        46,
        49,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        46,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        49
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cout << \" max \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        49,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        13,
        51
      ],
      "mod_code": [
        "freopen ( \" 5.0 \" ) ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        22,
        40
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        40,
        46
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        40,
        46,
        49
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        40,
        46,
        51
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        40,
        49
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" max \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        40,
        49,
        51
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        40,
        51
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        46
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        46,
        49
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        46,
        49,
        51
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        46,
        51
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        49
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "cout << \" max \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        49,
        51
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        51
      ],
      "mod_code": [
        "cin . ignore ( data ) ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 22,
      "err_msg": "‘data’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        46
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        46,
        49
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        46,
        49,
        51
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        46,
        51
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        49
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" max \" ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        49,
        51
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        51
      ],
      "mod_code": [
        "for ( int i = i + 1 ; i <= 8 ; i ++ )",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        46,
        49
      ],
      "mod_code": [
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;"
      ],
      "err_line": 46,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’"
    },
    {
      "mod_line": [
        46,
        49,
        51
      ],
      "mod_code": [
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" max \" ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 46,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’"
    },
    {
      "mod_line": [
        46,
        51
      ],
      "mod_code": [
        "if ( ans2 >= 8 - i ) s = 8 - i ;",
        "cout << \" R\\n \" ;"
      ],
      "err_line": 46,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’"
    }
  ]
}