{
  "meta": {
    "index": 2683,
    "hitid": "34OWYT6U3WBYEU47VQNBQ7OR9E5I9X",
    "workerid": "A1AYVATMT88U1W",
    "probid": "181A",
    "subid": "30448256"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , m , k be integers with k is equal to 0",
      "code": "int n , m , k = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "do set < int > row and col",
      "code": "set < int > row , col ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for ( integer i is equal to 0 , i is less than n and k is less than 3 , increase i value by 1 )",
      "code": "for ( int i = 0 ; i < n && k < 3 ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for ( integer j is equal to 0 , j is less than m and k is less than 3 , increase j value by 1 )",
      "code": "for ( int j = 0 ; j < m && k < 3 ; ++ j )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ( jth element of array s is equal to * )",
      "code": "if ( s [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increase k value by 1",
      "code": "k ++ ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "let set < int > : : iterator it is equal to row . find ( i )",
      "code": "set < int > :: iterator it = row . find ( i ) ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if ( it is equal to row . end ( ) )",
      "code": "if ( it == row . end ( ) )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "do row . insert ( i )",
      "code": "row . insert ( i ) ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 4
    },
    {
      "line": 14,
      "text": "do row . erase ( it )",
      "code": "row . erase ( it ) ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "let the value it is equal to col . find ( j )",
      "code": "it = col . find ( j ) ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "if ( it is equal to col . end ( ) )",
      "code": "if ( it == col . end ( ) )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "do col . insert ( j )",
      "code": "col . insert ( j ) ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "else do the following",
      "code": "else",
      "indent": 4
    },
    {
      "line": 20,
      "text": "do col . erase ( it )",
      "code": "col . erase ( it ) ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print * row . begin ( ) + 1 and space and * col . begin ( ) + 1 and new line",
      "code": "cout << * row . begin ( ) + 1 << \" \" << * col . begin ( ) + 1 << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> m )"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "set < int > col , col ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘std::set<int> col’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ j ] == \" * \" )"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "set < int > it = row . find ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ to non-scalar type ‘std::set<int>’ requested"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( it )"
      ],
      "err_line": 11,
      "err_msg": "could not convert ‘it’ from ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ to ‘bool’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do row . insert ( i ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘it’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do . erase ( it ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "it *= find ( j ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘find(int&)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( it )"
      ],
      "err_line": 17,
      "err_msg": "could not convert ‘it’ from ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ to ‘bool’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do col . insert ( j ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do . erase ( it ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2,
        13
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        12
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "else do",
        "do row . insert ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        18
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "else do",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "else do",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        2,
        12
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "do row . insert ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2,
        12,
        18
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2,
        12,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "do row . insert ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        2,
        18
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        2,
        18,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        2,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "while ( cin >> n >> m )",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        13,
        12
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "else do",
        "do row . insert ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        13,
        12,
        18
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "else do",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        13,
        12,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "else do",
        "do row . insert ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        13,
        18
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "else do",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "else do",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        13,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "else do",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "do row . insert ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        12,
        18
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        12,
        18,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        12,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "do row . insert ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        18,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "set < int > it . find ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        12
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "else do",
        "do row . insert ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        12,
        18
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "else do",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        12,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "else do",
        "do row . insert ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        13,
        18
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "else do",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        18,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "else do",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        13,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "else do",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "do row . insert ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12,
        18
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12,
        18,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "do row . insert ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "do col . insert ( j ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        18,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "else do",
        "do row . insert ( i ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        12,
        18
      ],
      "mod_code": [
        "else do",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        12,
        18,
        1
      ],
      "mod_code": [
        "else do",
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        12,
        1
      ],
      "mod_code": [
        "else do",
        "do row . insert ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "else do",
        "do col . insert ( j ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘it’"
    },
    {
      "mod_line": [
        13,
        18,
        1
      ],
      "mod_code": [
        "else do",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "else do",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        18,
        1
      ],
      "mod_code": [
        "do row . insert ( i ) ;",
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "do row . insert ( i ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        18,
        1
      ],
      "mod_code": [
        "do col . insert ( j ) ;",
        "int n , m , k , k = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    }
  ]
}