{
  "meta": {
    "index": 788,
    "hitid": "3LN50BUKPV5LWISKXIGL4DGYVMFLP7",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "225A",
    "subid": "13354169"
  },
  "lines": [
    {
      "line": 0,
      "text": "v = int array of size 10",
      "code": "int v [ 10 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in function get taking two ints a and b and returning an int",
      "code": "int get ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set all values of v to 0",
      "code": "memset ( v , 0 , sizeof ( v ) ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set v [ a ] and v [ 7 - a ] to 1",
      "code": "v [ a ] = v [ 7 - a ] = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set v [ b ] and v [ 7 - b ] to 1",
      "code": "v [ b ] = v [ 7 - b ] = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to 7",
      "code": "for ( int i = 1 ; i < 7 ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if v [ i ] equals 0 return i",
      "code": "if ( ! v [ i ] ) return i ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "u = int",
      "code": "int u ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "read u",
      "code": "cin >> u ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "a , b = int",
      "code": "int a , b ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "read a then b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "t = int with t = result of get ( a , b )",
      "code": "int t = get ( a , b ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "f = int with f = 0",
      "code": "int f = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for i = 1 to n",
      "code": "for ( int i = 1 ; i < n ; ++ i )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "read a then b",
      "code": "cin >> a >> b ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if result of get ( a , b ) - t is not 0",
      "code": "if ( get ( a , b ) - t )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int ( int [ 10 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘int’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int t = get ( get , b ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        26,
        21,
        12
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        26,
        21,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        20,
        26,
        11,
        12
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" YES \" ;",
        "while ( n )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        26,
        11,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" YES \" ;",
        "while ( n )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        20,
        26,
        12
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" YES \" ;",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        26,
        12,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" YES \" ;",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        26,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" YES \" ;",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        20,
        21,
        11,
        12
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" NO \" ;",
        "while ( n )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        21,
        11,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" NO \" ;",
        "while ( n )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        20,
        21,
        12
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" NO \" ;",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        21,
        12,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" NO \" ;",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        21,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "cout << \" NO \" ;",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        20,
        11,
        12
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "while ( n )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        11,
        12,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "while ( n )",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        11,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "while ( n )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        20,
        12
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        12,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        20,
        14
      ],
      "mod_code": [
        "if ( ! get ( a , b ) - t )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        26,
        21,
        11,
        12
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "while ( n )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        21,
        11,
        14
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "while ( n )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        26,
        21,
        12
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        21,
        12,
        14
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        21,
        14
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "cout << \" NO \" ;",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        26,
        11,
        12
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "while ( n )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        11,
        12,
        14
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "while ( n )",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        11,
        14
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "while ( n )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        12,
        14
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        14
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        21,
        11,
        12
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "while ( n )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        21,
        11,
        12,
        14
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "while ( n )",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        21,
        11,
        14
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "while ( n )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        21,
        12
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        21,
        12,
        14
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        21,
        14
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "while ( n )",
        "int * u ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        11,
        12,
        14
      ],
      "mod_code": [
        "while ( n )",
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "while ( n )",
        "int a , a ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "int * u ;",
        "int a , a ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    }
  ]
}