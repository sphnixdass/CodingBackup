{
  "meta": {
    "index": 2225,
    "hitid": "39N6W9XWRDHZJ46KDEFO4C424XWGY1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "622A",
    "subid": "48510975"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare long long integer n",
      "code": "long long int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new long long ints delta and x",
      "code": "long long int delta , x ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set delta to 1 + 4 * 2 * n",
      "code": "delta = 1 + 4 * 2 * n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign the new value = sqrt ( delta ) to delta",
      "code": "delta = sqrt ( delta ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "change the value of x to delta - 1",
      "code": "x = delta - 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if x is odd , decrement x",
      "code": "if ( x % 2 != 0 ) x -- ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set x to x divided by 2",
      "code": "x /= 2 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare new integer variable odp with value n - ( ( x + 1 ) * x ) / 2",
      "code": "int odp = n - ( ( x + 1 ) * ( x ) ) / 2 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if odp is equal to 0",
      "code": "if ( odp == 0 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print x",
      "code": "cout << x << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print odp to the standard output",
      "code": "cout << odp << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "delta = sqrt ( delta , delta ) ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘sqrt(long long int&, long long int&)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "n",
        "x *= 2 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        8,
        4
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "delta = ( 1 + 4 ) * 2 * n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        8,
        4,
        9
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        8,
        4,
        3
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        8,
        4,
        6
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "x -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        8,
        9
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        8,
        9,
        3
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        8,
        9,
        6
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        8,
        3
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        8,
        3,
        6
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "n = getchar ( ) ;",
        "x -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        8,
        6
      ],
      "mod_code": [
        "n",
        "x *= 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "n",
        "delta = ( 1 + 4 ) * 2 * n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        9
      ],
      "mod_code": [
        "n",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        4,
        9,
        3
      ],
      "mod_code": [
        "n",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        4,
        9,
        6
      ],
      "mod_code": [
        "n",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        4,
        3
      ],
      "mod_code": [
        "n",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        3,
        6
      ],
      "mod_code": [
        "n",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "n = getchar ( ) ;",
        "x -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        6
      ],
      "mod_code": [
        "n",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "x -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "n",
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        9,
        3
      ],
      "mod_code": [
        "n",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        9,
        3,
        6
      ],
      "mod_code": [
        "n",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        9,
        6
      ],
      "mod_code": [
        "n",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        3,
        6
      ],
      "mod_code": [
        "n",
        "n = getchar ( ) ;",
        "x -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "n",
        "x -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        4,
        9
      ],
      "mod_code": [
        "x *= 2 ;",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        8,
        4,
        9,
        3
      ],
      "mod_code": [
        "x *= 2 ;",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        8,
        4,
        9,
        6
      ],
      "mod_code": [
        "x *= 2 ;",
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "x *= 2 ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        8,
        9,
        3
      ],
      "mod_code": [
        "x *= 2 ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        8,
        9,
        3,
        6
      ],
      "mod_code": [
        "x *= 2 ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        8,
        9,
        6
      ],
      "mod_code": [
        "x *= 2 ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        4,
        9,
        3
      ],
      "mod_code": [
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        4,
        9,
        3,
        6
      ],
      "mod_code": [
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "delta = ( 1 + 4 ) * 2 * n ;",
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        9,
        3,
        6
      ],
      "mod_code": [
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "n = getchar ( ) ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "int odp / ( ( x + 1 ) * x ) / 2 ;",
        "x -= 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘/’ token"
    }
  ]
}