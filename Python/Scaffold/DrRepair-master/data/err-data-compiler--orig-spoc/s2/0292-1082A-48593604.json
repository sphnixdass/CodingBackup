{
  "meta": {
    "index": 292,
    "hitid": "3VZYA8PITOS46CLFOALO8NJT2B2051",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1082A",
    "subid": "48593604"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "t is a new integer variable",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement t and keep the loop going , while t is not 0",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer variables n , x , y and d",
      "code": "int n , x , y , d ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read n , x , y and d",
      "code": "cin >> n >> x >> y >> d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if abs ( x - y ) % d is equal to 0",
      "code": "if ( abs ( x - y ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print abs ( x - y ) / d",
      "code": "cout << abs ( x - y ) / d << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "create new integers called m1 and m2 , with both values = INT_MAX",
      "code": "int m1 = INT_MAX , m2 = INT_MAX ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "create boolean variable flag with value 0",
      "code": "bool flag = 0 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if ( y - 1 ) % d = 0",
      "code": "if ( ( y - 1 ) % d == 0 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "assign ( x - 1 ) / d + ( ( x - 1 ) % d = = 0 ? 0 : 1 ) + ( y - 1 ) / d to m1",
      "code": "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? 0 : 1 ) + ( y - 1 ) / d ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "assign 1 to flag",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if ( n - y ) modulo d is 0",
      "code": "if ( ( n - y ) % d == 0 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "assign n - x ) / d + ( ( n - x ) % d = = 0 ? 0 : 1 ) + ( n - y ) / d to m2",
      "code": "m2 = ( n - x ) / d + ( ( n - x ) % d == 0 ? 0 : 1 ) + ( n - y ) / d ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "change flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if flag is false",
      "code": "if ( ! flag )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 22,
      "text": "print min of m1 and m2",
      "code": "cout << min ( m1 , m2 ) << endl ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n , x , y >> d ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d = 0 )"
      ],
      "err_line": 11,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - y ) % d ) + ( n - y ) / d ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "flag = l ;"
      ],
      "err_line": 17,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        12,
        16
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d + ( ( x - 1 ) % d ) + ( y - 1 ) / d ) ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12,
        16,
        5
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d + ( ( x - 1 ) % d ) + ( y - 1 ) / d ) ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12,
        16,
        13
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d + ( ( x - 1 ) % d ) + ( y - 1 ) / d ) ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        5
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        5,
        13
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        5,
        12
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        13
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        13,
        12
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "int flag = 1 ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        12
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        5,
        13,
        12
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "cin >> n >> x , y >> d ;",
        "int flag = 1 ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        5,
        12
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "cin >> n >> x , y >> d ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        13,
        12
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "int flag = 1 ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "int m1 , m2 = INT_MAX ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d + ( ( x - 1 ) % d ) + ( y - 1 ) / d ) ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        16,
        5
      ],
      "mod_code": [
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d + ( ( x - 1 ) % d ) + ( y - 1 ) / d ) ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        16,
        5,
        13
      ],
      "mod_code": [
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d + ( ( x - 1 ) % d ) + ( y - 1 ) / d ) ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        16,
        13
      ],
      "mod_code": [
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d + ( ( x - 1 ) % d ) + ( y - 1 ) / d ) ;",
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        5,
        13
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        5,
        13,
        12
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;",
        "int flag = 1 ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        5,
        12
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "cin >> n >> x , y >> d ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        13,
        12
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "int flag = 1 ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "m2 -= x / d + ( ( n - x ) % d == 0 ? ( n - x ) % d ) + ( n - y ) / d ) ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13,
        12
      ],
      "mod_code": [
        "cin >> n >> x , y >> d ;",
        "int flag = 1 ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "cin >> n >> x , y >> d ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "int flag = 1 ;",
        "m1 = ( x - 1 ) / d + ( ( x - 1 ) % d == 0 ? ( y - 1 ) % d ) + ( y - 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘:’ before ‘)’ token"
    }
  ]
}