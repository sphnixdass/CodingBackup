{
  "meta": {
    "index": 2186,
    "hitid": "3HUR21WDDUJA5Q1A2OFSSY4X7NUYXD",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "102A",
    "subid": "37017304"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , m = integers",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "price = integer array of size 105",
      "code": "int price [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "match = integer array of size [ 105 ] [ 105 ]",
      "code": "int match [ 105 ] [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "while read n , m",
      "code": "while ( cin >> n >> m )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set all contents of match to 0",
      "code": "memset ( match , 0 , sizeof ( match ) ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for i = 1 to n , read price [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> price [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "u , v = integers",
      "code": "int u , v ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read u , v",
      "code": "cin >> u >> v ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "match [ u ] [ v ] = 1",
      "code": "match [ u ] [ v ] = 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "match [ v ] [ u ] = 1",
      "code": "match [ v ] [ u ] = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "MIN = integer with MIN = 0x3f3f3f3f",
      "code": "int MIN = 0x3f3f3f3f ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i = 1 to n",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for j = i + 1 to n",
      "code": "for ( int j = i + 1 ; j <= n ; j ++ )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if ( match [ i ] [ j ] is 0 ) , continue next iteration",
      "code": "if ( match [ i ] [ j ] == 0 ) continue ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "for k = j + 1 to n",
      "code": "for ( int k = j + 1 ; k <= n ; k ++ )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "if ( match [ j ] [ k ] is 0 or match [ k ] [ i ] is 0 ) , continue next iteration",
      "code": "if ( match [ j ] [ k ] == 0 || match [ k ] [ i ] == 0 ) continue ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "if ( MIN > price [ i ] + price [ j ] + price [ k ] ) MIN = price [ i ] + price [ j ] + price [ k ]",
      "code": "if ( MIN > price [ i ] + price [ j ] + price [ k ] ) MIN = price [ i ] + price [ j ] + price [ k ] ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if ( MIN is 0x3f3f3f3f )",
      "code": "if ( MIN == 0x3f3f3f3f )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print MIN",
      "code": "cout << MIN << endl ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int match [ 105 ] [ 105 ] ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "const int MIN = 0x3f3f3f3f ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of read-only variable ‘MIN’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( MIN is 0x3f3f3f3f )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        17,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        17,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        18,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        18,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        18,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        18,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ i ] [ j ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        18,
        19
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        18,
        19,
        9
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        18,
        19
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        18,
        19,
        9
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        19,
        9
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        19,
        9
      ],
      "mod_code": [
        "for ( int k = j + 1 ; k < n ; k ++ )",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        19,
        9
      ],
      "mod_code": [
        "if ( match [ j ] [ k ] == ' 0 ' || match [ k ] [ i ] == ' 0 ' ) continue ;",
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        9
      ],
      "mod_code": [
        "if ( ( MIN > price [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        9
      ],
      "mod_code": [
        "if ( ( MIN [ i ] + price [ j ] + price [ k ] ) == price [ j ] + price [ j ] + price [ k ] + price [ k ] )",
        "cin >> u , v ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}