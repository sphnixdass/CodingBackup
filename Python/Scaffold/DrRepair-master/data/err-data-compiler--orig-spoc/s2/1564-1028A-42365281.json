{
  "meta": {
    "index": 1564,
    "hitid": "3B286OTISEB8EOYI5EMBY3EBTYEJA2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1028A",
    "subid": "42365281"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables m , n , count = 0 , a1 = 0 , a2 = 0 , b1 = 0 , b2 = 0",
      "code": "int m , n , count = 0 , a1 = 0 , a2 = 0 , b1 = 0 , b2 = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m from the user input",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare vector of strings s with n elements",
      "code": "vector < string > s ( n ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n values of s from the input",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "in a for loop , change i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s [ i ] [ j ] = ' B '",
      "code": "if ( s [ i ] [ j ] == ' B ' )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment count by one",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "if count < = 1",
      "code": "if ( count <= 1 )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set a1 to i + 1",
      "code": "a1 = i + 1 ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "set the value of b1 to j + 1",
      "code": "b1 = j + 1 ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 13,
      "text": "change the value of a2 to i + 1",
      "code": "a2 = i + 1 ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "assign the new value = j + 1 to b2",
      "code": "b2 = j + 1 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print ( a2 + a1 ) / 2 , \" \" and ( b2 + b1 ) / 2 to the standard output",
      "code": "cout << ( a2 + a1 ) / 2 << \" \" << ( b2 + b1 ) / 2 << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < string > s [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        9,
        1,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        9,
        1,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "b1 += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        9,
        1,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        9,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        2,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        2,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "cin >> n >> m >> m ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "b1 += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        11,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( count >= 1 )",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        1,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        1,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "b1 += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        1,
        11,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        1,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        11,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cin >> n >> m >> m ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b1 += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        9,
        1,
        2
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        9,
        1,
        2,
        11
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        9,
        1,
        2,
        18
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        9,
        1,
        11
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "b1 += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        9,
        1,
        11,
        18
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        9,
        1,
        18
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        9,
        2,
        11,
        18
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        2,
        18
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "cin >> n >> m >> m ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        11,
        18
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "if ( count >= 1 )",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        1,
        2,
        11,
        18
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        1,
        2,
        18
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cin >> n >> m >> m ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "b1 += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        1,
        11,
        18
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int m , n , count = 0 , a1 = 0 , a2 = 0 , a2 = 0 , b2 = 0 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a2’"
    },
    {
      "mod_line": [
        2,
        11,
        18
      ],
      "mod_code": [
        "cin >> n >> m >> m ;",
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "cin >> n >> m >> m ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "b1 += 1 ;",
        "cout << ( a2 + a1 ) / 2 << \" \" << b2 + b1 ) / 2 << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}