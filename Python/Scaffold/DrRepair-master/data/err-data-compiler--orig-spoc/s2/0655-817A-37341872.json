{
  "meta": {
    "index": 655,
    "hitid": "3U74KRR67MF9CAOCQC5KMFLKPK0NTG",
    "workerid": "ACZC9ZJROQZO9",
    "probid": "817A",
    "subid": "37341872"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let x1 , y1 , x2 , y2 , x , y = int",
      "code": "int x1 , y1 , x2 , y2 , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x1 , y1 , x2 , y2",
      "code": "cin >> x1 >> y1 >> x2 >> y2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let dx = int = ( x2 - x1 ) modulo x",
      "code": "int dx = ( x2 - x1 ) % x ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let dy = int = ( y2 - y1 ) modulo y",
      "code": "int dy = ( y2 - y1 ) % y ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let dx2 = int = ( x2 - x1 ) / x",
      "code": "int dx2 = ( x2 - x1 ) / x ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let dy2 = ( y2 - y1 ) / y",
      "code": "int dy2 = ( y2 - y1 ) / y ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if dx is not 0 or dy is not 0",
      "code": "if ( dx != 0 || dy != 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else if dx2 modulo 2 is dy2 modulo 2 or dx2 modulo 2 is dy2 * - 1 modulo 2",
      "code": "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == - dy2 % 2 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        1
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "int x1 , y1 , x2 , y2 } , x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        10,
        1,
        2
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        10,
        1,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        10,
        2
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        2,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "cin >> x , y ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "int x1 , y1 , x2 , y2 } , x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1,
        2
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1,
        2,
        10
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1,
        2,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1,
        10
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1,
        10,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        2,
        10
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        2,
        10,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )",
        "cin >> x , y ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        2,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )",
        "cin >> x , y ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "dy2 = ( y2 - y1 ) / y ;",
        "cin >> x , y ;"
      ],
      "err_line": 7,
      "err_msg": "‘dy2’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "int x1 , y1 , x2 , y2 } , x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        1,
        2
      ],
      "mod_code": [
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        1,
        2,
        3
      ],
      "mod_code": [
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        1,
        3
      ],
      "mod_code": [
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 == dy2 * 1 )",
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        10,
        3
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x1 >> y1 >> x2 , y2 ;",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        10,
        3
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "else if ( dx2 % 2 == dy2 % 2 || dx2 % 2 != dy2 * 1 )",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int x1 , y1 , x2 , y2 } , x , y ;",
        "cin >> x , y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘}’ token"
    }
  ]
}