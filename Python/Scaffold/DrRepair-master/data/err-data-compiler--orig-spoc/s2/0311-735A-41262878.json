{
  "meta": {
    "index": 311,
    "hitid": "39HYCOOPKOFWD37FSLQ54WEYIV5DM1",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "735A",
    "subid": "41262878"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k = integers",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "loct , locg = integers",
      "code": "int loct , locg ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if ( s [ i ] is T ) , loct = i",
      "code": "if ( s [ i ] == ' T ' ) loct = i ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ( s [ i ] is G ) , locg = i",
      "code": "if ( s [ i ] == ' G ' ) locg = i ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "flag = bool with flag = false",
      "code": "bool flag = false ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ( locg < loct )",
      "code": "if ( locg < loct )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "i = integer with i = locg + k",
      "code": "int i = locg + k ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for ( i < loct with i = i + k )",
      "code": "for ( ; i < loct ; i += k )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if ( s [ i ] is # ) , flag = true",
      "code": "if ( s [ i ] == ' # ' ) flag = true ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if ( i is loct and flag is false )",
      "code": "if ( i == loct && flag == false )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "i = integer with i = locg - k",
      "code": "int i = locg - k ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "for ( i > loct with i = i - k )",
      "code": "for ( ; i > loct ; i -= k )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if ( s [ i ] is # ) , flag = true",
      "code": "if ( s [ i ] == ' # ' ) flag = true ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if ( i is loct and flag is false )",
      "code": "if ( i == loct && flag == false )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int i += k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = loct ; i + k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "int i -= k ;"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i = i - k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        22,
        12
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i = i - k )",
        "int i += k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13,
        22,
        12,
        27
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i = i - k )",
        "int i += k ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13,
        22,
        12,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i = i - k )",
        "int i += k ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        22,
        27
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i = i - k )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        22,
        27,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i = i - k )",
        "n",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        22,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i = i - k )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "int i += k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13,
        12,
        27
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "int i += k ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13,
        12,
        27,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "int i += k ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        12,
        27,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "int i += k ;",
        "n",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13,
        12,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "int i += k ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        12,
        4,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "int i += k ;",
        "s >> s ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        12,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "int i += k ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13,
        27
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        27,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "n",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        27,
        4,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "n",
        "s >> s ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        27,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "n",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "s >> s ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "for ( i = loct ; i = i + k )",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        12
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )",
        "int i += k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        22,
        12,
        27
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )",
        "int i += k ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        22,
        12,
        27,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )",
        "int i += k ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        12,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )",
        "int i += k ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        27
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        27,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )",
        "n",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        4
      ],
      "mod_code": [
        "for ( i = loct ; i = i - k )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        27
      ],
      "mod_code": [
        "int i += k ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        12,
        27,
        4
      ],
      "mod_code": [
        "int i += k ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        27,
        4,
        22
      ],
      "mod_code": [
        "int i += k ;",
        "n",
        "s >> s ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        27,
        22
      ],
      "mod_code": [
        "int i += k ;",
        "n",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "int i += k ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        4,
        22
      ],
      "mod_code": [
        "int i += k ;",
        "s >> s ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        22
      ],
      "mod_code": [
        "int i += k ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        27,
        4
      ],
      "mod_code": [
        "n",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27,
        4,
        22
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27,
        22
      ],
      "mod_code": [
        "n",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "s >> s ;",
        "for ( i = loct ; i > i - k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}