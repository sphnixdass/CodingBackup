{
  "meta": {
    "index": 127,
    "hitid": "3VLL1PIENQING7XNXJUFNSM61DROZN",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "411A",
    "subid": "35272272"
  },
  "lines": [
    {
      "line": 0,
      "text": "PI = const double with PI = acos on - 1",
      "code": "const double PI = acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "INF = const integer with INF = 1000 * 1000 * 1000 + 7",
      "code": "const int INF = 1000 * 1000 * 1000 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "LINF = const long long with LINF = INF * ( cast to long long ) INF",
      "code": "const long long LINF = INF * ( long long ) INF ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "in the function no",
      "code": "void no ( )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "print Too weak",
      "code": "cout << \" Too weak \" << endl ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "exit 0",
      "code": "exit ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "in the function hasLarge that takes const string reference s and returns bool",
      "code": "bool hasLarge ( const string & s )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "for i = 0 to ( ( cast to int ) s . size ( ) exclusive",
      "code": "for ( int i = ( 0 ) ; i < ( ( int ) s . size ( ) ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( s [ i ] > = A and s [ i ] < = Z ) , return true",
      "code": "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) return true ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "in the function hasSmall that takes const string reference s and returns bool",
      "code": "bool hasSmall ( const string & s )",
      "indent": 0
    },
    {
      "line": 15,
      "text": "for i = 0 to ( ( cast to int ) s . size ( ) exclusive",
      "code": "for ( int i = ( 0 ) ; i < ( ( int ) s . size ( ) ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if ( s [ i ] > = a and s [ i ] < = z ) , return true",
      "code": "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) return true ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "in the function hasDigit that takes const string reference s and returns bool",
      "code": "bool hasDigit ( const string & s )",
      "indent": 0
    },
    {
      "line": 21,
      "text": "for i = 0 to ( ( cast to int ) s . size ( ) exclusive",
      "code": "for ( int i = ( 0 ) ; i < ( ( int ) s . size ( ) ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if ( s [ i ] > = 0 and s [ i ] < = 9 ) , return true",
      "code": "if ( s [ i ] >= ' 0 ' && s [ i ] <= ' 9 ' ) return true ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 27,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if ( ( cast to int ) s . size ( ) < 5 ) , call no",
      "code": "if ( ( int ) s . size ( ) < 5 ) no ( ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if ( not hasLarge ( s ) or not hasSmall ( s ) or not hasDigit ( s ) ) , call no",
      "code": "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ( s ) ) no ( ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print Correct",
      "code": "cout << \" Correct \" << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << Too << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "break ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 28,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "cout << Correct << endl ;"
      ],
      "err_line": 30,
      "err_msg": "‘Correct’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 27,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void S ( )"
      ],
      "err_line": 28,
      "err_msg": "‘no’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << Too << ' \\n ' ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( ( ( int ) s . size ( ) < 5 ) ) { no ++ ; }"
      ],
      "err_line": 28,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) ) { no ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        16
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        16,
        28
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        16,
        29
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        16,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        28
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        28,
        29
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        28,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        29
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        29,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "break ;",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        28
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        28,
        29
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        28,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        29
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        29,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        28
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        28,
        29
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        28,
        29,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        28,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        29
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        29,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        30
      ],
      "mod_code": [
        "cout << Too << endl ;",
        "cout << Correct << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘Too’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        16,
        28
      ],
      "mod_code": [
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        16,
        28,
        29
      ],
      "mod_code": [
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        16,
        28,
        30
      ],
      "mod_code": [
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        16,
        29
      ],
      "mod_code": [
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        16,
        29,
        30
      ],
      "mod_code": [
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        16,
        30
      ],
      "mod_code": [
        "break ;",
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "cout << Correct << endl ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        28
      ],
      "mod_code": [
        "break ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        28,
        29
      ],
      "mod_code": [
        "break ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        28,
        29,
        30
      ],
      "mod_code": [
        "break ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        28,
        30
      ],
      "mod_code": [
        "break ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        29
      ],
      "mod_code": [
        "break ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        29,
        30
      ],
      "mod_code": [
        "break ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6,
        30
      ],
      "mod_code": [
        "break ;",
        "cout << Correct << endl ;"
      ],
      "err_line": 6,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        28
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        28,
        29
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        28,
        29,
        30
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        28,
        30
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        29
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        29,
        30
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        30
      ],
      "mod_code": [
        "if ( s [ i ] >= a && s [ i ] <= z ) return true ;",
        "cout << Correct << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        29
      ],
      "mod_code": [
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }"
      ],
      "err_line": 28,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        28,
        29,
        30
      ],
      "mod_code": [
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 28,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        28,
        30
      ],
      "mod_code": [
        "if ( ( int ) s . size ( ) < 5 ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 28,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        29,
        30
      ],
      "mod_code": [
        "if ( ! hasLarge ( s ) || ! hasSmall ( s ) || ! hasDigit ) { no ++ ; }",
        "cout << Correct << endl ;"
      ],
      "err_line": 29,
      "err_msg": "lvalue required as increment operand"
    }
  ]
}