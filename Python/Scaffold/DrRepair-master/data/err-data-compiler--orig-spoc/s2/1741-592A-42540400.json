{
  "meta": {
    "index": 1741,
    "hitid": "3UXQ63NLAAGJSORAEDYK9TB9F52BLP",
    "workerid": "AIWEXPJAU66D9",
    "probid": "592A",
    "subid": "42540400"
  },
  "lines": [
    {
      "line": 0,
      "text": "define integer constant with name INF and value 1e1",
      "code": "const int INF = 1e1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define integers i , j , k , P , Q and flag",
      "code": "int i , j , k , P , Q , flag ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "s is a new 2d array 10 by 10 chars",
      "code": "char s [ 10 ] [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to 8 exclusive , read s [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 8 ; j ++ ) { cin >> s [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "change the value of P to INF",
      "code": "P = INF ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "assign the new value = INF to Q",
      "code": "Q = INF ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for j from 0 to 8 exclusive incrementing j",
      "code": "for ( j = 0 ; j < 8 ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s [ i ] [ j ] is equal to ' W '",
      "code": "if ( s [ i ] [ j ] == ' W ' )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "assign 0 to flag",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "decrement k in a loop from i to 0 inclusive",
      "code": "for ( k = i ; k >= 0 ; k -- )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if s [ k ] [ j ] is equal to ' B '",
      "code": "if ( s [ k ] [ j ] == ' B ' )",
      "indent": 5
    },
    {
      "line": 15,
      "text": "assign the new value = 1 to flag",
      "code": "flag = 1 ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if flag is equal to 0 , change Q to min of Q and i + 1",
      "code": "if ( flag == 0 ) { Q = min ( Q , i + 1 ) ; }",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else if s [ i ] [ j ] = ' B '",
      "code": "else if ( s [ i ] [ j ] == ' B ' )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "assign the new value = 0 to flag",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "in a for loop , change k from i to 8 exclusive incrementing k",
      "code": "for ( k = i ; k < 8 ; k ++ )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if s [ k ] [ j ] = ' W '",
      "code": "if ( s [ k ] [ j ] == ' W ' )",
      "indent": 5
    },
    {
      "line": 24,
      "text": "assign 1 to flag",
      "code": "flag = 1 ;",
      "indent": 6
    },
    {
      "line": 25,
      "text": "break the loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 28,
      "text": "if flag = 0 , change P to min of P and 8 - i",
      "code": "if ( flag == 0 ) { P = min ( P , 8 - i ) ; }",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if P > = Q",
      "code": "if ( P >= Q )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print \" A \" to the standard output",
      "code": "cout << \" A \" << endl ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print \" B \" to output",
      "code": "cout << \" B \" << endl ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "Q = INF = INF ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "flag = l ;"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 34,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        34
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n"
      ],
      "err_line": 34,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        34,
        8
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "Q = INF = INF ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        23,
        34,
        8,
        7
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "Q = INF = INF ;",
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        34,
        8,
        25
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "Q = INF = INF ;",
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        23,
        34,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "Q = INF = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        23,
        34,
        7
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        34,
        7,
        25
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "* P = INF ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        34,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "* P = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        34,
        25
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "break the ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        34,
        25,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        23,
        34,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "n",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        23,
        8
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "Q = INF = INF ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        23,
        8,
        7
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "Q = INF = INF ;",
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        8,
        7,
        25
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "Q = INF = INF ;",
        "* P = INF ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        8,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "Q = INF = INF ;",
        "* P = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        8,
        25
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "Q = INF = INF ;",
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        23,
        8,
        25,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "Q = INF = INF ;",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        23,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "Q = INF = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        23,
        7
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        7,
        25
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "* P = INF ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        7,
        25,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "* P = INF ;",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "* P = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        25
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "break the ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        25,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        23,
        3
      ],
      "mod_code": [
        "if ( s [ k ] [ j ] = ' W ' )",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        34,
        8
      ],
      "mod_code": [
        "n",
        "Q = INF = INF ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        34,
        8,
        7
      ],
      "mod_code": [
        "n",
        "Q = INF = INF ;",
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        34,
        8,
        7,
        25
      ],
      "mod_code": [
        "n",
        "Q = INF = INF ;",
        "* P = INF ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        34,
        8,
        7,
        3
      ],
      "mod_code": [
        "n",
        "Q = INF = INF ;",
        "* P = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        34,
        8,
        25
      ],
      "mod_code": [
        "n",
        "Q = INF = INF ;",
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        34,
        8,
        25,
        3
      ],
      "mod_code": [
        "n",
        "Q = INF = INF ;",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        34,
        8,
        3
      ],
      "mod_code": [
        "n",
        "Q = INF = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        34,
        7
      ],
      "mod_code": [
        "n",
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        34,
        7,
        25
      ],
      "mod_code": [
        "n",
        "* P = INF ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        34,
        7,
        25,
        3
      ],
      "mod_code": [
        "n",
        "* P = INF ;",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        34,
        7,
        3
      ],
      "mod_code": [
        "n",
        "* P = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        34,
        25
      ],
      "mod_code": [
        "n",
        "break the ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        34,
        25,
        3
      ],
      "mod_code": [
        "n",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        34,
        3
      ],
      "mod_code": [
        "n",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "Q = INF = INF ;",
        "* P = INF ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        7,
        25
      ],
      "mod_code": [
        "Q = INF = INF ;",
        "* P = INF ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        7,
        25,
        3
      ],
      "mod_code": [
        "Q = INF = INF ;",
        "* P = INF ;",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "Q = INF = INF ;",
        "* P = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "Q = INF = INF ;",
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        8,
        25,
        3
      ],
      "mod_code": [
        "Q = INF = INF ;",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "Q = INF = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of read-only variable ‘INF’"
    },
    {
      "mod_line": [
        7,
        25
      ],
      "mod_code": [
        "* P = INF ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        25,
        3
      ],
      "mod_code": [
        "* P = INF ;",
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "* P = INF ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        25,
        3
      ],
      "mod_code": [
        "break the ;",
        "string s [ 10 ] [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    }
  ]
}