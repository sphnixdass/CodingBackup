{
  "meta": {
    "index": 1122,
    "hitid": "34D9ZRXCYRO1DRH8S8VPQ45YPHNSAN",
    "workerid": "AIWEXPJAU66D9",
    "probid": "844A",
    "subid": "42277889"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long integer INF = ( 1LL < < 60 ) - 1",
      "code": "const long long int INF = ( 1LL << 60 ) - 1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "new const long long integer MAX = 998244353",
      "code": "const long long int MAX = 998244353 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "fast_exp is a long long int function with long long int arguments base , exp and m",
      "code": "long long int fast_exp ( long long int base , long long int exp , long long int m )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare long long integer variable res = 1",
      "code": "long long int res = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while exp > 0",
      "code": "while ( exp > 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if exp is odd , assign ( res * base ) % m to res",
      "code": "if ( exp % 2 == 1 ) { res = ( res * base ) % m ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "change the value of base to base squared % m",
      "code": "base = ( base * base ) % m ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "divide exp by 2",
      "code": "exp /= 2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return res modulo m",
      "code": "return res % m ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "s is a new string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "declare integers k and cnt with cnt = 0",
      "code": "int k , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read variables s and k from the input",
      "code": "cin >> s >> k ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "freq is a new array of integers with 26 elements filled with 0",
      "code": "int freq [ 26 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare integer n with value length of s",
      "code": "int n = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "start for loop from i = 0 to n exclusive , incrementing freq [ s [ i ] - ' a ' ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] - ' a ' ] ++ ; }",
      "indent": 1
    },
    {
      "line": 18,
      "text": "in a for loop , change i from 0 to 26 exclusive incrementing i",
      "code": "for ( int i = 0 ; i < 26 ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if freq [ i ] is not 0 , increment cnt by one",
      "code": "if ( freq [ i ] ) { cnt ++ ; }",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if cnt > = k",
      "code": "if ( cnt >= k )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if n is less than k",
      "code": "if ( n < k )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" impossible \"",
      "code": "cout << \" impossible \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print k - cnt",
      "code": "cout << k - cnt << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "string s << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        18
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        18,
        25
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        18,
        14
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "s >> s >> k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        18,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        25
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "if ( n <= k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        25,
        14
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "if ( n <= k )",
        "s >> s >> k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        25,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "if ( n <= k )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        14
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "s >> s >> k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        14,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "string s << endl ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        18
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        18,
        25
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        18,
        25,
        14
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )",
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        18,
        25,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        18,
        14
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        18,
        14,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        18,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        25,
        14
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "if ( n <= k )",
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        25,
        14,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "if ( n <= k )",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        14
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        14,
        13
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        18,
        25
      ],
      "mod_code": [
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        18,
        25,
        14
      ],
      "mod_code": [
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )",
        "s >> s >> k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        18,
        25,
        13
      ],
      "mod_code": [
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        18,
        14
      ],
      "mod_code": [
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "s >> s >> k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        18,
        14,
        13
      ],
      "mod_code": [
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        18,
        13
      ],
      "mod_code": [
        "string s << endl ;",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        25
      ],
      "mod_code": [
        "string s << endl ;",
        "if ( n <= k )"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        25,
        14
      ],
      "mod_code": [
        "string s << endl ;",
        "if ( n <= k )",
        "s >> s >> k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        25,
        14,
        13
      ],
      "mod_code": [
        "string s << endl ;",
        "if ( n <= k )",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        25,
        13
      ],
      "mod_code": [
        "string s << endl ;",
        "if ( n <= k )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "string s << endl ;",
        "s >> s >> k ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        13
      ],
      "mod_code": [
        "string s << endl ;",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "string s << endl ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        25,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )",
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        25,
        14,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        25,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "if ( n <= k )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        14,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int k = 0 , cnt ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        14
      ],
      "mod_code": [
        "if ( n <= k )",
        "s >> s >> k ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        14,
        13
      ],
      "mod_code": [
        "if ( n <= k )",
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "s >> s >> k ;",
        "int k = 0 , cnt ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}