{
  "meta": {
    "index": 2780,
    "hitid": "3J6BHNX0U9MA9RYPW3RSLOYO7UBKNK",
    "workerid": "AIWEXPJAU66D9",
    "probid": "900A",
    "subid": "48730074"
  },
  "lines": [
    {
      "line": 0,
      "text": "define new constant integer maxn with value 1e5 + 5",
      "code": "const int maxn = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "str is an array of characters with maxn elements",
      "code": "char str [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare new array of booleans vis with 305 elements",
      "code": "bool vis [ 305 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "getint is an inlined integer function",
      "code": "inline int getint ( )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare integer variables r = 0 and k = 1",
      "code": "int r = 0 , k = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "new char c = character from the input",
      "code": "char c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "loop while c < ' 0 ' and c > ' 9 ' , reading new char from the input into c on each iteration",
      "code": "for ( ; c < ' 0 ' || c > ' 9 ' ; c = getchar ( ) )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if c = ' - ' , change the value of k to - 1",
      "code": "if ( c == ' - ' ) k = - 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "while c > = ' 0 ' and c < = ' 9 ' , read a char into c and change r to r * 10 + c - ' 0 ' in a loop",
      "code": "for ( ; c >= ' 0 ' && c <= ' 9 ' ; c = getchar ( ) ) r = r * 10 + c - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return r * k",
      "code": "return r * k ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "n is a new integer = result of getint ( )",
      "code": "int n = getint ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "declare new int variables r and l = 0",
      "code": "int r = 0 , l = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "while n ! = 0 , decrement it and continue the loop",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "declare integer variable x with value of getint ( )",
      "code": "int x = getint ( ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "create integer variable with name y with value of getint ( )",
      "code": "int y = getint ( ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if x is greater than 0 , increment r",
      "code": "if ( x > 0 ) r ++ ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if x is less than 0 , increment l",
      "code": "if ( x < 0 ) l ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if r and l are both greater than 1",
      "code": "if ( r > 1 && l > 1 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" No \"",
      "code": "puts ( \" No \" ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" Yes \" to stdout",
      "code": "puts ( \" Yes \" ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "c = getchar ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int getint()’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int x = getint ( getint ) ;"
      ],
      "err_line": 15,
      "err_msg": "too many arguments to function ‘int getint()’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "stdout << \" Yes \" << endl ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘_IO_FILE*’ and ‘const char [4]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        8,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        8,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        3,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' )",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6,
        3
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        8,
        6,
        3,
        12
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        8,
        6,
        12
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        8,
        3,
        12
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) c = r * 10 + c - ' 0 ' ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int getint()’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        8,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        3,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "for ( ; c < ' 0 ' && c > ' 9 ' ; c ++ ) cin >> c [ i ] ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        8,
        3,
        12
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "while ( c >= ' 0 ' && c <= ' 9 ' ) r = r * 10 + c - ' 0 ' ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int getint()’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "inline int getint ( integer ) ;",
        "getint ( getint ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘getint’ declared as an ‘inline’ variable"
    }
  ]
}