{
  "meta": {
    "index": 2247,
    "hitid": "3RKHNXPHGWQN4HIYT43EZJQIFQ1UKJ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "622A",
    "subid": "47602243"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long x",
      "code": "long long x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create new long long mayor = sqrt ( 8 . 000 * x - 7 . 000 ) + 1 . 000 ) / 2 . 000",
      "code": "long long mayor = ( long long ) ( ( sqrt ( 8.000 * x - 7.000 ) + 1.000 ) / 2.000 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create long long ans = x + 1 - ( mayor * mayor - mayor + 2 ) / 2",
      "code": "long long ans = x + 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print ans and \" \\ n \" to the standard output",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "long long mayor = sqrt ( 8 ) / x ;",
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "long long mayor = sqrt ( 8 ) / x ;",
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "x = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        3,
        4,
        2,
        5
      ],
      "mod_code": [
        "long long mayor = sqrt ( 8 ) / x ;",
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "x = getchar ( ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "long long mayor = sqrt ( 8 ) / x ;",
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "long long mayor = sqrt ( 8 ) / x ;",
        "x = getchar ( ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "long long mayor = sqrt ( 8 ) / x ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "x = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "x = getchar ( ) ;",
        "long long mayor = sqrt ( 8 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        5
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "x = getchar ( ) ;",
        "long long mayor = sqrt ( 8 ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4,
        2,
        5
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "x = getchar ( ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "long long mayor = sqrt ( 8 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4,
        3,
        5
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "long long mayor = sqrt ( 8 ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "long long ans += 1 - ( mayor * mayor - mayor + 2 ) / 2 ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "long long mayor = sqrt ( 8 ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "x = getchar ( ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "long long mayor = sqrt ( 8 ) ;",
        "cout << ( ans << \" \\n \" ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator<<’"
    }
  ]
}