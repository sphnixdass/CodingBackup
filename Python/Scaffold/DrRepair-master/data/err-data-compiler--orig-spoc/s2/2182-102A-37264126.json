{
  "meta": {
    "index": 2182,
    "hitid": "34O39PNDK62UVMMNJXVGV5K8LXSBRG",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "102A",
    "subid": "37264126"
  },
  "lines": [
    {
      "line": 0,
      "text": "inf = 0x3f3f3f3f = const int",
      "code": "const int inf = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "mp = 110x110 int matrix",
      "code": "int mp [ 110 ] [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a , b = int",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "const = int array of length 110",
      "code": "int cost [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while reading n , m",
      "code": "while ( cin >> n >> m )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "reset all mp to 0",
      "code": "memset ( mp , 0 , sizeof ( mp ) ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = 1 to n inclusive then read const [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> cost [ i ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "mp [ a ] b [ ] = ma [ b ] [ a ] = 1",
      "code": "mp [ a ] [ b ] = mp [ b ] [ a ] = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "res = int = inf",
      "code": "int res = inf ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for j = i to n inclusive",
      "code": "for ( int j = i ; j <= n ; j ++ )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "for k = j to n inclusive",
      "code": "for ( int k = j ; k <= n ; k ++ )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "if mp [ i ] [ j ] and mp [ j ] [ k ] and mp [ i ] [ k ] then set res = min of res , cost [ i ] + cost [ j ] + cost [ k ]",
      "code": "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ j ] + cost [ k ] ) ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if res = inf",
      "code": "if ( res == inf )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int mp [ 5 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "const int const [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘ma’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int mp [ 3 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int a , a ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "const int const const int 110 [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const const const int [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "mp [ a ] [ b ] += ma ;"
      ],
      "err_line": 11,
      "err_msg": "‘ma’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "const int res = inf ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of read-only variable ‘res’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = i ; j <= n ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( k = j ; k <= n ; k ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        11
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        17
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        11,
        17
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        11,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        17
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        17,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        5,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int const [ 110 ] ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        3,
        8,
        11
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        17
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "const int res = inf ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        3,
        8,
        17
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        3,
        8,
        17,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "const int res = inf ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        17
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        17,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "const int res = inf ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        17,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int mp [ 5 ] ;",
        "const int res = inf ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        8,
        11
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        8,
        11,
        17
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        8,
        11,
        13
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        8,
        17
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        8,
        17,
        13
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        8,
        13
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        11,
        17
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        11,
        17,
        13
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        11,
        13
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        17,
        13
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "const int const [ 110 ] ;",
        "const int res = inf ;"
      ],
      "err_line": 5,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        8,
        11,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        8,
        11,
        17,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "const int res = inf ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        8,
        17,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> const const const const int [ i ] ;",
        "const int res = inf ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘const’"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘ma’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17,
        13
      ],
      "mod_code": [
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 11,
      "err_msg": "‘ma’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "mp [ a ] [ b ] = ma [ b ] [ a ] = 1 ;",
        "const int res = inf ;"
      ],
      "err_line": 11,
      "err_msg": "‘ma’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] && mp [ j ] [ k ] && mp [ i ] [ k ] ) res = min ( res , cost [ i ] + cost [ k ] + cost [ k ] ) ;",
        "const int res = inf ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of read-only variable ‘res’"
    }
  ]
}