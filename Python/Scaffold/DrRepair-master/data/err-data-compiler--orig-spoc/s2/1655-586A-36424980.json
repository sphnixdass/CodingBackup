{
  "meta": {
    "index": 1655,
    "hitid": "3ZQA3IO31BLQLBCFP8LNVY2UOYIO12",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "586A",
    "subid": "36424980"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "make ints idk = 0 , idx2 = n + 1 , cnt = 0 , and f = 0 and int array arr of size n + 3",
      "code": "int arr [ n + 3 ] , idx1 = 0 , idx2 = n + 1 , cnt = 0 , f = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 2 to n + 1",
      "code": "for ( int i = 2 ; i <= n + 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if arr [ i ] is equal to 1 and f is equal to 0",
      "code": "if ( arr [ i ] == 1 && f == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set idx1 to i",
      "code": "idx1 = i ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = n + 1 to 2",
      "code": "for ( int i = n + 1 ; i >= 2 ; i -- )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if arr [ i ] is equal to 1",
      "code": "if ( arr [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set idx2 to i",
      "code": "idx2 = i ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = idx1 to idx2",
      "code": "for ( int i = idx1 ; i <= idx2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if arr [ i ] is equal to 1",
      "code": "if ( arr [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else if arr [ i ] is equal to 0",
      "code": "else if ( arr [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if arr [ i - 1 ] is not equal to 0 and arr [ i + 1 ] is not equal to 0 , increment cnt",
      "code": "if ( arr [ i - 1 ] != 0 && arr [ i + 1 ] != 0 ) { cnt ++ ; }",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> arr . at ( i ) ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘at’ in ‘arr’, which is of non-class type ‘int [(n + 3)]’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        14,
        17
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        14,
        17,
        4
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        14,
        17,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        14,
        4
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "break break ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        14,
        4,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "break break ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        14,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "break break ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        17,
        4
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        17,
        4,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        17,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 , f = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        17,
        4
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        17,
        4,
        3
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        14,
        17,
        4,
        2
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        17,
        3
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        14,
        17,
        3,
        2
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        14,
        17,
        2
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        4,
        3
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        14,
        4,
        3,
        2
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        14,
        4,
        2
      ],
      "mod_code": [
        "break break ;",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "n = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "break break ;",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        14,
        3,
        2
      ],
      "mod_code": [
        "break break ;",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "break break ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        17,
        4,
        3,
        2
      ],
      "mod_code": [
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        17,
        3,
        2
      ],
      "mod_code": [
        "for ( int i = idx1 ; i < idx2 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n + 1 ; i ++ )",
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int idk = 0 , idx2 = n + 1 , cnt = 0 + 1 , cnt = 0 , f = 0 ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int cnt’"
    }
  ]
}