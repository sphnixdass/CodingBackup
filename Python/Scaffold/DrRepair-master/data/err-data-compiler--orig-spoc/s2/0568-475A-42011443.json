{
  "meta": {
    "index": 568,
    "hitid": "3SU800BH86M9FKGT69NBV52RD9WQUZ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "475A",
    "subid": "42011443"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character 2d array che with size = 7 by 100",
      "code": "char che [ 7 ] [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "copy \" + - - - - - - - - - - - - - - - - - - - - - - + \" into che [ 0 ]",
      "code": "strcpy ( che [ 0 ] , \" +------------------------+ \" ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "copy \" | # . # . # . # . # . # . # . # . # . # . # . | D | ) \" into che [ 1 ]",
      "code": "strcpy ( che [ 1 ] , \" |#.#.#.#.#.#.#.#.#.#.#.|D|) \" ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "copy \" | # . # . # . # . # . # . # . # . # . # . # . | . | \" into che [ 2 ]",
      "code": "strcpy ( che [ 2 ] , \" |#.#.#.#.#.#.#.#.#.#.#.|.| \" ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "copy \" | # . . . . . . . . . . . . . . . . . . . . . . . | \" into che [ 3 ]",
      "code": "strcpy ( che [ 3 ] , \" |#.......................| \" ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "copy \" | # . # . # . # . # . # . # . # . # . # . # . | . | ) \" into che [ 4 ]",
      "code": "strcpy ( che [ 4 ] , \" |#.#.#.#.#.#.#.#.#.#.#.|.|) \" ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "copy \" + - - - - - - - - - - - - - - - - - - - - - - + \" ) into che [ 5 ]",
      "code": "strcpy ( che [ 5 ] , \" +------------------------+ \" ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for integer i = 0 to 22 inclusive",
      "code": "for ( int i = 0 ; i <= 22 ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for integer j = 0 to 6 exclusive",
      "code": "for ( int j = 0 ; j < 6 ; j ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if che [ j ] [ i ] = ' # '",
      "code": "if ( che [ j ] [ i ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set che [ j ] [ i ] = ' O '",
      "code": "che [ j ] [ i ] = ' O ' ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "decrease n by one",
      "code": "n -- ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "break if n is 0",
      "code": "if ( ! n ) { break ; }",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "break if n is 0",
      "code": "if ( ! n ) { break ; }",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for integer i = 0 to 6 exclusive print che [ i ]",
      "code": "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] << endl ; }",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘copy’ in ‘che[4]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char size [ 7 ] = 7 ;"
      ],
      "err_line": 1,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] . begin ( ) >> 1.0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "request for member ‘begin’ in ‘che[0]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . begin ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" :: \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] . copy ( \" | \" ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘copy’ in ‘che[3]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "strcpy ( che [ 5 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( statment [ j ] [ i ] == ' # ' )"
      ],
      "err_line": 12,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        5
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 0 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        5
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        7,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "char size [ 7 ] [ 100 ] ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "‘che’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        5
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 1 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 0 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        4,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        5,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 1 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘copy’ in ‘che[1]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        5,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 2 ] . copy ( \" 1.0 \" ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘copy’ in ‘che[2]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 3 ] , \" copy \" ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘copy’ in ‘che[4]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        6,
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 4 ] . copy ) ;",
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘copy’ in ‘che[4]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 4 ] . copy ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘copy’ in ‘che[4]’, which is of non-class type ‘char [100]’"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "strcpy ( che [ 5 ] ) ;",
        "for ( int i = 0 ; i < 6 ; i ++ ) { cout << che [ i ] ; }"
      ],
      "err_line": 7,
      "err_msg": "too few arguments to function ‘char* strcpy(char*, const char*)’"
    }
  ]
}