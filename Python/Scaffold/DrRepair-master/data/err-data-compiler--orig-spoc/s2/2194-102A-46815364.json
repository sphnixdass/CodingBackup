{
  "meta": {
    "index": 2194,
    "hitid": "3T2HW4QDUV171RI73GRPF4QWXWM9CY",
    "workerid": "A1AYVATMT88U1W",
    "probid": "102A",
    "subid": "46815364"
  },
  "lines": [
    {
      "line": 0,
      "text": "dp = array of long integers of length 105",
      "code": "long long dp [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "x = 2d array of integers with 105 rows and 105 columns",
      "code": "int x [ 105 ] [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let n , m be integers",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive , read dp [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> dp [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while m is decremented by 1",
      "code": "while ( m -- )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let i , j be integers",
      "code": "int i , j ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read i , j",
      "code": "cin >> i >> j ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "x [ i ] [ j ] is equal to 1",
      "code": "x [ i ] [ j ] = 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "x [ j ] [ i ] is equal to 1",
      "code": "x [ j ] [ i ] = 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "the long integer value of minx = 5000000",
      "code": "long long minx = 5000000 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 2 to n exclusive",
      "code": "for ( int i = 2 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for integer j = i - 1 , j is greater than 0 , decrement j by 1",
      "code": "for ( int j = i - 1 ; j > 0 ; j -- )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for integer k = i + 1 to n inclusive",
      "code": "for ( int k = i + 1 ; k <= n ; k ++ )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if x [ j ] [ k ] equals 1 and x [ j ] [ i ] equals 1 and x [ i ] [ k ] equals 1",
      "code": "if ( x [ j ] [ k ] == 1 && x [ j ] [ i ] == 1 && x [ i ] [ k ] == 1 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "the long integer value of num = dp [ i ] + dp [ j ] + dp [ k ]",
      "code": "long long num = dp [ i ] + dp [ j ] + dp [ k ] ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "if num is less than minx , minx is equal to num else minx is equal to minx",
      "code": "minx = num < minx ? num : minx ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if minx equals 5000000",
      "code": "if ( minx == 5000000 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print - 1 and newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print minx and newline",
      "code": "cout << minx << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "while ( m is 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else if ( minx == 5000000 )"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        18,
        4,
        9,
        14
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "cin >> n , m ;",
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        4,
        14
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "cin >> n , m ;",
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        4,
        14,
        8
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "cin >> n , m ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        4,
        14,
        10
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "cin >> n , m ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        9,
        14
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        9,
        14,
        8
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        9,
        14,
        10
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        14,
        8
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        14,
        8,
        10
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        18,
        14,
        10
      ],
      "mod_code": [
        "for ( ; num < minx ; num ++ ) { minx = num + minx ; }",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        9,
        14
      ],
      "mod_code": [
        "cin >> n , m ;",
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        9,
        14,
        8
      ],
      "mod_code": [
        "cin >> n , m ;",
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        9,
        14,
        10
      ],
      "mod_code": [
        "cin >> n , m ;",
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        14,
        8
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        14,
        8,
        10
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        14,
        10
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        9,
        14,
        8
      ],
      "mod_code": [
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        9,
        14,
        8,
        10
      ],
      "mod_code": [
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        9,
        14,
        10
      ],
      "mod_code": [
        "x [ i ] [ j ] = ' 1 ' ;",
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        14,
        8,
        10
      ],
      "mod_code": [
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "cin >> i , j ;",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "for ( int j = i - 1 , j > 0 ; j -- )",
        "x [ j ] [ j ] = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘>’ token"
    }
  ]
}