{
  "meta": {
    "index": 461,
    "hitid": "3RKHNXPHGWQN4HIYT43EZJQIE34KU1",
    "workerid": "A1APYLD4DUK33J",
    "probid": "228A",
    "subid": "48875387"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer count with count = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer a with size 4",
      "code": "int a [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a [ 0 ] read a [ 1 ] read a [ 2 ] read a [ 3 ]",
      "code": "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 4 exclusive",
      "code": "for ( int i = 0 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = i + 1 to 4 exclusive",
      "code": "for ( int j = i + 1 ; j < 4 ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if a [ i ] is a [ j ] , increment count",
      "code": "if ( a [ i ] == a [ j ] ) { count ++ ; }",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if count is 0",
      "code": "if ( count == 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" 0 \" print newline",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if count is 1",
      "code": "if ( count == 1 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" 1 \" print newline",
      "code": "cout << \" 1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if count is 2",
      "code": "if ( count == 2 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" 2 \" print newline",
      "code": "cout << \" 2 \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if count is 3",
      "code": "if ( count == 3 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" 2 \" print newline",
      "code": "cout << \" 2 \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if count is 6",
      "code": "if ( count == 6 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" 3 \" print newline",
      "code": "cout << \" 3 \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "count = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < 4 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "<< \" 1 \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        22
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        22,
        26
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        22,
        26,
        18
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        22,
        26,
        3
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        22,
        26,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        22,
        18
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        22,
        18,
        3
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        22,
        18,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        22,
        3
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        22,
        3,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        22,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        26
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 3 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        26,
        18
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        26,
        18,
        3
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        26,
        18,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        26,
        3
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        26,
        3,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        26,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        18,
        3
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        18,
        3,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        18,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "<< \" 0 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        22,
        26
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22,
        26,
        18
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22,
        26,
        18,
        3
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        22,
        26,
        18,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        22,
        26,
        3
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        22,
        26,
        3,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        22,
        26,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 3 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        22,
        18
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22,
        18,
        3
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        22,
        18,
        3,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        22,
        18,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        22,
        3,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        22,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        18
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        18,
        3
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        26,
        18,
        3,
        2
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        18,
        2
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;",
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        3
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        26,
        3,
        2
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        26,
        2
      ],
      "mod_code": [
        "<< \" 3 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        18,
        3,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "<< \" 2 \" << endl ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] >> a [ 1 ] >> a [ 2 ] >> a . 3 ;",
        "int * a [ 4 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    }
  ]
}