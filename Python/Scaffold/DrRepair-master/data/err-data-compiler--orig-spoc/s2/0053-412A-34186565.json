{
  "meta": {
    "index": 53,
    "hitid": "341H3G5YF082DQ54VYS4XRQO3A8Z05",
    "workerid": "AIWEXPJAU66D9",
    "probid": "412A",
    "subid": "34186565"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new int variables n and m",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read from the input to n , m and s",
      "code": "cin >> n >> m >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer variable v1 = m - 1 and v2 = n - m",
      "code": "int v1 = m - 1 , v2 = n - m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if v1 is less than v2",
      "code": "if ( v1 < v2 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to v1 exclusive",
      "code": "for ( int i = 0 ; i < v1 ; ++ i )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" LEFT \" to the standard output",
      "code": "cout << \" LEFT \"",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "for integer i = 0 to length of s exclusive incrementing i",
      "code": "for ( int i = 0 ; i < s . size ( ) ; ++ i )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if i ! = 0",
      "code": "if ( i != 0 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "print \" RIGHT \" to the standard output",
      "code": "cout << \" RIGHT \"",
      "indent": 4
    },
    {
      "line": 12,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "print \" PRINT \" , s [ i ] and \" \\ n \"",
      "code": "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i from 0 to v2 exclusive",
      "code": "for ( int i = 0 ; i < v2 ; ++ i )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print \" RIGHT \" to the standard output",
      "code": "cout << \" RIGHT \"",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "in a for loop , change i from length of s - 1 to 0 inclusive counting down",
      "code": "for ( int i = s . size ( ) - 1 ; i >= 0 ; -- i )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print \" PRINT \" , s [ i ] and \" \\ n \"",
      "code": "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if i ! = 0",
      "code": "if ( i != 0 )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "print \" LEFT \" to the standard output",
      "code": "cout << \" LEFT \"",
      "indent": 4
    },
    {
      "line": 23,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n and m ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const string s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n , m >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int v1 = m - 1 - v2 = n - m ;"
      ],
      "err_line": 4,
      "err_msg": "‘v2’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" LEFT \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" RIGHT \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" PRINT \" , s [ i ] << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "invalid operands of types ‘char’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < v2 ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cout << \" RIGHT \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << \" PRINT \" , s [ i ] << \" \\n \" ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘char’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" << endl ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        13
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        17
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        20
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        17
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        17,
        20
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        17,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        20
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        20,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        13,
        17
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        13,
        17,
        20
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        13,
        17,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        13,
        20
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        13,
        20,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        13,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        17,
        20
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        17,
        20,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        17,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        20,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "cout << \" LEFT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13,
        17
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13,
        17,
        20
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13,
        17,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13,
        20
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13,
        20,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        17,
        20
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        17,
        20,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        17,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        20
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        20,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        17,
        20
      ],
      "mod_code": [
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        17,
        20,
        22
      ],
      "mod_code": [
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        17,
        22
      ],
      "mod_code": [
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        20,
        22
      ],
      "mod_code": [
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        22
      ],
      "mod_code": [
        "cout << \" RIGHT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "cout << \" PRINT \" << s [ i ] << \" \\n \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    }
  ]
}