{
  "meta": {
    "index": 1955,
    "hitid": "3K8CQCU3KEV14RS6LHAV9ZSJTEMNWA",
    "workerid": "AIWEXPJAU66D9",
    "probid": "319A",
    "subid": "48556818"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables f , r , i , j , k , l , x and y",
      "code": "int f , r , i , j , k , l , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let n2 be long long array with size 201",
      "code": "long long n2 [ 201 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string X",
      "code": "string X ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set value of n2 [ 0 ] to 1",
      "code": "n2 [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for long long i = 0 to 200 exclusive , change n2 [ i + 1 ] to ( n2 [ i ] * 2 ) % 1000000007",
      "code": "for ( long long i = 0 ; i < 200 ; i ++ ) n2 [ i + 1 ] = ( n2 [ i ] * 2 ) % 1000000007 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read X",
      "code": "cin >> X ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare long long variable ret = 0",
      "code": "long long ret = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for long long i = 0 to length of X exclusive",
      "code": "for ( long long i = 0 ; i < X . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if X [ i ] = ' 1 ' set ret to ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i - 1 ) ] ) % 1000000007",
      "code": "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i - 1 ) ] ) % 1000000007 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print ret",
      "code": "cout << ret << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "invoke function solve",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "solve ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string X << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "X >> X ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "solve ( ) invoke ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘invoke’"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        3,
        14
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "solve ( ) invoke ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        3,
        14,
        6
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "solve ( ) invoke ;",
        "X >> X ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        3,
        14,
        11
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "solve ( ) invoke ;",
        "cout << ret ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        3,
        14,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "solve ( ) invoke ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        3,
        6
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "X >> X ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        3,
        6,
        11
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "X >> X ;",
        "cout << ret ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        3,
        6,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "X >> X ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        3,
        11
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "cout << ret ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        3,
        11,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        3,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "string X << endl ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "solve ( ) invoke ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘invoke’"
    },
    {
      "mod_line": [
        9,
        14,
        6
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "solve ( ) invoke ;",
        "X >> X ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        14,
        6,
        11
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "solve ( ) invoke ;",
        "X >> X ;",
        "cout << ret ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        14,
        6,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "solve ( ) invoke ;",
        "X >> X ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        14,
        11
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "solve ( ) invoke ;",
        "cout << ret ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘invoke’"
    },
    {
      "mod_line": [
        9,
        14,
        11,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "solve ( ) invoke ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        14,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "solve ( ) invoke ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "X >> X ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        11
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "X >> X ;",
        "cout << ret ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        11,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "X >> X ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        6,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "X >> X ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        11,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( X [ i ] == ' 1 ' ) ret = ( ret + n2 [ i ] * n2 [ 2 * ( X . size ( ) - i ) ] % 1000000007 ) % 1000000007 ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "string X << endl ;",
        "solve ( ) invoke ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        14,
        6
      ],
      "mod_code": [
        "string X << endl ;",
        "solve ( ) invoke ;",
        "X >> X ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        14,
        6,
        11
      ],
      "mod_code": [
        "string X << endl ;",
        "solve ( ) invoke ;",
        "X >> X ;",
        "cout << ret ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        14,
        6,
        1
      ],
      "mod_code": [
        "string X << endl ;",
        "solve ( ) invoke ;",
        "X >> X ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        14,
        11
      ],
      "mod_code": [
        "string X << endl ;",
        "solve ( ) invoke ;",
        "cout << ret ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        14,
        11,
        1
      ],
      "mod_code": [
        "string X << endl ;",
        "solve ( ) invoke ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        14,
        1
      ],
      "mod_code": [
        "string X << endl ;",
        "solve ( ) invoke ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string X << endl ;",
        "X >> X ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        6,
        11
      ],
      "mod_code": [
        "string X << endl ;",
        "X >> X ;",
        "cout << ret ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        1
      ],
      "mod_code": [
        "string X << endl ;",
        "X >> X ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        6,
        1
      ],
      "mod_code": [
        "string X << endl ;",
        "X >> X ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "string X << endl ;",
        "cout << ret ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        11,
        1
      ],
      "mod_code": [
        "string X << endl ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "string X << endl ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "solve ( ) invoke ;",
        "X >> X ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        6,
        11
      ],
      "mod_code": [
        "solve ( ) invoke ;",
        "X >> X ;",
        "cout << ret ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        6,
        11,
        1
      ],
      "mod_code": [
        "solve ( ) invoke ;",
        "X >> X ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        14,
        6,
        1
      ],
      "mod_code": [
        "solve ( ) invoke ;",
        "X >> X ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        14,
        11
      ],
      "mod_code": [
        "solve ( ) invoke ;",
        "cout << ret ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘invoke’"
    },
    {
      "mod_line": [
        14,
        11,
        1
      ],
      "mod_code": [
        "solve ( ) invoke ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "solve ( ) invoke ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "X >> X ;",
        "cout << ret ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        11,
        1
      ],
      "mod_code": [
        "X >> X ;",
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "X >> X ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "cout << ret ;",
        "int f , r , i , j , k , l , x >> y ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    }
  ]
}