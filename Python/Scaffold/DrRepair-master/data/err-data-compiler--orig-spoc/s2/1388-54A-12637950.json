{
  "meta": {
    "index": 1388,
    "hitid": "3WRKFXQBOB1DFVCF32FRPOHIJAQIYX",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "54A",
    "subid": "12637950"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make ints n and k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "open file . txt",
      "code": "ifstream ff ( \" file.txt \" ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "make integer c",
      "code": "int c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let integer vector v1 of size c + 1",
      "code": "vector < int > v1 ( c + 1 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set v1 [ 0 ] to 0",
      "code": "v1 [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to c , read v1 [ i ]",
      "code": "for ( int i = 1 ; i <= c ; i ++ ) { cin >> v1 [ i ] ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if k is equal to 1",
      "code": "if ( k == 1 ) { }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create integer sum = 0",
      "code": "int sumd = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "make int needPrezent",
      "code": "int needPrezent ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to c exclusive",
      "code": "for ( int i = 0 ; i < c ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "make ints l and r",
      "code": "int l , r ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set l to v1 [ i ]",
      "code": "l = v1 [ i ] ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set r to v1 [ i + 1 ]",
      "code": "r = v1 [ i + 1 ] ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if r - 1 is less than or equal to k , continue loop",
      "code": "if ( r - l <= k ) { continue ; }",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set needPrezent to r - 1",
      "code": "needPrezent = r - l ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if needPrezent % k is 0",
      "code": "if ( needPrezent % k == 0 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "add ( needPrezent / k ) - 1 to sumd",
      "code": "sumd += ( needPrezent / k ) - 1 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increase sumd by ( needPrezent / k )",
      "code": "sumd += ( needPrezent / k ) ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if v1 [ c ] is less than n , set sumd to sumd + ( n - v1 [ c ] / k )",
      "code": "if ( v1 [ c ] < n ) { sumd += ( n - v1 [ c ] ) / k ; }",
      "indent": 1
    },
    {
      "line": 25,
      "text": "set sumd to sumd + v1 . size ( ) - 1",
      "code": "sumd += v1 . size ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print sumd",
      "code": "cout << sumd << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( k == 1 )"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int sum = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> n >> k )"
      ],
      "err_line": 5,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "c ;"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "vector < int > v1 [ c + 1 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int v1 [ 0 ] = { 0 } ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘int v1 [0]’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "sum = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int l = v1 [ i ] ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        10
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "int sum = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        10,
        16
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        10,
        17
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "int sum = 0 ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        10,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "int sum = 0 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        16
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "if ( r - 1 <= k ) continue ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        16,
        17
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        16,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "if ( r - 1 <= k ) continue ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        17
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        17,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( k == 1 )",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int sum = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        10,
        16
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        10,
        16,
        17
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        10,
        16,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        10,
        17
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int sum = 0 ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int sum = 0 ;",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        10,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int sum = 0 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( r - 1 <= k ) continue ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        16,
        17
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        16,
        17,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        16,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( r - 1 <= k ) continue ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        17,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        24
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( k == 1 )",
        "int sum = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        16
      ],
      "mod_code": [
        "if ( k == 1 )",
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        16,
        17
      ],
      "mod_code": [
        "if ( k == 1 )",
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        16,
        24
      ],
      "mod_code": [
        "if ( k == 1 )",
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        17
      ],
      "mod_code": [
        "if ( k == 1 )",
        "int sum = 0 ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        17,
        24
      ],
      "mod_code": [
        "if ( k == 1 )",
        "int sum = 0 ;",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        24
      ],
      "mod_code": [
        "if ( k == 1 )",
        "int sum = 0 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "if ( k == 1 )",
        "if ( r - 1 <= k ) continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16,
        17
      ],
      "mod_code": [
        "if ( k == 1 )",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16,
        17,
        24
      ],
      "mod_code": [
        "if ( k == 1 )",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16,
        24
      ],
      "mod_code": [
        "if ( k == 1 )",
        "if ( r - 1 <= k ) continue ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "if ( k == 1 )",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        17,
        24
      ],
      "mod_code": [
        "if ( k == 1 )",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "if ( k == 1 )",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16,
        17
      ],
      "mod_code": [
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16,
        17,
        24
      ],
      "mod_code": [
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16,
        24
      ],
      "mod_code": [
        "int sum = 0 ;",
        "if ( r - 1 <= k ) continue ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "int sum = 0 ;",
        "needPrezent = r - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17,
        24
      ],
      "mod_code": [
        "int sum = 0 ;",
        "needPrezent = r - 1 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        24
      ],
      "mod_code": [
        "int sum = 0 ;",
        "if ( v1 [ c ] < n ) sumd += ( n - v1 [ c ] / k ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘sumd’ was not declared in this scope"
    }
  ]
}