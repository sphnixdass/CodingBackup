{
  "meta": {
    "index": 2209,
    "hitid": "3OB6JN3A9QJQEDQKAMLP9LV2XWPRME",
    "workerid": "A1APYLD4DUK33J",
    "probid": "914A",
    "subid": "41891679"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer t",
      "code": "int t ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array a with size 1005",
      "code": "int a [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare cmp with integers a , b as arguments , returning boolean",
      "code": "bool cmp ( int a , int b )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "return a is greater than b from function",
      "code": "return a > b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to t inclusive , read a [ i ]",
      "code": "for ( int i = 1 ; i <= t ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "sort elements from a + 1 to a + 1 + t using cmp to compare",
      "code": "sort ( a + 1 , a + 1 + t , cmp ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 1 to t inclusive",
      "code": "for ( int i = 1 ; i <= t ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if integer casted square root of a [ i ] * integer casted square root of a [ i ] is not a [ i ]",
      "code": "if ( ( int ) sqrt ( a [ i ] ) * ( int ) sqrt ( a [ i ] ) != a [ i ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print a [ i ] print newline",
      "code": "cout << a [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return a > b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        9,
        3
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        9,
        3,
        10
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        9,
        3,
        1
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        9,
        3,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        1
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        9,
        1
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        9,
        1,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        9,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "for ( i = 1 ; i <= t ; i ++ )",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "return a > b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3,
        10
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3,
        10,
        1
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        3,
        10,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3,
        1
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "return a > b ) ;",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        3,
        1,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "return a > b ) ;",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        3,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "return a > b ) ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        10,
        1
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        10,
        1,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        10,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        1,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "sort ( a + 1 , a + 1 + t + cmp , cmp ) ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘bool(int, int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        10,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        9,
        3,
        10,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        9,
        3,
        1,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        9,
        3,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "return a > b ) ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        9,
        10,
        1,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        9,
        10,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        9,
        1,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= t ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        10,
        1
      ],
      "mod_code": [
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        10,
        1,
        12
      ],
      "mod_code": [
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        10,
        12
      ],
      "mod_code": [
        "return a > b ) ;",
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "return a > b ) ;",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        1,
        12
      ],
      "mod_code": [
        "return a > b ) ;",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "return a > b ) ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        10,
        1,
        12
      ],
      "mod_code": [
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( int ( sqrt ( a [ i ] ) * int ( sqrt ( a [ i ] ) ) != a [ i ] )",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "a [ 1005 ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ does not name a type"
    }
  ]
}