{
  "meta": {
    "index": 952,
    "hitid": "3UV0D2KX1MDD7XW5DNLZ620J8HW4F4",
    "workerid": "A1AYVATMT88U1W",
    "probid": "146A",
    "subid": "45911783"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "the number of occurances of integer x is 4",
      "code": "int x = count ( s . begin ( ) , s . end ( ) , ' 4 ' ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x is equal to x + count ( s . begin ( ) , s . end ( ) , 7 )",
      "code": "x += count ( s . begin ( ) , s . end ( ) , ' 7 ' ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let y be an integer with y = 0",
      "code": "int y = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if i is less than n / 2",
      "code": "if ( i < n / 2 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment y by s [ i ]",
      "code": "y += s [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "decrement y by s [ i ]",
      "code": "y -= s [ i ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print YES and newline if x is equal to n and y is equal to 0 else print NO and newline",
      "code": "cout << ( x == n && y == 0 ? \" YES\\n \" : \" NO\\n \" ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int occurances ( int x == 4 )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> n >> s )"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int occurances ( int x )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        13
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        7
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        10
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        10
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        13,
        7
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        13,
        7,
        10
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        13,
        7,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        13,
        10
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        13,
        10,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        13,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        7,
        10
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        10,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "int occurances ( int x == 4 )",
        "y = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ or ‘...’ before ‘==’ token"
    },
    {
      "mod_line": [
        5,
        13,
        7
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        7,
        10
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        7,
        6
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        10
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        10,
        6
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        6
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        6
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        6
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "x += count ( s . begin ( ) , s . end ( ) , 7 ) ;",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7,
        10
      ],
      "mod_code": [
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7,
        10,
        6
      ],
      "mod_code": [
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7,
        6
      ],
      "mod_code": [
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        10,
        6
      ],
      "mod_code": [
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "cout << ( x == n ? \" YES \" : \" NO \" ) << endl ;",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "else do",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "else do",
        "y = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘y’ was not declared in this scope"
    }
  ]
}