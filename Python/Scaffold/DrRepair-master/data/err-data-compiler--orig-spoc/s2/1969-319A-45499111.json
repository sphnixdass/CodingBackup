{
  "meta": {
    "index": 1969,
    "hitid": "3NBFJK3IOHCNPQ2I7R6Q2L60QNROGS",
    "workerid": "AIWEXPJAU66D9",
    "probid": "319A",
    "subid": "45499111"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare const int mod = 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare const int N = 1e6 + 10",
      "code": "const int N = 1e6 + 10 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare const long long INF = 1e18",
      "code": "const long long INF = 1e18 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare const long double EPS = 1e - 12",
      "code": "const long double EPS = 1e-12 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare int array tp with size 105",
      "code": "int tp [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "function add with int arguments x and y that returns int",
      "code": "int add ( int x , int y )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create integer z = x + y",
      "code": "int z = x + y ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if z > = mod , decrease z by mod",
      "code": "if ( z >= mod ) z -= mod ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return z",
      "code": "return z ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "integer function mul with int arguments x and y",
      "code": "int mul ( int x , int y )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare long long variable z = 1LL * x * y",
      "code": "long long z = 1LL * x * y ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if z > = mod , change z to z % mod",
      "code": "if ( z >= ( long long ) mod ) z %= mod ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return z",
      "code": "return z ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set tp [ 0 ] to 1",
      "code": "tp [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i from 1 to 105 exclusive , set tp [ i ] to mul ( tp [ i - 1 ] , 2 )",
      "code": "for ( int i = ( int ) 1 ; i < ( int ) 105 ; i ++ ) tp [ i ] = mul ( tp [ i - 1 ] , 2 ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "create int n = length of s",
      "code": "int n = ( int ) ( s . size ( ) ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "create integer ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "loop i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < ( int ) n ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "declare int variable len = n - 1 - i",
      "code": "int len = n - 1 - i ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if s [ i ] = ' 1 ' , change ans to add ( ans , mul ( tp [ i ] , mul ( tp [ len ] , tp [ len ] ) ) )",
      "code": "if ( s [ i ] == ' 1 ' ) { ans = add ( ans , mul ( tp [ i ] , mul ( tp [ len ] , tp [ len ] ) ) ) ; }",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 2,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int * tp [ 105 ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int add ( int x that int y )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int mul ( int x , int y ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "bool s ;"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘bool’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int n = strlen ( s ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] ) ) ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        4,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "ans = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        4,
        17
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        4,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "ans = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        21,
        17
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "ans = 0 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        21,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "ans = 0 ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        17
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        17,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        5,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int add ( int x that int y )",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        24,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int * tp [ 105 ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        4,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int * tp [ 105 ] ;",
        "ans = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        4,
        21,
        17
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int * tp [ 105 ] ;",
        "ans = 0 ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        4,
        21,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int * tp [ 105 ] ;",
        "ans = 0 ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        4,
        17
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int * tp [ 105 ] ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        4,
        17,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int * tp [ 105 ] ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        4,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int * tp [ 105 ] ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "ans = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        21,
        17
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "ans = 0 ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        21,
        17,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "ans = 0 ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        21,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "ans = 0 ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        24,
        17
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        17,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == ' 1 ' ) ans = add ( ans , mul ( tp , mul ( tp [ i ] , mul [ len ] , tp [ len ] ) ) ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        4,
        21
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "ans = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        4,
        21,
        17
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "ans = 0 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        4,
        21,
        20
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "ans = 0 ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        4,
        17
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        4,
        17,
        20
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        4,
        20
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int * tp [ 105 ] ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "ans = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        21,
        17
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "ans = 0 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        21,
        17,
        20
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "ans = 0 ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        21,
        20
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "ans = 0 ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        17,
        20
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "int add ( int x that int y )",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        4,
        21
      ],
      "mod_code": [
        "int * tp [ 105 ] ;",
        "ans = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        21,
        17
      ],
      "mod_code": [
        "int * tp [ 105 ] ;",
        "ans = 0 ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        21,
        17,
        20
      ],
      "mod_code": [
        "int * tp [ 105 ] ;",
        "ans = 0 ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        21,
        20
      ],
      "mod_code": [
        "int * tp [ 105 ] ;",
        "ans = 0 ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "int * tp [ 105 ] ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        17,
        20
      ],
      "mod_code": [
        "int * tp [ 105 ] ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "int * tp [ 105 ] ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        17
      ],
      "mod_code": [
        "ans = 0 ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        17,
        20
      ],
      "mod_code": [
        "ans = 0 ;",
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        20
      ],
      "mod_code": [
        "ans = 0 ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "s >> s ;",
        "int n = strlen ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}