{
  "meta": {
    "index": 120,
    "hitid": "3GV1I4SEO9JDMCAFIMHCYDPH14Q6LY",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "411A",
    "subid": "48930589"
  },
  "lines": [
    {
      "line": 0,
      "text": "create bools flag1 , flag2 , and flag3",
      "code": "bool flag1 , flag2 , flag3 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "make string x",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to x . size ( ) exclusive",
      "code": "for ( int i = 0 ; i < x . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if x [ i ] is greater than or equal to ' a ' and x [ i ] is less than or equal to ' z '",
      "code": "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' ) flag1 = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if x [ i ] is greater than or equal to ' A ' and x [ i ] is less than or equal to ' Z '",
      "code": "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' ) flag2 = 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if x [ i ] is greater than or equal to ' 0 ' and x [ i ] is less than or equal to ' 9 '",
      "code": "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' ) flag3 = 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if x . size ( ) is greater than or equal to 5 and flag1 , flag2 , and flag3 is truthy",
      "code": "if ( x . size ( ) >= 5 && flag1 && flag2 && flag3 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "display \" Correct \"",
      "code": "puts ( \" Correct \" ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "otherwise",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" Too weak \"",
      "code": "puts ( \" Too weak \" ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool flag1 , flag2 , flag3 , flag3 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘bool flag3’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string : ;"
      ],
      "err_line": 3,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' and x [ i ] <= ' 9 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" Correct \""
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "otherwise"
      ],
      "err_line": 11,
      "err_msg": "‘otherwise’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        9
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" Correct \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" Correct \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        9,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' a ' && x [ i ] <= ' z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        9
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        9,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        9,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" Correct \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        10,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' A ' && x [ i ] <= ' Z ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" Correct \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        10,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( x [ i ] >= ' 0 ' && x [ i ] <= ' 9 ' )",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        10,
        12
      ],
      "mod_code": [
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "if ( x . size ( ) >= 5 && flag1 ) flag1 , flag3 ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}