{
  "meta": {
    "index": 2753,
    "hitid": "3T8DUCXY0N0ON8KIP2MF4EQ0LIH9TC",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "474A",
    "subid": "49036837"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "x = int",
      "code": "int x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s , m , a = string with s = \" qwertyuiopasdfghjkl ; zxcvbnm , . / \"",
      "code": "string s = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" , m , a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "z = char",
      "code": "char z ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read z then m",
      "code": "cin >> z >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if z is ' R '",
      "code": "if ( z == ' R ' )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to size of m",
      "code": "for ( int i = 0 ; i < m . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 0 to size of s",
      "code": "for ( int j = 0 ; j < s . size ( ) ; j ++ )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if m [ i ] is s [ j ] set x to j",
      "code": "if ( m [ i ] == s [ j ] ) x = j ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "append s [ x - 1 ] to a",
      "code": "a += s [ x - 1 ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to size of m",
      "code": "for ( int i = 0 ; i < m . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for j = 0 to size of s",
      "code": "for ( int j = 0 ; j < s . size ( ) ; j ++ )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if m [ i ] is s [ j ] set x to j",
      "code": "if ( m [ i ] == s [ j ] ) x = j ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "append s [ x + 1 ] to a",
      "code": "a += s [ x + 1 ] ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print a",
      "code": "cout << a << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , m = \" qwertyuiopasdfghjkl \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char z = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> n >> m ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( z == ' R ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < m . size ( ) ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < m . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "char z = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        7
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        12
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        12
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        12
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        12,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "char z = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        12
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "char z = \" \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "char z = \" \" ;",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        12
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        12,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "string s = \" qwertyuiopasdfghjkl \" , a = \" qwertyuiopasdfghjkl \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "char z = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        7
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        7,
        12
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        7,
        14
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        12
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        12,
        14
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        14
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        12
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        14
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        14
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        14
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "cin >> n >> m ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        12
      ],
      "mod_code": [
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        14
      ],
      "mod_code": [
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        14
      ],
      "mod_code": [
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "char z = \" \" ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        12,
        14
      ],
      "mod_code": [
        "char z = \" \" ;",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "char z = \" \" ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        12,
        14
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) ; j ++ )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "n",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}