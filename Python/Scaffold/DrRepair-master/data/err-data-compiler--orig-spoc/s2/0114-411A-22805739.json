{
  "meta": {
    "index": 114,
    "hitid": "356ZPKYPUHB5WHZJGX5BYLIU5OJYPN",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "411A",
    "subid": "22805739"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if length of s less than 5 then",
      "code": "if ( s . length ( ) < 5 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" Too weak \"",
      "code": "cout << \" Too weak \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create boolean cont_big_word , cont_little_word , cont_cifra and set to false",
      "code": "bool cont_big_word = false , cont_little_word = false , cont_cifra = false ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to length of s - 1 with increment i",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ i ] greater than or equal to ' a ' and s [ i ] less than or equal to ' z ' then",
      "code": "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set cont_little word to true",
      "code": "cont_little_word = true ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if s [ i ] greater than or equal to ' A ' and s [ i ] less than or equal to ' Z ' then",
      "code": "else if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set cont_big_word to true",
      "code": "cont_big_word = true ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if s [ i ] greater than or equal to ' 0 ' and s [ i ] less than or equal to ' 9 ' then",
      "code": "else if ( s [ i ] >= ' 0 ' && s [ i ] <= ' 9 ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set cont_cifra to true",
      "code": "cont_cifra = true ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if cont_little_word and cont_big_word and cont_cifra equal to true then",
      "code": "if ( cont_little_word && cont_big_word && cont_cifra )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" Correct \"",
      "code": "cout << \" Correct \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" Too weak \"",
      "code": "cout << \" Too weak \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "word = true ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra , cont_cifra = false ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘bool cont_cifra’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cont_little = true ;"
      ],
      "err_line": 10,
      "err_msg": "‘cont_little’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        7,
        10
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        17
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        19
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        17,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "cout << \" Correct \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        7,
        19,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        7,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "word = true ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        17
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "word = true ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        17,
        19
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "word = true ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        17,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "word = true ;",
        "cout << \" Correct \" ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        19
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "word = true ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        19,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "word = true ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "word = true ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        17,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "cout << \" Correct \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        19,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        17
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        17,
        19
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        17,
        18
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "cout << \" Correct \" ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        19
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        19,
        18
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        18
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "word = true ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        17,
        19,
        18
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        17,
        18
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "cout << \" Correct \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        19,
        18
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "bool cont_big_word , cont_little_word , cont_cifra = false ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "word = true ;",
        "cout << \" Correct \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17,
        19
      ],
      "mod_code": [
        "word = true ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17,
        19,
        18
      ],
      "mod_code": [
        "word = true ;",
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        17,
        18
      ],
      "mod_code": [
        "word = true ;",
        "cout << \" Correct \" ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "word = true ;",
        "cout << \" 2/3 \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        19,
        18
      ],
      "mod_code": [
        "word = true ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "word = true ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "‘word’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        19,
        18
      ],
      "mod_code": [
        "cout << \" Correct \" ;",
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "cout << \" Correct \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        19,
        18
      ],
      "mod_code": [
        "cout << \" 2/3 \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}