{
  "meta": {
    "index": 1241,
    "hitid": "3D1TUISJWIUWYMSAT1I2M3B5NMDIUX",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "291A",
    "subid": "42833632"
  },
  "lines": [
    {
      "line": 0,
      "text": "in void function cycleSort that takes arr = int array , n = int",
      "code": "void cycleSort ( int arr [ ] , int n ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "secretary_number = int",
      "code": "int secretary_number ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "leve = 0 = int",
      "code": "int level = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "press = 0 = int",
      "code": "int press = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read secretary_number",
      "code": "cin >> secretary_number ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let spyke be an int array of length secretary_number",
      "code": "int spyke [ secretary_number ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read the first secretary_number elements of spyke",
      "code": "for ( int i = 0 ; i < secretary_number ; i ++ ) { cin >> spyke [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "cycleSort with spyke and secretary_number",
      "code": "cycleSort ( spyke , secretary_number ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to secretary_number exclusive",
      "code": "for ( int i = 0 ; i < secretary_number ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set press to i + 2",
      "code": "press = i + 2 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if spyke at i = spyke at i + 1 and spyke at i isn ' t 0 the increment level",
      "code": "if ( spyke [ i ] == spyke [ i + 1 ] && spyke [ i ] != 0 ) { level ++ ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if spyke at i = spyke at press and spyke at i is not 0",
      "code": "if ( spyke [ i ] == spyke [ press ] && spyke [ i ] != 0 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "decrement level",
      "code": "level = - 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "exit loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print level",
      "code": "cout << level << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 19,
      "text": "in void function cycleSort that takes arr as an int array and n as int",
      "code": "void cycleSort ( int arr [ ] , int n )",
      "indent": 0
    },
    {
      "line": 20,
      "text": "writes = 0 = int",
      "code": "int writes = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for cycle_start = 0 to n - 2 inclusive",
      "code": "for ( int cycle_start = 0 ; cycle_start <= n - 2 ; cycle_start ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "item = arr at cycle_start = int",
      "code": "int item = arr [ cycle_start ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "pos = cycle_start = int",
      "code": "int pos = cycle_start ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for i = cycle_start + 1 to n exclusive",
      "code": "for ( int i = cycle_start + 1 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if arr at i < item then increment pos",
      "code": "if ( arr [ i ] < item ) pos ++ ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "if pos = cycle_start then go to next iteration",
      "code": "if ( pos == cycle_start ) continue ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if item = arr at pos then increment pos",
      "code": "while ( item == arr [ pos ] ) pos += 1 ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if pos isn ' t cycle_start",
      "code": "if ( pos != cycle_start )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "swap item and arr at pos",
      "code": "swap ( item , arr [ pos ] ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "increment writes",
      "code": "writes ++ ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "while pos isn ' t cycle_start",
      "code": "while ( pos != cycle_start )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "set pos to cycle_start",
      "code": "pos = cycle_start ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "for i = cycle_start + 1 to n exclusive",
      "code": "for ( int i = cycle_start + 1 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 35,
      "text": "if arr at i < item then increment pos",
      "code": "if ( arr [ i ] < item ) pos += 1 ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "while item = arr [ pos ] then increment pos",
      "code": "while ( item == arr [ pos ] ) pos += 1 ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "if item isn ' t arr at pos",
      "code": "if ( item != arr [ pos ] )",
      "indent": 3
    },
    {
      "line": 38,
      "text": "swap item and arr at pos",
      "code": "swap ( item , arr [ pos ] ) ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "increment writes",
      "code": "writes ++ ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int leve = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void cycleSort ( int arr [ ] , int n )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * leve = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cycleSort = secretary_number + secretary_number ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < secretary_number ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "void cycleSort ( int arr [ int ] , int n )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int item = arr . at ( cycle_start ) ;"
      ],
      "err_line": 22,
      "err_msg": "request for member ‘at’ in ‘arr’, which is of non-class type ‘int*’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int pos , cycle_start ;"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int cycle_start’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( i = cycle_start + 1 ; i < n ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "swap ( item , arr + pos ) ;"
      ],
      "err_line": 29,
      "err_msg": "no matching function for call to ‘swap(int&, int*)’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "for ( i = cycle_start + 1 ; i < n ; i ++ )"
      ],
      "err_line": 34,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( item != arr . at ( arr ) )"
      ],
      "err_line": 37,
      "err_msg": "request for member ‘at’ in ‘arr’, which is of non-class type ‘int*’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "swap ( item , arr + pos ) ;"
      ],
      "err_line": 38,
      "err_msg": "no matching function for call to ‘swap(int&, int*)’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        8
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        13
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        25
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        13
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "level -- ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        25
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        25
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        25,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "int leve = 0 ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "cycleSort = secretary_number , secretary_number ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        13
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        13,
        25
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        13,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        25
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        25,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "level -- ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        13,
        25
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        13,
        25,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        13,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        25,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        35
      ],
      "mod_code": [
        "void cycleSort ( int arr , int n )",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        25
      ],
      "mod_code": [
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        35
      ],
      "mod_code": [
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        3,
        8,
        25
      ],
      "mod_code": [
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        3,
        8,
        25,
        35
      ],
      "mod_code": [
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        3,
        8,
        35
      ],
      "mod_code": [
        "int leve = 0 ;",
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int leve = 0 ;",
        "level -- ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        25
      ],
      "mod_code": [
        "int leve = 0 ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        25,
        35
      ],
      "mod_code": [
        "int leve = 0 ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        35
      ],
      "mod_code": [
        "int leve = 0 ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "int leve = 0 ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        25,
        35
      ],
      "mod_code": [
        "int leve = 0 ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        35
      ],
      "mod_code": [
        "int leve = 0 ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘level’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        8,
        13,
        25
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        8,
        13,
        25,
        35
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        8,
        13,
        35
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;",
        "level -- ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        8,
        25,
        35
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    },
    {
      "mod_line": [
        8,
        35
      ],
      "mod_code": [
        "cycleSort = secretary_number , secretary_number ;",
        "if ( arr [ i ] ) pos ++ ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘void cycleSort(int*, int)’"
    }
  ]
}