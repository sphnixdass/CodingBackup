{
  "meta": {
    "index": 1142,
    "hitid": "386T3MLZLNPNTU4HM8SRK7TK3ZQ08L",
    "workerid": "AIWEXPJAU66D9",
    "probid": "4A",
    "subid": "49031709"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n and x be integers",
      "code": "int n , x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n is equal to 2",
      "code": "if ( n == 2 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if n is even",
      "code": "else if ( n % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "x = n / 2",
      "code": "x = n / 2 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if x is even",
      "code": "if ( x % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if x is odd",
      "code": "else if ( x % 2 == 1 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if n is even print \" YES \"",
      "code": "if ( n % 2 == 0 ) cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        14
      ],
      "mod_code": [
        "if ( ! n )",
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        14,
        5
      ],
      "mod_code": [
        "if ( ! n )",
        "n = getchar ( ) ;",
        "n",
        "else if ( n % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        14,
        7
      ],
      "mod_code": [
        "if ( ! n )",
        "n = getchar ( ) ;",
        "n",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        14,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n = getchar ( ) ;",
        "n",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        5,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n = getchar ( ) ;",
        "else if ( n % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        7,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n = getchar ( ) ;",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "if ( ! n )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        14,
        5
      ],
      "mod_code": [
        "if ( ! n )",
        "n",
        "else if ( n % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        14,
        5,
        7
      ],
      "mod_code": [
        "if ( ! n )",
        "n",
        "else if ( n % 2 == 1 )",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        14,
        5,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n",
        "else if ( n % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        14,
        7
      ],
      "mod_code": [
        "if ( ! n )",
        "n",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        14,
        7,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        14,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "else if ( n % 2 == 1 )",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "else if ( n % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "if ( ! n )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "else if ( n % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        5,
        7
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "else if ( n % 2 == 1 )",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        5,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "else if ( n % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        7
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        7,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "else if ( n % 2 == 1 )",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "else if ( n % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "n",
        "else if ( n % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        5,
        7
      ],
      "mod_code": [
        "n",
        "else if ( n % 2 == 1 )",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        5,
        7,
        11
      ],
      "mod_code": [
        "n",
        "else if ( n % 2 == 1 )",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        5,
        11
      ],
      "mod_code": [
        "n",
        "else if ( n % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "n",
        "if ( x % 2 == 1 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        7,
        11
      ],
      "mod_code": [
        "n",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        11
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "else if ( n % 2 == 1 )",
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "else if ( n % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( x % 2 == 1 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}