{
  "meta": {
    "index": 2083,
    "hitid": "3PCPFX4U40KKW2J3BKSC951O49EFQX",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "59A",
    "subid": "48093141"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make char array str of size 102",
      "code": "char str [ 102 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let int len = strlen ( str )",
      "code": "int len = strlen ( str ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "make ints lowerCount = 0 and upperCount = 0",
      "code": "int lowerCount = 0 , upperCount = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let int j = 0",
      "code": "int j = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while j is less than len",
      "code": "while ( j < len )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if ( int ) str [ j ] is greater than or equal to ( int ) ' A ' and ( int ) str [ j ] is less than or equal to ( int ) ' Z '",
      "code": "if ( ( ( int ) str [ j ] >= ( int ) ' A ' ) && ( ( int ) str [ j ] <= ( int ) ' Z ' ) )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment upperCount",
      "code": "upperCount ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increase lowerCount by 1",
      "code": "lowerCount ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set j to j + 1",
      "code": "j ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if upperCount is greater than lowerCount",
      "code": "if ( upperCount > lowerCount )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set j to 0",
      "code": "j = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "while j is less than len",
      "code": "while ( j < len )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if ( int ) str [ j ] is greater than or equal to ( int ) ' a ' and ( int ) str [ j ] is less than or equal to ( int ) ' z ' , set str [ j ] to ( char ) ( ( int ) str [ j ] - 32 )",
      "code": "if ( ( ( int ) str [ j ] >= ( int ) ' a ' ) && ( ( int ) str [ j ] <= ( int ) ' z ' ) ) { str [ j ] = ( char ) ( ( int ) str [ j ] - 32 ) ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set j to 0",
      "code": "j = 0 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "while j is less than len",
      "code": "while ( j < len )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if ( int ) str [ j ] is greater than or equal to ( int ) ' A ' and ( int ) str [ j ] is less than or equal to ( int ) ' Z ' , set str [ j ] to ( char ) ( ( int ) str [ j ] + 32 )",
      "code": "if ( ( ( int ) str [ j ] >= ( int ) ' A ' ) && ( ( int ) str [ j ] <= ( int ) ' Z ' ) ) { str [ j ] = ( char ) ( ( int ) str [ j ] + 32 ) ; }",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print str",
      "code": "cout << str << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "getline ( cin , str ) ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char [102])’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int lowerCount = 0 and upperCount = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘upperCount’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        22,
        6
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;"
      ],
      "err_line": 22,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        22,
        6,
        1
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        22,
        6,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        16,
        22,
        1
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        22,
        1,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "char arr [ 102 ] ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        22,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        16,
        6,
        1
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "while ( j < len ) ;",
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        6,
        1,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "while ( j < len ) ;",
        "char arr [ 102 ] ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        6,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "while ( j < len ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        1,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "char arr [ 102 ] ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) str [ j ] ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        22,
        6
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;"
      ],
      "err_line": 22,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        6,
        1
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        6,
        1,
        16
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "char arr [ 102 ] ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        6,
        1,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "char arr [ 102 ] ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        6,
        16
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        6,
        16,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        22,
        6,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "while ( j < len ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        22,
        1
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        1,
        16
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "char arr [ 102 ] ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        1,
        16,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "char arr [ 102 ] ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        1,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "char arr [ 102 ] ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        16
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        16,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        22,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' A ' && str [ j ] <= ' Z ' && str [ j ] <= ' Z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "while ( j < len ) ;",
        "char arr [ 102 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        16
      ],
      "mod_code": [
        "while ( j < len ) ;",
        "char arr [ 102 ] ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        16,
        9
      ],
      "mod_code": [
        "while ( j < len ) ;",
        "char arr [ 102 ] ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        9
      ],
      "mod_code": [
        "while ( j < len ) ;",
        "char arr [ 102 ] ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "while ( j < len ) ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        16,
        9
      ],
      "mod_code": [
        "while ( j < len ) ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "while ( j < len ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "char arr [ 102 ] ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        16,
        9
      ],
      "mod_code": [
        "char arr [ 102 ] ;",
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char arr [ 102 ] ;",
        "else do"
      ],
      "err_line": 2,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "if ( ( int ) str [ j ] >= ' a ' && str [ j ] <= ' z ' && str [ j ] <= ' z ' ) str [ j ] = ( char ) ( ( int ) ( ( int ) str ) ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘j’"
    }
  ]
}