{
  "meta": {
    "index": 1332,
    "hitid": "33N1S8XHHMF2KFQMRHW4BW9Y82KZ1E",
    "workerid": "AIWEXPJAU66D9",
    "probid": "320A",
    "subid": "48661361"
  },
  "lines": [
    {
      "line": 0,
      "text": "define new string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define new integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "function good with int argument i that returns int",
      "code": "int good ( int i )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "return 3 if i + 2 < n and s [ i ] = ' 1 ' and s [ i + 1 ] = ' 4 ' and s [ i + 2 ] = ' 4 '",
      "code": "if ( i + 2 < n && s [ i ] == ' 1 ' && s [ i + 1 ] == ' 4 ' && s [ i + 2 ] == ' 4 ' ) return 3 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return 2 if i + 1 < n and s [ i ] = ' 1 ' and s [ i + 1 ] = ' 4 '",
      "code": "if ( i + 1 < n && s [ i ] == ' 1 ' && s [ i + 1 ] == ' 4 ' ) return 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return 1 if i < n and s [ i ] = ' 1 '",
      "code": "if ( i < n && s [ i ] == ' 1 ' ) return 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "read standard input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "assign the new value = to n",
      "code": "n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "define integer i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while i < n",
      "code": "while ( i < n )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "define integer ad with value = value , returned by the function good ( i )",
      "code": "int ad = good ( i ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if ad = 0 , break the loop",
      "code": "if ( ad == 0 ) break ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increase i by ad",
      "code": "i += ad ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" YES \" if i = n , or \" NO \" otherwise",
      "code": "puts ( i == n ? \" YES \" : \" NO \" ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n = to ;"
      ],
      "err_line": 10,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int ad = value ( i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        0
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value ( i ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        0,
        11
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value ( i ) ;",
        "char s ;",
        "int i = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        0,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value ( i ) ;",
        "char s ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        11
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value ( i ) ;",
        "int i = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        11,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value ( i ) ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value ( i ) ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value , good ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        0
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value , good ( i ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        0,
        11
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value , good ( i ) ;",
        "char s ;",
        "int i = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        0,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value , good ( i ) ;",
        "char s ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        11
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value , good ( i ) ;",
        "int i = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        11,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value , good ( i ) ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int ad = value , good ( i ) ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "n = to ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        0,
        11
      ],
      "mod_code": [
        "n = to ;",
        "char s ;",
        "int i = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        0,
        11,
        2
      ],
      "mod_code": [
        "n = to ;",
        "char s ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        2
      ],
      "mod_code": [
        "n = to ;",
        "char s ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "n = to ;",
        "int i = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "n = to ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "int ad = value ( i ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        0,
        11
      ],
      "mod_code": [
        "int ad = value ( i ) ;",
        "char s ;",
        "int i = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        0,
        11,
        2
      ],
      "mod_code": [
        "int ad = value ( i ) ;",
        "char s ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0,
        2
      ],
      "mod_code": [
        "int ad = value ( i ) ;",
        "char s ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "int ad = value ( i ) ;",
        "int i = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        11,
        2
      ],
      "mod_code": [
        "int ad = value ( i ) ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "int ad = value ( i ) ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        0,
        11
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;",
        "char s ;",
        "int i = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        0,
        11,
        2
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;",
        "char s ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0,
        2
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;",
        "char s ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;",
        "int i = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        11,
        2
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "int ad = value , good ( i ) ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "char s ;",
        "int i = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        11,
        2
      ],
      "mod_code": [
        "char s ;",
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "char s ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "int i = 1 ;",
        "int good ( int i ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}