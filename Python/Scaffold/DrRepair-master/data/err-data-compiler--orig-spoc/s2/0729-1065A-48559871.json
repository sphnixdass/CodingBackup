{
  "meta": {
    "index": 729,
    "hitid": "3JTPR5MTZS66J2SJS3V6R7Y2G99K5S",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "1065A",
    "subid": "48559871"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "t = long long integer",
      "code": "long long int t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "s , a , b , c = long long integer",
      "code": "long long int s , a , b , c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while decrement t",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s , a , b , c",
      "code": "cin >> s >> a >> b >> c ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "n = long long integer with n = s / c",
      "code": "long long int n = s / c ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "max = long long integer with max = n",
      "code": "long long int max = n ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "diff2 = long long integer with diff2 = n / a",
      "code": "long long int diff2 = n / a ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "max = max + diff2 * b",
      "code": "max = max + diff2 * b ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print max",
      "code": "cout << max << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5,
        2,
        10
      ],
      "mod_code": [
        "while ( -- t )",
        "cin >> s >> a >> b , c ;",
        "t = getchar ( ) ;",
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "while ( -- t )",
        "cin >> s >> a >> b , c ;",
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        10
      ],
      "mod_code": [
        "while ( -- t )",
        "t = getchar ( ) ;",
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( -- t )",
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2,
        10
      ],
      "mod_code": [
        "cin >> s >> a >> b , c ;",
        "t = getchar ( ) ;",
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "cin >> s >> a >> b , c ;",
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "puts ( max ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘long long int’ to ‘const char*’ [-fpermissive]"
    }
  ]
}