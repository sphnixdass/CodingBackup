{
  "meta": {
    "index": 1102,
    "hitid": "3HXK2V1N4K99IJDDKT8TV83XPI52GA",
    "workerid": "A1AYVATMT88U1W",
    "probid": "581A",
    "subid": "48940462"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a , b be integers",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a equals b",
      "code": "if ( a == b )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print a and space",
      "code": "cout << a << \" \"",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print 0 and newline",
      "code": "<< \" 0 \" << endl ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if a is greater than b",
      "code": "else if ( a > b )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print b and space and ( a - b ) / 2 and newline",
      "code": "cout << b << \" \" << ( a - b ) / 2 << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print a and space and ( b - a ) / 2 and newline",
      "code": "cout << a << \" \" << ( b - a ) / 2 << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << 0 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "else if ( a == b )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << a << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "cout << 0 << endl ;",
        "else if ( a == b )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        8
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "cout << 0 << endl ;",
        "else if ( a == b )",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "cout << 0 << endl ;",
        "else if ( a == b )",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "cout << 0 << endl ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "cout << 0 << endl ;",
        "else do",
        "cin >> a , b ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else if ( a == b )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        3,
        8
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else if ( a == b )",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        3,
        8,
        5
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else if ( a == b )",
        "else do",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        3,
        8,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else if ( a == b )",
        "else do",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        3,
        5
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else if ( a == b )",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        3,
        5,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else if ( a == b )",
        "cout << \" 0 \" << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else if ( a == b )",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        8,
        5
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else do",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        8,
        5,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else do",
        "cout << \" 0 \" << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        8,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "else do",
        "cin >> a , b ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "cout << a << \" \" << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "else if ( a == b )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        3,
        8
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "else if ( a == b )",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        3,
        8,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "else if ( a == b )",
        "else do",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "else if ( a == b )",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "else do",
        "cin >> a , b ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "else if ( a == b )",
        "else do"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8,
        5
      ],
      "mod_code": [
        "else if ( a == b )",
        "else do",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8,
        5,
        2
      ],
      "mod_code": [
        "else if ( a == b )",
        "else do",
        "cout << \" 0 \" << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        8,
        2
      ],
      "mod_code": [
        "else if ( a == b )",
        "else do",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "else if ( a == b )",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "else if ( a == b )",
        "cout << \" 0 \" << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "else if ( a == b )",
        "cin >> a , b ;"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "else do",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        5,
        2
      ],
      "mod_code": [
        "else do",
        "cout << \" 0 \" << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "else do",
        "cin >> a , b ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "cin >> a , b ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}