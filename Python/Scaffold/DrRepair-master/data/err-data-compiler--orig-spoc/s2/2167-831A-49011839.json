{
  "meta": {
    "index": 2167,
    "hitid": "3TL87MO8CMJ9553QJFKGSJ2UTGTLF5",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "831A",
    "subid": "49011839"
  },
  "lines": [
    {
      "line": 0,
      "text": "MAXN = constant integer with value of 105",
      "code": "const int MAXN = 105 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "INF = constant integer with value of 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "a = integer array of length MAXN",
      "code": "int a [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to n inclusive read a [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set a [ n + 1 ] to INF",
      "code": "a [ n + 1 ] = INF ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set p to 2",
      "code": "int p = 2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "while a [ p ] is greater than a [ p - 1 ] add 1 to p",
      "code": "while ( a [ p ] > a [ p - 1 ] ) p ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "while a [ p ] equals a [ p - 1 ] add 1 to p",
      "code": "while ( a [ p ] == a [ p - 1 ] ) p ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "while a [ p ] is less than a [ p - 1 ] add 1 to p",
      "code": "while ( a [ p ] < a [ p - 1 ] ) p ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if p is less than or equal to n",
      "code": "if ( p <= n )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "p = 2 ;"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5,
        7
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "int a [ n + 1 ] = INF ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        5,
        7,
        14
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        5,
        7,
        12
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "if ( p >= n )"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        5,
        7,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        5,
        14
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "n"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5,
        14,
        12
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "n",
        "if ( p >= n )"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5,
        14,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "n",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        5,
        12
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "if ( p >= n )"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5,
        12,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        5,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "while ( n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "p = 2 ;",
        "int a [ n + 1 ] = INF ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        7,
        14
      ],
      "mod_code": [
        "p = 2 ;",
        "int a [ n + 1 ] = INF ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        7,
        14,
        12
      ],
      "mod_code": [
        "p = 2 ;",
        "int a [ n + 1 ] = INF ;",
        "n",
        "if ( p >= n )"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        7,
        14,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "int a [ n + 1 ] = INF ;",
        "n",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        7,
        12
      ],
      "mod_code": [
        "p = 2 ;",
        "int a [ n + 1 ] = INF ;",
        "if ( p >= n )"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        7,
        12,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "int a [ n + 1 ] = INF ;",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        7,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "int a [ n + 1 ] = INF ;",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "p = 2 ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        12
      ],
      "mod_code": [
        "p = 2 ;",
        "n",
        "if ( p >= n )"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        12,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "n",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        14,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "n",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "p = 2 ;",
        "if ( p >= n )"
      ],
      "err_line": 8,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "p = 2 ;",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "while ( n )",
        "int a [ n + 1 ] = INF ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        7,
        14
      ],
      "mod_code": [
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        7,
        14,
        12
      ],
      "mod_code": [
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "n",
        "if ( p >= n )"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        7,
        14,
        2
      ],
      "mod_code": [
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "n",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "if ( p >= n )"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        2
      ],
      "mod_code": [
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "while ( n )",
        "int a [ n + 1 ] = INF ;",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "while ( n )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        14,
        12
      ],
      "mod_code": [
        "while ( n )",
        "n",
        "if ( p >= n )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        14,
        12,
        2
      ],
      "mod_code": [
        "while ( n )",
        "n",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        14,
        2
      ],
      "mod_code": [
        "while ( n )",
        "n",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        12,
        2
      ],
      "mod_code": [
        "while ( n )",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "while ( n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        7,
        14,
        12
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;",
        "n",
        "if ( p >= n )"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        7,
        14,
        12,
        2
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;",
        "n",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7,
        14,
        2
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;",
        "n",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;",
        "if ( p >= n )"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        7,
        12,
        2
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "int a [ n + 1 ] = INF ;",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "n",
        "if ( p >= n )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        12,
        2
      ],
      "mod_code": [
        "n",
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "n",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "if ( p >= n )",
        "int * a [ MAXN ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    }
  ]
}