{
  "meta": {
    "index": 495,
    "hitid": "3O4VWC1GEW08U3ZXWZ71BV05NOJJ33",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "261A",
    "subid": "48650577"
  },
  "lines": [
    {
      "line": 0,
      "text": "OO = 10 ^ 9",
      "code": "int const OO = 1e9 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function fast ( no args , no return value )",
      "code": "void fast ( ) { }",
      "indent": 0
    },
    {
      "line": 2,
      "text": "function file ( no args , no return value )",
      "code": "void file ( )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "freopen file \" input . txt \" ( read )",
      "code": "freopen ( \" input.txt \" , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "freopen file \" output . txt \" ( write )",
      "code": "freopen ( \" output.txt \" , \" w \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "fast ( )",
      "code": "fast ( ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "v = vector of n int",
      "code": "vector < int > v ( n ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i = 0 to n exclusive read v [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> v [ i ] ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "sort v",
      "code": "sort ( v . begin ( ) , v . end ( ) ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "vv = vector of m int",
      "code": "vector < int > vv ( m ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for i = 0 to m exclusive read vv [ i ]",
      "code": "for ( int i = 0 ; i < m ; i ++ ) { cin >> vv [ i ] ; }",
      "indent": 2
    },
    {
      "line": 16,
      "text": "sort vv",
      "code": "sort ( vv . rbegin ( ) , vv . rend ( ) ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "an = 0",
      "code": "long long an = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "c = 0 , for i = 0 to m exclusive",
      "code": "for ( int i = 0 , c = 0 ; i < m ; i ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if c is v [ 0 ]",
      "code": "if ( c == v [ 0 ] )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "c = 0 , increment i",
      "code": "c = 0 , i ++ ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "continue",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "add vv [ i ] to an , increment c",
      "code": "an += vv [ i ] , c ++ ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print an",
      "code": "cout << an << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void fast ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "void file ( ) { }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "fast ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "vector < int > v [ n ] ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "sort ( v , v + n ) ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::vector<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "vector < int > vv [ m ] ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "sort ( vv , vv + n ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::vector<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "an = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "‘an’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { c = 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( ! c [ 0 ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        18
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        18,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "c += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        18,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "an += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        18,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "c += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        23,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "c += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "an += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        23,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "an += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        16,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "for ( int i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        18,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "c += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        18,
        23,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "c += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        18,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "an += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        18,
        23,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "an += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        18,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "c += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        23,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "c += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "an += vv [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        23,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "an += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "cin >> \" input.txt \" ;",
        "continue continue ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const char [10]’)"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        23
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "c += vv [ i ] ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        23,
        21
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "c += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        23
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "an += vv [ i ] ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        23,
        21
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "an += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18,
        21
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "for ( int i = 0 ; i < m ; i ++ )",
        "continue continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        23,
        21
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "c += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        16,
        23,
        21
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "an += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "sort ( vv . begin ( ) , vv . end ( ) ) ;",
        "continue continue ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        18,
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "c += vv [ i ] ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        23,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "c += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "an += vv [ i ] ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        23,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "an += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ )",
        "continue continue ;"
      ],
      "err_line": 19,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        21
      ],
      "mod_code": [
        "c += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        23,
        21
      ],
      "mod_code": [
        "an += vv [ i ] ;",
        "continue continue ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘continue’"
    }
  ]
}