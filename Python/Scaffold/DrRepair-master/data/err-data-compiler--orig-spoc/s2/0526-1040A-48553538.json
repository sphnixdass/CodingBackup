{
  "meta": {
    "index": 526,
    "hitid": "306996CF6WE62HN6L3G1PE2VHZQB1C",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "1040A",
    "subid": "48553538"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = vector of int",
      "code": "vector < int > a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "n , cost , b , w = integers with cost = 0",
      "code": "int n , cost = 0 , b , w ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , w , b",
      "code": "cin >> n >> w >> b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "temp = integer",
      "code": "int temp ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read temp",
      "code": "cin >> temp ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "append temp in a",
      "code": "a . push_back ( temp ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "m = integer with m = n / 2 - 1",
      "code": "int m = n / 2 - 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "ac = bool with ac = true",
      "code": "bool ac = true ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to m and ac",
      "code": "for ( int i = 0 ; i <= m && ac ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if a [ i ] is 2 and a [ n - 1 - i ] is 2",
      "code": "if ( a [ i ] == 2 && a [ n - 1 - i ] == 2 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if b < w",
      "code": "if ( b < w )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "cost = cost + 2 * b",
      "code": "cost += 2 * b ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 16,
      "text": "cost = cost + 2 * w",
      "code": "cost += 2 * w ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if a [ i ] is 2",
      "code": "if ( a [ i ] == 2 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if a [ n - 1 - i ] is 0",
      "code": "if ( a [ n - 1 - i ] == 0 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "cost = cost + w",
      "code": "cost += w ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 22,
      "text": "cost = cost + b",
      "code": "cost += b ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "else if a [ n - 1 - i ] is 2",
      "code": "else if ( a [ n - 1 - i ] == 2 )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if a [ i ] is 0",
      "code": "if ( a [ i ] == 0 )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "cost = cost + w",
      "code": "cost += w ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 27,
      "text": "cost = cost + b",
      "code": "cost += b ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if a [ i ] is not a [ n - 1 - i ] , ac = false",
      "code": "if ( a [ i ] != a [ n - 1 - i ] ) ac = false ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if not ac",
      "code": "if ( ! ac )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 36,
      "text": "if n modulo 2 is not 0 and a [ n / 2 ] is 2",
      "code": "if ( n % 2 != 0 && a [ n / 2 ] == 2 )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if b < w",
      "code": "if ( b < w )",
      "indent": 3
    },
    {
      "line": 38,
      "text": "cost = cost + b",
      "code": "cost += b ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 40,
      "text": "cost = cost + w",
      "code": "cost += w ;",
      "indent": 4
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 42,
      "text": "print cost",
      "code": "cout << cost << endl ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < int int > a ;"
      ],
      "err_line": 1,
      "err_msg": "two or more data types in declaration of ‘type name’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , cost , b , cost = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int cost’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "a . append ( temp ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘class std::vector<int>’ has no member named ‘append’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        15
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        15,
        21
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        15,
        42
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        15,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        21
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        21,
        42
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        21,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        42,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        15,
        21
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        42
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        15,
        42
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        15,
        42,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        15,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        21,
        42
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        21,
        42,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        21,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        42,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        26
      ],
      "mod_code": [
        "int n , cost , b , w = 0 ;",
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        21,
        42
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        21,
        26
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        42
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        42,
        26
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15,
        26
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        21,
        42
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        21,
        42,
        26
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        21,
        26
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        42,
        26
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        26
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m && ac ; i ++ )",
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        21,
        42
      ],
      "mod_code": [
        "n",
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        21,
        42,
        26
      ],
      "mod_code": [
        "n",
        "n",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        21,
        26
      ],
      "mod_code": [
        "n",
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        42
      ],
      "mod_code": [
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        42,
        26
      ],
      "mod_code": [
        "n",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        26
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        42
      ],
      "mod_code": [
        "n",
        "cout << ' cost ' ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        42,
        26
      ],
      "mod_code": [
        "n",
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        26
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        42,
        26
      ],
      "mod_code": [
        "cout << ' cost ' ;",
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}