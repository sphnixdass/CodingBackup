{
  "meta": {
    "index": 690,
    "hitid": "3VDI8GSXAFNK4YF20AHU5ZG0BIRG8L",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1020A",
    "subid": "48519880"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare int variables n , h , st , ed and q",
      "code": "int n , h , st , ed , q ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read from the input to n , h , st , ed and q",
      "code": "cin >> n >> h >> st >> ed >> q ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement q and loop further , while q is not 0",
      "code": "while ( q -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare int variables x1 , y1 , x2 and y2",
      "code": "int x1 , y1 , x2 , y2 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read x1 , y1 , x2 and y2",
      "code": "cin >> x1 >> y1 >> x2 >> y2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if x1 = x2",
      "code": "if ( x1 == x2 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print abs of y1 - y2",
      "code": "cout << abs ( y1 - y2 ) << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if y1 > = st and y1 < = ed",
      "code": "if ( y1 >= st && y1 <= ed )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print abs ( x2 - x1 ) + abs ( y1 - y2 )",
      "code": "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) << endl ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "declare new integer variable ans1 = abs ( y1 - st ) + abs ( y2 - st ) + abs ( x1 - x2 )",
      "code": "int ans1 = abs ( y1 - st ) + abs ( y2 - st ) + abs ( x1 - x2 ) ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "create integer variable ans2 with value = abs ( y1 - ed ) + abs ( y2 - ed ) + abs ( x1 - x2 )",
      "code": "int ans2 = abs ( y1 - ed ) + abs ( y2 - ed ) + abs ( x1 - x2 ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "print min of ans1 and ans2",
      "code": "cout << min ( ans1 , ans2 ) << endl ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int value = abs ( y1 - ed ) + abs ( y2 - ed ) + abs ( x1 - x2 ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans2’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )"
      ],
      "err_line": 6,
      "err_msg": "could not convert ‘x1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(x2)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        6,
        11
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "n"
      ],
      "err_line": 6,
      "err_msg": "could not convert ‘x1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(x2)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        6,
        11,
        1
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "n",
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        11,
        10
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "n",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 6,
      "err_msg": "could not convert ‘x1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(x2)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        6,
        11,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "n",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 6,
      "err_msg": "could not convert ‘x1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(x2)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        6,
        1
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        1,
        10
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        1,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "int n , h , st , ed >> q ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 6,
      "err_msg": "could not convert ‘x1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(x2)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 6,
      "err_msg": "could not convert ‘x1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(x2)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "if ( x1 = x2 )",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 6,
      "err_msg": "could not convert ‘x1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(x2)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        1
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "n",
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        11,
        1,
        10
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "n",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        11,
        1,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "n",
        "int n , h , st , ed >> q ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "n",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        10,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "n",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "n",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        1,
        10
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        1,
        10,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        1,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "int n , h , st , ed >> q ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "string x1 , y1 , x2 , y2 ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        11,
        1
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "n",
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        11,
        1,
        10
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "n",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        11,
        1,
        2
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "n",
        "int n , h , st , ed >> q ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        11,
        10
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "n",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        11,
        10,
        2
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "n",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        11,
        2
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "n",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        10
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        10,
        2
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( x1 = x2 )",
        "int n , h , st , ed >> q ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "n",
        "int n , h , st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        11,
        1,
        10
      ],
      "mod_code": [
        "n",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        11,
        1,
        10,
        2
      ],
      "mod_code": [
        "n",
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        11,
        1,
        2
      ],
      "mod_code": [
        "n",
        "int n , h , st , ed >> q ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "n",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10,
        2
      ],
      "mod_code": [
        "n",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "n",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int n , h , st , ed >> q ;",
        "cout << abs ( x2 - x1 ) + abs ( y1 - y2 ) ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , h , st , ed >> q ;",
        "cin >> n >> h >> st , ed >> q ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    }
  ]
}