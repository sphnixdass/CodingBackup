{
  "meta": {
    "index": 1415,
    "hitid": "3RTFSSG7T80BGRPL94UGW7OUP6KWLQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "155A",
    "subid": "49070627"
  },
  "lines": [
    {
      "line": 0,
      "text": "new integer variable n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create ints maxP and minP",
      "code": "int maxP , minP ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare new integer variables ctMax and ctMin",
      "code": "int ctMax , ctMin ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "define new integer called score",
      "code": "int score ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read n from the user input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read variable maxP from the input",
      "code": "cin >> maxP ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "assign maxP to minP",
      "code": "minP = maxP ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "decrement n by one",
      "code": "n -- ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while n ! = 0 , decrement it and continue the loop",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read user input to score",
      "code": "cin >> score ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if score is greater than maxP",
      "code": "if ( score > maxP )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set maxP to score",
      "code": "maxP = score ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment ctMax by one",
      "code": "ctMax ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if score is less than minP",
      "code": "else if ( score < minP )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "change the value of minP to score",
      "code": "minP = score ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment ctMin",
      "code": "ctMin ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print ctMin + ctMax to the standard output",
      "code": "cout << ctMin + ctMax << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int ctMax = ctMin ;"
      ],
      "err_line": 2,
      "err_msg": "‘ctMin’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "* minP = score ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        11,
        9,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( ! score )",
        "while ( n ) { continue ; }",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        11,
        7,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( ! score )",
        "minP *= maxP ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        11,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( ! score )",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        11,
        1,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( ! score )",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        9,
        7,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "while ( n ) { continue ; }",
        "minP *= maxP ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        9,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "while ( n ) { continue ; }",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        9,
        1,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "while ( n ) { continue ; }",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        7,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "minP *= maxP ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        7,
        1,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "minP *= maxP ;",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        5,
        1,
        10
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        11,
        9,
        7,
        1
      ],
      "mod_code": [
        "if ( ! score )",
        "while ( n ) { continue ; }",
        "minP *= maxP ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        11,
        9,
        1
      ],
      "mod_code": [
        "if ( ! score )",
        "while ( n ) { continue ; }",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        11,
        9,
        1,
        10
      ],
      "mod_code": [
        "if ( ! score )",
        "while ( n ) { continue ; }",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        11,
        7,
        1
      ],
      "mod_code": [
        "if ( ! score )",
        "minP *= maxP ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        11,
        7,
        1,
        10
      ],
      "mod_code": [
        "if ( ! score )",
        "minP *= maxP ;",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( ! score )",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        11,
        1,
        10
      ],
      "mod_code": [
        "if ( ! score )",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        9,
        7,
        1
      ],
      "mod_code": [
        "while ( n ) { continue ; }",
        "minP *= maxP ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        9,
        7,
        1,
        10
      ],
      "mod_code": [
        "while ( n ) { continue ; }",
        "minP *= maxP ;",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "while ( n ) { continue ; }",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        9,
        1,
        10
      ],
      "mod_code": [
        "while ( n ) { continue ; }",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "minP *= maxP ;",
        "int maxP minP , minP ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        7,
        1,
        10
      ],
      "mod_code": [
        "minP *= maxP ;",
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int maxP minP , minP ;",
        "score = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘minP’"
    }
  ]
}