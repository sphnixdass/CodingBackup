{
  "meta": {
    "index": 1847,
    "hitid": "3MA5N0ATTC50WL73O4IFH7BF06GKWC",
    "workerid": "A1APYLD4DUK33J",
    "probid": "413A",
    "subid": "20791171"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer array a size 105",
      "code": "int a [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integers n , m , mn , mx , x , k = 0",
      "code": "int n , m , mn , mx , x , k = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare boolean b = true",
      "code": "bool b = true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , m , mn , mx",
      "code": "cin >> n >> m >> mn >> mx ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to m exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < m ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "sort from a to a + m",
      "code": "sort ( a , a + m ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a [ 0 ] is less than mn or a [ m - 1 ] is greater than mx , let b be false",
      "code": "if ( a [ 0 ] < mn || a [ m - 1 ] > mx ) { b = false ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a [ 0 ] is greater than mn , increment k",
      "code": "if ( a [ 0 ] > mn ) { k ++ ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a [ m - 1 ] is less than mx , increment k",
      "code": "if ( a [ m - 1 ] < mx ) { k ++ ; }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if b is true",
      "code": "if ( b == true )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if n is less than ( m + k ) , let b be false",
      "code": "if ( n < ( m + k ) ) { b = false ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if b is true",
      "code": "if ( b == true )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" Correct \" and newline",
      "code": "cout << \" Correct \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" Incorrect \" and newline",
      "code": "cout << \" Incorrect \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "sort ( a + a + m ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [105]’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        14
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        2,
        14,
        4
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        2,
        14,
        0
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        2,
        14,
        16
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        2,
        4
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "cin >> n >> m >> mn , mx ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        4,
        0
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        2,
        4,
        16
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "cin >> n >> m >> mn , mx ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        0
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        2,
        0,
        16
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        2,
        16
      ],
      "mod_code": [
        "n",
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "n",
        "<< \" Correct \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        14,
        4
      ],
      "mod_code": [
        "n",
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        14,
        4,
        0
      ],
      "mod_code": [
        "n",
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        14,
        4,
        16
      ],
      "mod_code": [
        "n",
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        14,
        0
      ],
      "mod_code": [
        "n",
        "<< \" Correct \" << endl ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        14,
        0,
        16
      ],
      "mod_code": [
        "n",
        "<< \" Correct \" << endl ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        14,
        16
      ],
      "mod_code": [
        "n",
        "<< \" Correct \" << endl ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "n",
        "cin >> n >> m >> mn , mx ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        4,
        0
      ],
      "mod_code": [
        "n",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        4,
        0,
        16
      ],
      "mod_code": [
        "n",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        4,
        16
      ],
      "mod_code": [
        "n",
        "cin >> n >> m >> mn , mx ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "n",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        0,
        16
      ],
      "mod_code": [
        "n",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "n",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        14,
        4
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        14,
        4,
        0
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        14,
        4,
        16
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        14,
        0
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        14,
        0,
        16
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        14,
        16
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Correct \" << endl ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        4,
        0
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        0,
        16
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        16
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "cin >> n >> m >> mn , mx ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        0,
        16
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int n , m , mn = 0 , mx , x , k ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        4,
        0
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        14,
        4,
        0,
        16
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        14,
        4,
        16
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;",
        "cin >> n >> m >> mn , mx ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        0
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        14,
        0,
        16
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        0,
        16
      ],
      "mod_code": [
        "cin >> n >> m >> mn , mx ;",
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "cin >> n >> m >> mn , mx ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "a [ 105 ] ;",
        "<< \" Incorrect \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ does not name a type"
    }
  ]
}