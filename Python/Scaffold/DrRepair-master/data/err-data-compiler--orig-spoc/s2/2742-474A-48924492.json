{
  "meta": {
    "index": 2742,
    "hitid": "38DCH97KHHW0145ZUAJXO3TGXGUJQ3",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "474A",
    "subid": "48924492"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare putR taking in string s and char c and returning char",
      "code": "char putR ( string s , char c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if s [ i ] is equal to c , return s [ i + 1 ]",
      "code": "if ( s [ i ] == c ) return s [ i + 1 ] ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare putL taking in string s and char c and returning char",
      "code": "char putL ( string s , char c )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "for i = 1 to length of s exclusive",
      "code": "for ( int i = 1 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is equal to c , return s [ i - 1 ]",
      "code": "if ( s [ i ] == c ) return s [ i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "let char c",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "make strings s , s1 , s2 , and s3",
      "code": "string s , s1 , s2 , s3 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read c and s",
      "code": "cin >> c >> s ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set s to \" qwertyuiopasdfghjkl ; zxcvbnm , . / \"",
      "code": "s1 = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if c is equal to ' L '",
      "code": "if ( c == ' L ' )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to length of s exclusive , set s [ i ] to putR ( s1 , s [ i ] )",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = putR ( s1 , s [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 0 to length of s exclusive , set s [ i ] to putL ( s1 , s [ i ] )",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ ) s [ i ] = putL ( s1 , s [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char putR ( string s , string c )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char putL ( string s , string c )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "string s , s1 , s2 >> s3 ;"
      ],
      "err_line": 12,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cin >> n >> s ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;"
      ],
      "err_line": 15,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' L ' ) L ++ ;"
      ],
      "err_line": 15,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        5
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        15,
        5,
        13
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "cin >> n >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        15,
        5,
        17
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        15,
        13
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' L ' ) L ++ ;",
        "cin >> n >> s ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        13,
        17
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' L ' ) L ++ ;",
        "cin >> n >> s ;",
        "else do"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        17
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "if ( c == ' L ' ) L ++ ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "char putL ( string s , string c )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        5,
        13
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "char putL ( string s , string c )",
        "cin >> n >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        5,
        13,
        17
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "char putL ( string s , string c )",
        "cin >> n >> s ;",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        5,
        17
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "char putL ( string s , string c )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> s ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        13,
        17
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "cin >> n >> s ;",
        "else do"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "s = \" qwertyuiopasdfghjkl \" ;",
        "else do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5,
        13
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "cin >> n >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5,
        13,
        17
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "cin >> n >> s ;",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5,
        13,
        14
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "cin >> n >> s ;",
        "s = \" -1 \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5,
        17
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5,
        17,
        14
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "else do",
        "s = \" -1 \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5,
        14
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "char putL ( string s , string c )",
        "s = \" -1 \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "cin >> n >> s ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        13,
        17
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "cin >> n >> s ;",
        "else do"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        13,
        17,
        14
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "cin >> n >> s ;",
        "else do",
        "s = \" -1 \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        13,
        14
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "cin >> n >> s ;",
        "s = \" -1 \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        14
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "else do",
        "s = \" -1 \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "if ( c == ' L ' ) L ++ ;",
        "s = \" -1 \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "char putL ( string s , string c )",
        "cin >> n >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        13,
        17
      ],
      "mod_code": [
        "char putL ( string s , string c )",
        "cin >> n >> s ;",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        13,
        17,
        14
      ],
      "mod_code": [
        "char putL ( string s , string c )",
        "cin >> n >> s ;",
        "else do",
        "s = \" -1 \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        13,
        14
      ],
      "mod_code": [
        "char putL ( string s , string c )",
        "cin >> n >> s ;",
        "s = \" -1 \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "char putL ( string s , string c )",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        17,
        14
      ],
      "mod_code": [
        "char putL ( string s , string c )",
        "else do",
        "s = \" -1 \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "char putL ( string s , string c )",
        "s = \" -1 \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "cin >> n >> s ;",
        "else do"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        14
      ],
      "mod_code": [
        "cin >> n >> s ;",
        "else do",
        "s = \" -1 \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "cin >> n >> s ;",
        "s = \" -1 \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        14
      ],
      "mod_code": [
        "else do",
        "s = \" -1 \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘cout’"
    }
  ]
}