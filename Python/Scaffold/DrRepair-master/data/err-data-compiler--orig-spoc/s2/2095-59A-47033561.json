{
  "meta": {
    "index": 2095,
    "hitid": "3W0KKJIARR3P6KBLQ1293R8TIZ9K8T",
    "workerid": "A1APYLD4DUK33J",
    "probid": "59A",
    "subid": "47033561"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integers lower = 0 , upper = 0",
      "code": "int lower = 0 , upper = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] is greater than or equal to ' a ' and s [ i ] is less than or equal to ' z '",
      "code": "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment lower",
      "code": "lower ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if s [ i ] is greater than or equal to ' A ' and s [ i ] is less than or equal to ' Z '",
      "code": "else if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment upper",
      "code": "upper ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if lower is greater than or equal to upper",
      "code": "if ( lower >= upper )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if s [ i ] is greater than or equal to ' A ' and s [ i ] is less than or equal to ' Z ' , let s [ i ] be character initialized with ( s [ i ] + 32 )",
      "code": "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) s [ i ] = char ( s [ i ] + 32 ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if s [ i ] is greater than or equal to ' a ' and s [ i ] is less than or equal to ' z ' , let s [ i ] be character initialized with ( s [ i ] - 32 )",
      "code": "if ( s [ i ] >= ' a ' && s [ i ] <= ' z ' ) s [ i ] = char ( s [ i ] - 32 ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print s and ' \\ n '",
      "code": "cout << s << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( * lower >= upper )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << s << \" \\n ' ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14,
        2
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        14,
        2,
        10
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "s >> s ;",
        "if ( * lower >= upper )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        14,
        2,
        11
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        14,
        2,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        14,
        10
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "if ( * lower >= upper )"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        10,
        11
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14,
        10,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        11
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14,
        11,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "n",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        10
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "s >> s ;",
        "if ( * lower >= upper )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        10,
        11
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "s >> s ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        10,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "s >> s ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        11
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        11,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        10,
        11
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        11,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "int * lower = 0 , upper = 0 ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "n",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        2,
        10
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "if ( * lower >= upper )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        2,
        10,
        11
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        2,
        10,
        15
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        2,
        11
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        2,
        11,
        15
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        2,
        15
      ],
      "mod_code": [
        "n",
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "n",
        "if ( * lower >= upper )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        10,
        11
      ],
      "mod_code": [
        "n",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        10,
        11,
        15
      ],
      "mod_code": [
        "n",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        10,
        15
      ],
      "mod_code": [
        "n",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        11
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        11,
        15
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "if ( * lower >= upper )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        11,
        15
      ],
      "mod_code": [
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "if ( * lower >= upper )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )",
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}