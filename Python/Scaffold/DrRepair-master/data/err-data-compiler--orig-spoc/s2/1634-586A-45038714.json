{
  "meta": {
    "index": 1634,
    "hitid": "3DA79LNS59P286V28TL5D1NELQDT3L",
    "workerid": "A1AYVATMT88U1W",
    "probid": "586A",
    "subid": "45038714"
  },
  "lines": [
    {
      "line": 0,
      "text": "guests = array of integers of length 30001",
      "code": "int guests [ 30001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "checked = array of boolean values of length 30001",
      "code": "bool checked [ 30001 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "the integer value of count = 1",
      "code": "int count = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let current be a integer",
      "code": "int current ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "the integer value of ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read current",
      "code": "cin >> current ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "boolean value of start is equal to not current",
      "code": "bool start = ! current ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let a be a integer",
      "code": "int a ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if a equals current",
      "code": "if ( a == current )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment count by 1",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if a equals 1",
      "code": "else if ( a == 1 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if not start and count equals 1 , increment ans by count",
      "code": "if ( ! start && count == 1 ) { ans += count ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "start is equal to false",
      "code": "start = false ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "count is equal to 1",
      "code": "count = 1 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 20,
      "text": "increment ans by count",
      "code": "ans += count ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "count is equal to 1",
      "code": "count = 1 ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "current is equal to a",
      "code": "current = a ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if current is equal to 1 , increment ans by count",
      "code": "if ( current == 1 ) { ans += count ; }",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "guests [ 30001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "bool start ( bool start )"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "getline ( cin , a ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else if ( a == l )"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "count = l ;"
      ],
      "err_line": 18,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "count = l ;"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1,
        0
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        1,
        0,
        23
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "current = ' a ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        1,
        0,
        21
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "count = l ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        1,
        0,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        1,
        23
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "current = ' a ' ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1,
        23,
        21
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "current = ' a ' ;",
        "count = l ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1,
        23,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "current = ' a ' ;",
        "count = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1,
        21
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "count = l ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1,
        21,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        1,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "bool * checked = strlen ( 30001 ) ;",
        "count = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "bool start = current ;",
        "guests [ 30001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0,
        23
      ],
      "mod_code": [
        "bool start = current ;",
        "guests [ 30001 ] ;",
        "current = ' a ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0,
        23,
        21
      ],
      "mod_code": [
        "bool start = current ;",
        "guests [ 30001 ] ;",
        "current = ' a ' ;",
        "count = l ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0,
        23,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "guests [ 30001 ] ;",
        "current = ' a ' ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0,
        21
      ],
      "mod_code": [
        "bool start = current ;",
        "guests [ 30001 ] ;",
        "count = l ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0,
        21,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "guests [ 30001 ] ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "guests [ 30001 ] ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        9,
        23,
        21
      ],
      "mod_code": [
        "bool start = current ;",
        "current = ' a ' ;",
        "count = l ;"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        23,
        21,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "current = ' a ' ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9,
        23,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "current = ' a ' ;",
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "bool start = current ;",
        "count = l ;"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        21,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "bool start = current ;",
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        23
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "current = ' a ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        23,
        21
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "current = ' a ' ;",
        "count = l ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        23,
        5
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "current = ' a ' ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        21
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "count = l ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        21,
        5
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        5
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "guests [ 30001 ] ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "current = ' a ' ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        23,
        21
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "current = ' a ' ;",
        "count = l ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        23,
        21,
        5
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "current = ' a ' ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        23,
        5
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "current = ' a ' ;",
        "count = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "count = l ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        21,
        5
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "bool * checked = strlen ( 30001 ) ;",
        "count = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "guests [ 30001 ] ;",
        "current = ' a ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        0,
        23,
        21
      ],
      "mod_code": [
        "guests [ 30001 ] ;",
        "current = ' a ' ;",
        "count = l ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        0,
        23,
        21,
        5
      ],
      "mod_code": [
        "guests [ 30001 ] ;",
        "current = ' a ' ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        0,
        23,
        5
      ],
      "mod_code": [
        "guests [ 30001 ] ;",
        "current = ' a ' ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "guests [ 30001 ] ;",
        "count = l ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        0,
        21,
        5
      ],
      "mod_code": [
        "guests [ 30001 ] ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "guests [ 30001 ] ;",
        "count = 1 ;"
      ],
      "err_line": 0,
      "err_msg": "‘guests’ does not name a type"
    },
    {
      "mod_line": [
        23,
        21
      ],
      "mod_code": [
        "current = ' a ' ;",
        "count = l ;"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        21,
        5
      ],
      "mod_code": [
        "current = ' a ' ;",
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        23,
        5
      ],
      "mod_code": [
        "current = ' a ' ;",
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        21,
        5
      ],
      "mod_code": [
        "count = l ;",
        "count = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "overloaded function with no contextual type information"
    }
  ]
}