{
  "meta": {
    "index": 683,
    "hitid": "3OKP4QVBP2RYNM8HX8181QMV16RGAP",
    "workerid": "A1APYLD4DUK33J",
    "probid": "1020A",
    "subid": "48500516"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant long long INF = 1e18",
      "code": "const long long INF = 1e18 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare constant long long MOD = 1e9 + 7",
      "code": "const long long MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare constant long double eps = 1e - 7",
      "code": "const long double eps = 1e-7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare constant long long zero = 0",
      "code": "const long long zero = 0 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "set cout flag fixed set cout precision to 10",
      "code": "cout << fixed << setprecision ( 10 ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare long longs n , h , a , b , k",
      "code": "long long n , h , a , b , k ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n , h , a , b , k",
      "code": "cin >> n >> h >> a >> b >> k ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while decrement k is true",
      "code": "while ( k -- )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare long longs ta , fa , tb , fb",
      "code": "long long ta , fa , tb , fb ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read ta , fa , tb , fb",
      "code": "cin >> ta >> fa >> tb >> fb ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "declare res = 0 as long long",
      "code": "long long res = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if ta is tb",
      "code": "if ( ta == tb )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment res by absolute value of ( fa - fb )",
      "code": "res += abs ( fa - fb ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment res by absolute value of ( ta - tb )",
      "code": "res += abs ( ta - tb ) ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if not ( a is less than or equal to fa and fa is less than or equal to b )",
      "code": "if ( ! ( a <= fa && fa <= b ) )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if absolute value of ( a - fa ) is less than absolute value of ( b - fa )",
      "code": "if ( abs ( a - fa ) < abs ( b - fa ) )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "increment res by absolute value of ( a - fa ) + absolute value of ( a - fb )",
      "code": "res += abs ( a - fa ) + abs ( a - fb ) ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increment res by absolute value of ( b - fa ) + absolute value of ( b - fb )",
      "code": "res += abs ( b - fa ) + abs ( b - fb ) ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment res by absolute value of ( fa - fb )",
      "code": "res += abs ( fa - fb ) ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print res , newline",
      "code": "cout << res << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout . precision ( fixed ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘std::ios_base& (*)(std::ios_base&)’ to ‘std::streamsize {aka long int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        0
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        16,
        0,
        14
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        16,
        0,
        20
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        16,
        0,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        16,
        14
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        14,
        20
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        14,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "n",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        20,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "if ( ! ( a <= b && fa <= b ) )",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0,
        14
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0,
        14,
        20
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "const long long const INF = 1e18 ;",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0,
        14,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "const long long const INF = 1e18 ;",
        "n",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0,
        20
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "const long long const INF = 1e18 ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0,
        20,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "const long long const INF = 1e18 ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        14,
        20
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        14,
        20,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        14,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "n",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        20,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        19
      ],
      "mod_code": [
        "cin >> n >> h >> a >> b , k ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        14
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        14,
        20
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        14,
        19
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "n",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        20
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        20,
        19
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0,
        19
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        14
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        14,
        20
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        14,
        20,
        19
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        14,
        19
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "n",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        20,
        19
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "if ( ! ( a <= b && fa <= b ) )",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        14,
        20
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        14,
        20,
        19
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        14,
        19
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "n",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        20,
        19
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "const long long const INF = 1e18 ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        20,
        19
      ],
      "mod_code": [
        "n",
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        19
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        19
      ],
      "mod_code": [
        "res += abs ( ( b - fa ) + abs ( b - fb ) ) ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}