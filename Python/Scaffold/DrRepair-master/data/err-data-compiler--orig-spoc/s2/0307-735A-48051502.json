{
  "meta": {
    "index": 307,
    "hitid": "36FQTHX3Z3L2CK1L87UKD7HSFJCB3C",
    "workerid": "AIWEXPJAU66D9",
    "probid": "735A",
    "subid": "48051502"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long ints a , b , c , d , e and f",
      "code": "long long int a , b , c , d , e , f ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a and b and keep looping",
      "code": "while ( cin >> a >> b )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s from the user input",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "in a for loop , change c from 0 to length of s exclusive incrementing c",
      "code": "for ( c = 0 ; c < s . size ( ) ; c ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ c ] is equal to ' G '",
      "code": "if ( s [ c ] == ' G ' )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "assign the new value = c to d",
      "code": "d = c ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "change the value of f to 0",
      "code": "f = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "start for loop from e = d to length of s exclusive adding b to e",
      "code": "for ( e = d ; e < s . size ( ) ; e += b )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if s [ e ] = ' # '",
      "code": "if ( s [ e ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "set f to 0",
      "code": "f = 0 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if s [ e ] = ' T '",
      "code": "if ( s [ e ] == ' T ' )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if f = 1",
      "code": "if ( f == 1 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print \" YES \" to the standard output",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "skip the rest of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 26,
      "text": "assign the new value = 0 to f",
      "code": "f = 0 ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "in a for loop , change e starting from value = d , to 0 inclusive , subtracting b from e on each step",
      "code": "for ( e = d ; e >= 0 ; e -= b )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "if s [ e ] is equal to ' # '",
      "code": "if ( s [ e ] == ' # ' )",
      "indent": 4
    },
    {
      "line": 29,
      "text": "assign the new value = 0 to f",
      "code": "f = 0 ;",
      "indent": 5
    },
    {
      "line": 30,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if s [ e ] is equal to ' T '",
      "code": "if ( s [ e ] == ' T ' )",
      "indent": 4
    },
    {
      "line": 33,
      "text": "assign 1 to f",
      "code": "f = 1 ;",
      "indent": 5
    },
    {
      "line": 34,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 37,
      "text": "if f = 1",
      "code": "if ( f == 1 )",
      "indent": 3
    },
    {
      "line": 38,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 40,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> a >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s [ j ] == ' G ' )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "rest ;"
      ],
      "err_line": 24,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 25,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( s [ j ] == ' # ' )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( s [ j ] == ' T ' )"
      ],
      "err_line": 32,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 39,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}