{
  "meta": {
    "index": 827,
    "hitid": "3NZ1E5QA6ZV5QZOPMQIDS4FCTFZ5BS",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "255A",
    "subid": "41007141"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , i = int",
      "code": "int n , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "arr = int array of size n",
      "code": "int arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n values into arr",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "exe = int array of size 3 with all values set to 0",
      "code": "int exe [ 3 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0to n increment exe [ i mod 3 ] by arr [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "max , mark = int with max = 0",
      "code": "int max = 0 , mark ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to 3",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if max < exe [ i ]",
      "code": "if ( max < exe [ i ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set max to exe [ i ]",
      "code": "max = exe [ i ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set mark to i + 1",
      "code": "mark = i + 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if mark is 1",
      "code": "if ( mark == 1 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" chest \"",
      "code": "cout << \" chest \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if mark is 2",
      "code": "else if ( mark == 2 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" biceps \"",
      "code": "cout << \" biceps \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" back \"",
      "code": "cout << \" back \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) { exe [ i % 3 ] += arr [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int max = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘mark’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        14
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        16
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        16
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" biceps \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        16,
        18
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        16,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" biceps \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        18
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" back \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        18,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        9,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "if ( max [ i ] < exe [ i ] )",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" chest \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        16
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        18
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" chest \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" chest \" ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        14,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" chest \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" biceps \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        16,
        18
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        16,
        18,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        16,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" biceps \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" back \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        18,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "for ( int i = 0to ; i < n ; i ++ ) exe [ i % 3 ] += arr [ i ] ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "invalid suffix \"to\" on integer constant"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14,
        16
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14,
        16,
        18
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14,
        16,
        17
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "n"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14,
        18
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14,
        18,
        17
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14,
        17
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" chest \" ;",
        "n"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" biceps \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        16,
        18
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        16,
        18,
        17
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        16,
        17
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" biceps \" ;",
        "n"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" back \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        18,
        17
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "if ( max [ i ] < exe [ i ] )",
        "n"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        16,
        18,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        16,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" biceps \" ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        18,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "cout << \" chest \" ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        18,
        17
      ],
      "mod_code": [
        "cout << \" biceps \" ;",
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "cout << \" biceps \" ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "cout << \" back \" ;",
        "n"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}