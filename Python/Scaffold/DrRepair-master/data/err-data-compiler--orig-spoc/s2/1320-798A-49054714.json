{
  "meta": {
    "index": 1320,
    "hitid": "3FTID4TN8LSF5WKLO5C4H49A0EILYC",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "798A",
    "subid": "49054714"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare ispalindrome taking in string s and returning bool",
      "code": "bool ispalindrome ( string s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make string t = s",
      "code": "string t = s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "reverse s",
      "code": "reverse ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return the result of s = = t",
      "code": "return s == t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "make string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if ispalindrome ( s ) returns true",
      "code": "if ( ispalindrome ( s ) )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s . size ( ) % 2 is truthy",
      "code": "if ( s . size ( ) % 2 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "display \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to s . size ( ) / 2 exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "make string t = s",
      "code": "string t = s ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set t [ i ] to t [ t . size ( ) - i - 1 ]",
      "code": "t [ i ] = t [ t . size ( ) - i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if ispalindrome ( t ) is true",
      "code": "if ( ispalindrome ( t ) )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "show \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "display \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return s == t ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool ispalindrome ( string s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "reverse ( s , s + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) / 2 ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "string t = ' s ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int t [ i ] = t [ t . size ( ) - i - 1 ] ;"
      ],
      "err_line": 19,
      "err_msg": "conflicting declaration ‘int t [i]’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        1
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        21
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        1
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9,
        1,
        21
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9,
        1,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        9,
        21
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        21,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        9,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        13,
        1
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        13,
        1,
        21
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" NO \" ;",
        "string t = ' s ' ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        13,
        1,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" NO \" ;",
        "string t = ' s ' ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        13,
        21
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        13,
        21,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        13,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "return s == t ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        1,
        21
      ],
      "mod_code": [
        "return s == t ) ;",
        "string t = ' s ' ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        1,
        21,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "string t = ' s ' ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        1,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "string t = ' s ' ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        21,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "return s == t ) ;",
        "string t = ' s ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        13,
        1,
        21
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "string t = ' s ' ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        13,
        1,
        18
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "string t = ' s ' ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        13,
        21
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        21,
        18
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        18
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        1,
        21
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        1,
        21,
        18
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        1,
        18
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        21,
        18
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "if ( s . size ( ) % 2 == truthy )",
        "string t = ' s ' ;"
      ],
      "err_line": 9,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13,
        1,
        21
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "string t = ' s ' ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13,
        1,
        21,
        18
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "string t = ' s ' ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13,
        1,
        18
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "string t = ' s ' ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13,
        21,
        18
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "string t = ' s ' ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        1,
        21,
        18
      ],
      "mod_code": [
        "string t = ' s ' ;",
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "string t = ' s ' ;",
        "string t = ' s ' ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        21,
        18
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "string t = ' s ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}