{
  "meta": {
    "index": 1316,
    "hitid": "38B7Q9C28GZILA96TPEMT4YM1A9691",
    "workerid": "A1APYLD4DUK33J",
    "probid": "798A",
    "subid": "49040438"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer diff = 0",
      "code": "int diff = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to size of str exclusive , increment diff by ( str [ i ] is not str [ size of str - 1 - i ] )",
      "code": "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += str [ i ] != str [ str . size ( ) - 1 - i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if diff is 2 or diff is 0 and size of str % 2 is 1",
      "code": "if ( diff == 2 || diff == 0 && str . size ( ) % 2 == 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string str << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }",
        "string str << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        1,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }",
        "string str << endl ;",
        "int diff = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        1,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }",
        "string str << endl ;",
        "int diff = 1 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        1,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }",
        "string str << endl ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }",
        "int diff = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }",
        "int diff = 1 ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ++ ; }",
        "n"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string str << endl ;",
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ; }"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "string str << endl ;",
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ; }",
        "int diff = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        4,
        3,
        7
      ],
      "mod_code": [
        "string str << endl ;",
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ; }",
        "int diff = 1 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "string str << endl ;",
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ; }",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string str << endl ;",
        "int diff = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "string str << endl ;",
        "int diff = 1 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "string str << endl ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ; }",
        "int diff = 1 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < str . size ( ) ; i ++ ) { diff += ( str [ i ] != str [ str . size ( ) - 1 ] ) ; }",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int diff = 1 ;",
        "n"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}