{
  "meta": {
    "index": 1219,
    "hitid": "3L55D8AUFARM2SQFBSJ5ELJN657CYQ",
    "workerid": "A1AYVATMT88U1W",
    "probid": "629A",
    "subid": "25388661"
  },
  "lines": [
    {
      "line": 0,
      "text": "function in_out_txt",
      "code": "void in_out_txt ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "open file input . txt",
      "code": "freopen ( \" input.txt \" , \" rt \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "open file output . txt",
      "code": "freopen ( \" output.txt \" , \" wt \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "FillArray is a function with arr array , integers n , sum",
      "code": "void FillArray ( int arr [ ] , int n , int num )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "for integer i = 0 to n exclusive , arr [ i ] equals num",
      "code": "for ( int i = 0 ; i < n ; i ++ ) arr [ i ] = num ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "fun is a function which accepts and returns an integer",
      "code": "int fun ( int num )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "re is an integer",
      "code": "int re ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "st is pointerr of integers",
      "code": "set < int > st ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while num is not 0",
      "code": "while ( num != 0 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "re = num % 10",
      "code": "re = num % 10 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "divide num by 10",
      "code": "num /= 10 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "insert re into st",
      "code": "st . insert ( re ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "let integer s be the size of st",
      "code": "int s = st . size ( ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return s",
      "code": "return s ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "n is an integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "arr is a character array with 101 rows and columns",
      "code": "char arr [ 101 ] [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for integer j = 0 to n exclusive , read arr [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) cin >> arr [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "c is an integer equals 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for integer j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if arr [ i ] [ j ] equals C",
      "code": "if ( arr [ i ] [ j ] == ' C ' )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "for integer k = j + 1 to n exclusive",
      "code": "for ( int k = j + 1 ; k < n ; k ++ )",
      "indent": 4
    },
    {
      "line": 30,
      "text": "if arr [ i ] [ j ] equals C , increase c by 1",
      "code": "if ( arr [ i ] [ k ] == ' C ' ) c ++ ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 36,
      "text": "for integer j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if arr [ i ] [ j ] equals C",
      "code": "if ( arr [ i ] [ j ] == ' C ' )",
      "indent": 3
    },
    {
      "line": 38,
      "text": "for integer k = i + 1 to n exclusive",
      "code": "for ( int k = i + 1 ; k < n ; k ++ )",
      "indent": 4
    },
    {
      "line": 39,
      "text": "if arr [ i ] [ j ] equals C , increase c by 1",
      "code": "if ( arr [ k ] [ j ] == ' C ' ) c ++ ;",
      "indent": 5
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print c and newline",
      "code": "cout << c << endl ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "end statement",
      "code": ";",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int fun ( int a )"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "st = pointerr ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 30,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 37,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 39,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void in_out_txt ( ) { }"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int FillArray ( int arr , int n , int sum )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int fun ( int fun )"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "st = pointerr . pointerr ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "st . push ( re ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘class std::set<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int s = strlen ( st ) ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::set<int>’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "char arr [ 101 ] ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "c = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C ) { c ++ ; }"
      ],
      "err_line": 30,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C ) { c ++ ; }"
      ],
      "err_line": 39,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "<< endl ;"
      ],
      "err_line": 45,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        9
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "st = pointerr ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        28
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        28
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        28
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        28,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        28,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        28,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        30,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        30,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        37,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        4,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        9
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "st = pointerr ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        28
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        28
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        28,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        28,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        28,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        30,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        30,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        37,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        7,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        28
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        28,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        28,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        28,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        30,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        30,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        37,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        9,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        28
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        28,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        28,
        30,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        28,
        30,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        28,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        28,
        37,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        28,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        30
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        30,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        30,
        37,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        30,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        37
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        37,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        39
      ],
      "mod_code": [
        "freopen ( \" . \" ) ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "st = pointerr ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        28
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        30
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        28
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        28,
        30
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        28,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        28,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        30
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        30,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        30,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        37,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        28
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        28,
        30
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        28,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        28,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        30
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        30,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        30,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        37,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        28
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        28,
        30
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        28,
        30,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        28,
        30,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        28,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        28,
        37,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        28,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        30
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        30,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        30,
        37,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        30,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        39
      ],
      "mod_code": [
        "int FillArray ( int arr [ ] , int n , int sum )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 5,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        28
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        28,
        30
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        28,
        37
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        28,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        30
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        30,
        37
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        30,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        37
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        37,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        28
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        28,
        30
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        28,
        30,
        37
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        28,
        30,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        28,
        37
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        28,
        37,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        28,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        30
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        30,
        37
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        30,
        37,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        30,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        37
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        37,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        39
      ],
      "mod_code": [
        "int fun ( int a )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        28
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        28,
        30
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        28,
        30,
        37
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        28,
        30,
        39
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        28,
        37
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        28,
        37,
        39
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        28,
        39
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        30
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        30,
        37
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        30,
        37,
        39
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        30,
        39
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        37
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        37,
        39
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        39
      ],
      "mod_code": [
        "st = pointerr ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        30
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        30,
        37
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        30,
        37,
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        30,
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        37
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        37,
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 28,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        37
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )"
      ],
      "err_line": 30,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        37,
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 30,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C ) c ++ ;",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 30,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        39
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == C )",
        "if ( arr [ i ] [ j ] == C ) c ++ ;"
      ],
      "err_line": 37,
      "err_msg": "‘C’ was not declared in this scope"
    }
  ]
}