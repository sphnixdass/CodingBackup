{
  "meta": {
    "index": 2507,
    "hitid": "3QXFBUZ4ZKAI2VMF3DIZ1RYP776UGX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "7A",
    "subid": "40042023"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let i , j , s , s1 and s2 be integers",
      "code": "int i , j , s , s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let ch be a 2d array of characters with size 8 by 8",
      "code": "char ch [ 8 ] [ 8 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 8 exclusive write input to ch [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 8 ; j ++ ) { cin >> ch [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "s1 and s2 = 0",
      "code": "s1 = 0 , s2 = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set value of s to 0",
      "code": "s = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to 8 exclusive",
      "code": "for ( j = 0 ; j < 8 ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if ch [ i ] [ j ] is ' B ' , increment s",
      "code": "if ( ch [ i ] [ j ] == ' B ' ) s ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if s is equal to 8",
      "code": "if ( s == 8 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increase s1",
      "code": "s1 ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set s2 to s",
      "code": "s2 = s ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print s1 + s2 and a new line",
      "code": "cout << s1 + s2 << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        14
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        14,
        12
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "n",
        "if ( s == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        14,
        2
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "n",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        14,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "n",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        12
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "if ( s == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        12,
        2
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        12,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "if ( s == ' 8 ' )",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int i , j , s , s1 >> s2 ;",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        6,
        14,
        12
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "n",
        "if ( s == ' 8 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        6,
        14,
        12,
        2
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "n",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        6,
        14,
        12,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "n",
        "if ( s == ' 8 ' )",
        "int s2 = s ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        6,
        14,
        2
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "n",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        6,
        14,
        2,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "n",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        6,
        14,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "n",
        "int s2 = s ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "if ( s == ' 8 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        6,
        12,
        2
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        6,
        12,
        2,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        6,
        12,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "if ( s == ' 8 ' )",
        "int s2 = s ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        6,
        2,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "int s1 = 0 , s2 = 0 ;",
        "int s2 = s ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int s1’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "n"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        12
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "n",
        "if ( s == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        12,
        2
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "n",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        12,
        15
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "n",
        "if ( s == ' 8 ' )",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        2
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "n",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        2,
        15
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "n",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        15
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "n",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "if ( s == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        12,
        2
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        12,
        2,
        15
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        12,
        15
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "if ( s == ' 8 ' )",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        2,
        15
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int i , j , s , s1 >> s2 ;",
        "int s2 = s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "n",
        "if ( s == ' 8 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12,
        2
      ],
      "mod_code": [
        "n",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        14,
        12,
        2,
        15
      ],
      "mod_code": [
        "n",
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        14,
        12,
        15
      ],
      "mod_code": [
        "n",
        "if ( s == ' 8 ' )",
        "int s2 = s ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "n",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        14,
        2,
        15
      ],
      "mod_code": [
        "n",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "n",
        "int s2 = s ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        12,
        2,
        15
      ],
      "mod_code": [
        "if ( s == ' 8 ' )",
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "char * [ 8 ] [ 8 ] ;",
        "int s2 = s ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘[’ token"
    }
  ]
}