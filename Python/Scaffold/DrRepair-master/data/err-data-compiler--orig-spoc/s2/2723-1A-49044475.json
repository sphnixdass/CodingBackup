{
  "meta": {
    "index": 2723,
    "hitid": "3HO4MYYR12IG52X9R09DP0L0DT46U8",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1A",
    "subid": "49044475"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , m and a be long longs",
      "code": "long long n , m , a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "i and j are long longs with i = 0 and j = 0",
      "code": "long long i = 0 , j = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while car rean n , m and a",
      "code": "while ( cin >> n >> m >> a )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n % a is 1",
      "code": "if ( n % a )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "i = n / a + 1",
      "code": "i = n / a + 1 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "i = n / a",
      "code": "i = n / a ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if m % a is 1",
      "code": "if ( m % a )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "j = m / a + 1",
      "code": "j = m / a + 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "j = m / a",
      "code": "j = m / a ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "print i * j and a new line",
      "code": "cout << i * j << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long i , j = 0 , j = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘long long int j’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( n % a == 1 )",
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( n % a == 1 )",
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( n % a == 1 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( n % a == 1 )",
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        8
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( n % a == 1 )",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( n % a == 1 )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        10,
        8
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( n % a == 1 )",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        6,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( m % a == 1 )",
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        8
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "n",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        10,
        8
      ],
      "mod_code": [
        "while ( cin >> n >> m >> m )",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        8,
        6
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        8,
        6,
        10
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "if ( m % a == 1 )",
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        8,
        10
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        8
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "n",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "if ( n % a == 1 )",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        6,
        10
      ],
      "mod_code": [
        "if ( m % a == 1 )",
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( m % a == 1 )",
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "n",
        "n"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        8
      ],
      "mod_code": [
        "n",
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "n",
        "if ( ( m % a ) == 1 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}