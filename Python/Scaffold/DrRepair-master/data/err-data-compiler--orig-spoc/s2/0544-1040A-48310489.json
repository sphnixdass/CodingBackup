{
  "meta": {
    "index": 544,
    "hitid": "3W1K7D6QSBB3XD8ETEPTH8M7UE2ZBO",
    "workerid": "A1APYLD4DUK33J",
    "probid": "1040A",
    "subid": "48310489"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer mod with mod = 998244353",
      "code": "const int mod = 998244353 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare qpow with long longs x , y as arguments , returning long long",
      "code": "long long qpow ( long long x , long long y )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create long long s with s = 1",
      "code": "long long s = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while y is true",
      "code": "while ( y )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if y bitwise and 1 , set s to s * x % mod",
      "code": "if ( y & 1 ) s = s * x % mod ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set x to x * x % mod",
      "code": "x = x * x % mod ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set y to y bitshift right 1",
      "code": "y >>= 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return s from function",
      "code": "return s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare inline read with no arguments , returning integer",
      "code": "inline int read ( )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "create integers x , f , with x = 0 , f = 1",
      "code": "int x = 0 , f = 1 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create character ch with ch = read character",
      "code": "char ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while ch is less than ' 0 ' or ch is greater than ' 9 '",
      "code": "while ( ch < ' 0 ' || ch > ' 9 ' )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ch is ' - ' , set f to - 1",
      "code": "if ( ch == ' - ' ) f = - 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set ch to read character",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while ch is greater than or equal to ' 0 ' and ch is less than or equal to ' 9 ' , set x to x * 10 + ch - ' 0 ' , set ch to read character",
      "code": "while ( ch >= ' 0 ' && ch <= ' 9 ' ) x = x * 10 + ch - ' 0 ' , ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return x * f",
      "code": "return x * f ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "declare inve with long long x as argument , returning long long",
      "code": "long long inve ( long long x )",
      "indent": 0
    },
    {
      "line": 21,
      "text": "return 1 if x is 1 , else ( mod - mod / x ) * result of run inve with mod % x as argument % mod",
      "code": "return x == 1 ? 1 : ( mod - mod / x ) * inve ( mod % x ) % mod ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "create integers n , w , b , ans",
      "code": "int n , w , b , ans ;",
      "indent": 0
    },
    {
      "line": 24,
      "text": "create integer array a with size 100050",
      "code": "int a [ 100050 ] ;",
      "indent": 0
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 26,
      "text": "read n read w read b",
      "code": "cin >> n >> w >> b ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for i = 1 to n inclusive , read a [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "create integers l , r with l = 0 , r = n + 1",
      "code": "int l = 0 , r = n + 1 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "while 1 is true",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "decrement r",
      "code": "r -- ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if r is less than or equal to l",
      "code": "if ( r <= l )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if r is l and a [ l ] is 2 , increment ans by minimum of b and w",
      "code": "if ( r == l && a [ l ] == 2 ) ans += min ( b , w ) ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "if a [ l ] is 0 and a [ r ] is 0 , break current loop iteration",
      "code": "if ( a [ l ] == 0 && a [ r ] == 0 ) continue ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if a [ l ] is 1 and a [ r ] is 1 , break current loop iteration",
      "code": "if ( a [ l ] == 1 && a [ r ] == 1 ) continue ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "if ( a [ l ] is 2 and a [ r ] is 0 ) or ( a [ l ] is 0 and a [ r ] is 2 )",
      "code": "if ( ( a [ l ] == 2 && a [ r ] == 0 ) || ( a [ l ] == 0 && a [ r ] == 2 ) )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "increment ans by w",
      "code": "ans += w ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if ( a [ l ] is 2 and a [ r ] is 1 ) or ( a [ l ] is 1 and a [ r ] is 2 )",
      "code": "if ( ( a [ l ] == 2 && a [ r ] == 1 ) || ( a [ l ] == 1 && a [ r ] == 2 ) )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "increment ans by b",
      "code": "ans += b ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "if a [ l ] is 2 and a [ r ] is 2",
      "code": "if ( a [ l ] == 2 && a [ r ] == 2 )",
      "indent": 2
    },
    {
      "line": 47,
      "text": "increment ans by 2 * minimum of b and w",
      "code": "ans += 2 * min ( b , w ) ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 50,
      "text": "if a [ l ] is not 2 and a [ r ] is not 2 and a [ l ] is not a [ r ] , return print \" - 1 \" , 0",
      "code": "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return puts ( \" -1 \" ) , 0 ;",
      "indent": 2
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 52,
      "text": "print ans print \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;"
      ],
      "err_line": 50,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int * mod = 998244353 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘int’ to ‘const int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long qpow ( long long x , long long y ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int x , f = 0 , f = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int n , w , b , ans , ans ;"
      ],
      "err_line": 23,
      "err_msg": "redefinition of ‘int ans’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int s [ 100050 ] ;"
      ],
      "err_line": 27,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int l = 0 , r += n + 1 ;"
      ],
      "err_line": 28,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;"
      ],
      "err_line": 47,
      "err_msg": "‘of’ was not declared in this scope"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;"
      ],
      "err_line": 50,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "\" cout << ans << \" \\n \" ;"
      ],
      "err_line": 52,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        50,
        47
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "ans += 2 * of ( b , w ) ;"
      ],
      "err_line": 47,
      "err_msg": "‘of’ was not declared in this scope"
    },
    {
      "mod_line": [
        50,
        47,
        40
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "ans += 2 * of ( b , w ) ;",
        "break ;"
      ],
      "err_line": 47,
      "err_msg": "‘of’ was not declared in this scope"
    },
    {
      "mod_line": [
        50,
        47,
        40,
        10
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "ans += 2 * of ( b , w ) ;",
        "break ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        47,
        40,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "ans += 2 * of ( b , w ) ;",
        "break ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        47,
        10
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "ans += 2 * of ( b , w ) ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        47,
        10,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "ans += 2 * of ( b , w ) ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        47,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "ans += 2 * of ( b , w ) ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        40
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;"
      ],
      "err_line": 50,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        50,
        40,
        10
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        40,
        10,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        40,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        10
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        10,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        47,
        50
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;"
      ],
      "err_line": 47,
      "err_msg": "‘of’ was not declared in this scope"
    },
    {
      "mod_line": [
        47,
        50,
        40
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;"
      ],
      "err_line": 47,
      "err_msg": "‘of’ was not declared in this scope"
    },
    {
      "mod_line": [
        47,
        50,
        40,
        10
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        47,
        50,
        40,
        34
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        47,
        50,
        10
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        47,
        50,
        10,
        34
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        47,
        50,
        34
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        47,
        40
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "break ;"
      ],
      "err_line": 47,
      "err_msg": "‘of’ was not declared in this scope"
    },
    {
      "mod_line": [
        47,
        40,
        10
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "break ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        47,
        40,
        10,
        34
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "break ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        47,
        40,
        34
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "break ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        47,
        10
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        47,
        10,
        34
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        47,
        34
      ],
      "mod_code": [
        "ans += 2 * of ( b , w ) ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        40
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;"
      ],
      "err_line": 50,
      "err_msg": "invalid user-defined conversion from ‘std::basic_ostream<char>::__ostream_type {aka std::basic_ostream<char>}’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        50,
        40,
        10
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        40,
        10,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        40,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        10
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        10,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        50,
        34
      ],
      "mod_code": [
        "if ( a [ l ] != 2 && a [ r ] != 2 && a [ l ] != a [ r ] ) return cout << \" -1 \" << endl ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        40,
        10
      ],
      "mod_code": [
        "break ;",
        "inline int read ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        40,
        10,
        34
      ],
      "mod_code": [
        "break ;",
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        40,
        34
      ],
      "mod_code": [
        "break ;",
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        34
      ],
      "mod_code": [
        "inline int read ( ) ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}