{
  "meta": {
    "index": 113,
    "hitid": "34HEO7RUG6OPCCHVDJVK0U023F4RAY",
    "workerid": "A1APYLD4DUK33J",
    "probid": "411A",
    "subid": "48268886"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers digit , small , big , i , l",
      "code": "int digit , small , big , i , l ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare quit with no arguments , returning void",
      "code": "void quit ( )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "print \" Too weak \" and newline",
      "code": "cout << \" Too weak \" << endl ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return from function",
      "code": "return ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "let l be length of s",
      "code": "l = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if l is less than 5",
      "code": "if ( l < 5 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "run quit",
      "code": "quit ( ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to l exclusive",
      "code": "for ( i = 0 ; i < l ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if s [ i ] is upper case , let big be 1",
      "code": "if ( isupper ( s [ i ] ) ) big = 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] is lower case , let small be 1",
      "code": "if ( islower ( s [ i ] ) ) small = 1 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if s [ i ] is a digit , let digit be 1",
      "code": "if ( isdigit ( s [ i ] ) ) digit = 1 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if big and small and digit",
      "code": "if ( big && small && digit )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" Correct \" and newline",
      "code": "cout << \" Correct \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "run quit",
      "code": "quit ( ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "void quit ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "quit ( quit ) ;"
      ],
      "err_line": 10,
      "err_msg": "too many arguments to function ‘void quit()’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "<< \" Correct \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 20,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "quit ( quit ) ;"
      ],
      "err_line": 21,
      "err_msg": "too many arguments to function ‘void quit()’"
    },
    {
      "mod_line": [
        3,
        15,
        18,
        4
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( s [ i ] ) small = 1 ;",
        "if ( big && ! small )",
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        15,
        18,
        7
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( s [ i ] ) small = 1 ;",
        "if ( big && ! small )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        15,
        4
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( s [ i ] ) small = 1 ;",
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        15,
        4,
        7
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( s [ i ] ) small = 1 ;",
        "return from ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        15,
        7
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( s [ i ] ) small = 1 ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        18,
        4
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( big && ! small )",
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        18,
        4,
        7
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( big && ! small )",
        "return from ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        18,
        7
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "if ( big && ! small )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "return from ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "cout << \" 2/3 \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        18,
        4
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "if ( big && ! small )",
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        4,
        7
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "if ( big && ! small )",
        "return from ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        4,
        3
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "if ( big && ! small )",
        "return from ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        7
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "if ( big && ! small )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        18,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "if ( big && ! small )",
        "s >> s ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4,
        7
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "return from ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "return from ;",
        "s >> s ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4,
        3
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "return from ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] ) small = 1 ;",
        "s >> s ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "if ( big && ! small )",
        "return from ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        4,
        7
      ],
      "mod_code": [
        "if ( big && ! small )",
        "return from ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        4,
        7,
        3
      ],
      "mod_code": [
        "if ( big && ! small )",
        "return from ;",
        "s >> s ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        4,
        3
      ],
      "mod_code": [
        "if ( big && ! small )",
        "return from ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7
      ],
      "mod_code": [
        "if ( big && ! small )",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        7,
        3
      ],
      "mod_code": [
        "if ( big && ! small )",
        "s >> s ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "return from ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        3
      ],
      "mod_code": [
        "return from ;",
        "s >> s ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "return from ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" Too \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}