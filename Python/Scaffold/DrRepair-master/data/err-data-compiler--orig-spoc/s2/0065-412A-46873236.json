{
  "meta": {
    "index": 65,
    "hitid": "3J9UN9O9J3MCDB00DCPI9X2YKCW0JM",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "412A",
    "subid": "46873236"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function moveS taking int pos , int d , int dest , string com , string s",
      "code": "void moveS ( int pos , int d , int dest , string com , string s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "loop while pos ! = dest",
      "code": "while ( pos != dest )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "print \" PRINT \"",
      "code": "cout << \" PRINT \"",
      "indent": 2
    },
    {
      "line": 3,
      "text": "then \" \" then s [ pos ]",
      "code": "<< \" \" << s [ pos ] << endl ;",
      "indent": 3
    },
    {
      "line": 4,
      "text": "print com",
      "code": "cout << com << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increment pos by d",
      "code": "pos += d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" PRINT \"",
      "code": "cout << \" PRINT \"",
      "indent": 1
    },
    {
      "line": 8,
      "text": "then \" \" then s [ pos ]",
      "code": "<< \" \" << s [ pos ] << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "n , k = int",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n then k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if k < = n / 2",
      "code": "if ( k <= n / 2 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "decrement k",
      "code": "k -- ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "loop while k > 0",
      "code": "while ( k > 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" LEFT \"",
      "code": "cout << \" LEFT \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "decrement k",
      "code": "k -- ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "call moveS on k , 1 , n - 1 , \" RIGHT \" , s",
      "code": "moveS ( k , 1 , n - 1 , \" RIGHT \" , s ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "decrement k",
      "code": "k -- ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "loop while k < n - 1",
      "code": "while ( k < n - 1 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print \" RIGHT \"",
      "code": "cout << \" RIGHT \" << endl ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "call moveS on k , - 1 , 0 , \" LEFT \" , s",
      "code": "moveS ( k , - 1 , 0 , \" LEFT \" , s ) ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cout << \" PRINT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" PRINT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string s , string s )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "puts ( \" PRINT \" ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> \" \" >> s [ pos ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cin’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "puts ( \" PRINT \" ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> \" \" >> s [ pos ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cin’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cin >> n then k ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘then’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 14,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "moveS = k , 1 , n - 1 , \" RIGHT \" , s ;"
      ],
      "err_line": 21,
      "err_msg": "assignment of function ‘void moveS(int, int, int, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "moveS = k , - 1 , 0 , \" LEFT \" , s ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void moveS(int, int, int, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        7
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        8
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        7
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        8
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        8
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        18,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        7
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        8
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        8
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        18,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        8
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        18,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        8,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        8,
        18,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        8,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        18,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "void moveS ( int pos , int d , string dest , string com , string s )",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 1,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        18
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        18
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        18
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        7,
        18
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        7,
        18,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        7,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        8,
        18
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        8,
        18,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        8,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        18,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        7,
        8
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        18
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        7,
        18
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        7,
        18,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        7,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        8,
        18
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        8,
        18,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        8,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        18,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        18,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        25
      ],
      "mod_code": [
        "cout << \" PRINT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        18,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" LEFT \" ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "cout << \" \" << s [ pos ] ;",
        "cout << \" RIGHT \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}