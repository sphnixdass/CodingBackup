{
  "meta": {
    "index": 1865,
    "hitid": "33KGGVH24UBDFKQ7QZ8JEBTN02JX1C",
    "workerid": "AIWEXPJAU66D9",
    "probid": "460A",
    "subid": "48661908"
  },
  "lines": [
    {
      "line": 0,
      "text": "function d with int arguments n and m that returns integer",
      "code": "int d ( int n , int m )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if n is less than m , return n",
      "code": "if ( n < m ) { return n ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if n is equal to m , return n + 1",
      "code": "if ( n == m ) { return n + 1 ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n is greater than m , return ( d of n - m + 1 and m ) + m",
      "code": "if ( n > m ) { return d ( n - m + 1 , m ) + m ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create new integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read from the input to n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print d ( n , m )",
      "code": "cout << d ( n , m ) << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n , m ;"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘print’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n , m ;",
        "print ( d ( n , m ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        0
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6,
        0
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n , m ;",
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        6,
        0,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n , m ;",
        "int d ( int n that int m )",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n , m ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "print ( d ( n , m ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        8,
        0
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        8,
        0,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        8,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "print ( d ( n , m ) ) ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        0,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "int d ( int n that int m )",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m - 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "n , m ;",
        "print ( d ( n , m ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        0
      ],
      "mod_code": [
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        6,
        8,
        0,
        3
      ],
      "mod_code": [
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        6,
        8,
        0,
        7
      ],
      "mod_code": [
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        7
      ],
      "mod_code": [
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "n , m ;",
        "print ( d ( n , m ) ) ;",
        "n = n >> m ;"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "n , m ;",
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        6,
        0,
        3
      ],
      "mod_code": [
        "n , m ;",
        "int d ( int n that int m )",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        6,
        0,
        3,
        7
      ],
      "mod_code": [
        "n , m ;",
        "int d ( int n that int m )",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        6,
        0,
        7
      ],
      "mod_code": [
        "n , m ;",
        "int d ( int n that int m )",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "n , m ;",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        3,
        7
      ],
      "mod_code": [
        "n , m ;",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "n , m ;",
        "n = n >> m ;"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        8,
        0,
        3
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        8,
        0,
        3,
        7
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        8,
        0,
        7
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;",
        "int d ( int n that int m )",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3,
        7
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "print ( d ( n , m ) ) ;",
        "n = n >> m ;"
      ],
      "err_line": 8,
      "err_msg": "‘print’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int d ( int n that int m )",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        0,
        3,
        7
      ],
      "mod_code": [
        "int d ( int n that int m )",
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int d ( int n that int m )",
        "n = n >> m ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before ‘that’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "if ( n > m ) return ( d - m + 1 , m ) + m ) ;",
        "n = n >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}