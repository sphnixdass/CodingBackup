{
  "meta": {
    "index": 1423,
    "hitid": "3X2LT8FDHWCG1K52FFLCR22O56LW84",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "155A",
    "subid": "49099952"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , sum = integers and arr = array of 1000 integers",
      "code": "int n , sum , arr [ 1000 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "Read n values into array arr",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "min = integer with arr [ 0 ] and max = integer with arr [ 0 ]",
      "code": "int min = arr [ 0 ] , max = arr [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if arr [ i ] is less than min",
      "code": "if ( arr [ i ] < min )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set min to arr [ i ]",
      "code": "min = arr [ i ] ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if arr [ i ] is greater than max",
      "code": "if ( arr [ i ] > max )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set max to arr [ i ]",
      "code": "max = arr [ i ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print sum and new line",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        0,
        4
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0,
        4,
        11
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0,
        4,
        2
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0,
        4,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0,
        11
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int max = arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        0,
        11,
        2
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        0,
        11,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int max = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0,
        2
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        0,
        2,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int min = int ( arr [ 0 ] , max ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        11
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        11,
        2
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        11,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        2,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        2,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "int max = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        2,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "int min = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        11
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        11,
        2
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        11,
        5
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        2
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        2,
        5
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        5
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int min = int ( arr [ 0 ] , max ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int max = arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        0,
        11,
        2
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        0,
        11,
        2,
        5
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11,
        5
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "int max = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        0,
        2,
        5
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int n , arr [ 1000 ] , sum [ 1000 ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        2
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        2,
        5
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        5
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;",
        "int max = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        5
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int min = int ( arr [ 0 ] , max ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2,
        5
      ],
      "mod_code": [
        "int max = arr [ i ] ;",
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "int max = arr [ i ] ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}