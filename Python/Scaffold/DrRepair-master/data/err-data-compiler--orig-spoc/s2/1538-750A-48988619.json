{
  "meta": {
    "index": 1538,
    "hitid": "3EAWOID6MTRL460UU131CLDSFZ1V00",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "750A",
    "subid": "48988619"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function cmp taking two references to const long lonts a and b and returning a bool",
      "code": "bool cmp ( const long long & a , long long & b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return true if a is less than b else return false",
      "code": "return a < b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n , k = int",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "loop while reading n then k",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "shengyu = int with shengyu = 240 - k",
      "code": "int shengyu = 240 - k ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "s , nowp = int with s = 0 and nowp = 5",
      "code": "int s = 0 , nowp = 5 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "count = int with count = 0",
      "code": "int count = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "i = int with i = 1",
      "code": "int i = 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "loop while i is less or equal to n",
      "code": "while ( i <= n )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s + i * nowp is shengyu",
      "code": "if ( s + i * nowp == shengyu )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set count to i",
      "code": "count = i ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if s + nowp * i is less than shengyu",
      "code": "if ( s + nowp * i < shengyu )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment s by nowp * i",
      "code": "s += nowp * i ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "set count to i",
      "code": "count = i ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if s + nowp * i is greater than shengyu break",
      "code": "if ( s + nowp * i > shengyu ) { break ; }",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( { cin >> n >> k )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int * i = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "if ( ( s + i ) * nowp == shengyu )"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        8
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "if ( ( s + i ) * nowp == shengyu )",
        "bool count = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        8,
        7
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "if ( ( s + i ) * nowp == shengyu )",
        "bool count = 0 ;",
        "int s = 0 , nowp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        8,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "if ( ( s + i ) * nowp == shengyu )",
        "bool count = 0 ;",
        "int count = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        7
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "if ( ( s + i ) * nowp == shengyu )",
        "int s = 0 , nowp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        7,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "if ( ( s + i ) * nowp == shengyu )",
        "int s = 0 , nowp = 0 ;",
        "int count = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "if ( ( s + i ) * nowp == shengyu )",
        "int count = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "bool count = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        8,
        7
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "bool count = 0 ;",
        "int s = 0 , nowp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        8,
        7,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "bool count = 0 ;",
        "int s = 0 , nowp = 0 ;",
        "int count = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        8,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "bool count = 0 ;",
        "int count = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "int s = 0 , nowp = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        7,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "int s = 0 , nowp = 0 ;",
        "int count = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8,
        7,
        0
      ],
      "mod_code": [
        "if ( ( s + i ) * nowp == shengyu )",
        "bool count = 0 ;",
        "int s = 0 , nowp = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        8,
        0
      ],
      "mod_code": [
        "if ( ( s + i ) * nowp == shengyu )",
        "bool count = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        8,
        0,
        17
      ],
      "mod_code": [
        "if ( ( s + i ) * nowp == shengyu )",
        "bool count = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        7,
        0
      ],
      "mod_code": [
        "if ( ( s + i ) * nowp == shengyu )",
        "int s = 0 , nowp = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        7,
        0,
        17
      ],
      "mod_code": [
        "if ( ( s + i ) * nowp == shengyu )",
        "int s = 0 , nowp = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "if ( ( s + i ) * nowp == shengyu )",
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        0,
        17
      ],
      "mod_code": [
        "if ( ( s + i ) * nowp == shengyu )",
        "bool cmp ( const long long & a , const const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        7,
        0
      ],
      "mod_code": [
        "bool count = 0 ;",
        "int s = 0 , nowp = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        7,
        0,
        17
      ],
      "mod_code": [
        "bool count = 0 ;",
        "int s = 0 , nowp = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "bool count = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        0,
        17
      ],
      "mod_code": [
        "bool count = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "int s = 0 , nowp = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0,
        17
      ],
      "mod_code": [
        "int s = 0 , nowp = 0 ;",
        "bool cmp ( const long long & a , const const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "bool cmp ( const long long & a , const const long long lonts )",
        "int count = i ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    }
  ]
}