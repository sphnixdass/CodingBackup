{
  "meta": {
    "index": 289,
    "hitid": "3Q7TKIAPOT4C7LPUS9PQ4JZ9IQALD2",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "1082A",
    "subid": "48441817"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "T , n , x , y , d = long long",
      "code": "long long T , n , x , y , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read T",
      "code": "cin >> T ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while decrement T",
      "code": "while ( T -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , x , y , d",
      "code": "cin >> n >> x >> y >> d ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if ( x - y ) modulo d is 0",
      "code": "if ( ( x - y ) % d == 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print abs ( ( x - y ) / d )",
      "code": "cout << abs ( ( x - y ) / d ) << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "f = long long with f = 1e10",
      "code": "long long f = 1e10 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if ( y - 1 ) modulo d is 0 , f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) modulo d is not 0",
      "code": "if ( ( y - 1 ) % d == 0 ) { f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) % d != 0 ) ; }",
      "indent": 3
    },
    {
      "line": 10,
      "text": "l = long long with l = 1e10",
      "code": "long long l = 1e10 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if ( n - y ) modulo d is 0 , l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) modulo d is not 0 )",
      "code": "if ( ( n - y ) % d == 0 ) { l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) % d != 0 ) ; }",
      "indent": 3
    },
    {
      "line": 12,
      "text": "ans = long long with ans = min ( l , f )",
      "code": "long long ans = min ( l , f ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if ans is 1e10",
      "code": "if ( ans == 1e10 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        11,
        4,
        7
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "cin >> n >> x >> y , d ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        11,
        7
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        11,
        7,
        13
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "n",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        11,
        7,
        2
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "n",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        4,
        7
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "cin >> n >> x >> y , d ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        4,
        7,
        13
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "cin >> n >> x >> y , d ;",
        "n",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        4,
        7,
        2
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "cin >> n >> x >> y , d ;",
        "n",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        7,
        13
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "n",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        7,
        13,
        2
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "n",
        "if ( ! ans )",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        7,
        2
      ],
      "mod_code": [
        "if ( ( y - 1 ) % d == 0 ) f = ( ( y - 1 ) / d ) + ( ( x - 1 ) / d ) + ( ( x - 1 ) / d ) ;",
        "n",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        4,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "cin >> n >> x >> y , d ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        4,
        7,
        13
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "cin >> n >> x >> y , d ;",
        "n",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        4,
        7,
        2
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "cin >> n >> x >> y , d ;",
        "n",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7,
        13
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "n",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7,
        13,
        2
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "n",
        "if ( ! ans )",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7,
        2
      ],
      "mod_code": [
        "if ( ( n - y ) % d == 0 ) l = ( ( n - y ) / d ) + ( ( n - x ) / d ) + ( ( n - x ) / d ) ;",
        "n",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "cin >> n >> x >> y , d ;",
        "n"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7,
        13
      ],
      "mod_code": [
        "cin >> n >> x >> y , d ;",
        "n",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7,
        13,
        2
      ],
      "mod_code": [
        "cin >> n >> x >> y , d ;",
        "n",
        "if ( ! ans )",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7,
        2
      ],
      "mod_code": [
        "cin >> n >> x >> y , d ;",
        "n",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "n",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        13,
        2
      ],
      "mod_code": [
        "n",
        "if ( ! ans )",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "n",
        "T = getchar ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}