{
  "meta": {
    "index": 2214,
    "hitid": "3UEBBGULPFICOVQKSTCHJ6YD7UHUFE",
    "workerid": "A1APYLD4DUK33J",
    "probid": "914A",
    "subid": "48296104"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer array sq with size 1001 with sq =",
      "code": "int sq [ 1001 ] =",
      "indent": 0
    },
    {
      "line": 1,
      "text": "0",
      "code": "0 ,",
      "indent": 1
    },
    {
      "line": 2,
      "text": "end statement",
      "code": ";",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare check with integer x as argument , returning integer",
      "code": "int check ( int x )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "if not element between sq and sq + 1001 is x",
      "code": "if ( ! binary_search ( sq , sq + 1001 , x ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return 1 from function",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create integer array a with size n",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to 1000 inclusive , set sq [ i ] to i * i",
      "code": "for ( int i = 0 ; i <= 1000 ; i ++ ) { sq [ i ] = i * i ; }",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create integer m with m = INT_MIN",
      "code": "int m = INT_MIN ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if a [ i ] is greater than m and result of run check with a [ i ] as argument is true , set m to a [ i ]",
      "code": "if ( a [ i ] > m && check ( a [ i ] ) ) { m = a [ i ] ; }",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print m print newline",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "<< ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        ";"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int sq [ 1001 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "<< \" 0 \""
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "<< endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int check ( int x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( ! sq && sq + 1001 == x )"
      ],
      "err_line": 4,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 10,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "a [ n ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "m = INT_MIN ;"
      ],
      "err_line": 15,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        ";"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        4
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        ";",
        "if ( ! ( sq && sq + 1001 ) == x )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        ";",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        4
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        "if ( ! ( sq && sq + 1001 ) == x )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        2
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "<< endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        "<< endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        "<< endl ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< ' 0 ' ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        ";"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        4
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        ";",
        "if ( ! ( sq && sq + 1001 ) == x )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        ";",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        ";",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "if ( ! ( sq && sq + 1001 ) == x )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        2
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "<< endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        2,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "<< endl ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "<< endl ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int sq [ 1001 ] = { } ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        ";"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        ";",
        "if ( ! ( sq && sq + 1001 ) == x )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        10
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        ";",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        ";",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        "if ( ! ( sq && sq + 1001 ) == x )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "<< endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        4,
        2,
        10
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "<< endl ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        "<< endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        "<< endl ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "<< ' 0 ' ;",
        "n ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        ";",
        "if ( ! ( sq && sq + 1001 ) == x )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        4,
        10
      ],
      "mod_code": [
        ";",
        "if ( ! ( sq && sq + 1001 ) == x )",
        "n ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        ";",
        "n ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( ! ( sq && sq + 1001 ) == x )",
        "<< endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        2,
        10
      ],
      "mod_code": [
        "if ( ! ( sq && sq + 1001 ) == x )",
        "<< endl ;",
        "n ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "if ( ! ( sq && sq + 1001 ) == x )",
        "n ;"
      ],
      "err_line": 10,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "<< endl ;",
        "n ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘<<’ token"
    }
  ]
}