{
  "meta": {
    "index": 308,
    "hitid": "375VMB7D4JDAHKHO76SDC37H1MLDIL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "735A",
    "subid": "40569219"
  },
  "lines": [
    {
      "line": 0,
      "text": "create new integers n and k",
      "code": "int n , k ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read input to n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string variable with name a",
      "code": "string a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read from the input to a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare new int variables loc1 and loc2",
      "code": "int loc1 , loc2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "in a for loop , change i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a [ i ] = ' G ' , set the value of loc1 to i",
      "code": "if ( a [ i ] == ' G ' ) { loc1 = i ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ i ] is equal to ' T ' , set the value of loc2 to i",
      "code": "if ( a [ i ] == ' T ' ) { loc2 = i ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare ints sign and i = 1",
      "code": "int sign = 1 , i = 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ( loc2 - loc1 ) % k is 0",
      "code": "if ( ( loc2 - loc1 ) % k == 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "t is a new integer variable = loc1",
      "code": "int t = loc1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "loop start",
      "code": "do",
      "indent": 2
    },
    {
      "line": 14,
      "text": "assign the new value = loc1 + ( k * i if loc2 > loc1 or - 1 * k * i otherwise ) to t",
      "code": "t = loc1 + ( ( loc2 > loc1 ) ? k * i : k * i * - 1 ) ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if a [ t ] = ' # '",
      "code": "if ( a [ t ] == ' # ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "assign the new value = 0 to sign",
      "code": "sign = 0 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment i by one",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "go to the start of the loop if ( loc2 > loc1 ) ? t < loc2 : t > loc2",
      "code": "while ( ( loc2 > loc1 ) ? t < loc2 : t > loc2 ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if sign is true",
      "code": "if ( sign )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( ; ; start ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "n , k ;"
      ],
      "err_line": 0,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool a ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int loc1 = loc2 ;"
      ],
      "err_line": 5,
      "err_msg": "‘loc2’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int sign = 1 = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "t = loc1 ;"
      ],
      "err_line": 12,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( ; start )"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 or - 1 * k * i ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "* sign = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "continue < loc1 ) t < loc2 : loc2 : t ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘<’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        20
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        20,
        22
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        20,
        4
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        14,
        20,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        22
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        22,
        4
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "cout << \" YES \" ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        14,
        22,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        4
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        14,
        4,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        14,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        22
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        22,
        4
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        20,
        22,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        4
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        20,
        4,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        20,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "cout << \" YES \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        22,
        4
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "cout << \" YES \" ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        22,
        4,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "cout << \" YES \" ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        22,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        23
      ],
      "mod_code": [
        "for ( ; ; start ++ )",
        "n"
      ],
      "err_line": 13,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        14,
        20,
        22
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        14,
        20,
        22,
        4
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        20,
        22,
        23
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        14,
        20,
        4
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        20,
        4,
        23
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        20,
        23
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        14,
        22,
        4
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "cout << \" YES \" ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        22,
        4,
        23
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "cout << \" YES \" ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        22,
        23
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        23
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        23
      ],
      "mod_code": [
        "t = loc1 + ( k > loc1 ? - 1 : - 1 * k * i ) ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        20,
        22,
        4
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        22,
        4,
        23
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        22,
        23
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        20,
        4
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        4,
        23
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        23
      ],
      "mod_code": [
        "getline ( ( loc2 > loc1 ) ? t < loc2 : t ) ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘getline’"
    },
    {
      "mod_line": [
        22,
        4
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "a >> a ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        4,
        23
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        22,
        23
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "n"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "a >> a ;",
        "n"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}