{
  "meta": {
    "index": 2115,
    "hitid": "37NXA7GVST0Y12PGJUPKA55GIXCVL9",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "615A",
    "subid": "49074345"
  },
  "lines": [
    {
      "line": 0,
      "text": "create bool array lasagna [ 696969 ]",
      "code": "bool lasagna [ 696969 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set valid to true",
      "code": "bool valid = true ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create int x and y",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create int cyka and blyat",
      "code": "int cyka , blyat ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for a = 1 to x inclusive",
      "code": "for ( int a = 1 ; a <= x ; a ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read blyat",
      "code": "cin >> blyat ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for A = 0 to blyat exclusive",
      "code": "for ( int A = 0 ; A < blyat ; A ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read cyka",
      "code": "cin >> cyka ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set lasagna [ cyka ] = true",
      "code": "lasagna [ cyka ] = true ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for a = 1 to y inclusive",
      "code": "for ( int a = 1 ; a <= y ; a ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if lasagna [ a ] = false",
      "code": "if ( lasagna [ a ] == false )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print NO and a newline",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set valid to false",
      "code": "valid = false ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if valid is true , print YES and a newline",
      "code": "if ( valid == true ) cout << \" YES\\n \" ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "valid = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool s [ 696969 ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘lasagna’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x , x ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int cyka = blyat ;"
      ],
      "err_line": 5,
      "err_msg": "‘blyat’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( a = 1 ; a <= x ; a ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘a’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        13
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        0
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        8
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        0
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "bool s [ 696969 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        0,
        8
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        0,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "bool s [ 696969 ] ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        3,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "int x , x ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "valid = true ;",
        "for ( a = 1 ; a <= y ; a ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        13,
        0
      ],
      "mod_code": [
        "valid = true ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        13,
        0,
        8
      ],
      "mod_code": [
        "valid = true ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        13,
        0,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        13,
        8
      ],
      "mod_code": [
        "valid = true ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        13,
        8,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        13,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "valid = true ;",
        "bool s [ 696969 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        8
      ],
      "mod_code": [
        "valid = true ;",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        8,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        0,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "bool s [ 696969 ] ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "valid = true ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        8,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "valid = true ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘valid’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        13,
        0
      ],
      "mod_code": [
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        13,
        0,
        8
      ],
      "mod_code": [
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        13,
        0,
        10
      ],
      "mod_code": [
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        13,
        8
      ],
      "mod_code": [
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        13,
        8,
        10
      ],
      "mod_code": [
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        13,
        10
      ],
      "mod_code": [
        "int x , x ;",
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "int x , x ;",
        "bool s [ 696969 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        0,
        8
      ],
      "mod_code": [
        "int x , x ;",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        0,
        8,
        10
      ],
      "mod_code": [
        "int x , x ;",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        0,
        10
      ],
      "mod_code": [
        "int x , x ;",
        "bool s [ 696969 ] ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int x , x ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        8,
        10
      ],
      "mod_code": [
        "int x , x ;",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int x , x ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘lasagna’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        0,
        8
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        0,
        8,
        10
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        0,
        10
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool s [ 696969 ] ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        8,
        10
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "for ( a = 1 ; a <= y ; a ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        8,
        10
      ],
      "mod_code": [
        "bool s [ 696969 ] ;",
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "bool s [ 696969 ] ;",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "for ( A = 0 ; A < blyat ; A ++ )",
        "bool lasagna [ cyka ] = true ;"
      ],
      "err_line": 8,
      "err_msg": "‘A’ was not declared in this scope"
    }
  ]
}