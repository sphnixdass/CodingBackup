{
  "meta": {
    "index": 2329,
    "hitid": "335VBRURDJUMYP2LZ7XK5SQZI8W9EO",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "939A",
    "subid": "41405332"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create ints n and i",
      "code": "int n , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let int array a of size n",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n , read a [ i ]",
      "code": "for ( i = 1 ; i <= n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ i ] is equal to a [ a [ a [ a [ i ] ] ] ]",
      "code": "if ( a [ i ] == a [ a [ a [ a [ i ] ] ] ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" YES \"",
      "code": "cout << \" YES \"",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" NO \"",
      "code": "cout << \" NO \"",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print new line",
      "code": "<< \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "n , i ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * a [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" YES \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7,
        11,
        12
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        12
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        12,
        7
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        7
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12,
        7
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ] ] )",
        "cout << \" YES \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        12
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        12,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        12,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        12,
        7,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "cout << \" YES \" ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        12,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        7,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        7,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" YES \" ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << \" YES \" ;",
        "if ( a [ i ] == a [ a [ a [ a [ a [ i ] ] ) ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}