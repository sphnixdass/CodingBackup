{
  "meta": {
    "index": 510,
    "hitid": "34O39PNDK62UVMMNJXVGV5K8LXPBRD",
    "workerid": "A1AYVATMT88U1W",
    "probid": "916A",
    "subid": "41604533"
  },
  "lines": [
    {
      "line": 0,
      "text": "let INF be a constant integer with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let n , m , t be integers",
      "code": "int n , m , t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let i , j , k be integers",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let a , b be integers",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a modulo 10 is equal to 7 or a / 10 is equal to 7 or b modulo 10 is equal to 7 or b / 10 is equal to 7",
      "code": "if ( a % 10 == 7 || a / 10 == 7 || b % 10 == 7 || b / 10 == 7 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print 0 and newline",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let cou be a integer with cou = 0",
      "code": "int cou = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while 1",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "decrement b by n",
      "code": "b -= n ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment cou by 1",
      "code": "cou ++ ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if b is less than 0",
      "code": "if ( b < 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment b by n , b is equal to 60 - ( n - b )",
      "code": "b += n , b = 60 - ( n - b ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "decrement a by 1",
      "code": "a -- ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if a is less than 0 , a is equal to 23",
      "code": "if ( a < 0 ) a = 23 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if b modulo 10 is equal to 7 or b / 10 is equal to 7 , stop",
      "code": "if ( b % 10 == 7 || b / 10 == 7 ) break ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if a modulo 10 is equal to 7 or b / 10 is equal to 7 , stop",
      "code": "if ( a % 10 == 7 || b / 10 == 7 ) break ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print cou and newline",
      "code": "cout << cou << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cou = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘cou’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "while ( l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        12
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "while ( l )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        12,
        6
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "cin >> a , b ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        12,
        5
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        12,
        15
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        6
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "cin >> a , b ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        6,
        5
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "cin >> a , b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        6,
        15
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "cin >> a , b ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        5
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        5,
        15
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        0,
        15
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "const INF = 0x3f3f3f3f ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "while ( l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        6
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "while ( l )",
        "cin >> a , b ;"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        6,
        5
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "while ( l )",
        "cin >> a , b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        6,
        15
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "while ( l )",
        "cin >> a , b ;",
        "if ( b )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        5
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "while ( l )",
        "n = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        5,
        15
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "while ( l )",
        "n = getchar ( ) ;",
        "if ( b )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        15
      ],
      "mod_code": [
        "b += n , b -= ( n - b ) ;",
        "while ( l )",
        "if ( b )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( l )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        6
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "cin >> a , b ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        6,
        5
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "cin >> a , b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        6,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "cin >> a , b ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        5
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        5,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "n = getchar ( ) ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "while ( l )",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "cin >> a , b ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "cin >> a , b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        6,
        5,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "cin >> a , b ;",
        "n = getchar ( ) ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        6,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "cin >> a , b ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        5,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "n = getchar ( ) ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "const INF = 0x3f3f3f3f ;",
        "if ( b )"
      ],
      "err_line": 0,
      "err_msg": "‘INF’ does not name a type"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "while ( l )",
        "cin >> a , b ;"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        5
      ],
      "mod_code": [
        "while ( l )",
        "cin >> a , b ;",
        "n = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        5,
        15
      ],
      "mod_code": [
        "while ( l )",
        "cin >> a , b ;",
        "n = getchar ( ) ;",
        "if ( b )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        15
      ],
      "mod_code": [
        "while ( l )",
        "cin >> a , b ;",
        "if ( b )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "while ( l )",
        "n = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        5,
        15
      ],
      "mod_code": [
        "while ( l )",
        "n = getchar ( ) ;",
        "if ( b )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "while ( l )",
        "if ( b )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}