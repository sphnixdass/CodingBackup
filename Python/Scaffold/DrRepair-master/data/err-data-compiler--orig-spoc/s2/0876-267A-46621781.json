{
  "meta": {
    "index": 876,
    "hitid": "3EHVO81VN5FGTUQSLVQXBP5TCCYH11",
    "workerid": "AIWEXPJAU66D9",
    "probid": "267A",
    "subid": "46621781"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare int variables n , a , b and cnt",
      "code": "int n , a , b , cnt ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n from the user input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement n and loop further , while n ! = 0",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read input to a and b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set cnt to 0",
      "code": "cnt = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "looping infinitely",
      "code": "while ( 1 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a is equal to 0 or b = 0 , break",
      "code": "if ( a == 0 || b == 0 ) { break ; }",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if a > = b",
      "code": "if ( a >= b )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "add a / b to cnt",
      "code": "cnt += a / b ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "change the value of a to a modulo b",
      "code": "a %= b ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "change cnt to cnt + b / a",
      "code": "cnt += b / a ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "change b to b modulo a",
      "code": "b %= a ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print cnt and \" \\ n \" to the standard output",
      "code": "cout << cnt << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "int n , a , b , cnt and cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        11,
        1,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        11,
        1,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "int n , a , b , cnt and cnt ;",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        11,
        1,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "int n , a , b , cnt and cnt ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        11,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "if ( n -- )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "if ( n -- )",
        "a >> a >> b ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        16,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "a >> a >> b ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , a , b , cnt and cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        1,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        1,
        3,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        1,
        3,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        1,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , a , b , cnt and cnt ;",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        1,
        16,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , a , b , cnt and cnt ;",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        1,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int n , a , b , cnt and cnt ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        3,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        3,
        16,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        16,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "n",
        "int n , a , b , cnt and cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        1,
        3
      ],
      "mod_code": [
        "n",
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        1,
        3,
        16
      ],
      "mod_code": [
        "n",
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        1,
        3,
        4
      ],
      "mod_code": [
        "n",
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        1,
        16
      ],
      "mod_code": [
        "n",
        "int n , a , b , cnt and cnt ;",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        1,
        16,
        4
      ],
      "mod_code": [
        "n",
        "int n , a , b , cnt and cnt ;",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        1,
        4
      ],
      "mod_code": [
        "n",
        "int n , a , b , cnt and cnt ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "n",
        "if ( n -- )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        3,
        16
      ],
      "mod_code": [
        "n",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        3,
        16,
        4
      ],
      "mod_code": [
        "n",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        3,
        4
      ],
      "mod_code": [
        "n",
        "if ( n -- )",
        "a >> a >> b ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "n",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        16,
        4
      ],
      "mod_code": [
        "n",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "n",
        "a >> a >> b ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        3,
        16
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        3,
        16,
        4
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;",
        "if ( n -- )",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        16,
        4
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , a , b , cnt and cnt ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        3,
        16,
        4
      ],
      "mod_code": [
        "if ( n -- )",
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        16,
        4
      ],
      "mod_code": [
        "cout << ( cnt << \" \\n \" ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator<<’"
    }
  ]
}