{
  "meta": {
    "index": 2750,
    "hitid": "3OND0WXMHW9FDVK4XJLCI9ON1L2EHH",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "474A",
    "subid": "42024904"
  },
  "lines": [
    {
      "line": 0,
      "text": "s = char array of size 120 with s = \" qwertyuiopasdfghjkl ; zxcvbnm , . / \"",
      "code": "char s [ 120 ] = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "way , c = char array with the sizes of 2 and 100",
      "code": "char way [ 2 ] , c [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read way",
      "code": "cin >> way ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if way [ 0 ] is ' L '",
      "code": "if ( way [ 0 ] == ' L ' )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to strlen of c",
      "code": "for ( int i = 0 ; i < strlen ( c ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 0 to strlen of s",
      "code": "for ( int j = 0 ; j < strlen ( s ) ; j ++ )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if c [ i ] is s [ j ]",
      "code": "if ( c [ i ] == s [ j ] )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "print s [ j + 1 ]",
      "code": "cout << s [ j + 1 ] ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to strlen of c",
      "code": "for ( int i = 0 ; i < strlen ( c ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "for j = 0 to strlen of s",
      "code": "for ( int j = 0 ; j < strlen ( s ) ; j ++ )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if c [ i ] is s [ j ]",
      "code": "if ( c [ i ] == s [ j ] )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "print s [ j - 1 ]",
      "code": "cout << s [ j - 1 ] ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char way [ 2 ] , 100 [ 2 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "way >> way ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘char [2]’ and ‘char [2]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "c = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘char [100]’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j + 1 ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        19
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j + 1 ] << endl ;",
        "cout << s [ j - 1 ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        5
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j + 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j + 1 ] << endl ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        19
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j - 1 ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        19,
        5
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j - 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        19,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j - 1 ] << endl ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        5
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "if ( ! way [ 0 ] == ' L ' )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        5,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        2,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "char way [ 2 ] , c [ 2 ] ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j + 1 ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        9,
        19
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j + 1 ] << endl ;",
        "cout << s [ j - 1 ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        9,
        19,
        5
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j + 1 ] << endl ;",
        "cout << s [ j - 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        9,
        19,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j + 1 ] << endl ;",
        "cout << s [ j - 1 ] << endl ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        9,
        5
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j + 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        9,
        5,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j + 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        9,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j + 1 ] << endl ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j - 1 ] << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        19,
        5
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j - 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        19,
        5,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j - 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        19,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "cout << s [ j - 1 ] << endl ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( ! way [ 0 ] == ' L ' )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        5,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "char s [ 120 ] = { \" qwertyuiopasdfghjkl \" ;",
        "n"
      ],
      "err_line": 0,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        9,
        19,
        15
      ],
      "mod_code": [
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j + 1 ] << endl ;",
        "cout << s [ j - 1 ] << endl ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        15
      ],
      "mod_code": [
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j + 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        15
      ],
      "mod_code": [
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j + 1 ] << endl ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        5,
        15
      ],
      "mod_code": [
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j - 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        15
      ],
      "mod_code": [
        "char way [ 2 ] , c [ 2 ] ;",
        "cout << s [ j - 1 ] << endl ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        15
      ],
      "mod_code": [
        "char way [ 2 ] , c [ 2 ] ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "char way [ 2 ] , c [ 2 ] ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        19,
        5,
        15
      ],
      "mod_code": [
        "cout << s [ j + 1 ] << endl ;",
        "cout << s [ j - 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        19,
        15
      ],
      "mod_code": [
        "cout << s [ j + 1 ] << endl ;",
        "cout << s [ j - 1 ] << endl ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        15
      ],
      "mod_code": [
        "cout << s [ j + 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "cout << s [ j + 1 ] << endl ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        5,
        15
      ],
      "mod_code": [
        "cout << s [ j - 1 ] << endl ;",
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "cout << s [ j - 1 ] << endl ;",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "if ( ! way [ 0 ] == ' L ' )",
        "n"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}