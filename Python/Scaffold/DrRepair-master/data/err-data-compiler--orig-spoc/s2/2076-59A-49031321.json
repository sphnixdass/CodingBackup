{
  "meta": {
    "index": 2076,
    "hitid": "3GONHBMNHVSZG4CBK3F2VOX16DBMZ5",
    "workerid": "A28TIENUWLMMIP",
    "probid": "59A",
    "subid": "49031321"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let u and 1 be ints and set 0 and 1 to 0",
      "code": "int u = 0 , l = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read in s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "iterate i through the length of s",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if position i of s is an uppercase letter increment u",
      "code": "if ( isupper ( s [ i ] ) ) u ++ ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if position i of s in a lowercase letter increment 1",
      "code": "if ( islower ( s [ i ] ) ) l ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if u > 1",
      "code": "if ( u > l )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "iterate i through the length of s , and set s [ i ] to an uppercase letter",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = toupper ( s [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "iterate i through the length of s , and set s [ i ] to a lowercase letter",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ ) { s [ i ] = tolower ( s [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 , 1 = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a . find ( i ) ) { 1 ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        6
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        8
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        8
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( u > 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        8
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        9,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        5,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( u > 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        9,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int u = 0 , 1 = 0 ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        5,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . length ( ) ; i ++ )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        9
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        11
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        11
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        11
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        8,
        11
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        9,
        11
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "if ( s . find ( i ) > 0 ) u ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        11
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        11
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;",
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        11
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a . find ( i ) ) 1 ++ ;",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        9,
        11
      ],
      "mod_code": [
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( u > 1 )",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] = toupper ( s [ i ] ) ; }",
        "for ( int i = s . size ( ) ; i != s . size ( ) ; i ++ ) { s [ i ] [ i ] [ i ] ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}