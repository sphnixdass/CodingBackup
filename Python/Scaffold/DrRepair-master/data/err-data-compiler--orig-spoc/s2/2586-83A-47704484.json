{
  "meta": {
    "index": 2586,
    "hitid": "3NKW03WTLM1M7O5Y192CDTNOZC9WQH",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "83A",
    "subid": "47704484"
  },
  "lines": [
    {
      "line": 0,
      "text": "abs = long long function taking long long , long long",
      "code": "long long abs ( long long , long long ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in void function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n = long long",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a [ n ] , ans = 0 be long long",
      "code": "long long a [ n ] , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read the first n elements of a",
      "code": "for ( long long i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "t = 1 = long long",
      "code": "long long t = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for long long i = 0 to n exclusive",
      "code": "for ( long long i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if i = n - 1",
      "code": "if ( i == n - 1 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if a [ i ] = a [ i + 1 ]",
      "code": "if ( a [ i ] == a [ i + 1 ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if i = n - 2",
      "code": "if ( i == n - 2 )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "increment t",
      "code": "t ++ ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "increment ans by t * ( t + 1 ) / 2",
      "code": "ans += ( t * ( t + 1 ) ) / 2 ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "exit loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "increment t",
      "code": "t ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment ans by",
      "code": "ans += ( t * ( t + 1 ) ) / 2 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "t * ( t + 1 ) / 2",
      "code": "t = 1 ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print ans",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 27,
      "text": "TESTS = 1 = long long",
      "code": "long long TESTS = 1 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "while decrementing TESTS , call solve",
      "code": "while ( TESTS -- ) { solve ( ) ; }",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 31,
      "text": "in long long function abs taking long long a and long long b",
      "code": "long long abs ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 32,
      "text": "if a > b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "return a - b",
      "code": "return a - b ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 35,
      "text": "return b - a",
      "code": "return b - a ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 34,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "ans += 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        19,
        20
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "ans += 1 ;",
        "t * ( t + 1 ) / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        19,
        20,
        11
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "ans += 1 ;",
        "t * ( t + 1 ) / 2 ;",
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        19,
        11
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "ans += 1 ;",
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        19,
        11,
        20
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "ans += 1 ;",
        "if ( a [ i ] [ a [ i + 1 ] )",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        19,
        20
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "ans += 1 ;",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "t * ( t + 1 ) / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        20,
        11
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "t * ( t + 1 ) / 2 ;",
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        11,
        20
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "if ( a [ i ] [ a [ i + 1 ] )",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "long long abs ( long long abs ( long long x )",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before ‘void’"
    },
    {
      "mod_line": [
        19,
        20,
        11
      ],
      "mod_code": [
        "ans += 1 ;",
        "t * ( t + 1 ) / 2 ;",
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        20,
        11,
        0
      ],
      "mod_code": [
        "ans += 1 ;",
        "t * ( t + 1 ) / 2 ;",
        "if ( a [ i ] [ a [ i + 1 ] )",
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        20,
        0
      ],
      "mod_code": [
        "ans += 1 ;",
        "t * ( t + 1 ) / 2 ;",
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        11
      ],
      "mod_code": [
        "ans += 1 ;",
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        11,
        0
      ],
      "mod_code": [
        "ans += 1 ;",
        "if ( a [ i ] [ a [ i + 1 ] )",
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        11,
        0,
        20
      ],
      "mod_code": [
        "ans += 1 ;",
        "if ( a [ i ] [ a [ i + 1 ] )",
        "long long abs ( long long abs ;",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        11,
        20
      ],
      "mod_code": [
        "ans += 1 ;",
        "if ( a [ i ] [ a [ i + 1 ] )",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        19,
        0
      ],
      "mod_code": [
        "ans += 1 ;",
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        0,
        20
      ],
      "mod_code": [
        "ans += 1 ;",
        "long long abs ( long long abs ;",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        20
      ],
      "mod_code": [
        "ans += 1 ;",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        11
      ],
      "mod_code": [
        "t * ( t + 1 ) / 2 ;",
        "if ( a [ i ] [ a [ i + 1 ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        11,
        0
      ],
      "mod_code": [
        "t * ( t + 1 ) / 2 ;",
        "if ( a [ i ] [ a [ i + 1 ] )",
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "t * ( t + 1 ) / 2 ;",
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "if ( a [ i ] [ a [ i + 1 ] )",
        "long long abs ( long long abs ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        0,
        20
      ],
      "mod_code": [
        "if ( a [ i ] [ a [ i + 1 ] )",
        "long long abs ( long long abs ;",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        20
      ],
      "mod_code": [
        "if ( a [ i ] [ a [ i + 1 ] )",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "long long abs ( long long abs ;",
        "if ( t * ( t + 1 ) / 2 )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    }
  ]
}