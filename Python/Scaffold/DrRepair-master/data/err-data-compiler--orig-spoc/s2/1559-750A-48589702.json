{
  "meta": {
    "index": 1559,
    "hitid": "3ZICQFRS31CZFBBUZS5W3QTALHQZZW",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "750A",
    "subid": "48589702"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k = integer",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = integer = 240 - k",
      "code": "int a = 240 - k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "count = integer = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "a = a - ( 5 * i )",
      "code": "a = a - ( 5 * i ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a < ( 5 * ( i + 1 ) )",
      "code": "if ( a < ( 5 * ( i + 1 ) ) )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "exit the for loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increase count by 1",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a -= k ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "int a -= k ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        13,
        3,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "int a -= k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        13,
        3,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "int a -= k ;",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        13,
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "int a -= k ;",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        13,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        9,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        9,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "n",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        13,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << ' count ' ;",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a -= k ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        3,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a -= k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        3,
        9,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a -= k ;",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        3,
        9,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a -= k ;",
        "n",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a -= k ;",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a -= k ;",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a -= k ;",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "n"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        9,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "n",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "int a -= k ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        13,
        3,
        9
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "int a -= k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        13,
        3,
        9,
        7
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "int a -= k ;",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        13,
        3,
        9,
        4
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "int a -= k ;",
        "n",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        13,
        3,
        7
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "int a -= k ;",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        13,
        3,
        7,
        4
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "int a -= k ;",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        13,
        3,
        4
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "int a -= k ;",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9,
        7
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9,
        7,
        4
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        13,
        9,
        4
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "n",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        13,
        7,
        4
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << ' count ' ;",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int a -= k ;",
        "n"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "int a -= k ;",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        3,
        9,
        7,
        4
      ],
      "mod_code": [
        "int a -= k ;",
        "n",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        3,
        9,
        4
      ],
      "mod_code": [
        "int a -= k ;",
        "n",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int a -= k ;",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "int a -= k ;",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int a -= k ;",
        "count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "n",
        "if ( a < 5 * ( 5 + 1 ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        7,
        4
      ],
      "mod_code": [
        "n",
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "n",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( a < 5 * ( 5 + 1 ) )",
        "count = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "overloaded function with no contextual type information"
    }
  ]
}