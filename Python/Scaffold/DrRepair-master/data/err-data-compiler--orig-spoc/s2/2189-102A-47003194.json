{
  "meta": {
    "index": 2189,
    "hitid": "3NC6WP7WJHERRL1KDI1I5I5ANDOWWJ",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "102A",
    "subid": "47003194"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m , a , b , price = integers with a , b = array of size 1000",
      "code": "int n , m , a [ 1000 ] , b [ 1000 ] , price ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "clo , x , y = integers with clo = array of size [ 105 ] [ 105 ] = { 0 }",
      "code": "int clo [ 105 ] [ 105 ] = { 0 } , x , y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "b [ i - 1 ] = a [ i ]",
      "code": "b [ i - 1 ] = a [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "sort b and b + n",
      "code": "sort ( b , b + n ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "price = 3 * b [ n - 1 ] + 1",
      "code": "price = 3 * b [ n - 1 ] + 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "clo [ y ] [ x ] = clo [ x ] [ y ] = 1",
      "code": "clo [ y ] [ x ] = clo [ x ] [ y ] = 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "num_p = integer with num_p = 0",
      "code": "int num_p = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 1 to n",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for j = 1 to n",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if ( j is not i )",
      "code": "if ( j != i )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "for k = 1 to n",
      "code": "for ( int k = 1 ; k <= n ; k ++ )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if ( k is not i and k is not j )",
      "code": "if ( k != i && k != j )",
      "indent": 5
    },
    {
      "line": 20,
      "text": "if ( clo [ i ] [ k ] is 1 and clo [ i ] [ j ] is 1 and clo [ j ] [ k ] is 1 )",
      "code": "if ( clo [ i ] [ k ] == 1 && clo [ i ] [ j ] == 1 && clo [ j ] [ k ] == 1 )",
      "indent": 6
    },
    {
      "line": 21,
      "text": "num_p = a [ i ] + a [ k ] + a [ j ]",
      "code": "num_p = a [ i ] + a [ k ] + a [ j ] ;",
      "indent": 7
    },
    {
      "line": 22,
      "text": "if ( num_p < price ) , price = num_p",
      "code": "if ( num_p < price ) { price = num_p ; }",
      "indent": 7
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if ( num_p is 0 )",
      "code": "if ( num_p == 0 )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print - 1",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print price",
      "code": "cout << price << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , a [ 1000 ] , b [ 1000 ] , b ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int b’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int clo [ 105 ] [ 105 ] = { 0 } , y , y ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int y’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> a . at ( i ) ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘at’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( j != i ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        12
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        12,
        17
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        12,
        4
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        12,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        17
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "if ( j != i ) )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        17,
        4
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        17,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "if ( j != i ) )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        4
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        4,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        3,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "cin >> n , m ;",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "clo [ y ] [ x ] += 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        12,
        17
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        12,
        17,
        4
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        12,
        17,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        12,
        4
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "clo [ y ] [ x ] += 1 ;",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        12,
        4,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "clo [ y ] [ x ] += 1 ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        12,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "clo [ y ] [ x ] += 1 ;",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "if ( j != i ) )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        17,
        4
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        17,
        4,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        17,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "if ( j != i ) )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        4,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "sort ( b + b , b + n ) ;",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [1000]’ and ‘int [1000]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        3,
        12,
        17
      ],
      "mod_code": [
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        12,
        17,
        4
      ],
      "mod_code": [
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        12,
        17,
        9
      ],
      "mod_code": [
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        3,
        12,
        4,
        9
      ],
      "mod_code": [
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        3,
        12,
        9
      ],
      "mod_code": [
        "cin >> n , m ;",
        "clo [ y ] [ x ] += 1 ;",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "cin >> n , m ;",
        "if ( j != i ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        17,
        4
      ],
      "mod_code": [
        "cin >> n , m ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        17,
        4,
        9
      ],
      "mod_code": [
        "cin >> n , m ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        3,
        17,
        9
      ],
      "mod_code": [
        "cin >> n , m ;",
        "if ( j != i ) )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "cin >> n , m ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "cin >> n , m ;",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        17,
        4
      ],
      "mod_code": [
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        17,
        4,
        9
      ],
      "mod_code": [
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        12,
        17,
        9
      ],
      "mod_code": [
        "clo [ y ] [ x ] += 1 ;",
        "if ( j != i ) )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        12,
        4,
        9
      ],
      "mod_code": [
        "clo [ y ] [ x ] += 1 ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "clo [ y ] [ x ] += 1 ;",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        17,
        4
      ],
      "mod_code": [
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        17,
        4,
        9
      ],
      "mod_code": [
        "if ( j != i ) )",
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        17,
        9
      ],
      "mod_code": [
        "if ( j != i ) )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "int price = 3 * b [ n - 1 ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int price’"
    }
  ]
}