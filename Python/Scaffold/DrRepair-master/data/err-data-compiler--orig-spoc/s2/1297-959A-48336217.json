{
  "meta": {
    "index": 1297,
    "hitid": "3ZCC2DXSD7YZ5VRK7K1UBCB686PYY9",
    "workerid": "AIWEXPJAU66D9",
    "probid": "959A",
    "subid": "48336217"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer variable n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n & 1",
      "code": "if ( n & 1 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" Ehab \" to standard output",
      "code": "puts ( \" Ehab \" ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" Mahmoud \" to stdout",
      "code": "puts ( \" Mahmoud \" ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "stdout << \" Mahmoud \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘_IO_FILE*’ and ‘const char [8]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "stdout << \" Mahmoud \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘_IO_FILE*’ and ‘const char [8]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        6,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "stdout << \" Mahmoud \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        5,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "stdout << \" Mahmoud \" ;",
        "n",
        "cout << \" Ehab \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "stdout << \" Mahmoud \" ;",
        "cout << \" Ehab \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘_IO_FILE*’ and ‘const char [8]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        4
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "n",
        "cout << \" Ehab \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "stdout << \" Mahmoud \" ;",
        "n"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        5,
        4
      ],
      "mod_code": [
        "stdout << \" Mahmoud \" ;",
        "n",
        "cout << \" Ehab \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "stdout << \" Mahmoud \" ;",
        "cout << \" Ehab \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘_IO_FILE*’ and ‘const char [8]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "n",
        "cout << \" Ehab \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘{’ token"
    }
  ]
}