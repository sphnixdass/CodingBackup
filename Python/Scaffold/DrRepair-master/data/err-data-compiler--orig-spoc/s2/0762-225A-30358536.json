{
  "meta": {
    "index": 762,
    "hitid": "337F8MIIMZ7MATHFA52E3VDF1S940R",
    "workerid": "AIWEXPJAU66D9",
    "probid": "225A",
    "subid": "30358536"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , top , a and b",
      "code": "int n , top , a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and top",
      "code": "cin >> n >> top ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer bottom = 7 - top",
      "code": "int bottom = 7 - top ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean isTrue = true",
      "code": "bool isTrue = true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while n is greater than 0",
      "code": "while ( n > 0 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if top = a | | top = b | | bottom = a | | bottom = b",
      "code": "if ( top == a || top == b || bottom == a || bottom == b )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set isTrue to false",
      "code": "isTrue = false ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "create integer temp = top",
      "code": "int temp = top ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "top = bottom",
      "code": "top = bottom ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set value of bottom to temp",
      "code": "bottom = temp ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "decrease n by one",
      "code": "n -- ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if isTrue is true",
      "code": "if ( isTrue )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , top , a [ b ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bottom = 7 - top ;"
      ],
      "err_line": 3,
      "err_msg": "‘bottom’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "* bottom = temp ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        18
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "n"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        18,
        12
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "n",
        "* bottom = temp ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        18,
        17
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        18,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        12
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "* bottom = temp ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        17
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "* bottom = temp ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "* bottom = temp ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        17
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        17,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        11,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "int top ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "n"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        18,
        12
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "n",
        "* bottom = temp ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        18,
        12,
        17
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "n",
        "* bottom = temp ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        18,
        12,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "n",
        "* bottom = temp ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        18,
        17
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        18,
        17,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "n",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        18,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "* bottom = temp ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        12,
        17
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "* bottom = temp ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        12,
        17,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "* bottom = temp ;",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        12,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "* bottom = temp ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "cout << \" YES \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        17,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        19
      ],
      "mod_code": [
        "if ( top == a || top == b || bottom == a || bottom == b ) { bottom = b ; }",
        "cout << \" NO \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "int top ;",
        "n"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        18,
        12
      ],
      "mod_code": [
        "int top ;",
        "n",
        "* bottom = temp ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        18,
        12,
        17
      ],
      "mod_code": [
        "int top ;",
        "n",
        "* bottom = temp ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        18,
        12,
        19
      ],
      "mod_code": [
        "int top ;",
        "n",
        "* bottom = temp ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        18,
        17
      ],
      "mod_code": [
        "int top ;",
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        18,
        17,
        19
      ],
      "mod_code": [
        "int top ;",
        "n",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        18,
        19
      ],
      "mod_code": [
        "int top ;",
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "int top ;",
        "* bottom = temp ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        12,
        17
      ],
      "mod_code": [
        "int top ;",
        "* bottom = temp ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        12,
        17,
        19
      ],
      "mod_code": [
        "int top ;",
        "* bottom = temp ;",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        12,
        19
      ],
      "mod_code": [
        "int top ;",
        "* bottom = temp ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "n",
        "* bottom = temp ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        12,
        17
      ],
      "mod_code": [
        "n",
        "* bottom = temp ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        12,
        17,
        19
      ],
      "mod_code": [
        "n",
        "* bottom = temp ;",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        12,
        19
      ],
      "mod_code": [
        "n",
        "* bottom = temp ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        17,
        19
      ],
      "mod_code": [
        "n",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "n",
        "cout << \" NO \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "* bottom = temp ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12,
        17,
        19
      ],
      "mod_code": [
        "* bottom = temp ;",
        "cout << \" YES \" ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "* bottom = temp ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}