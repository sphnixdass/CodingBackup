{
  "meta": {
    "index": 1738,
    "hitid": "3M7OI89LVYIKJ8G959ODVUZU7VD6CJ",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "592A",
    "subid": "41539502"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string vector s of size 8",
      "code": "vector < string > s ( 8 ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 8 exclusive , read s [ i ]",
      "code": "for ( long long int i = 0 ; i < ( long long int ) ( 8 ) ; ++ i ) cin >> s [ i ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "make long long ints w = 10 and b = 10",
      "code": "long long int w = 10 , b = 10 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( long long int i = 0 ; i < ( long long int ) ( 8 ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create long long integer j = i",
      "code": "long long int j = i ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "make long long integer ww = - 1",
      "code": "long long int ww = - 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( long long int i = 0 ; i < ( long long int ) ( 8 ) ; ++ i )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ 0 + i ] [ j ] is equal to ' B ' , break loop",
      "code": "if ( s [ 0 + i ] [ j ] == ' B ' ) break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if ww is equal to - 1 and s [ 0 + 1 ] [ j ] is equal to ' W ' , set ww to 0 + i",
      "code": "if ( ww == - 1 && s [ 0 + i ] [ j ] == ' W ' ) ww = 0 + i ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "make long long bb = - 1",
      "code": "long long int bb = - 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( long long int i = 0 ; i < ( long long int ) ( 8 ) ; ++ i )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if s [ 7 - i ] [ j ] is equal to ' W ' , break loop",
      "code": "if ( s [ 7 - i ] [ j ] == ' W ' ) break ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if bb is equal to - 1 and s [ 7 - i ] [ j ] is equal to ' B ' , set bb to 7 - i",
      "code": "if ( bb == - 1 && s [ 7 - i ] [ j ] == ' B ' ) bb = 7 - i ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if ww is not - 1 , set w to min of w and ww",
      "code": "if ( ww != - 1 ) w = min ( w , ww ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if bb is not equal to - 1 , set b to min ( b , 7 - bb )",
      "code": "if ( bb != - 1 ) b = min ( b , 7 - bb ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "display \" A \" if w is less than or equal to b or \" B \" if not",
      "code": "cout << ( w <= b ? \" A \" : \" B \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4,
        12
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4,
        12,
        7
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4,
        12,
        1
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19,
        4,
        7
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4,
        7,
        1
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19,
        4,
        1
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19,
        12,
        7,
        1
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19,
        12,
        1
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19,
        7,
        1
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "cout << ( w <= b ? \" A \" : \" B \" ) ;",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        4,
        12,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        12,
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    }
  ]
}