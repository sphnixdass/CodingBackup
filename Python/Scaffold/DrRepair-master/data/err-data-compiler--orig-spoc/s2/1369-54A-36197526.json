{
  "meta": {
    "index": 1369,
    "hitid": "3GKAWYFRAPN2Y64SK1IXL08TN0FDPW",
    "workerid": "A1AYVATMT88U1W",
    "probid": "54A",
    "subid": "36197526"
  },
  "lines": [
    {
      "line": 0,
      "text": "let PI be a constant double value with PI = 4 * atan ( 1 )",
      "code": "const double PI = 4 * atan ( 1 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let gcd be a function that accepts integers n , m and returns a integer value",
      "code": "int gcd ( int n , int m )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return n if m is equal to 0 else return gcd of m and n modulo m",
      "code": "return m == 0 ? n : gcd ( m , n % m ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let n , k be integers",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "num = array of integers of length 400",
      "code": "int num [ 400 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while read n , k",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "memset of num , 0 , length of num",
      "code": "memset ( num , 0 , sizeof ( num ) ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "let m be a integer",
      "code": "int m ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "let tt be a integer",
      "code": "int tt ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "read tt",
      "code": "cin >> tt ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "num [ tt ] is equal to 1",
      "code": "num [ tt ] = 1 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "the integer value of kk is equal to k",
      "code": "int kk = k ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "the integer value of ans is equal to 0",
      "code": "int ans = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if num [ i ] is true",
      "code": "if ( num [ i ] )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increase ans by 1",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "kk is equal to k",
      "code": "kk = k ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "decrement kk by 1",
      "code": "kk -- ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if kk is equal to 0",
      "code": "if ( kk == 0 )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "increase ans by 1",
      "code": "ans ++ ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "kk is equal to k",
      "code": "kk = k ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "gcd ( n , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "num [ 400 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "memset ( num , 0 , num . length ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘num’, which is of non-class type ‘int [400]’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "m ;"
      ],
      "err_line": 9,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "tt ;"
      ],
      "err_line": 12,
      "err_msg": "‘tt’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int kk to k ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 29,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        6
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        21
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "kk = ' k ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        19
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        21
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "kk = ' k ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        21,
        19
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        21,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "kk = ' k ' ;",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        19
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        19,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "num [ 400 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6,
        21
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "num [ 400 ] ;",
        "kk = ' k ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6,
        21,
        19
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "num [ 400 ] ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6,
        21,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "num [ 400 ] ;",
        "kk = ' k ' ;",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6,
        19
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "num [ 400 ] ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6,
        19,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "num [ 400 ] ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "num [ 400 ] ;",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "kk = ' k ' ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        21,
        19
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        21,
        19,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        21,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "kk = ' k ' ;",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        19,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "const double PI = 4 * atan ( j ) ;",
        "int kk to k ;"
      ],
      "err_line": 0,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        6,
        21
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "kk = ' k ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        19
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        16
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "kk = ' k ' ;",
        "int kk to k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        6,
        19
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        6,
        19,
        16
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        6,
        16
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "num [ 400 ] ;",
        "int kk to k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "kk = ' k ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        21,
        19
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        21,
        19,
        16
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        21,
        16
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "kk = ' k ' ;",
        "int kk to k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        19,
        16
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "return m == 0 ? n : gcd ( m m gcd n % m ) ;",
        "int kk to k ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘m’"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "num [ 400 ] ;",
        "kk = ' k ' ;"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        19
      ],
      "mod_code": [
        "num [ 400 ] ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        19,
        16
      ],
      "mod_code": [
        "num [ 400 ] ;",
        "kk = ' k ' ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        16
      ],
      "mod_code": [
        "num [ 400 ] ;",
        "kk = ' k ' ;",
        "int kk to k ;"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "num [ 400 ] ;",
        "if ( ! num [ i ] )"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        16
      ],
      "mod_code": [
        "num [ 400 ] ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "num [ 400 ] ;",
        "int kk to k ;"
      ],
      "err_line": 6,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        19,
        16
      ],
      "mod_code": [
        "kk = ' k ' ;",
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        21,
        16
      ],
      "mod_code": [
        "kk = ' k ' ;",
        "int kk to k ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        19,
        16
      ],
      "mod_code": [
        "if ( ! num [ i ] )",
        "int kk to k ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘to’"
    }
  ]
}