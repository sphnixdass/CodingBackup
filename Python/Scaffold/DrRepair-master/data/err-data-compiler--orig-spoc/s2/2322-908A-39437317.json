{
  "meta": {
    "index": 2322,
    "hitid": "3THR0FZ95PN3BIGJII36FDB8M4KOL5",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "908A",
    "subid": "39437317"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function isvowel that takes character c and returns bool",
      "code": "bool isvowel ( char c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if ( c is a or c is e or c is i or c is o or c is u ) , return true",
      "code": "if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' ) return true ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "str = string",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "siz = integer with siz = str . length ( )",
      "code": "int siz = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "cnt = integer with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to siz exclusive",
      "code": "for ( int i = 0 ; i < siz ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( isvowel ( str [ i ] ) )",
      "code": "if ( isvowel ( str [ i ] ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if ( not isalpha ( str [ i ] ) and ( str [ i ] - 0 ) bitwise and 1 )",
      "code": "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) & 1 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < siz ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12,
        10
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "if ( ( isvowel [ str [ i ] ) ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12,
        10,
        16
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12,
        10,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12,
        16
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "cout << cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12,
        16,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "cout << cnt ;",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "if ( ( isvowel [ str [ i ] ) ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        10,
        16
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        10,
        16,
        12
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        10,
        16,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "cout << cnt ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        16,
        12
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "cout << cnt ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        16,
        12,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "cout << cnt ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        16,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "cout << cnt ;",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        12,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "if ( ( c == ' a ' || c == ' e ' || c == ' e ' || c == ' u ' || c == ' u ' ) return true ;",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘return’"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "if ( ( isvowel [ str [ i ] ) ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        10,
        16
      ],
      "mod_code": [
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        10,
        16,
        5
      ],
      "mod_code": [
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        10,
        5
      ],
      "mod_code": [
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "if ( ( isvowel [ str [ i ] ) ) )",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16,
        5
      ],
      "mod_code": [
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "cout << cnt ;",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - ' 0 ' ) )",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        16,
        12
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        16,
        12,
        5
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16,
        5
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )",
        "cout << cnt ;",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        12,
        5
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "if ( ( isvowel [ str [ i ] ) ) )",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        5
      ],
      "mod_code": [
        "cout << cnt ;",
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "cout << cnt ;",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "else if ( ! isalpha ( str [ i ] ) && ( str [ i ] - 0 ) )",
        "string S ;"
      ],
      "err_line": 6,
      "err_msg": "‘str’ was not declared in this scope"
    }
  ]
}