{
  "meta": {
    "index": 2210,
    "hitid": "3P4ZBJFX2VXPGZFPNTRI1UJASASFWY",
    "workerid": "A1APYLD4DUK33J",
    "probid": "914A",
    "subid": "49035474"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer array nums with size 1001",
      "code": "int nums [ 1001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare compare_int with integer addresses lhs , rhs as arguments , returning boolean",
      "code": "bool compare_int ( int & lhs , int & rhs )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return lhs is greater than rhs from function",
      "code": "return lhs > rhs ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer max_num with max_num = 0",
      "code": "int max_num = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for currnum = 0 to n exclusive , read nums [ currnum ]",
      "code": "for ( int currnum = 0 ; currnum < n ; ++ currnum ) { cin >> nums [ currnum ] ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "sort elements from nums to nums + n using compare_int to compare",
      "code": "sort ( nums , nums + n , compare_int ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create integer non_perfect with non_perfect = 0",
      "code": "int non_perfect = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for currnum = 0 to n exclusive",
      "code": "for ( int currnum = 0 ; currnum < n ; ++ currnum )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create integer sqrtroot with sqrtroot = square root of nums [ currnum ]",
      "code": "int sqrtroot = sqrt ( nums [ currnum ] ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if sqrtroot * sqrtroot is not nums [ currnum ]",
      "code": "if ( sqrtroot * sqrtroot != nums [ currnum ] )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set non_perfect to nums [ currnum ]",
      "code": "non_perfect = nums [ currnum ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print non_perfect print newline",
      "code": "cout << non_perfect << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 1001 ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return lhs > rhs ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "non_perfect = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘non_perfect’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘currnum’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int sqrtroot = sqrt ( nums [ currnum ] . size ( ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "request for member ‘size’ in ‘nums[currnum]’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        14
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        9
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        14
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "int non_perfect = nums [ currnum ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        14,
        9
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        14,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "int non_perfect = nums [ currnum ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        2,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "return lhs > rhs ) ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        14
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        14,
        9
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        14,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        9
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        9,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "int non_perfect = nums [ currnum ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14,
        9
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14,
        9,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "int non_perfect = nums [ currnum ] ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int a [ 1001 ] ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘nums’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        14
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        14,
        9
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        14,
        15
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        9
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        9,
        15
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        15
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "int non_perfect = nums [ currnum ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        9
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        9,
        15
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        14,
        15
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "int non_perfect = nums [ currnum ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9,
        15
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "return lhs > rhs ) ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘currnum’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        14,
        9
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    },
    {
      "mod_line": [
        11,
        14,
        9,
        15
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    },
    {
      "mod_line": [
        11,
        14,
        15
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "int non_perfect = nums [ currnum ] ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘currnum’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    },
    {
      "mod_line": [
        11,
        9,
        15
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "for ( currnum = 0 ; currnum < n ; currnum ++ )",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘currnum’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    },
    {
      "mod_line": [
        14,
        9,
        15
      ],
      "mod_code": [
        "int non_perfect = nums [ currnum ] ;",
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "int non_perfect = nums [ currnum ] ;",
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "sort ( nums + n , compare_int + n , compare_int ) ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘sort(int*, bool (*)(int&, int&), bool (&)(int&, int&))’"
    }
  ]
}