{
  "meta": {
    "index": 1121,
    "hitid": "30UZJB2POH60N4KC7X37ALH05NO351",
    "workerid": "AIWEXPJAU66D9",
    "probid": "844A",
    "subid": "46942454"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "k is a new integer",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read input to k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create new integer called cnt with value 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if k is greater than length of s",
      "code": "if ( k > s . size ( ) )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" impossible \"",
      "code": "cout << \" impossible \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create new integer exrt",
      "code": "int exrt ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "create new array of integers freq with size 30 filled with 0",
      "code": "int freq [ 30 ] = { 0 } ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i from 0 to length of s exclusive incrementing i",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "assign the new value = ( s [ i ] ) - 96 to exrt",
      "code": "exrt = int ( s [ i ] ) - 96 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment freq [ exrt ] by one",
      "code": "freq [ exrt ] ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "in a for loop , change i from 0 to 30 exclusive",
      "code": "for ( int i = 0 ; i < 30 ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment cnt if freq [ i ] ! = 0",
      "code": "if ( freq [ i ] != 0 ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if k < = cnt",
      "code": "if ( k <= cnt )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" 0 \" to the standard output",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print k - cnt",
      "code": "cout << k - cnt << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 20,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n"
      ],
      "err_line": 20,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        20,
        15
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        20,
        15,
        19
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        20,
        15,
        5
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        20,
        15,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        20,
        19
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "cout << \" 0 \" ;"
      ],
      "err_line": 20,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        20,
        19,
        5
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "cout << \" 0 \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        20,
        19,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "cout << \" 0 \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        20,
        5
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        20,
        5,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        20,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "n",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 30 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        15,
        19
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        15,
        19,
        5
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15,
        19,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        15,
        5
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15,
        5,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        15,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        19,
        5
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "cout << \" 0 \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        19,
        5,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "cout << \" 0 \" ;",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        19,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "cout << \" 0 \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "cout << \" impossible \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        15
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        15,
        19
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        15,
        19,
        5
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        15,
        19,
        1
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        15,
        5
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        15,
        5,
        1
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        15,
        1
      ],
      "mod_code": [
        "n",
        "for ( i = 0 ; i < 30 ; i ++ )",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        19
      ],
      "mod_code": [
        "n",
        "cout << \" 0 \" ;"
      ],
      "err_line": 20,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        19,
        5
      ],
      "mod_code": [
        "n",
        "cout << \" 0 \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        19,
        5,
        1
      ],
      "mod_code": [
        "n",
        "cout << \" 0 \" ;",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        19,
        1
      ],
      "mod_code": [
        "n",
        "cout << \" 0 \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "n",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        5,
        1
      ],
      "mod_code": [
        "n",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        1
      ],
      "mod_code": [
        "n",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        19,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        19,
        5,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        19,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cout << \" 0 \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        5,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 30 ; i ++ )",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        5
      ],
      "mod_code": [
        "cout << \" 0 \" ;",
        "cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        5,
        1
      ],
      "mod_code": [
        "cout << \" 0 \" ;",
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "cout << \" 0 \" ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "const string s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘const string {aka const std::__cxx11::basic_string<char>}’)"
    }
  ]
}