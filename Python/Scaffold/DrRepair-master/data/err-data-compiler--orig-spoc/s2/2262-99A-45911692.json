{
  "meta": {
    "index": 2262,
    "hitid": "3CIS7GGG65DKIHQOXISB1ODDVT7EUL",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "99A",
    "subid": "45911692"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create int t",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to size of s inclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] = .",
      "code": "if ( s [ i ] == ' . ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "t = 1",
      "code": "t = i ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if s [ t - 1 ] = 9",
      "code": "if ( s [ t - 1 ] == ' 9 ' )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print GOTO Vasilisa .",
      "code": "cout << \" GOTO Vasilisa. \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else if s [ t + 1 ] > = 5",
      "code": "else if ( s [ t + 1 ] >= ' 5 ' )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "increment s [ t - 1 ]",
      "code": "s [ t - 1 ] ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i = 0 to t exclusive , print s [ i ]",
      "code": "for ( int i = 0 ; i < t ; ++ i ) { cout << s [ i ] ; }",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print a newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to t exclusive , print s [ i ]",
      "code": "for ( int i = 0 ; i < t ; ++ i ) { cout << s [ i ] ; }",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print a newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << GOTO << endl ;"
      ],
      "err_line": 11,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 11,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "s1 [ t - 1 ] ++ ;"
      ],
      "err_line": 13,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "n"
      ],
      "err_line": 16,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ t + 1 ] >= 5 )"
      ],
      "err_line": 11,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        3
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        12,
        3,
        2
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        12,
        3,
        5
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        12,
        2
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ t + 1 ] >= 5 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        12,
        2,
        5
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ t + 1 ] >= 5 )",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        12,
        5
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ t + 1 ] >= 5 )",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        2
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "int * t ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        3,
        2,
        5
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "int * t ;",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        3,
        5
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "int * t ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        2,
        5
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "cout << GOTO << endl ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        11
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        11,
        2
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        3,
        11,
        5
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "cout << ( GOTO ) << endl ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        3,
        2
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        3,
        2,
        5
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        3,
        5
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "int * t ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 11,
      "err_msg": "‘GOTO’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        11,
        2
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        11,
        2,
        5
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        11,
        5
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "cout << ( GOTO ) << endl ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        2,
        5
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "else if ( s [ t + 1 ] >= 5 )",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int * t ;",
        "cout << ( GOTO ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        2
      ],
      "mod_code": [
        "int * t ;",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11,
        2,
        5
      ],
      "mod_code": [
        "int * t ;",
        "cout << ( GOTO ) << endl ;",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11,
        5
      ],
      "mod_code": [
        "int * t ;",
        "cout << ( GOTO ) << endl ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int * t ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "int * t ;",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int * t ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << ( GOTO ) << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        2,
        5
      ],
      "mod_code": [
        "cout << ( GOTO ) << endl ;",
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "cout << ( GOTO ) << endl ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "else if ( s [ i ] == ' . ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}