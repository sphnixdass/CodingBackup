{
  "meta": {
    "index": 1744,
    "hitid": "36QZ6V15897LS0V6YDCGQ5HSWKCUSY",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "909A",
    "subid": "47920591"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s1 , s2 = string",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s1",
      "code": "cin >> s1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s2",
      "code": "cin >> s2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "result = string",
      "code": "string result ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "append s1 [ 0 ] to result",
      "code": "result += s1 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for x = 1 to length of s1",
      "code": "for ( int x = 1 ; x < s1 . length ( ) ; x ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s1 [ x ] < s2 [ 0 ]",
      "code": "if ( s1 [ x ] < s2 [ 0 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "append s1 [ x ] to result",
      "code": "result += s1 [ x ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "append s2 [ 0 ] to result",
      "code": "result += s2 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print result",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        4,
        13,
        2
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        13,
        2,
        6
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        13,
        2,
        7
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        13,
        2,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "gets ( s1 ) ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        13,
        6
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        6,
        7
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        6,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        13,
        7
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        13,
        7,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        13,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "cout << result ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "string result = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "string result = 0 ;",
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        6,
        7
      ],
      "mod_code": [
        "string result = 0 ;",
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        6,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        2,
        7
      ],
      "mod_code": [
        "string result = 0 ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        7,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        2,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "gets ( s1 ) ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "string result = 0 ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "string result = 0 ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        6,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "string result = 0 ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "string result = 0 ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "cout << result ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        2,
        6
      ],
      "mod_code": [
        "cout << result ;",
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        2,
        6,
        7
      ],
      "mod_code": [
        "cout << result ;",
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        2,
        6,
        1
      ],
      "mod_code": [
        "cout << result ;",
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        13,
        2,
        7
      ],
      "mod_code": [
        "cout << result ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        2,
        7,
        1
      ],
      "mod_code": [
        "cout << result ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        13,
        2,
        1
      ],
      "mod_code": [
        "cout << result ;",
        "gets ( s1 ) ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "cout << result ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        6,
        7
      ],
      "mod_code": [
        "cout << result ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        6,
        7,
        1
      ],
      "mod_code": [
        "cout << result ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        13,
        6,
        1
      ],
      "mod_code": [
        "cout << result ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "cout << result ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        7,
        1
      ],
      "mod_code": [
        "cout << result ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "cout << result ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        1
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        2,
        6,
        1
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        1
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        1
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "if ( s1 [ x ] < s2 [ 0 ] ) s1 ++ ;",
        "string s1 , s2 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string s2’"
    }
  ]
}