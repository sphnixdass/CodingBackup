{
  "meta": {
    "index": 321,
    "hitid": "3X2YVV51PUYYQKLHGUCXCSFGR091WJ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "61A",
    "subid": "48653787"
  },
  "lines": [
    {
      "line": 0,
      "text": "let s1 , s2 and ans be strings with ans = \" \"",
      "code": "string s1 , s2 , ans = \" \" ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read s1 and s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i from 0 to length of s1 exclusive",
      "code": "for ( int i = 0 ; i < s1 . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s1 [ i ] = s2 [ i ]",
      "code": "if ( s1 [ i ] == s2 [ i ] )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increase ans by \" 0 \"",
      "code": "ans += \" 0 \" ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increase ans by \" 1 \"",
      "code": "ans += \" 1 \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cout << s1 >> s2 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "ans ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "cout << s1 >> s2 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "cout << s1 >> s2 ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        4
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "cout << s1 >> s2 ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        7
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "cout << s1 >> s2 ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "ans ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        4
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "cout << s1 >> s2 ;",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        7
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "cout << s1 >> s2 ;",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;",
        "ans ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        2,
        7
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "cout << s1 >> s2 ;",
        "ans ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        7
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;",
        "ans ++ ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3,
        7
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "ans ++ ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        4,
        7
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;",
        "ans ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "string s1 , s2 , ans = \" \" ;",
        "ans ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cout << s1 >> s2 ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "cout << s1 >> s2 ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        7
      ],
      "mod_code": [
        "cout << s1 >> s2 ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;",
        "ans ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "cout << s1 >> s2 ;",
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "ans ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "cout << s1 >> s2 ;",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "cout << s1 >> s2 ;",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;",
        "ans ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cout << s1 >> s2 ;",
        "ans ++ ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;",
        "ans ++ ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < s1 . length ( ) ; i ++ )",
        "ans ++ ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 [ i ] ) i ++ ;",
        "ans ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}