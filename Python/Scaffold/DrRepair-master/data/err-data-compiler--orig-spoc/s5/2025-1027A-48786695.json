{
  "meta": {
    "index": 2025,
    "hitid": "3UY4PIS8QRF83QC3OTLAG92PYOC1NZ",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "1027A",
    "subid": "48786695"
  },
  "lines": [
    {
      "line": 0,
      "text": "let t , n be long long integers",
      "code": "long long int t , n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let str be string",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define function isCheck which takes characters a , b as arguments and returns boolean",
      "code": "bool isCheck ( char a , char b )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if character of ( a + 1 ) is equal to character of ( b - 1 ) or character of ( b + 1 ) is equal to character of ( a - 1 ) then return true to calling statement",
      "code": "if ( ( char ) ( a + 1 ) == ( char ) ( b - 1 ) || ( char ) ( b + 1 ) == ( char ) ( a - 1 ) ) return true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return false to calling statement",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "get t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while t not equal to 0 do decrement t and following",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "get n",
      "code": "cin >> n ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "get str",
      "code": "cin >> str ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "let i , j be long long integers with i = 0 , j = n - 1",
      "code": "long long int i = 0 , j = n - 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set n to n / 2",
      "code": "n = n / 2 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "let flag be boolean with value true",
      "code": "bool flag = true ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "while i less than or equal to j then",
      "code": "while ( i <= j )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if str [ i ] not equal to str [ j ] and isCheck ( str [ i ] , str [ j ] ) returns false then",
      "code": "if ( str [ i ] != str [ j ] && ! isCheck ( str [ i ] , str [ j ] ) )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set flag to false",
      "code": "flag = false ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "break the while loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment i and decrement j",
      "code": "i ++ , j -- ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if flag is true then",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "display \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "display \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( ( a + 1 ) == ' ( ' ) && ( ( b + 1 ) == ( b - 1 ) ) ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected identifier before ‘(’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return statement ;"
      ],
      "err_line": 4,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 10,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "bool flag be true ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        3,
        15,
        2
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        2,
        9
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        2,
        8
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "while ( t -- != 0 && t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        2,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        9,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "cin . get ( ) ;",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        3,
        15,
        8,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        3,
        15,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "bool isCheck ( char a , char b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        9
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        9,
        8
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;",
        "while ( t -- != 0 && t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        9,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        8
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "bool isCheck ( char a , char b ) ;",
        "while ( t -- != 0 && t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        8,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "bool isCheck ( char a , char b ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "bool isCheck ( char a , char b ) ;",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        9,
        8,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "cin . get ( ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        3,
        9,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "cin . get ( ) ;",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        3,
        8,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "if ( ( a + 1 ) == 0 ) return ( ( b + 1 ) == ( b - 1 ) ) ;",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        9
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        9,
        8
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;",
        "while ( t -- != 0 && t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        9,
        19
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        8
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "while ( t -- != 0 && t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        8,
        19
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        19
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "bool isCheck ( char a , char b ) ;",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        9,
        8,
        19
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "cin . get ( ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        15,
        9,
        19
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "cin . get ( ) ;",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        15,
        8,
        19
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "if ( str [ i ] != str [ j ] && isCheck ( str [ i ] , str [ j ] ) )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;",
        "while ( t -- != 0 && t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        8,
        19
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        19
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;",
        "cin . get ( ) ;",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;",
        "while ( t -- != 0 && t -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        19
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "bool isCheck ( char a , char b ) ;",
        "i ++ j ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        19
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "while ( t -- != 0 && t -- )",
        "i ++ j ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘j’"
    }
  ]
}