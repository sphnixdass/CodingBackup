{
  "meta": {
    "index": 2343,
    "hitid": "3VQTAXTYN3FMBEE4NRQL0G7SSWWUB3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "834A",
    "subid": "47390871"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new character variables s and c",
      "code": "char s , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create new integer variable n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to s and c",
      "code": "cin >> s >> c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n from the user input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create string variable s1 = \" v < ^ > \"",
      "code": "string s1 = \" v<^> \" ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare int variables f , f3 and f4",
      "code": "int f , f3 , f4 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to 4 exclusive incrementing i",
      "code": "for ( int i = 0 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s1 [ i ] = s , change f to i",
      "code": "if ( s1 [ i ] == s ) f = i ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set the value of f3 to ( f + n ) % 4",
      "code": "f3 = ( f + n ) % 4 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "change the value of f4 to ( ( f - n ) % 4 + 4 ) % 4",
      "code": "f4 = ( ( f - n ) % 4 + 4 ) % 4 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s1 [ f3 ] is equal to s1 [ f4 ]",
      "code": "if ( s1 [ f3 ] == s1 [ f4 ] )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" undefined \" to the standard output",
      "code": "cout << \" undefined \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if s1 [ f3 ] is equal to c",
      "code": "else if ( s1 [ f3 ] == c )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" cw \"",
      "code": "cout << \" cw \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" ccw \" to the standard output",
      "code": "cout << \" ccw \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s , s ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char s’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13,
        15,
        6
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" \\n \" ;",
        "cout << \" cw \" ;",
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        13,
        15,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" \\n \" ;",
        "cout << \" cw \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13,
        6
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" \\n \" ;",
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        13,
        6,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" \\n \" ;",
        "int f , f3 , n ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        13,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" \\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        15,
        6
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" cw \" ;",
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        15,
        6,
        13
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" cw \" ;",
        "int f , f3 , n ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        15,
        6,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" cw \" ;",
        "int f , f3 , n ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        15,
        13,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" cw \" ;",
        "cout << \" A\\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        15,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" cw \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "int f , f3 , n ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "int f , f3 , n ;",
        "cout << \" A\\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        6,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "int f , f3 , n ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        13,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "cout << \" A\\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "string s1 = \" v \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        15,
        6
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" cw \" ;",
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        6,
        12
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" cw \" ;",
        "int f , f3 , n ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        12
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" cw \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        6,
        12
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "int f , f3 , n ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "int f , f3 , n ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        15,
        6,
        13
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "int f , f3 , n ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        15,
        6,
        13,
        12
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "int f , f3 , n ;",
        "cout << \" A\\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        15,
        6,
        12
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "int f , f3 , n ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        15,
        13,
        12
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "cout << \" A\\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "int f , f3 , n ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        13,
        12
      ],
      "mod_code": [
        "int f , f3 , n ;",
        "cout << \" A\\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "int f , f3 , n ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( s1 [ f3 ] == s1 [ ' f4 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}