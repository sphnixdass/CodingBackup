{
  "meta": {
    "index": 570,
    "hitid": "335VBRURDJUMYP2LZ7XK5SQZI8S9EK",
    "workerid": "A1APYLD4DUK33J",
    "probid": "999A",
    "subid": "49100598"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , k , left , right , i , flag with flag = 1 , create integer array a with size 105",
      "code": "int n , k , a [ 105 ] , left , right , i , flag = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a [ i ] is greater than k",
      "code": "if ( a [ i ] > k )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set left to i",
      "code": "left = i ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = n - 1 to 0 inclusive , decrementing i",
      "code": "for ( i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if a [ i ] is greater than k",
      "code": "if ( a [ i ] > k )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set right to i",
      "code": "right = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if a [ i ] is greater than k",
      "code": "if ( a [ i ] > k )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print n print newline",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print n - ( right - left + 1 ) print newline",
      "code": "cout << n - ( right - left + 1 ) << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , left = 1 , a , i , flag = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 22,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        12
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )",
        "right = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        12,
        6
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        12,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "right = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        6
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "right = 1 ;",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        6,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "right = 1 ;",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "right = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a [ 105 ] , right = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "right = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        12,
        1
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "int n , k , left = 1 , a , i , flag = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        12,
        1,
        6
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        12,
        1,
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        12,
        6
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "int left = i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        12,
        6,
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        12,
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "right = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "int n , k , left = 1 , a , i , flag = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        1,
        6,
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        1,
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "int left = i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        6,
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "if ( a [ i ] ] > k )",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "right = 1 ;",
        "int n , k , left = 1 , a , i , flag = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        1,
        6
      ],
      "mod_code": [
        "right = 1 ;",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        1,
        6,
        17
      ],
      "mod_code": [
        "right = 1 ;",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        1,
        17
      ],
      "mod_code": [
        "right = 1 ;",
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        6,
        17
      ],
      "mod_code": [
        "right = 1 ;",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "right = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "int left = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int n , k , left = 1 , a , i , flag = 1 ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "int left = i ;",
        "if ( a [ i ] ] > k )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}