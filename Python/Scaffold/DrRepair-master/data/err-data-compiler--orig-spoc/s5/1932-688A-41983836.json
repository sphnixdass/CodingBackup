{
  "meta": {
    "index": 1932,
    "hitid": "3BVS8WK9Q0PH2NJ4TA17HDJHY11BI4",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "688A",
    "subid": "41983836"
  },
  "lines": [
    {
      "line": 0,
      "text": "a , c = character with a = array of size 110",
      "code": "char a [ 110 ] , c ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , d , ans , i , j , cnt = register int with ans = 0",
      "code": "register int n , d , ans = 0 , i , j , cnt ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set all contents of a to 1",
      "code": "memset ( a , 1 , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "a [ 0 ] = 0",
      "code": "a [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to d",
      "code": "for ( i = 1 ; i <= d ; ++ i )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 1 to n",
      "code": "for ( j = 1 ; j <= n ; ++ j )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "a [ i ] = a [ i ] bitwise and ( c - 0 )",
      "code": "a [ i ] &= ( c - ' 0 ' ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 1 , cnt = 0 to i < = d , if a [ i ] is 0 , increment cnt else cnt = 0 , ans = max ( ans , cnt )",
      "code": "for ( i = 1 , cnt = 0 ; i <= d ; ++ i ) { a [ i ] == 0 ? ++ cnt : cnt = 0 , ans = max ( ans , cnt ) ; }",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print max ( ans , cnt )",
      "code": "cout << max ( ans , cnt ) << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        9,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        8
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin . get ( c ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        3
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        9,
        8
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin . get ( c ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        8,
        3
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin . get ( c ) ;",
        "cin >> n , d ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        8,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin . get ( c ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        3
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        9,
        3,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin >> n , d ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        9,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        12,
        8
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin . get ( c ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        8,
        3
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin . get ( c ) ;",
        "cin >> n , d ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        3
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "cin . get ( c ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        3
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "cin . get ( c ) ;",
        "cin >> n , d ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        3,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "cin . get ( c ) ;",
        "cin >> n , d ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "cin . get ( c ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char*’ to ‘std::basic_istream<char>::char_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        3,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "cin >> n , d ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "char a [ 110 ] , c [ 110 ] ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘char’ and ‘char*’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        8
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin . get ( c ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        8,
        3
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin . get ( c ) ;",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        3
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) { ans = max ( ans , cnt ) ; }",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin . get ( c ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        8,
        3
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin . get ( c ) ;",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        8,
        3,
        12
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin . get ( c ) ;",
        "cin >> n , d ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        8,
        12
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin . get ( c ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin >> n , d ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        3,
        12
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "cin >> n , d ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "a [ i ] = ( c [ i ] & ( c - 0 ) ) ;",
        "for ( int i = 1 , cnt = 0 ; i <= d ; i ++ ) ans = max ( ans , cnt ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}