{
  "meta": {
    "index": 2731,
    "hitid": "3MG8450X2O4OF8FE6W8MV0CH8YTPUW",
    "workerid": "A3GEA5LU87T3E5",
    "probid": "43A",
    "subid": "48465748"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integers",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "integers f = 0 , s = 0",
      "code": "int f = 0 , s = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "string s1 = \" \" , t = \" \" , m = \" \"",
      "code": "string s1 = \" \" , t = \" \" , m = \" \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n ( exclusive )",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s1",
      "code": "cin >> s1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if ( t = = \" \" ) execute",
      "code": "if ( t == \" \" )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increament f",
      "code": "f ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set t = s1",
      "code": "t = s1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if ( s1 = = t ) execute",
      "code": "else if ( s1 == t )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increament f",
      "code": "f ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if ( m = = \" \" ) execute",
      "code": "else if ( m == \" \" )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set m to s1",
      "code": "m = s1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increament s",
      "code": "s ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else execute",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increament s",
      "code": "s ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if f is greater than s",
      "code": "if ( f > s )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print out t",
      "code": "cout << t << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print out m",
      "code": "cout << m << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "{ cin >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string t = \" \" , t = \" \" , m = \" \" ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string t’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( t )"
      ],
      "err_line": 7,
      "err_msg": "could not convert ‘t’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "f ( f ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int t = s1 ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "f ( f ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else if ( m )"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘m’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 14,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else execute"
      ],
      "err_line": 15,
      "err_msg": "‘execute’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        11,
        10
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "f ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        8,
        11,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "f ;",
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        4,
        8,
        11
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "f ( f ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        8,
        11,
        10
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "f ( f ) ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        8,
        11,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "f ( f ) ;",
        "int m = s1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        8,
        10
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        8,
        10,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        8,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        11,
        10,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        11,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ;",
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ( f ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ( f ) ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        11,
        10,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ( f ) ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        11,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "f ( f ) ;",
        "int m = s1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "string s1 = \" \" , t = \" \" , m = \" \" ;",
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        8,
        11,
        10
      ],
      "mod_code": [
        "f ;",
        "f ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        8,
        11,
        10,
        13
      ],
      "mod_code": [
        "f ;",
        "f ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "f ;",
        "f ;",
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "f ;",
        "f ( f ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        8,
        11,
        10
      ],
      "mod_code": [
        "f ;",
        "f ( f ) ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        8,
        11,
        10,
        13
      ],
      "mod_code": [
        "f ;",
        "f ( f ) ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "f ;",
        "f ( f ) ;",
        "int m = s1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "f ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        8,
        10,
        13
      ],
      "mod_code": [
        "f ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "f ;",
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "f ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        11,
        10,
        13
      ],
      "mod_code": [
        "f ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "f ;",
        "int m = s1 ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "f ( f ) ;",
        "else if ( s1 = t )"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        11,
        10,
        13
      ],
      "mod_code": [
        "f ( f ) ;",
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "f ( f ) ;",
        "int m = s1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ cannot be used as a function"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "else if ( s1 = t )",
        "int m = s1 ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘s1.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(t)’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    }
  ]
}