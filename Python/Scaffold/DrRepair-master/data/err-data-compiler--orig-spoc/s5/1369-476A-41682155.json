{
  "meta": {
    "index": 1369,
    "hitid": "3FBEFUUYRKZWQTJBLVSMPZ9665S6A6",
    "workerid": "A1APYLD4DUK33J",
    "probid": "476A",
    "subid": "41682155"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m , x",
      "code": "int n , m , x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n is less than m",
      "code": "if ( n < m )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" - 1 \" print newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for x = integer casted ( double casted n / 2 + 0 . 5 ) to n inclusive",
      "code": "for ( x = ( int ) ( ( double ) n / 2 + 0.5 ) ; x <= n ; ++ x )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if x % m is 0",
      "code": "if ( x % m == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print x print newline",
      "code": "cout << x << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" - 1 \" print newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        7,
        4,
        3,
        2
      ],
      "mod_code": [
        "for ( int x = ( int ) ( ( double ) n / 2 + 2 ) ; x <= n ; x ++ )",
        "cout << \" -1\\n \" << endl ;",
        "if ( n <= m )",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "for ( int x = ( int ) ( ( double ) n / 2 + 2 ) ; x <= n ; x ++ )",
        "cout << \" -1\\n \" << endl ;",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "for ( int x = ( int ) ( ( double ) n / 2 + 2 ) ; x <= n ; x ++ )",
        "if ( n <= m )",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "for ( int x = ( int ) ( ( double ) n / 2 + 2 ) ; x <= n ; x ++ )",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "cout << \" -1\\n \" << endl ;",
        "if ( n <= m )",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        4,
        3,
        2,
        7
      ],
      "mod_code": [
        "cout << \" -1\\n \" << endl ;",
        "if ( n <= m )",
        "cin >> n read m ;",
        "for ( int x = ( int ) ( ( int ) n / 2 + 2 ) ; x <= n ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "cout << \" -1\\n \" << endl ;",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        4,
        2,
        7
      ],
      "mod_code": [
        "cout << \" -1\\n \" << endl ;",
        "cin >> n read m ;",
        "for ( int x = ( int ) ( ( int ) n / 2 + 2 ) ; x <= n ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "if ( n <= m )",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "if ( n <= m )",
        "cin >> n read m ;",
        "for ( int x = ( int ) ( ( int ) n / 2 + 2 ) ; x <= n ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( int x = ( int ) ( ( int ) n / 2 + 2 ) ; x <= n ; x ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    }
  ]
}