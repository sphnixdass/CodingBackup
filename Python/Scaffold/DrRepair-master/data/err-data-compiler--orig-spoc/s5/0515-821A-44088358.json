{
  "meta": {
    "index": 515,
    "hitid": "31MCUE39BKGY319WOTMYEI8PVW43GL",
    "workerid": "A1AYVATMT88U1W",
    "probid": "821A",
    "subid": "44088358"
  },
  "lines": [
    {
      "line": 0,
      "text": "create a set of integers by name s and size 55",
      "code": "set < int > s [ 55 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let i , j , n , k be integers , a = 2d array of integers with 55 rows and 55 columns",
      "code": "int i , j , a [ 55 ] [ 55 ] , n , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "initialize boolean value ans to true",
      "code": "bool ans = true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 1 to n inclusive",
      "code": "for ( j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read a [ i ] [ j ]",
      "code": "cin >> a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "insert a [ i ] [ j ] into s [ i ]",
      "code": "s [ i ] . insert ( a [ i ] [ j ] ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 1 to n inclusive",
      "code": "for ( j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if a [ i ] [ j ] is equal to 1 , proceed to next",
      "code": "if ( a [ i ] [ j ] == 1 ) continue ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "initialize boolean value cur to false",
      "code": "bool cur = false ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "for k = 1 to n inclusive",
      "code": "for ( k = 1 ; k <= n ; k ++ )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) is not equal to s [ i ] . end ( ) , cur is equal to true",
      "code": "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] . end ( ) ) cur = true ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if not cur , ans is equal to false",
      "code": "if ( ! cur ) ans = false ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if ans is true",
      "code": "if ( ans )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print Yes and newline",
      "code": "cout << \" Yes\\n \" ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print No and newline",
      "code": "cout << \" No\\n \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "set < int > s , size ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ and ‘std::set<int>’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "{ cin >> a [ i ] [ j ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cur = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘cur’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ and ‘std::set<int>’)"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        16
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        8
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        16
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        8
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        8
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        16,
        8
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        16,
        8,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        16,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        16,
        8
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        16,
        8,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        16,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "set < int > s , size ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        8,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "set < int > s , size ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        16,
        8
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        16,
        8,
        3
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        16,
        3
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        16,
        8
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        16,
        8,
        3
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        16,
        3
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int i , j , n , a [ 55 ] [ 55 ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) { cur = true ; }",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "if ( s [ i ] . find ( a [ i ] [ j ] - a [ k ] [ j ] ) != s [ i ] ) cur = true ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "s [ i ] . insert ( a [ i ] [ j ] ;",
        "ans = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    }
  ]
}