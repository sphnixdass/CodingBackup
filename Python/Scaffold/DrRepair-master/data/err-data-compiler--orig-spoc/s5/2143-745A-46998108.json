{
  "meta": {
    "index": 2143,
    "hitid": "31J7RYECZLKIFQ9ICG5V3HY0TT31LO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "745A",
    "subid": "46998108"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string S",
      "code": "string S ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare ints l1 and val",
      "code": "int l1 , val ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let M be a map from string to integer",
      "code": "map < string , int > M ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read input to S",
      "code": "cin >> S ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "change l1 to length of S",
      "code": "l1 = S . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "increment M [ S ]",
      "code": "M [ S ] ++ ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to l1 exclusive",
      "code": "for ( int i = 1 ; i < l1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "append first character of S to the end of S",
      "code": "S += S [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "remove first character from S",
      "code": "S . erase ( 0 , 1 ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if M [ S ] is 0",
      "code": "if ( M [ S ] == 0 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment val by one",
      "code": "val ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment M [ S ]",
      "code": "M [ S ] ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print val + 1 and ' \\ n '",
      "code": "cout << val + 1 << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "S . push_back ( S ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int l1 declare val ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "map < string , long string > M ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "S . pop ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘pop’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "map < string , long string > M ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        8,
        2,
        4
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "map < string , long string > M ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        8,
        2,
        4,
        0
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "map < string , long string > M ;",
        "cin >> n ;",
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        8,
        2,
        4,
        10
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "map < string , long string > M ;",
        "cin >> n ;",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        8,
        2,
        0
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "map < string , long string > M ;",
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        8,
        2,
        0,
        10
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "map < string , long string > M ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        8,
        2,
        10
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "map < string , long string > M ;",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4,
        0
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "cin >> n ;",
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        8,
        4,
        0,
        10
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "cin >> n ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        8,
        4,
        10
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "cin >> n ;",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        8,
        0,
        10
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "S . push_back ( S ) ;",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        2,
        4,
        0
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "cin >> n ;",
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        0,
        10
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "cin >> n ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        0,
        8
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "cin >> n ;",
        "string S declare",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        10
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "cin >> n ;",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        2,
        4,
        10,
        8
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "cin >> n ;",
        "if ( M [ ' S ' ] == 0 )",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "cin >> n ;",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        0,
        10
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        0,
        10,
        8
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        0,
        8
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "string S declare",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        2,
        10,
        8
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "if ( M [ ' S ' ] == 0 )",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "map < string , long string > M ;",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘long’ or ‘short’ invalid for ‘type name’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "cin >> n ;",
        "string S declare"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        0,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        0,
        10,
        8
      ],
      "mod_code": [
        "cin >> n ;",
        "string S declare",
        "if ( M [ ' S ' ] == 0 )",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        0,
        8
      ],
      "mod_code": [
        "cin >> n ;",
        "string S declare",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( M [ ' S ' ] == 0 )",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cin >> n ;",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "string S declare",
        "if ( M [ ' S ' ] == 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        0,
        10,
        8
      ],
      "mod_code": [
        "string S declare",
        "if ( M [ ' S ' ] == 0 )",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "string S declare",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( M [ ' S ' ] == 0 )",
        "S . push_back ( 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    }
  ]
}