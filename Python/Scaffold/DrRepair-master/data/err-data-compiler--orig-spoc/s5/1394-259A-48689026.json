{
  "meta": {
    "index": 1394,
    "hitid": "31SIZS5W599HZSOC2FS6QUF77XRQR5",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "259A",
    "subid": "48689026"
  },
  "lines": [
    {
      "line": 0,
      "text": "i , j , k = integers",
      "code": "int i , j , k ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "f , ans = integers",
      "code": "int f , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to 8 exclusive",
      "code": "for ( i = 1 ; i <= 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set f to 0",
      "code": "f = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 0 to length of string s exclusive",
      "code": "for ( j = 0 ; j < s . length ( ) - 1 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ j ] is s [ j + 1 ]",
      "code": "if ( s [ j ] == s [ j + 1 ] )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set ans to 1",
      "code": "ans = 1 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ans is 0",
      "code": "if ( ans == 0 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print YES",
      "code": "cout << \" YES \"",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print a new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print NO",
      "code": "cout << \" NO \"",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print a new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ j ] == s [ j + 1 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        15,
        16,
        18
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        15,
        16,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        15,
        16,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        15,
        18
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        15,
        18,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        15,
        18,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        15,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        15,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        16,
        18
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        16,
        18,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        16,
        18,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        16,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        16,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "int f , ans ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        16,
        18
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        16,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        18,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        18,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16,
        18,
        19
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16,
        18,
        19
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}