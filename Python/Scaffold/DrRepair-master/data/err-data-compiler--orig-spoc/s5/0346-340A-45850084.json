{
  "meta": {
    "index": 346,
    "hitid": "3UL5XDRDNCDMO1QIJEY312PBL9D58S",
    "workerid": "A1AYVATMT88U1W",
    "probid": "340A",
    "subid": "45850084"
  },
  "lines": [
    {
      "line": 0,
      "text": "let gcd be a integer function which accepts integers x and y",
      "code": "int gcd ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if x is equal to y , return the value of x",
      "code": "if ( x == y ) return x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while x is not equal to 0 and y is not equal to 0",
      "code": "while ( x != 0 && y != 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if x is greater than y",
      "code": "if ( x > y )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "x is equal to x modulo y",
      "code": "x %= y ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 6,
      "text": "y is equal to y modulo x",
      "code": "y %= x ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return y if x is less than y else return x",
      "code": "return x < y ? y : x ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "let x , y , a , b be integers",
      "code": "int x , y , a , b ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read x , y , a , b",
      "code": "cin >> x >> y >> a >> b ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "let z be a integer with z is equal to x * y / gcd of x , y",
      "code": "int z = x * y / gcd ( x , y ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print b / z - ( a - 1 ) / z and newline",
      "code": "cout << b / z - ( a - 1 ) / z << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int x , y , a , b ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        13
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int gcd ( int x , int y ) ;",
        "int z = x * y + gcd ( x , y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        13,
        12
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int gcd ( int x , int y ) ;",
        "int z = x * y + gcd ( x , y ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        13,
        5
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int gcd ( int x , int y ) ;",
        "int z = x * y + gcd ( x , y ) ;",
        "while ( 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        12
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int gcd ( int x , int y ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        12,
        5
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int gcd ( int x , int y ) ;",
        "int x , y , a , b ;",
        "while ( 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        5
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int gcd ( int x , int y ) ;",
        "while ( 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        12
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int z = x * y + gcd ( x , y ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        8,
        13,
        12,
        5
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int z = x * y + gcd ( x , y ) ;",
        "int x , y , a , b ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int x , y , a , b ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        8,
        12,
        5
      ],
      "mod_code": [
        "return y < y ? y : x ;",
        "int x , y , a , b ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int z = x * y + gcd ( x , y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int z = x * y + gcd ( x , y ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        12,
        5
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int z = x * y + gcd ( x , y ) ;",
        "int x , y , a , b ;",
        "while ( 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        5
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int z = x * y + gcd ( x , y ) ;",
        "while ( 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        5
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int x , y , a , b ;",
        "while ( 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "int z = x * y + gcd ( x , y ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        13,
        12,
        5
      ],
      "mod_code": [
        "int z = x * y + gcd ( x , y ) ;",
        "int x , y , a , b ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "int x , y , a , b ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int x’"
    }
  ]
}