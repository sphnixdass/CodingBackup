{
  "meta": {
    "index": 101,
    "hitid": "3P520RYKCH0KMYXVMHZ8XU70HDA5U2",
    "workerid": "A2UFGZT4QUY5ON",
    "probid": "748A",
    "subid": "26741437"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m , k , r , d",
      "code": "int n , m , k , r , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create char ch",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let p , q be integers",
      "code": "int p , q ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while reading n , m , k & & m & & n & & k",
      "code": "while ( cin >> n >> m >> k && m && n && k )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign k modulo ( 2 * m ) to p",
      "code": "p = k % ( 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set q to k / ( 2 * m )",
      "code": "q = k / ( 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if p is 0",
      "code": "if ( p == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set r to q",
      "code": "r = q ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set r to q + 1",
      "code": "r = q + 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if p is even",
      "code": "if ( p % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set ch to character R",
      "code": "ch = ' R ' ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set ch to character L",
      "code": "ch = ' L ' ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set q to k / ( 2 * m )",
      "code": "q = k / ( 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set k to k - ( q * 2 * m )",
      "code": "k = k - ( q * 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if k is not 0",
      "code": "if ( k != 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set q to k modulo 2",
      "code": "q = k % 2 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if q is 0",
      "code": "if ( q == 0 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "set d to k / 2",
      "code": "d = k / 2 ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 22,
      "text": "assign k / 2 + 1 to d",
      "code": "d = k / 2 + 1 ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 25,
      "text": "set d to m",
      "code": "d = m ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "print r and d and ch",
      "code": "cout << r << \" \" << d << \" \" << ch << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "ch = char R ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "ch = char L ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char n’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> & m >> n >> k )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "ch = char ( R ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘R’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "ch = char ( L ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        14
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "ch = char L ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        26
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        24
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        21
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        26
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "cout << r << \" \" << d << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        26,
        24
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        26,
        21
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        24
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        24,
        21
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "while ( 1 )",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        12,
        21
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char R ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char L ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        14,
        26
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        14,
        26,
        24
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        14,
        26,
        21
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        14,
        24
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        14,
        24,
        21
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char L ;",
        "while ( 1 )",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        4,
        14,
        21
      ],
      "mod_code": [
        "while ( cin >> n >> m >> k >> m >> m >> k )",
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "ch = char R ;",
        "ch = char L ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        14,
        26
      ],
      "mod_code": [
        "ch = char R ;",
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        14,
        26,
        24
      ],
      "mod_code": [
        "ch = char R ;",
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        14,
        26,
        21
      ],
      "mod_code": [
        "ch = char R ;",
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        14,
        24
      ],
      "mod_code": [
        "ch = char R ;",
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        14,
        24,
        21
      ],
      "mod_code": [
        "ch = char R ;",
        "ch = char L ;",
        "while ( 1 )",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        14,
        21
      ],
      "mod_code": [
        "ch = char R ;",
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        26
      ],
      "mod_code": [
        "ch = char R ;",
        "cout << r << \" \" << d << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        26,
        24
      ],
      "mod_code": [
        "ch = char R ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        26,
        24,
        21
      ],
      "mod_code": [
        "ch = char R ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        26,
        21
      ],
      "mod_code": [
        "ch = char R ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "ch = char R ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        24,
        21
      ],
      "mod_code": [
        "ch = char R ;",
        "while ( 1 )",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "ch = char R ;",
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14,
        26
      ],
      "mod_code": [
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14,
        26,
        24
      ],
      "mod_code": [
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14,
        26,
        24,
        21
      ],
      "mod_code": [
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14,
        26,
        21
      ],
      "mod_code": [
        "ch = char L ;",
        "cout << r << \" \" << d << endl ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14,
        24,
        21
      ],
      "mod_code": [
        "ch = char L ;",
        "while ( 1 )",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "ch = char L ;",
        "while ( 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘char’"
    }
  ]
}