{
  "meta": {
    "index": 2667,
    "hitid": "341H3G5YF082DQ54VYS4XRQO28X0ZQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "16A",
    "subid": "48163869"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers called n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set boolean valid to true",
      "code": "bool valid = true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer j = 1 to m exclusive",
      "code": "for ( int j = 1 ; j < m ; ++ j )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ j ] is not equal to s [ j - 1 ]",
      "code": "if ( s [ j ] != s [ j - 1 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set value of valid to false",
      "code": "valid = false ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for integer i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set character c to s [ 0 ]",
      "code": "char c = s [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ 0 ] is equal to c , set valid to false",
      "code": "if ( s [ 0 ] == c ) { valid = false ; }",
      "indent": 2
    },
    {
      "line": 16,
      "text": "in a loop increment j from 1 to m exclusive while valid is true",
      "code": "for ( int j = 1 ; j < m && valid ; ++ j )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if s [ j ] ! = s [ j - 1 ]",
      "code": "if ( s [ j ] != s [ j - 1 ] )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "valid = false",
      "code": "valid = false ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" YES \" is valid is true , \" NO \" if not , and a new line",
      "code": "cout << ( valid ? \" YES \" : \" NO \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( j = 1 ; j < m ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        4,
        12
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        4,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        4,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        12
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        12,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        12,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        19,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        4,
        12,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        4,
        12,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        4,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "cout << s << endl ;",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        4,
        19,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "cout << s << endl ;",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        4,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "cout << s << endl ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        12,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        12,
        19,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        12,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        19,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        13
      ],
      "mod_code": [
        "cout << \" YES \" << endl << \" YES \" << endl ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        4,
        12
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        4,
        12,
        19
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        4,
        12,
        13
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        4,
        19
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        4,
        19,
        13
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        4,
        13
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "cout << s << endl ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12,
        19
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12,
        19,
        13
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12,
        13
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        19
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        19,
        13
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        12,
        19
      ],
      "mod_code": [
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12,
        19,
        13
      ],
      "mod_code": [
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "cout << s << endl ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "cout << s << endl ;",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        19,
        13
      ],
      "mod_code": [
        "cout << s << endl ;",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "cout << s << endl ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        19,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        13
      ],
      "mod_code": [
        "break the ;",
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    }
  ]
}