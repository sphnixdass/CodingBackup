{
  "meta": {
    "index": 1149,
    "hitid": "3D4BBDG7ZHQLMPTRM7QFORNAW2VC3Y",
    "workerid": "AIWEXPJAU66D9",
    "probid": "41A",
    "subid": "42222538"
  },
  "lines": [
    {
      "line": 0,
      "text": "let a and b be arrays of char with size 101",
      "code": "char a [ 101 ] , b [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read b",
      "code": "cin >> b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer lena = length of a",
      "code": "int lena = strlen ( a ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to lena exclusive",
      "code": "for ( int i = 0 ; i < lena ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ i ] ! = b [ lena - i - 1 ]",
      "code": "if ( a [ i ] != b [ lena - i - 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int lena = a . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int lena = a . size ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a [ i ] ] != b [ lena - i - 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        6
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        6,
        11
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        6,
        3
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        11
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        11,
        3
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        3
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        6,
        11
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        6,
        11,
        3
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        11,
        3
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int lena = a . length ( ) ;",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        6
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        6,
        11
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        6,
        3
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        11
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        11,
        3
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        0,
        3
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        6,
        11
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        6,
        11,
        3
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        11,
        3
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int lena = a . size ( ) ;",
        "cout << b << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        6,
        11
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        6,
        11,
        3
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        6,
        3
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;",
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        11,
        3
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "char a [ 101 ] and b [ 101 ] ;",
        "cout << b << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        11,
        3
      ],
      "mod_code": [
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << \" YES\\n \" << endl ;",
        "cout << b << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( a [ i ] ] != b [ lena - i - 1 ] )",
        "cout << b << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}