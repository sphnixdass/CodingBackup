{
  "meta": {
    "index": 601,
    "hitid": "3L7SUC0TTUO2EJ6LG92APPUFO6PM0A",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "999A",
    "subid": "42116562"
  },
  "lines": [
    {
      "line": 0,
      "text": "INF = const int with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "i , j , k = int",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a = int array of size 105",
      "code": "int a [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n then m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n values into a",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "cou = int with cou = 0",
      "code": "int cou = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i 0 0 to n",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a [ i ] is not 0 and a [ i ] is less or equal to m",
      "code": "if ( a [ i ] && a [ i ] <= m )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set a [ i ] to 0 and increment cou",
      "code": "a [ i ] = 0 , cou ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = n - 1 to 0 inclusive decrementing i",
      "code": "for ( i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if a [ i ] is not 0 and a [ i ] is less or equal to m",
      "code": "if ( a [ i ] && a [ i ] <= m )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set a [ i ] to 0 and increment cou",
      "code": "a [ i ] = 0 , cou ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print cou",
      "code": "cout << cou << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i , j , k , k ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        12
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        12,
        3
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "break the ;",
        "char n , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        12,
        16
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        12,
        10
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "char n , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        16
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        10
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        16
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        16,
        10
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "a [ i ] = 0 ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        2,
        10
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "int i , j , k , k ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12,
        3
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "break the ;",
        "char n , m ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12,
        3,
        16
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "break the ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12,
        3,
        10
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "break the ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12,
        16
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12,
        16,
        10
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "break the ;",
        "a [ i ] = 0 ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12,
        10
      ],
      "mod_code": [
        "char a [ 105 ] ;",
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12,
        3
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "break the ;",
        "char n , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12,
        3,
        16
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "break the ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12,
        3,
        10
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "break the ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12,
        16
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12,
        16,
        10
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "break the ;",
        "a [ i ] = 0 ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        12,
        10
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "char n , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        3,
        16
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        3,
        16,
        10
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "char n , m ;",
        "a [ i ] = 0 ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        3,
        10
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        16,
        10
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "a [ i ] = 0 ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int i , j , k , k ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "break the ;",
        "char n , m ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        3,
        16
      ],
      "mod_code": [
        "break the ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        3,
        16,
        10
      ],
      "mod_code": [
        "break the ;",
        "char n , m ;",
        "a [ i ] = 0 ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        3,
        10
      ],
      "mod_code": [
        "break the ;",
        "char n , m ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        16,
        10
      ],
      "mod_code": [
        "break the ;",
        "a [ i ] = 0 ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "break the ;",
        "a [ i ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    }
  ]
}