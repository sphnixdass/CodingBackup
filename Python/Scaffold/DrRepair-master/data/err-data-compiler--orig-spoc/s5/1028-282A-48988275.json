{
  "meta": {
    "index": 1028,
    "hitid": "3SNR5F7R92NF9QVO313XILP20BKIE6",
    "workerid": "A1APYLD4DUK33J",
    "probid": "282A",
    "subid": "48988275"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare Check_operation with string statement as argument , returning boolean",
      "code": "bool Check_operation ( string statment )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "for i = 0 to length of statement exclusive",
      "code": "for ( int i = 0 ; i < statment . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if statement [ i ] is ' + '",
      "code": "if ( statment [ i ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 3,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 3
    },
    {
      "line": 4,
      "text": "else if statement [ i ] is ' - '",
      "code": "else if ( statment [ i ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "return false from function",
      "code": "return false ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "declare Run_Statements with string pointer statmnts , integer n as arguments , returning integer",
      "code": "int Run_Statements ( string * statmnts , int n )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "create integer result with result = 0",
      "code": "int result = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for itr = 0 to n exclusive",
      "code": "for ( int itr = 0 ; itr < n ; itr ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create string Statement with Statement = statmnts [ itr ]",
      "code": "string Statement = statmnts [ itr ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "create boolean Operation with Operations = result of run Check_operation with Statement as argument",
      "code": "bool Operation = Check_operation ( Statement ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if Operation is true",
      "code": "if ( Operation == true )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment result",
      "code": "result ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "decrement result",
      "code": "result -- ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "return result from function",
      "code": "return result ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "create integer n with n = 0",
      "code": "int n = 0 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "create string pointer statements with statements = new string array of size n",
      "code": "string * statements = new string [ n ] ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for itr = 0 to n exclusive , read statements [ itr ]",
      "code": "for ( int itr = 0 ; itr < n ; itr ++ ) cin >> statements [ itr ] ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "create integer Output with Output = result of Run_Statements with statements , n as arguments",
      "code": "int Output = Run_Statements ( statements , n ) ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print Output print newline",
      "code": "cout << Output << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool Check_operation ( string as )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 4,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 11,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool Check_operation ( string ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length . length ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( statement == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "else if ( i [ i ] == ' - ' )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 5,
      "err_msg": "return-statement with no value, in function returning ‘bool’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "continue ;"
      ],
      "err_line": 7,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( itr = 0 ; itr < n ; itr ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘itr’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "string Statement = ! statmnts [ itr ] ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "bool Operations = Check_operation ( Statement ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘Operation’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 19,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int n , n ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 25,
      "err_msg": "‘statements’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "string statements = new string [ n ] ;"
      ],
      "err_line": 24,
      "err_msg": "conversion from ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "int Output = Run_Statements ( statements ) ;"
      ],
      "err_line": 26,
      "err_msg": "too few arguments to function ‘int Run_Statements(std::__cxx11::string*, int)’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        2
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        4
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        9
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        4
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        9
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "else if ( statement [ i ] == ' - ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( statement [ i ] == ' + ' )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        4
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        9
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( statement [ i ] == ' + ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( statement [ i ] == ' + ' )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( statement [ i ] == ' + ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4,
        9
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4,
        9,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        4,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "else if ( statement [ i ] == ' - ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "bool Check_operation ( string as )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘statment’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( statement [ i ] == ' + ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        9,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "else if ( statement [ i ] == ' - ' )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < length ; i ++ )",
        "if ( ! Operation )"
      ],
      "err_line": 1,
      "err_msg": "‘length’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        14
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )",
        "else if ( statement [ i ] == ' - ' )",
        "if ( ! Operation )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        14
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "if ( statement [ i ] == ' + ' )",
        "if ( ! Operation )"
      ],
      "err_line": 2,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )"
      ],
      "err_line": 4,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        14
      ],
      "mod_code": [
        "else if ( statement [ i ] == ' - ' )",
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 4,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "else if ( statement [ i ] == ' - ' )",
        "if ( ! Operation )"
      ],
      "err_line": 4,
      "err_msg": "‘statement’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "int Run_Statements ( string * statmnts , int * n )",
        "if ( ! Operation )"
      ],
      "err_line": 11,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}