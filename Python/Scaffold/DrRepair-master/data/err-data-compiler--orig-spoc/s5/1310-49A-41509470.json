{
  "meta": {
    "index": 1310,
    "hitid": "3I6NF2WGIGQ1HGW02CARTF699STG5M",
    "workerid": "AIWEXPJAU66D9",
    "probid": "49A",
    "subid": "41509470"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "inline bool function yy with char argument x",
      "code": "inline bool yy ( char x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return 1 if x is one of ' a ' , ' e ' , ' i ' , ' o ' , ' u ' or ' y '",
      "code": "if ( x == ' a ' || x == ' e ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "new register int i",
      "code": "register int i ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read data from the input and put it into s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "change i from the length of s - 1 , while isalpha ( s [ i ] ) returns false , decrementing i",
      "code": "for ( i = s . length ( ) - 1 ; ! isalpha ( s [ i ] ) ; i -- )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": ";",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set s [ i ] to the lower case",
      "code": "s [ i ] = tolower ( s [ i ] ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if yy ( s [ i ] ) is true",
      "code": "if ( yy ( s [ i ] ) )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" NO \" to stdout",
      "code": "puts ( \" NO \" ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 2,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "register register int i ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting specifiers in declaration of ‘i’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "else",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        8,
        10
      ],
      "mod_code": [
        "else",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;",
        "s [ i ] = toupper ( s [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        8,
        10,
        1
      ],
      "mod_code": [
        "else",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;",
        "s [ i ] = toupper ( s [ i ] ) ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "else",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "else",
        "s [ i ] = toupper ( s [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        10,
        8
      ],
      "mod_code": [
        "else",
        "s [ i ] = toupper ( s [ i ] ) ;",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;"
      ],
      "err_line": 2,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        10,
        8,
        1
      ],
      "mod_code": [
        "else",
        "s [ i ] = toupper ( s [ i ] ) ;",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        1
      ],
      "mod_code": [
        "else",
        "s [ i ] = toupper ( s [ i ] ) ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "else",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;"
      ],
      "err_line": 2,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "else",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "else",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        1
      ],
      "mod_code": [
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;",
        "s [ i ] = toupper ( s [ i ] ) ;",
        "if ( x == ' a ' || x == ' a ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10,
        1
      ],
      "mod_code": [
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;",
        "s [ i ] = toupper ( s [ i ] ) ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2,
        1
      ],
      "mod_code": [
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;",
        "if ( x == ' a ' || x == ' a ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        8,
        1
      ],
      "mod_code": [
        "s [ i ] = toupper ( s [ i ] ) ;",
        "if ( x == ' a ' || x == ' a ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        1
      ],
      "mod_code": [
        "s [ i ] = toupper ( s [ i ] ) ;",
        "if ( x == ' a ' || x == ' a ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        8,
        1
      ],
      "mod_code": [
        "s [ i ] = toupper ( s [ i ] ) ;",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "s [ i ] = toupper ( s [ i ] ) ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "if ( x == ' a ' || x == ' a ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;",
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "if ( x == ' a ' || x == ' a ' || x == ' i ' || x == ' o ' || x == ' u ' || x == ' y ' ) return 1 ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "i = s . length ( ) - 1 , isalpha ( s [ i ] ) , i -- ;",
        "inline bool yy ( char x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}