{
  "meta": {
    "index": 1305,
    "hitid": "3S4TINXCC0HRY9U7R5EC1AF398RBOL",
    "workerid": "A1APYLD4DUK33J",
    "probid": "49A",
    "subid": "48200947"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string vow with vow = \" aeiouy \"",
      "code": "string vow = \" aeiouy \" ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create string x",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read line from cin to x",
      "code": "getline ( cin , x ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean ok with ok = false",
      "code": "bool ok = false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to length of x exclusive",
      "code": "for ( int i = 0 ; i < x . length ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if x [ i ] is alphanumeric",
      "code": "if ( isalpha ( x [ i ] ) )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if first index of lower case x [ i ] in vow is not - 1",
      "code": "if ( vow . find ( tolower ( x [ i ] ) ) != - 1 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set ok to true",
      "code": "ok = true ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set ok to false",
      "code": "ok = false ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" YES \" if ok is true , else \" NO \" , print newline",
      "code": "cout << ( ( ok ) ? \" YES \" : \" NO \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "freopen ( cin , x ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < x . length ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( vow [ 0 ] . find ( x [ i ] ) != - 1 )"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘vow.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(0ul)’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "puts ( ok ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "if ( vow . find ( x [ i ] ) != - 1 )"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        0
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        7,
        0,
        8
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = true ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        7,
        0,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "bool ok = true ;",
        "bool ok = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "bool ok = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        0,
        8
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = true ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        0,
        8,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = true ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        0,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "bool ok = true ;",
        "bool ok = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == alphanumeric )",
        "bool ok = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘alphanumeric’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        0,
        6
      ],
      "mod_code": [
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "if ( x [ i ] == ' alphanumeric ' )"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        0,
        6,
        8
      ],
      "mod_code": [
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "if ( x [ i ] == ' alphanumeric ' )",
        "bool ok = true ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        0,
        6,
        10
      ],
      "mod_code": [
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "if ( x [ i ] == ' alphanumeric ' )",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        0,
        8
      ],
      "mod_code": [
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = true ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        0,
        8,
        10
      ],
      "mod_code": [
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = true ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        0,
        10
      ],
      "mod_code": [
        "if ( vow . find ( x [ i ] ) != - 1 )",
        "string * vow = \" aeiouy \" ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;",
        "if ( x [ i ] == ' alphanumeric ' )"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;",
        "if ( x [ i ] == ' alphanumeric ' )",
        "bool ok = true ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        10
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;",
        "if ( x [ i ] == ' alphanumeric ' )",
        "bool ok = true ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        0,
        6,
        10
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;",
        "if ( x [ i ] == ' alphanumeric ' )",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;",
        "bool ok = true ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        0,
        8,
        10
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;",
        "bool ok = true ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;",
        "bool ok = false ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    }
  ]
}