{
  "meta": {
    "index": 1384,
    "hitid": "3TTPFEFXCTEB0GRPR12E6LWAJ0IH6S",
    "workerid": "AIWEXPJAU66D9",
    "probid": "476A",
    "subid": "41884168"
  },
  "lines": [
    {
      "line": 0,
      "text": "set new constant integer INF to 1e8 + 7",
      "code": "const int INF = 1e8 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set new constant integer MAXN to 1e6",
      "code": "const int MAXN = 1e6 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer variables n , m and ans",
      "code": "int n , m , ans ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "define inline function read that returns integer",
      "code": "inline int read ( )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare integer variables X and w = 0",
      "code": "int X = 0 , w = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create character ch = 0",
      "code": "char ch = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while ! isdigit ( ch ) ) w | = ch = ' - ' , read char into ch",
      "code": "while ( ! isdigit ( ch ) ) w |= ch == ' - ' , ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while isdigit ( ch ) ) X = ( X < < 3 ) + ( X < < 1 ) + ( ch ^ 48 ) , read char into ch",
      "code": "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch ^ 48 ) , ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return - X is w is not 0 , X otherwise",
      "code": "return w ? - X : X ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "inline void function write with integer argument x",
      "code": "inline void write ( int x )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "create integer num = 0",
      "code": "int num = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "let ch be character array with size 20",
      "code": "char ch [ 20 ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if x is 0 , increment num and set ch [ num ] to ' 0 '",
      "code": "if ( ! x ) ch [ ++ num ] = ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "while x is not 0 , increment num and set ch [ num ] to ( x % 10 ) + 48 , x / = 10",
      "code": "while ( x ) ch [ ++ num ] = ( x % 10 ) + 48 , x /= 10 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "while num is not 0 , call putchar ( ch [ num - - ] )",
      "code": "while ( num ) putchar ( ch [ num -- ] ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "invoke function puts an empty string as an argument",
      "code": "puts ( \" \" ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "n = read ( ) , m = read ( )",
      "code": "n = read ( ) , m = read ( ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if m is greater than n",
      "code": "if ( m > n )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" - 1 \"",
      "code": "puts ( \" -1 \" ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "declare integer i = m",
      "code": "int i = m ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "while 2 * i is less than n , increase i by m",
      "code": "while ( 2 * i < n ) i += m ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "call function write with argument i",
      "code": "write ( i ) ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 3 ) + ( ch . 48 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "inline void write ( int x ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "while ( num != 0 ) putchar ( ch [ num - - ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘]’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "void write ( )"
      ],
      "err_line": 27,
      "err_msg": "a function-definition is not allowed here before ‘return’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        7,
        14
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        16
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        12
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "character [ 20 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        7,
        16
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "puts ( \" 0 \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        7,
        16,
        12
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        7,
        16,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "puts ( \" 0 \" ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        7,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        12
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        14,
        12
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        12,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        14,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        16,
        12
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        12,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        16,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "puts ( \" 0 \" ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "while ( ! isdigit ( ch ) ) w = ' - ' , w = ' - ' ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        14,
        16
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        12
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        3
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7,
        14,
        12
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "character [ 20 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        14,
        12,
        3
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7,
        14,
        3
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "puts ( \" 0 \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        16,
        12
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        16,
        12,
        3
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7,
        16,
        3
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "puts ( \" 0 \" ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        12,
        3
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "while ( isdigit ( ch ) ) X = ( X << 3 ) + ( X << 1 ) + ( ch . 48 ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        14,
        16,
        12
      ],
      "mod_code": [
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        12,
        3
      ],
      "mod_code": [
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        14,
        16,
        3
      ],
      "mod_code": [
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "puts ( \" 0 \" ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12,
        3
      ],
      "mod_code": [
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "while ( x != 0 ) ch [ num ] = ( x % 10 ) + 48 , x / 10 ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        3
      ],
      "mod_code": [
        "puts ( \" 0 \" ) ;",
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "puts ( \" 0 \" ) ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "character [ 20 ] ;",
        "inline inline int read ( )"
      ],
      "err_line": 3,
      "err_msg": "duplicate ‘inline’"
    }
  ]
}