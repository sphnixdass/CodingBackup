{
  "meta": {
    "index": 614,
    "hitid": "3VQTAXTYN3FMBEE4NRQL0G7SSWPBUD",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "999A",
    "subid": "41865935"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k = int",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n then k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = int array of size n",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n values into a",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x = int with x = 0",
      "code": "int x = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a [ i ] is less or equal to k",
      "code": "if ( a [ i ] <= k )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment x",
      "code": "x ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = n - 1 to 0 inclusive decrementing i",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if a [ i ] is less or equal to k",
      "code": "if ( a [ i ] <= k )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment x",
      "code": "x ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if x is greater than n",
      "code": "if ( x > n )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print n",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print x",
      "code": "cout << x << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> k )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int x [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        13,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        13,
        1,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        13,
        1,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        13,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        13,
        16,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        13,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        3,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        3,
        1,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        3,
        1,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        3,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        3,
        16,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        3,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        1,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        1,
        16,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        1,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        16,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        3,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        3,
        1,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        3,
        1,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        3,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        3,
        16,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        3,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        1,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        1,
        16,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        1,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        16,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "char a [ n ] ;",
        "int n , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        3,
        1,
        16
      ],
      "mod_code": [
        "char a [ n ] ;",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        3,
        1,
        16,
        10
      ],
      "mod_code": [
        "char a [ n ] ;",
        "int n , k , k ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        3,
        1,
        10
      ],
      "mod_code": [
        "char a [ n ] ;",
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        16,
        10
      ],
      "mod_code": [
        "char a [ n ] ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "char a [ n ] ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        16,
        10
      ],
      "mod_code": [
        "int n , k , k ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "break break ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}