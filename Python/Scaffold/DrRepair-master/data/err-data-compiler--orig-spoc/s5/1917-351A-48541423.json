{
  "meta": {
    "index": 1917,
    "hitid": "3JYPJ2TAYI2ZWQIOB7DN90BEZDQPFE",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "351A",
    "subid": "48541423"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function fastMax taking two ints x and y and returning an int",
      "code": "int fastMax ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return ( ( ( y - x ) bitshift right by ( 32 - 1 ) ) bitwise - and ( x bitwise - xor y ) ) bitwise - xor y",
      "code": "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "in function fastMin taking two ints x and y and returning an int",
      "code": "int fastMin ( int x , int y )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return ( ( ( y - x ) bitshift right by ( 32 - 1 ) ) bitwise - and ( x bitwise - xor y ) ) bitwise - xor x",
      "code": "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) ^ x ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "MAX = const long long int with MAXN = 2001",
      "code": "const long long int MAXN = 2001 ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "a = long double array of size 2 * MAXN",
      "code": "long double a [ 2 * MAXN ] ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "n = long long int",
      "code": "long long int n ;",
      "indent": 0
    },
    {
      "line": 9,
      "text": "dp = two dimensional long double array of sizes MAXN and MAXN",
      "code": "long double dp [ MAXN ] [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 10,
      "text": "visit = two dimensional bool array of sizes MAXN and MAXN",
      "code": "bool visit [ MAXN ] [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 11,
      "text": "in function recursion taking three long long ints i , ceils and floors and returning a double",
      "code": "double recursion ( long long int i , long long int ceils , long long int floors )",
      "indent": 0
    },
    {
      "line": 12,
      "text": "if i is greater than 2 * n then return 0",
      "code": "if ( i > 2 * n ) return 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if visit [ ceils ] [ floors ] is true return dp [ ceils ] [ floors ]",
      "code": "if ( visit [ ceils ] [ floors ] ) return dp [ ceils ] [ floors ] ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "val1 = long double with val1 = INT_MAX",
      "code": "long double val1 = INT_MAX ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "val2 = long double with val2 = INT_MAX",
      "code": "long double val2 = INT_MAX ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if ceils is less than n set val1 to ceil of a [ i ] - a [ i ] + recursion of i + 1 , ceils + 1 and floors",
      "code": "if ( ceils < n ) val1 = ceil ( a [ i ] ) - a [ i ] + recursion ( i + 1 , ceils + 1 , floors ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if floors is less than n then set val2 to floor of a [ i ] - a [ i ] + recursion of i + 1 , ceils and floors + 1",
      "code": "if ( floors < n ) val2 = floor ( a [ i ] ) - a [ i ] + recursion ( i + 1 , ceils , floors + 1 ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "ans = long double",
      "code": "long double ans ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if fabs of val is less than fabs of val2",
      "code": "if ( fabs ( val1 ) < fabs ( val2 ) )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set ans to val1",
      "code": "ans = val1 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set ans to val2",
      "code": "ans = val2 ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set visit [ ceils ] [ floors ] to true",
      "code": "visit [ ceils ] [ floors ] = true ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set dp [ ceils ] [ floors ] to ans and return dp [ ceils ] [ floors ]",
      "code": "return dp [ ceils ] [ floors ] = ans ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "in function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 27,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = 1 to 2 * n inclusive read a [ i ]",
      "code": "for ( int i = ( 1 ) ; i <= ( 2 * n ) ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "call fixed and setprectision of 3 on cout",
      "code": "cout << fixed << setprecision ( 3 ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print fabs of recursion of 1 , 0 , 0",
      "code": "cout << fabs ( recursion ( 1 , 0 , 0 ) ) << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 33,
      "text": "t = long long int",
      "code": "long long int t ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "set t to 1",
      "code": "t = 1 ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "call solve t times",
      "code": "while ( t -- ) solve ( ) ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int fastMax ( int x [ ] , int y )"
      ],
      "err_line": 1,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x & y ) ) %= y ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int fastMin ( int x [ ] , int y )"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "const long long int MAX = 2001 + 2001 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "long double a [ 2 ] * MAXN ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "long double * val1 = INT_MAX ;"
      ],
      "err_line": 14,
      "err_msg": "invalid conversion from ‘int’ to ‘long double*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "long double * val2 = INT_MAX ;"
      ],
      "err_line": 15,
      "err_msg": "invalid conversion from ‘int’ to ‘long double*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] , ceils + 1 , ceils + 1 ) ; }"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘ceil(long double, long long int, long long int)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + a [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘floor(long double, long long int)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "long double int ans ;"
      ],
      "err_line": 18,
      "err_msg": "two or more data types in declaration of ‘ans’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( fabs ( val , fabs ( val2 ) ) )"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "visit [ ceils ] [ j ] = true ;"
      ],
      "err_line": 23,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "solve ( ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "cout << fabs ( 1 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int)’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "int t = 1 ;"
      ],
      "err_line": 34,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "solve ( ( t ) ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        16
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        4,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        6,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "const long long int MAX = 2001 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        17,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        17,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        17,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        17,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        17,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        17,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        16,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        17,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        29,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= y ;",
        "solve ( t ) ;"
      ],
      "err_line": 1,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        17,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        17,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        17,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        17,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        17,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        17,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        6,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "const long long int MAX = 2001 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        16,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        17,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        19,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        22,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        24
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        24,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        24,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        24,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        24,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        24,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        24,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        29
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        29,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        29,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        29,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        30
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        30,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4,
        35
      ],
      "mod_code": [
        "return ( ( ( y - x ) >> ( 32 - 1 ) ) & ( x ^ y ) ) %= x ;",
        "solve ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17,
        19
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17,
        22
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        19
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        19,
        22
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        19,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        19,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        19,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        19,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        22
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        22,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        22,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        22,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        22,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        24,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        24,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        24,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        29,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        29,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        30,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        19
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        22
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        22
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        22,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        22,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        22,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        22,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        24,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        24,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        24,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        29,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        29,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        30,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        22
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        22,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        22,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        22,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        22,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        24,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        24,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        24,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        29,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        29,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        30,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        24,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        24,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        24,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        29,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        29,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        30,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        22,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        29,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        29,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        30,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        29
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        29,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        29,
        30,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        29,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        30
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        30,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        35
      ],
      "mod_code": [
        "const long long int MAX = 2001 ;",
        "solve ( t ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘MAXN’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        19
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        22
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        24
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        22
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        22,
        24
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        22,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        22,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        22,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        24
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        24,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        24,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        24,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        29,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        29,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        30,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        17,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        22
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        24
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        24
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        24,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        24,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        24,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        29,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        29,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        30,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        19,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        24
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        24,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        24,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        24,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        29,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        29,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        30,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        22,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        24
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        24,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        24,
        29,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        24,
        29,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        24,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        24,
        30,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        24,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        29
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        29,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        29,
        30,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        29,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        30
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        30,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16,
        35
      ],
      "mod_code": [
        "if ( ceils < n ) { val1 = ceil ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        22
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        22,
        24
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        22,
        29
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        22,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        22,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        24
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        24,
        29
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        24,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        24,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        29
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        29,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        29,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        30,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        19,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        24
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        24,
        29
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        24,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        24,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        29
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        29,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        29,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        30,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        22,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        24
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        24,
        29
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        24,
        29,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        24,
        29,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        24,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        24,
        30,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        24,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        29
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        29,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        29,
        30,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        29,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        30
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        30,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        17,
        35
      ],
      "mod_code": [
        "if ( floors < n ) { val2 = floor ( a [ i ] - a [ i ] + recursion [ i ] , ceils + 1 ) ; }",
        "solve ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long double’ and ‘double(long long int, long long int, long long int)’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        24
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        24,
        29
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        24,
        30
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        24,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        29
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        29,
        30
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        29,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        30
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        30,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        22,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        29
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        29,
        30
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        29,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        30
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        30,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        29
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        29,
        30
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        29,
        30,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        29,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        30
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        30,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        35
      ],
      "mod_code": [
        "if ( fabs ( val ) < fabs ( val2 ) )",
        "solve ( t ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘val’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        24,
        29,
        30
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        22,
        24,
        29,
        35
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        22,
        24,
        30
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        22,
        24,
        30,
        35
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        22,
        24,
        35
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        22,
        29,
        30
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        22,
        29,
        30,
        35
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        22,
        29,
        35
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        22,
        30
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        22,
        30,
        35
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        22,
        35
      ],
      "mod_code": [
        "ans = ' \\0 ' ;",
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        24,
        29,
        30
      ],
      "mod_code": [
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        24,
        29,
        30,
        35
      ],
      "mod_code": [
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        24,
        29,
        35
      ],
      "mod_code": [
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        24,
        30
      ],
      "mod_code": [
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        24,
        30,
        35
      ],
      "mod_code": [
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        24,
        35
      ],
      "mod_code": [
        "return dp [ ceils ] [ floors ] , ans = dp [ ceils ] [ floors ] ;",
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        29,
        30
      ],
      "mod_code": [
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        29,
        30,
        35
      ],
      "mod_code": [
        "cout << fixed << 3 ;",
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    },
    {
      "mod_line": [
        29,
        35
      ],
      "mod_code": [
        "cout << fixed << 3 ;",
        "solve ( t ) ;"
      ],
      "err_line": 35,
      "err_msg": "too many arguments to function ‘void solve()’"
    },
    {
      "mod_line": [
        30,
        35
      ],
      "mod_code": [
        "cout << fabs ( 1 , 0 , 0 , 0 ) << endl ;",
        "solve ( t ) ;"
      ],
      "err_line": 30,
      "err_msg": "no matching function for call to ‘fabs(int, int, int, int)’"
    }
  ]
}