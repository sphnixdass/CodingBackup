{
  "meta": {
    "index": 2432,
    "hitid": "3WRKFXQBOB1DFVCF32FRPOHIINRYI3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "479A",
    "subid": "48944750"
  },
  "lines": [
    {
      "line": 0,
      "text": "int function f1",
      "code": "int f1 ( int , int , int ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "int function f2",
      "code": "int f2 ( int , int ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "integer function f2 with integer arguments a and b",
      "code": "int f2 ( int a , int b )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if a * b is greater than a + b",
      "code": "if ( a * b > a + b )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return a * b",
      "code": "return ( a * b ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return a + b",
      "code": "return ( a + b ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "integer function f1 with integer arguments a , b and c",
      "code": "int f1 ( int a , int b , int c )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "declare integer max = 0",
      "code": "int max = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare integers x , y , z and w",
      "code": "int x , y , z , w ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "x = f2 ( a , b ) + c",
      "code": "x = f2 ( a , b ) + c ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "y = f2 ( a , b ) * c",
      "code": "y = f2 ( a , b ) * c ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "z = a + f2 ( b , c )",
      "code": "z = a + f2 ( b , c ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "w = a * f2 ( b , c )",
      "code": "w = a * f2 ( b , c ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if x > y and x > z and x > w",
      "code": "if ( x > y && x > z && x > w )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return x",
      "code": "return x ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if y > z and y > w",
      "code": "else if ( y > z && y > w )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return y",
      "code": "return y ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else if z > w",
      "code": "else if ( z > w )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "return z",
      "code": "return z ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "return w",
      "code": "return w ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 25,
      "text": "create integers a , b , c , e and one where one = 0 , and integer array called array with 3 elements",
      "code": "int a , b , c , e , array [ 3 ] , one = 0 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 0 to 3 exclusive read array [ i ]",
      "code": "for ( int i = 0 ; i < 3 ; i ++ ) cin >> array [ i ] ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "assign value of array [ 0 ] to a",
      "code": "a = array [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "assign value of array [ 1 ] to b",
      "code": "b = array [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "assign value of array [ 2 ] to c",
      "code": "c = array [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "set value of e to f1 ( a , b , c )",
      "code": "e = f1 ( a , b , c ) ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if e is greater than one , set one to e",
      "code": "if ( e > one ) { one = e ; }",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print one and \" \\ n \"",
      "code": "cout << one << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int f1 ( )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int f2 ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "‘array’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int f1 ( int a , int b , int c ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int x = f2 ( a , b ) + c ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int y’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int w = a * f2 ( b , c ) ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int a , b , c , e = 0 , e = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int a = array [ 0 ] ;"
      ],
      "err_line": 27,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int b = array [ 1 ] ;"
      ],
      "err_line": 28,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "int c = array [ 2 ] ;"
      ],
      "err_line": 29,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "* e = f1 ( a , b , c ) ;"
      ],
      "err_line": 30,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        25
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        25,
        12
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        25,
        2
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        12
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( )",
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        12,
        2
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( )",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        2
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( )",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "int f1 ( )",
        "int a , b , c , e = 0 , one = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        25,
        12
      ],
      "mod_code": [
        "int f1 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        25,
        12,
        2
      ],
      "mod_code": [
        "int f1 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        25,
        2
      ],
      "mod_code": [
        "int f1 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int f1 ( )",
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        12,
        2
      ],
      "mod_code": [
        "int f1 ( )",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int f1 ( )",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        25
      ],
      "mod_code": [
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        25,
        12
      ],
      "mod_code": [
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        25,
        12,
        2
      ],
      "mod_code": [
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        25,
        12,
        0
      ],
      "mod_code": [
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        25,
        2
      ],
      "mod_code": [
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        25,
        2,
        0
      ],
      "mod_code": [
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int f2 ( int a , int b ) ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        25,
        0
      ],
      "mod_code": [
        "int f2 ( )",
        "int a , b , c , e = 0 , one = 0 ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int f2 ( )",
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        12,
        2
      ],
      "mod_code": [
        "int f2 ( )",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        12,
        2,
        0
      ],
      "mod_code": [
        "int f2 ( )",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        12,
        0
      ],
      "mod_code": [
        "int f2 ( )",
        "int y = f2 ( a , b ) * c ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int f2 ( )",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        2,
        0
      ],
      "mod_code": [
        "int f2 ( )",
        "int f2 ( int a , int b ) ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "int f2 ( )",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        12
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int y’"
    },
    {
      "mod_line": [
        25,
        12,
        2
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        12,
        2,
        0
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        12,
        0
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;",
        "int y = f2 ( a , b ) * c ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        2
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        2,
        0
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;",
        "int f2 ( int a , int b ) ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        0
      ],
      "mod_code": [
        "int a , b , c , e = 0 , one = 0 ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        2,
        0
      ],
      "mod_code": [
        "int y = f2 ( a , b ) * c ;",
        "int f2 ( int a , int b ) ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "int y = f2 ( a , b ) * c ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "int f2 ( int a , int b ) ;",
        "int f1 ( int ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘)’ token"
    }
  ]
}