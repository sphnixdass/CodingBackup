{
  "meta": {
    "index": 693,
    "hitid": "3WPCIUYH1A20QYXZ1IRHQA9QC30DT1",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "346A",
    "subid": "48431318"
  },
  "lines": [
    {
      "line": 0,
      "text": "let spf be a long long array of length 100001",
      "code": "long long spf [ 100001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long function gcd taking a , b = long long",
      "code": "long long gcd ( long long a , long long b ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare long long function palidrome taking s = string",
      "code": "long long palindrome ( string s ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare long long function modexp taking a , b , m = long long",
      "code": "long long modexp ( long long a , long long b , long long m ) ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare void function sieve",
      "code": "void sieve ( ) ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare long long functio ceil taking a , b = long long",
      "code": "long long ceil ( long long a , long long b ) ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare long long vector function getFactorization taking x = long long",
      "code": "vector < long long > getFactorization ( long long x ) ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "delcare void function getZarr taking str = string , Z = long long array",
      "code": "void getZarr ( string str , long long Z [ ] ) ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare long long vector function prefix_function taking s = string",
      "code": "vector < long long > prefix_function ( string s ) ;",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "n = long long",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "a = long long vector of length n",
      "code": "long long a [ n ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read the first n elements of a",
      "code": "for ( long long i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 14,
      "text": "x = long long = gdc of a [ 0 ] , a [ 1 ]",
      "code": "long long x = gcd ( a [ 0 ] , a [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 2 to n exclusive , set x to gdc of x and a [ i ]",
      "code": "for ( long long i = 2 ; i < n ; i ++ ) { x = gcd ( x , a [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 16,
      "text": "mx = INT_MIN = long long",
      "code": "long long mx = INT_MIN ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for long long i = 0 to n exclusive , divide a [ i ] by x",
      "code": "for ( long long i = 0 ; i < n ; i ++ ) { a [ i ] = a [ i ] / x ; }",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for long long i = 0 to n exclusive , set mx to the max of a [ i ] and mx",
      "code": "for ( long long i = 0 ; i < n ; i ++ ) mx = max ( a [ i ] , mx ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "y = mx - n = long long",
      "code": "long long y = mx - n ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if y is even",
      "code": "if ( y % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print Bob",
      "code": "cout << \" Bob \" << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print Alice",
      "code": "cout << \" Alice \" << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "in long long function gcd taking a , b = long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 26,
      "text": "if a = 0 then return b",
      "code": "if ( a == 0 ) return b ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if b = 0 return a",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if a = b return a",
      "code": "if ( a == b ) return a ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if a > b return gdc of a mod b , b",
      "code": "if ( a > b ) return gcd ( a % b , b ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "return gcd of a , b % a",
      "code": "return gcd ( a , b % a ) ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 32,
      "text": "in long long function palindrome taking s = string",
      "code": "long long palindrome ( string s )",
      "indent": 0
    },
    {
      "line": 33,
      "text": "l = 0 = long long",
      "code": "long long l = 0 ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "h = length of s - 1 = long long",
      "code": "long long h = s . length ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "while h > 1",
      "code": "while ( h > l )",
      "indent": 1
    },
    {
      "line": 36,
      "text": "increment l , decrement h , if s [ l ] isn ' t s [ h ] then return 0",
      "code": "if ( s [ l ++ ] != s [ h -- ] ) { return 0 ; }",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 38,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 40,
      "text": "in long long function modexp taking a , b , m = long long",
      "code": "long long modexp ( long long a , long long b , long long m )",
      "indent": 0
    },
    {
      "line": 41,
      "text": "if b = 0 then return 1",
      "code": "if ( b == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "temp = modexp of a , b / 2 , m = long long",
      "code": "long long temp = modexp ( a , b / 2 , m ) ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "set temp = temp ^ 2 % m",
      "code": "temp = ( temp * temp ) % m ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "if b bit and 1 isn ' t 0 then return ( temp * ( a % m ) ) % m",
      "code": "if ( b & 1 ) return ( temp * ( a % m ) ) % m ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "return temp",
      "code": "return temp ;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 47,
      "text": "in void fucntion sieve",
      "code": "void sieve ( )",
      "indent": 0
    },
    {
      "line": 48,
      "text": "set spf at 1 = 1",
      "code": "spf [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "for long long i = 2 to 100001 exclusive , set spf [ i ] = i",
      "code": "for ( long long i = 2 ; i < 100001 ; i ++ ) spf [ i ] = i ;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "for long long i = 4 to 100001 exclusive increment i by 2 , set spf [ i ] = 2",
      "code": "for ( long long i = 4 ; i < 100001 ; i += 2 ) spf [ i ] = 2 ;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "for long long i = 3 to 100001 exclusive",
      "code": "for ( long long i = 3 ; i * i < 100001 ; i ++ )",
      "indent": 1
    },
    {
      "line": 52,
      "text": "if spf [ i ] = i",
      "code": "if ( spf [ i ] == i )",
      "indent": 2
    },
    {
      "line": 53,
      "text": "for long long j = i ^ 2 to 100001 increment j by i",
      "code": "for ( long long j = i * i ; j < 100001 ; j += i )",
      "indent": 3
    },
    {
      "line": 54,
      "text": "if spf at j = j then set spf [ j ] to i",
      "code": "if ( spf [ j ] == j ) spf [ j ] = i ;",
      "indent": 4
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 58,
      "text": "in long long vector function getFactorization taking x = long long",
      "code": "vector < long long > getFactorization ( long long x )",
      "indent": 0
    },
    {
      "line": 59,
      "text": "ret = long long vector",
      "code": "vector < long long > ret ;",
      "indent": 1
    },
    {
      "line": 60,
      "text": "while x is not 1",
      "code": "while ( x != 1 )",
      "indent": 1
    },
    {
      "line": 61,
      "text": "push back spf [ x ] into ret",
      "code": "ret . push_back ( spf [ x ] ) ;",
      "indent": 2
    },
    {
      "line": 62,
      "text": "divide x by spf [ x ]",
      "code": "x = x / spf [ x ] ;",
      "indent": 2
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 64,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 65,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 66,
      "text": "in long long function ceil taking a , b = long long",
      "code": "long long ceil ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 67,
      "text": "return a / b + ( a % b is not 0 )",
      "code": "return a / b + ( a % b != 0 ) ;",
      "indent": 1
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 69,
      "text": "in void function getZarr taking str = string , Z = long long array",
      "code": "void getZarr ( string str , long long Z [ ] )",
      "indent": 0
    },
    {
      "line": 70,
      "text": "n = long long = length of str",
      "code": "long long n = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 71,
      "text": "L , R , K = long long",
      "code": "long long L , R , k ;",
      "indent": 1
    },
    {
      "line": 72,
      "text": "set L = R = 0",
      "code": "L = R = 0 ;",
      "indent": 1
    },
    {
      "line": 73,
      "text": "for long long i = 1 to n exclusive",
      "code": "for ( long long i = 1 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 74,
      "text": "if i > R",
      "code": "if ( i > R )",
      "indent": 2
    },
    {
      "line": 75,
      "text": "set L = R = i",
      "code": "L = R = i ;",
      "indent": 3
    },
    {
      "line": 76,
      "text": "while R < n and str [ R - L ] = str [ R ] , incremetn R",
      "code": "while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;",
      "indent": 3
    },
    {
      "line": 77,
      "text": "Z at i = R - L",
      "code": "Z [ i ] = R - L ;",
      "indent": 3
    },
    {
      "line": 78,
      "text": "decrement R",
      "code": "R -- ;",
      "indent": 3
    },
    {
      "line": 79,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 80,
      "text": "set k to i - L",
      "code": "k = i - L ;",
      "indent": 3
    },
    {
      "line": 81,
      "text": "if Z [ k ] < R - i + 1",
      "code": "if ( Z [ k ] < R - i + 1 )",
      "indent": 3
    },
    {
      "line": 82,
      "text": "Z [ i ] = Z [ k ]",
      "code": "Z [ i ] = Z [ k ] ;",
      "indent": 4
    },
    {
      "line": 83,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 84,
      "text": "L = i",
      "code": "L = i ;",
      "indent": 4
    },
    {
      "line": 85,
      "text": "while R < n and str [ R - L ] = str [ R ] , increment R",
      "code": "while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;",
      "indent": 4
    },
    {
      "line": 86,
      "text": "Z [ i ] = R - L",
      "code": "Z [ i ] = R - L ;",
      "indent": 4
    },
    {
      "line": 87,
      "text": "decrement R",
      "code": "R -- ;",
      "indent": 4
    },
    {
      "line": 88,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 89,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 90,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 91,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 92,
      "text": "in long long vector function prefix_function taking string s",
      "code": "vector < long long > prefix_function ( string s )",
      "indent": 0
    },
    {
      "line": 93,
      "text": "n = long long = length of s to long long",
      "code": "long long n = ( long long ) s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 94,
      "text": "pi = long long vector of length n",
      "code": "vector < long long > pi ( n ) ;",
      "indent": 1
    },
    {
      "line": 95,
      "text": "for long long i = 1 to n exclusive",
      "code": "for ( long long i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 96,
      "text": "j = long long = pi [ i - 1 ]",
      "code": "long long j = pi [ i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 97,
      "text": "while j is non zero positive",
      "code": "while ( j > 0 && s [ i ] != s [ j ] ) j = pi [ j - 1 ] ;",
      "indent": 2
    },
    {
      "line": 98,
      "text": "and s [ i ] isn ' t s [ j ] , j = pi [ j - 1 ]",
      "code": "if ( s [ i ] == s [ j ] ) j ++ ;",
      "indent": 2
    },
    {
      "line": 99,
      "text": "set pi [ i ] = j",
      "code": "pi [ i ] = j ;",
      "indent": 2
    },
    {
      "line": 100,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 101,
      "text": "return pi",
      "code": "return pi ;",
      "indent": 1
    },
    {
      "line": 102,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long palidrome ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void sieve ( )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "long long prefix_function ( string s )"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << Bob << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cout << Alice << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        69
      ],
      "mod_code": [
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 70,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        71
      ],
      "mod_code": [
        "long long L , R , K ;"
      ],
      "err_line": 80,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        76
      ],
      "mod_code": [
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 76,
      "err_msg": "‘incremetn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void sieve ( ) { }"
      ],
      "err_line": 47,
      "err_msg": "redefinition of ‘void sieve()’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long functio ( long long a , long long b )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void getZarr ( string Z [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "redefinition of ‘std::__cxx11::string* Z’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "vector < long long > prefix_function ( string s )"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "vector < long long > a [ n ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<long long int>’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] ) , a [ 1 ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ ) { x = gdc ( x , a [ i ] ) ; }"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < n ; i ++ ) { a /= x ] = a [ i ] ; }"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘long long int [n]’ and ‘long long int’ to binary ‘operator/’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << Bob ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cout << Alice ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( a > b ) return gdc % b , b ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "long long modexp ( long long b , long long b , long long m )"
      ],
      "err_line": 40,
      "err_msg": "redefinition of ‘long long int b’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "long long temp = a . modexp ( , b / 2 ) , m ;"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "spf . at = 1 ;"
      ],
      "err_line": 48,
      "err_msg": "request for member ‘at’ in ‘spf’, which is of non-class type ‘long long int [100001]’"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "for ( long long j = i ; j < 100001 ; j ++ ) { j += i ; }"
      ],
      "err_line": 54,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        58
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 59,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "vector < long long ret ;"
      ],
      "err_line": 59,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        61
      ],
      "mod_code": [
        "ret += spf [ x ] ;"
      ],
      "err_line": 61,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<long long int>’ and ‘long long int’)"
    },
    {
      "mod_line": [
        64
      ],
      "mod_code": [
        "while ( ret )"
      ],
      "err_line": 64,
      "err_msg": "could not convert ‘ret’ from ‘std::vector<long long int>’ to ‘bool’"
    },
    {
      "mod_line": [
        66
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b ) ;"
      ],
      "err_line": 67,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        69
      ],
      "mod_code": [
        "void getZarr ( string Z [ ] , string Z [ ] ) ;"
      ],
      "err_line": 69,
      "err_msg": "redefinition of ‘std::__cxx11::string* Z’"
    },
    {
      "mod_line": [
        71
      ],
      "mod_code": [
        "long long int L , R , K ;"
      ],
      "err_line": 80,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        72
      ],
      "mod_code": [
        "int L = 0 ;"
      ],
      "err_line": 72,
      "err_msg": "conflicting declaration ‘int L’"
    },
    {
      "mod_line": [
        76
      ],
      "mod_code": [
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn += R ; }"
      ],
      "err_line": 76,
      "err_msg": "‘incremetn’ was not declared in this scope"
    },
    {
      "mod_line": [
        77
      ],
      "mod_code": [
        "Z [ i ] = \" - \" ;"
      ],
      "err_line": 77,
      "err_msg": "invalid conversion from ‘const char*’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        92
      ],
      "mod_code": [
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 93,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        94
      ],
      "mod_code": [
        "vector < long long pi ( n ) ;"
      ],
      "err_line": 94,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void sieve ( )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palidrome ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        6,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        8,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        14,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        15,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        21,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        29,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        42
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        42,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        42,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        42,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        42,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        42,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        42,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        69
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        69,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        69,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        69,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        71
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        71,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        76
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        5
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        6
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        6
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        15,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        6
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        14,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        15,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void sieve ( )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        14,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        15,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        6,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        8,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        15,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        14,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        15,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        21,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        29,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        42
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        42,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        42,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        42,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        42,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        42,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        42,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        69
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        69,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        69,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        69,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        71
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        71,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        76
      ],
      "mod_code": [
        "long long palidrome ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        8
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        8
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        21,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        21,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        21,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        21,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        21,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        21,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        8
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        21,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        21,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        21,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        21,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        21,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        21,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        21,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        21,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        21,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        21,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        21,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        21,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        6,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        21,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        21,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        21,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        21,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        21,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        21,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        8,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        21,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        21,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        21,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        21,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        21,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        21,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        14,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        21,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        21,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        21,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        21,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        21,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        21,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        15,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        21,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        29,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        42
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        42,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        42,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        42,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        42,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        42,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        42,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        69
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        69,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        69,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        69,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        71
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        71,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        76
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        8
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        14
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        14
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        15,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        14
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        21,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        21,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        21,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        21,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        21,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        21,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        6,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        21,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        21,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        21,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        21,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        21,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        21,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        23,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        23,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        23,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        23,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        23,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        8,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        15,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        21,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        21,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        21,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        21,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        21,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        21,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        23,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        23,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        23,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        23,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        23,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        14,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        21,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        23,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        23,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        23,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        23,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        23,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        15,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        23,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        23,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        23,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        23,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        23,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        29,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        42
      ],
      "mod_code": [
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        42,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        42,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        42,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        42,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        42,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        42,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        69
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        69,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        69,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        69,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        71
      ],
      "mod_code": [
        "void sieve ( )",
        "long long L , R , K ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        71,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        76
      ],
      "mod_code": [
        "void sieve ( )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        14
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        15
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        15
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        23,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        23,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        23,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        23,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        23,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        29,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        29,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        29,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        29,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        6,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        15
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        23,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        23,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        23,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        23,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        23,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        29,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        29,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        29,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        29,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        8,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        15,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        21,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        21,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        21,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        21,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        21,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        21,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        23,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        23,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        23,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        23,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        23,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        29,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        29,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        29,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        29,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        14,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        23,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        23,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        23,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        23,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        23,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        29,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        29,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        29,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        29,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        15,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        23,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        23,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        23,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        23,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        23,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        29,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        29,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        29,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        29,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        21,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        29,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        29,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        29,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        29,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        29,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        42
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        42,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        42,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        42,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        42,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        42,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        42,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        69
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        69,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        69,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        69,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        71
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        71,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        76
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        15
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        21
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        21
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        21
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        23,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        23,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        23,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        23,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        23,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        29,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        29,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        29,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        29,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        42,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        42,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        42,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        8,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        21
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        21
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        21,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        21,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        21,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        21,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        21,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        21,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        23,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        23,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        23,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        23,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        23,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        29,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        29,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        29,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        29,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        42,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        42,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        42,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        14,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        21
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        23,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        23,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        23,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        23,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        23,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        29,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        29,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        29,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        29,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        42,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        42,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        42,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        15,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        23,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        23,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        23,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        23,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        23,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        29,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        29,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        29,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        29,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        42,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        42,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        42,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        21,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        29,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        29,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        29,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        29,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        42,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        42,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        42,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        23,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        42,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        42,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        42,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        29,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        42
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        42,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        42,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        42,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        42,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        42,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        42,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        69
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        69,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        69,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        69,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        71
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        71,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        6,
        76
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        21
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        23
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        21
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        21,
        23
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        21,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        21,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        21,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        21,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        21,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        23
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        23,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        23,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        23,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        23,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        23,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        29,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        29,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        29,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        29,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        42,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        42,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        42,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        69,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        69,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        14,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        21
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        23
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        23
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        23,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        23,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        23,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        23,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        23,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        29,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        29,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        29,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        29,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        42,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        42,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        42,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        69,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        69,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        15,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        23
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        23,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        23,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        23,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        23,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        23,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        29,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        29,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        29,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        29,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        42,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        42,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        42,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        69,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        69,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        21,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        29,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        29,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        29,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        29,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        42,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        42,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        42,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        69,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        69,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        23,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        42,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        42,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        42,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        69,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        69,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        29,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        42
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        42,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        42,
        69,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        42,
        69,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        42,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        42,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        42,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        69
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        69,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        69,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        69,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        71
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long L , R , K ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        71,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        8,
        76
      ],
      "mod_code": [
        "long long prefix_function ( string s )",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        21
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        21,
        23
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        21,
        29
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        21,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        21,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        21,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        21,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        23
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        23,
        29
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        23,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        23,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        23,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        23,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        29
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        29,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        29,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        29,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        29,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        42,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        42,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        42,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        69,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        69,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        71,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        23
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        23,
        29
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        23,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        23,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        23,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        23,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        29
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        29,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        29,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        29,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        29,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        42,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        42,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        42,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        69,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        69,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        71,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        29
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        29,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        29,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        29,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        29,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        42,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        42,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        42,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        69,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        69,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        71,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        23,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        42,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        42,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        42,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        69,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        69,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        71,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        29,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42,
        69,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42,
        69,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42,
        71,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        42,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        69
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        69,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        69,
        71,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        69,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        71
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        71,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        76
      ],
      "mod_code": [
        "long long x = gdc ( a [ 0 ] , a [ 1 ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23,
        29
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23,
        42
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        29
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        29,
        42
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        29,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        29,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        29,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        42
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        42,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        42,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        42,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        69,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        69,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        71,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        29
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        29,
        42
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        29,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        29,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        29,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        42
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        42,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        42,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        42,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        69,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        69,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        71,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        42
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        42,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        42,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        42,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        69,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        69,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        71,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        29,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        42
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        42,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        42,
        69,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        42,
        69,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        42,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        42,
        71,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        42,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        69
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        69,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        69,
        71,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        69,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        71
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        71,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        76
      ],
      "mod_code": [
        "for ( int i = 2 ; i < n ; i ++ ) x = gdc ( x , a [ i ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 15,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        29
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        29,
        42
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        29,
        69
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        29,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        29,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        42
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        42,
        69
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        42,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        42,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        69
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        69,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        69,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        71,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        42
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        42,
        69
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        42,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        42,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        69
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        69,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        69,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        71,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        29,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        42
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        42,
        69
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        42,
        69,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        42,
        69,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        42,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        42,
        71,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        42,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        69
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        69,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        69,
        71,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        69,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        71
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        71,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        76
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 21,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        42
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        42,
        69
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        42,
        71
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        42,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        69
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        69,
        71
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        69,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        71
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        71,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        29,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        42
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        42,
        69
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        42,
        69,
        71
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        42,
        69,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        42,
        71
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        42,
        71,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        42,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        69
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        69,
        71
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        69,
        71,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        69,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        71
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long L , R , K ;"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        71,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        76
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 23,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42,
        69
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42,
        69,
        71
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42,
        69,
        76
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42,
        71
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42,
        71,
        76
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        42,
        76
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        69
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        69,
        71
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        69,
        71,
        76
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        69,
        76
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        71
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        71,
        76
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        76
      ],
      "mod_code": [
        "if ( a > b ) return gdc ( a % b , b ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 29,
      "err_msg": "‘gdc’ was not declared in this scope"
    },
    {
      "mod_line": [
        42,
        69
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        42,
        69,
        71
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        42,
        69,
        71,
        76
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        42,
        69,
        76
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        42,
        71
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        42,
        71,
        76
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        42,
        76
      ],
      "mod_code": [
        "long long temp = a . modexp ( ) , b / 2 , m ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 42,
      "err_msg": "request for member ‘modexp’ in ‘a’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        69,
        71
      ],
      "mod_code": [
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;"
      ],
      "err_line": 70,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        69,
        71,
        76
      ],
      "mod_code": [
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 70,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        69,
        76
      ],
      "mod_code": [
        "void getZarr ( string str [ ] , string Z [ ] ) ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 70,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        71,
        76
      ],
      "mod_code": [
        "long long L , R , K ;",
        "while ( R < n && str [ R - L ] == str [ R ] ) { incremetn ++ ; }"
      ],
      "err_line": 76,
      "err_msg": "‘incremetn’ was not declared in this scope"
    }
  ]
}