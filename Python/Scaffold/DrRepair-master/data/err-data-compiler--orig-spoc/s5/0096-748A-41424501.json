{
  "meta": {
    "index": 96,
    "hitid": "3NBFJK3IOHCNPQ2I7R6Q2L60P0ZGOH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "748A",
    "subid": "41424501"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables m , n and k",
      "code": "int m , n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read n , m and k",
      "code": "while ( cin >> n >> m >> k )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer variables a and b",
      "code": "int a , b ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 )",
      "code": "a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) * m * 2",
      "code": "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) * m * 2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "b = b / 2 + ( b % 2 ? 1 : 0 )",
      "code": "b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print a , \" \" , b , \" \" and ' L ' if k is odd , ' R ' if it is even",
      "code": "cout << a << \" \" << b << \" \" << ( ( k % 2 ) ? ' L ' : ' R ' ) << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a variables b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘variables’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        6,
        4
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        6,
        4,
        5
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        6,
        4,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        6,
        5
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        6,
        5,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4,
        5
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4,
        5,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == k % ' \" || k % \" \" == ' L ' ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        4
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        4,
        5
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        4,
        2
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        2
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        6,
        4,
        5,
        2
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        4,
        2
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        6,
        5,
        2
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "int b = b / 2 + ( b % 2 ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4,
        5
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4,
        5,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "cout << ( it % 2 == \" \" || k % \" \" == b % ' \" || k % \" \" == ' L ' ) ;",
        "while ("
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        4,
        5,
        2
      ],
      "mod_code": [
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "int a = ( k / ( 2 * m ) ) + ( k % ( 2 * m ) ? 1 : 0 ) ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "b = ( k % ( 2 * m ) ) + ( k % ( 2 * m ) ? 0 : 1 ) ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}