{
  "meta": {
    "index": 2774,
    "hitid": "3FTID4TN8LSF5WKLO5C4H49A0EHLYB",
    "workerid": "A326O3VWP8TO8N",
    "probid": "835A",
    "subid": "48917689"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s , v1 , v2 , t1 , t2 = integers",
      "code": "int s , v1 , v2 , t1 , t2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s , v1 , v2 , t1 , t2",
      "code": "cin >> s >> v1 >> v2 >> t1 >> t2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ( ( s * v1 ) + ( t1 * 2 ) ) is greater than ( ( s * v2 ) + ( t2 * 2 ) )",
      "code": "if ( ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * v2 ) + ( t2 * 2 ) ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print Second",
      "code": "cout << \" Second \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if ( ( s * v1 ) + ( t1 * 2 ) ) is less than ( ( s * v2 ) + ( t2 * 2 ) )",
      "code": "else if ( ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print First",
      "code": "cout << \" First \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if ( ( s * v1 ) + ( t1 * 2 ) ) is equal to ( ( s * v2 ) + ( t2 * 2 ) )",
      "code": "else if ( ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * v2 ) + ( t2 * 2 ) ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print Friendship",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << Second << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cout << First << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘First’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘==’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s , v1 , v2 , t1 , t2 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int s’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << Second ;"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cout << First ;"
      ],
      "err_line": 6,
      "err_msg": "‘First’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘==’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << \" Friendship \""
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        7
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "cout << First << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        7
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( ( s * v1 ) + ( t1 * 2 ) ) > ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘>’ token"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        7
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "cout << First << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        5
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        5
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        5
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "cout << Second << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 4,
      "err_msg": "‘Second’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 6,
      "err_msg": "‘First’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "cout << First << endl ;",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) == ( ( s * 2 ) + ( t2 * 2 ) ) )",
        "else if ( ( s * v1 ) + ( t1 * 2 ) ) < ( ( s * v2 ) + ( t2 * 2 ) ) )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<’ token"
    }
  ]
}