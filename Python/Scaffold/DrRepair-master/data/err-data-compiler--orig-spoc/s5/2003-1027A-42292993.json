{
  "meta": {
    "index": 2003,
    "hitid": "3H5TOKO3D9DHO43UCUIVCWN6FIX465",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "1027A",
    "subid": "42292993"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "T = int",
      "code": "int T ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "j = int",
      "code": "int j ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read T",
      "code": "cin >> T ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to T exclusive increment i first",
      "code": "for ( int i = 0 ; i < T ; ++ i )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to half of n increment j first",
      "code": "for ( j = 0 ; j < n / 2 ; ++ j )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if s at j = s at n - j - 1",
      "code": "if ( s [ j ] == s [ n - j - 1 ] )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "go to next iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if s [ j ] + 1 = s [ n - j - 1 ] - 1",
      "code": "else if ( s [ j ] + 1 == s [ n - j - 1 ] - 1 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "go to next iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else if s [ j ] - 1 = s [ n - j - 1 ] - 1",
      "code": "else if ( s [ j ] - 1 == s [ n - j - 1 ] + 1 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "go to next iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 17,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if j = half n",
      "code": "if ( j == n / 2 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        19
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        19,
        14
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        19,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "cout << s << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        19,
        7
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        14
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        14,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )",
        "cout << s << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        14,
        7
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "cout << s << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        8,
        7
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "cout << s << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        7
      ],
      "mod_code": [
        "for ( int j = 0 ; j < n ; j ++ )",
        "if ( s [ j ] == s [ n - j - 1 )",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        19,
        14
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        19,
        14,
        8
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )",
        "cout << s << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        19,
        14,
        7
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        19,
        8
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "cout << s << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        19,
        8,
        7
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "cout << s << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        19,
        7
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "if ( j == n )",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        14,
        8
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )",
        "cout << s << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        14,
        8,
        7
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )",
        "cout << s << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        14,
        7
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "else if ( s [ j ] - 1 == s [ n - j - 1 ] )",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "cout << s << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        8,
        7
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "cout << s << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "if ( s [ j ] == s [ n - j - 1 )",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}