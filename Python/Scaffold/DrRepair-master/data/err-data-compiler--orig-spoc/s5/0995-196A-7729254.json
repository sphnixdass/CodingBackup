{
  "meta": {
    "index": 995,
    "hitid": "3NI0WFPPI9A0PGLTTTVT0TXTXJG069",
    "workerid": "AIWEXPJAU66D9",
    "probid": "196A",
    "subid": "7729254"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "str and ans are strings with ans = \" \"",
      "code": "string str , ans = \" \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integers i , j and n",
      "code": "int i , j , n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create boolean is = false",
      "code": "bool is = false ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare character variable max = ' a '",
      "code": "char max = ' a ' ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "n = length of str",
      "code": "n = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if str [ i ] is greater than max , max = str [ i ]",
      "code": "if ( str [ i ] > max ) { max = str [ i ] ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if str [ i ] = max",
      "code": "if ( str [ i ] == max )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increase ans by max",
      "code": "ans += max ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set value of is to false",
      "code": "is = false ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( j = i + 1 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if str [ j ] = max",
      "code": "if ( str [ j ] == max )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "set is to true",
      "code": "is = true ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if is = true",
      "code": "if ( is )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "set value of i to j - 1",
      "code": "i = j - 1 ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "max = ' a '",
      "code": "max = ' a ' ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( j = i + 1 ; j < n ; j ++ )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if str [ j ] is greater than max , max = str [ j ]",
      "code": "if ( str [ j ] > max ) { max = str [ j ] ; }",
      "indent": 5
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int n = str . length ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string str , str = \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string str’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char * max = ' a ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "* i = j - 1 ;"
      ],
      "err_line": 21,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        14
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        17
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        11
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        17
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        11
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "break the ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "break the ;",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        11
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        11,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        6,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "int n = str . length ( ) ;",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1,
        14,
        17
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        14,
        17,
        11
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        14,
        17,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14,
        11,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "break the ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        17,
        11
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "break the ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        17,
        11,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "break the ;",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "break the ;",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "string str , ans = \" \" ;",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        14,
        17
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        14,
        17,
        11
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        14,
        17,
        13
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        14,
        11
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        14,
        11,
        13
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        14,
        13
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        17,
        11
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "break the ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        17,
        11,
        13
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "break the ;",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        17,
        13
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "break the ;",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        11,
        13
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "int n = str . length ( ) ;",
        "value = false ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        14,
        17,
        11
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        14,
        17,
        11,
        13
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17,
        13
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "break the ;",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        11,
        13
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j < n ; j ++ )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "break the ;",
        "if ( str [ i ] == ' max ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        17,
        11,
        13
      ],
      "mod_code": [
        "break the ;",
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "break the ;",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( str [ i ] == ' max ' )",
        "value = false ;"
      ],
      "err_line": 13,
      "err_msg": "‘value’ was not declared in this scope"
    }
  ]
}