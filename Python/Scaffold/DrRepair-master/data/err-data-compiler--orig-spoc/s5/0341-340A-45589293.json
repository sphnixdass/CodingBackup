{
  "meta": {
    "index": 341,
    "hitid": "3MNJFORX8BYV3G05RS49BU6X8DQF5J",
    "workerid": "A1APYLD4DUK33J",
    "probid": "340A",
    "subid": "45589293"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer gcd with integers a , b as arguments",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a if b is 0 , else gcd ( b , a % b )",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare lcm as integer with integers a , b as arguments",
      "code": "int lcm ( int a , int b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return a / result of run gcd with a , b as arguments * b",
      "code": "return a / gcd ( a , b ) * b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare x , y , a , b as integers",
      "code": "int x , y , a , b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read x and y and a and b",
      "code": "cin >> x >> y >> a >> b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare LCM = run lcm ( x , y )",
      "code": "int LCM = lcm ( x , y ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print ( b / LCM ) - ( ( a - 1 ) / LCM ) , newline",
      "code": "cout << ( b / LCM ) - ( ( a - 1 ) / LCM ) << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        0
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        0,
        1
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        0,
        4
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        0,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        1
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "return ( b == 0 ? a % b : b ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        1,
        4
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        1,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "return ( b == 0 ? a % b : b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        4
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        4,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "cin >> x >> y >> a >> a ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        1
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        1,
        4
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        1,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        4
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int gcd ( int a , int b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        4,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int gcd ( int a , int b ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "return ( b == 0 ? a % b : b ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        1,
        4
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        1,
        4,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        1,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘LCM’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "LCM = lcm ( x , y ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        1
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        1,
        4
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        1,
        3
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        4
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        4,
        3
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        3
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        3
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        1,
        3
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "return ( b == 0 ? a % b : b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        4,
        3
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "cin >> x >> y >> a >> a ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a % b : b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a / gcd ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "return ( b == 0 ? a % b : b ) ;",
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "return ( b == 0 ? a % b : b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "return a / gcd ( a , b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}