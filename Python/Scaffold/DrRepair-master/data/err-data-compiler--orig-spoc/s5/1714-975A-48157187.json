{
  "meta": {
    "index": 1714,
    "hitid": "3Z56AA6EK4UXSUS0IYIRYQ4619JM6J",
    "workerid": "A1AYVATMT88U1W",
    "probid": "975A",
    "subid": "48157187"
  },
  "lines": [
    {
      "line": 0,
      "text": "let choose be a function that accepts integers n , m and returns a long integer value",
      "code": "long long int choose ( long long int n , long long int m )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "the long integer value of ans = 0",
      "code": "long long int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "the long integer value of num = 1",
      "code": "long long int num = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "the long integer value of den = 1",
      "code": "long long int den = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for long integer i = 0 to m exclusive",
      "code": "for ( long long int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "num is equal to num * ( n - i )",
      "code": "num *= ( n - i ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "num is equal to num / ( i + 1 )",
      "code": "num = num / ( i + 1 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return the value of num",
      "code": "return num ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "let isPrime be a function that accepts int n and returns a boolean value",
      "code": "bool isPrime ( int n )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "if n < = 1 , return false",
      "code": "if ( n <= 1 ) return false ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if n < = 3 , return true",
      "code": "if ( n <= 3 ) return true ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if n modulo 2 equals 0 or n modulo 3 equals 0 , return false",
      "code": "if ( n % 2 == 0 || n % 3 == 0 ) return false ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for integer i = 5 , i * i < = n , increment i by 6",
      "code": "for ( int i = 5 ; i * i <= n ; i = i + 6 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if n modulo i equals 0 or n modulo ( i + 2 ) equals 0 , return false",
      "code": "if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 19,
      "text": "let gcd be a function that accepts long long int a , long long int b and returns a long integer value",
      "code": "long long int gcd ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 20,
      "text": "if a equals 0",
      "code": "if ( a == 0 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "return b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "return the value of gcd of b modulo a and a",
      "code": "return gcd ( b % a , a ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "let sortDes be a function that accepts long long int i , long long int j and returns a boolean value",
      "code": "bool sortDes ( long long int i , long long int j )",
      "indent": 0
    },
    {
      "line": 27,
      "text": "return i greater than j",
      "code": "return i > j ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 29,
      "text": "let bits be a function that accepts long long int n and returns a long integer value",
      "code": "long long int bits ( long long int n )",
      "indent": 0
    },
    {
      "line": 30,
      "text": "the long integer value of count = 0",
      "code": "long long int count = 0 ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "while n is not equal to 0",
      "code": "while ( n != 0 )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if n modulo 2 is not equal to 0",
      "code": "if ( n % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "increment count by 1",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 35,
      "text": "semicolumn",
      "code": ";",
      "indent": 3
    },
    {
      "line": 36,
      "text": "divide n by 2",
      "code": "n /= 2 ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 38,
      "text": "return the value of count",
      "code": "return count ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 41,
      "text": "let i , j , k , n , s be long integers with s = 0",
      "code": "long long int i , j , k , n , s = 0 ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "create a set of characters by name t",
      "code": "set < char > t ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "create a set of strings by name h",
      "code": "set < string > h ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "let s1 , s2 be strings",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 47,
      "text": "read s1",
      "code": "cin >> s1 ;",
      "indent": 2
    },
    {
      "line": 48,
      "text": "s2 is equal to space",
      "code": "s2 = \" \" ;",
      "indent": 2
    },
    {
      "line": 49,
      "text": "erase from t",
      "code": "t . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 50,
      "text": "for j = 0 , j is less than length of s1 , increment j by 1 , insert s1 [ j ] into t",
      "code": "for ( j = 0 ; j < s1 . size ( ) ; j ++ ) { t . insert ( s1 [ j ] ) ; }",
      "indent": 2
    },
    {
      "line": 51,
      "text": "set < char > : : iterator itr",
      "code": "set < char > :: iterator itr ;",
      "indent": 2
    },
    {
      "line": 52,
      "text": "for itr is equal to t . begin ( ) , itr is not equal to t . end ( ) , increment itr by 1 , s2 = s2 + * itr",
      "code": "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) { s2 += * itr ; }",
      "indent": 2
    },
    {
      "line": 53,
      "text": "insert s2 into h",
      "code": "h . insert ( s2 ) ;",
      "indent": 2
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 55,
      "text": "print length of h and newline",
      "code": "cout << h . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "t . erase ( ) ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;"
      ],
      "err_line": 51,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 52,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "bool isPrime ( int n ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "long long int gcd ( long long int b , long long int b )"
      ],
      "err_line": 19,
      "err_msg": "redefinition of ‘long long int b’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "bool sortDes ( long long int i , long long int j ) ;"
      ],
      "err_line": 27,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "void bits ( long long int n )"
      ],
      "err_line": 38,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( n modulo 2 != 0 )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘)’ before ‘modulo’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "semicolumn ;"
      ],
      "err_line": 35,
      "err_msg": "‘semicolumn’ was not declared in this scope"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 49,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "set < characters > t ;"
      ],
      "err_line": 43,
      "err_msg": "‘characters’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "set < string > :: h ;"
      ],
      "err_line": 44,
      "err_msg": "‘h’ is not a member of ‘std::set<std::__cxx11::basic_string<char> >’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 47,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "t . erase ( t ) ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase(std::set<char>&)’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "set < char > :: iterator itr = : ;"
      ],
      "err_line": 51,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) { s2 += * * * itr ; }"
      ],
      "err_line": 52,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "h . push ( s2 ) ;"
      ],
      "err_line": 53,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘push’"
    },
    {
      "mod_line": [
        55
      ],
      "mod_code": [
        "cout << h . length ( ) << endl ;"
      ],
      "err_line": 55,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        49,
        50
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        49,
        50,
        51
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        49,
        50,
        51,
        52
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        49,
        50,
        51,
        45
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        50,
        51,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        50,
        52
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        49,
        50,
        52,
        45
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        50,
        52,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        50,
        45
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        50,
        45,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        50,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        51
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        49,
        51,
        52
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        49,
        51,
        52,
        45
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        51,
        52,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        51,
        45
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        51,
        45,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        51,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        52
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 49,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        49,
        52,
        45
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        52,
        45,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        52,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        45
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        45,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        49,
        27
      ],
      "mod_code": [
        "t . erase ( ) ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        50,
        51
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;"
      ],
      "err_line": 51,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        50,
        51,
        52
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 51,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        50,
        51,
        52,
        45
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        50,
        51,
        52,
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        50,
        51,
        45
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        50,
        51,
        45,
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        50,
        51,
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "set < char > :: iterator itr = : . begin ( ) ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        50,
        52
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 52,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        50,
        52,
        45
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        50,
        52,
        45,
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        50,
        52,
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        50,
        45
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        50,
        45,
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        50,
        27
      ],
      "mod_code": [
        "for ( int j = 0 ; j < s1 . length ( ) ; j ++ ) t . insert ( s1 [ j ] , s1 [ j ] ) ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        51,
        52
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;"
      ],
      "err_line": 51,
      "err_msg": "expected primary-expression before ‘:’ token"
    },
    {
      "mod_line": [
        51,
        52,
        45
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        51,
        52,
        45,
        27
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        51,
        52,
        27
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;",
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        51,
        45
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        51,
        45,
        27
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        51,
        27
      ],
      "mod_code": [
        "set < char > :: iterator itr = : . begin ( ) ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        52,
        45
      ],
      "mod_code": [
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;"
      ],
      "err_line": 45,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        52,
        45,
        27
      ],
      "mod_code": [
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        52,
        27
      ],
      "mod_code": [
        "for ( itr = t . begin ( ) ; itr != t . end ( ) ; itr ++ ) s2 += * * * itr ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        45,
        27
      ],
      "mod_code": [
        "strings , s2 ;",
        "if ( i > j )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}