{
  "meta": {
    "index": 248,
    "hitid": "3RIHDBQ1NESDPJCHEH9VVHTW90YMH8",
    "workerid": "AIWEXPJAU66D9",
    "probid": "879A",
    "subid": "48458531"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables n , i and m",
      "code": "int n , i , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integers a and b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read m and b",
      "code": "cin >> m >> b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n exclusive",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if m > = a",
      "code": "if ( m >= a )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set value of m to m + b - ( m - a ) modulo b",
      "code": "m = m + b - ( m - a ) % b ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set value of m to a",
      "code": "m = a ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "* m = a ;"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* m = a ;"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        10,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* m = a ;",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        10,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* m = a ;",
        "while ( cin >> n )",
        "if ( m >= ' a ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        10,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* m = a ;",
        "if ( m >= ' a ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "* m = a ;",
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        3,
        7
      ],
      "mod_code": [
        "* m = a ;",
        "while ( cin >> n )",
        "if ( m >= ' a ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "* m = a ;",
        "if ( m >= ' a ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}