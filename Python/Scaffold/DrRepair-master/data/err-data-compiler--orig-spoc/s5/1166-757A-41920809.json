{
  "meta": {
    "index": 1166,
    "hitid": "3ICOHX7ENC542VE8ZBERCHP6F4ZE0E",
    "workerid": "AIWEXPJAU66D9",
    "probid": "757A",
    "subid": "41920809"
  },
  "lines": [
    {
      "line": 0,
      "text": "str is a new string",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables B , u , l , b , a , s and r",
      "code": "int B , u , l , b , a , s , r ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of str exclusive incrementing i",
      "code": "for ( int i = 0 ; i < str . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if str [ i ] = ' B ' , increment B by one",
      "code": "if ( str [ i ] == ' B ' ) B ++ ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if str [ i ] = ' u ' , increment u",
      "code": "if ( str [ i ] == ' u ' ) u ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if str [ i ] = ' l ' , increment l by one",
      "code": "if ( str [ i ] == ' l ' ) l ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if str [ i ] = ' b ' , increment b",
      "code": "if ( str [ i ] == ' b ' ) b ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if str [ i ] = ' a ' , increment a",
      "code": "if ( str [ i ] == ' a ' ) a ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if str [ i ] = ' s ' , increment s",
      "code": "if ( str [ i ] == ' s ' ) s ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if str [ i ] = ' r ' , increment r by one",
      "code": "if ( str [ i ] == ' r ' ) r ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print min of B and min ( u / 2 , min ( l , min ( a / 2 , min ( s , min ( b and r ) ) ) ) ) to the standard output",
      "code": "cout << min ( B , min ( u / 2 , min ( l , min ( a / 2 , min ( s , min ( b , r ) ) ) ) ) ) << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "invalid operands of types ‘const int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "invalid operands of types ‘const int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        3,
        4
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;",
        "gets ( str ) ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        3,
        4,
        0
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;",
        "gets ( str ) ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        3,
        0
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        4,
        0
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "cout << min ( B , min ( u / 2 , min ( l , min ( b , min ( b , min ( b , r ) ) ) ) ) << endl ;",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        4,
        0
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        0,
        13
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "char str ;",
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        13
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        0,
        13
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "gets ( str ) ;",
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        0,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "char str ;",
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) ; i ++ )",
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "char str ;",
        "cout << min ( B , min ( u / 2 , min ( l , min ( s , min ( b , min ( b , r ) ) ) ) ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    }
  ]
}