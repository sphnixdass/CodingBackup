{
  "meta": {
    "index": 2735,
    "hitid": "3TUOHPJXYHR6GL6ANNX471JHVDDXWR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "43A",
    "subid": "48897314"
  },
  "lines": [
    {
      "line": 0,
      "text": "set constant double PI to acos ( - 1 )",
      "code": "const double PI = acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set constant integer MAX to 2e9 + 7",
      "code": "const int MAX = 2e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create constant long long MOD with value 1e9 + 7",
      "code": "const long long MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "m = map from string to integer",
      "code": "map < string , int > m ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integer called mx = 0",
      "code": "int mx = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "ans is an empty string",
      "code": "string ans = \" \" ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "let s be string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment m [ s ]",
      "code": "m [ s ] ++ ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if m [ s ] is greater than mx",
      "code": "if ( m [ s ] > mx )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set mx to m [ s ]",
      "code": "mx = m [ s ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "ans = s",
      "code": "ans = s ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 21,
      "text": "call function solve",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "map < string , int > :: m ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "solve ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘mx’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int ans = s ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "void solve ( )"
      ],
      "err_line": 22,
      "err_msg": "a function-definition is not allowed here before ‘return’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        15
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "int ans = s ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        6
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        15
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "int ans = s ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        15,
        6
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "int ans = s ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        15,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "int ans = s ;",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        6,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        11,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "cout << s << endl ;",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "if ( m [ s ] ] > mx )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13,
        15
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "if ( m [ s ] ] > mx )",
        "int ans = s ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13,
        15,
        6
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "if ( m [ s ] ] > mx )",
        "int ans = s ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13,
        15,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "if ( m [ s ] ] > mx )",
        "int ans = s ;",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13,
        6
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "if ( m [ s ] ] > mx )",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13,
        6,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "if ( m [ s ] ] > mx )",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        13,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "if ( m [ s ] ] > mx )",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "int ans = s ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        15,
        6
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "int ans = s ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        15,
        6,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "int ans = s ;",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        15,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "int ans = s ;",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "map < string , int > :: m ;",
        "char ans = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ in ‘class std::map<std::__cxx11::basic_string<char>, int>’ does not name a type"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "int ans = s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        6
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "int ans = s ;",
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        8
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "int ans = s ;",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13,
        6
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        13,
        6,
        8
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13,
        8
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( m [ s ] ] > mx )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "cout << s << endl ;",
        "int ans = s ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        11,
        15,
        6
      ],
      "mod_code": [
        "cout << s << endl ;",
        "int ans = s ;",
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘mx’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        15,
        6,
        8
      ],
      "mod_code": [
        "cout << s << endl ;",
        "int ans = s ;",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        15,
        8
      ],
      "mod_code": [
        "cout << s << endl ;",
        "int ans = s ;",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "cout << s << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘mx’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        6,
        8
      ],
      "mod_code": [
        "cout << s << endl ;",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "cout << s << endl ;",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )",
        "int ans = s ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13,
        15,
        6
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )",
        "int ans = s ;",
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13,
        15,
        6,
        8
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )",
        "int ans = s ;",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        15,
        8
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )",
        "int ans = s ;",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )",
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13,
        6,
        8
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "if ( m [ s ] ] > mx )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "int ans = s ;",
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘mx’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        6,
        8
      ],
      "mod_code": [
        "int ans = s ;",
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "int ans = s ;",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "char ans = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    }
  ]
}