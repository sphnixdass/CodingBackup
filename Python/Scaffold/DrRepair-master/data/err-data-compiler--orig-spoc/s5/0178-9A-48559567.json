{
  "meta": {
    "index": 178,
    "hitid": "3D5G8J4N5AYMKFXLS3RBWWFXB8NVTW",
    "workerid": "AIWEXPJAU66D9",
    "probid": "9A",
    "subid": "48559567"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers a and b",
      "code": "int a , b ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define function read that returns boolean",
      "code": "bool read ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "try to read a and b , return false if there is nothing to read",
      "code": "if ( ! ( cin >> a >> b ) ) return false ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "integer function gcd with integer arguments a and b",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "return a if b = 0 , gcd of b and a % b otherwise",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "in the function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "assign value 6 - max of a and b + 1 to the integer e",
      "code": "int e = 6 - max ( a , b ) + 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "assign value 6 to the integer d",
      "code": "int d = 6 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set integer g to gcd of ( e and d",
      "code": "int g = gcd ( e , d ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print e / g , \" / \" , d / g and a new line",
      "code": "cout << e / g << \" / \" << d / g << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "while read returns true , call method solve",
      "code": "while ( read ( ) ) solve ( ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool input ( )"
      ],
      "err_line": 15,
      "err_msg": "‘read’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "solve ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int * g = gcd ( e , d ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << e / g , \" / \" << d / g << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        15
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "while ( true ) { solve ( ) ; }"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        15
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "while ( true ) { solve ( ) ; }"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        9
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "while ( true ) { solve ( ) ; }",
        "int e = 6 - max ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "while ( true ) { solve ( ) ; }",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "return b == 0 ? gcd ( b , a % b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "int e = 6 - max ( a , b + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        9,
        15
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "while ( true ) { solve ( ) ; }"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        9,
        15,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "while ( true ) { solve ( ) ; }",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "while ( true ) { solve ( ) ; }"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        15,
        9
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "while ( true ) { solve ( ) ; }",
        "int e = 6 - max ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        15,
        9,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "while ( true ) { solve ( ) ; }",
        "int e = 6 - max ( a , b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        15,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "while ( true ) { solve ( ) ; }",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "int e = 6 - max ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "int e = 6 - max ( a , b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "return cin >> a >> b >> false ;",
        "solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "ambiguous overload for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘bool’)"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        9,
        15
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "while ( true ) { solve ( ) ; }"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        9,
        15,
        8
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "while ( true ) { solve ( ) ; }",
        "solve ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        9,
        8
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b + 1 ) ;",
        "solve ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "while ( true ) { solve ( ) ; }"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        15,
        9
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "while ( true ) { solve ( ) ; }",
        "int e = 6 - max ( a , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        15,
        9,
        8
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "while ( true ) { solve ( ) ; }",
        "int e = 6 - max ( a , b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        15,
        8
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "while ( true ) { solve ( ) ; }",
        "solve ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        9,
        8
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "int e = 6 - max ( a , b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        15,
        8
      ],
      "mod_code": [
        "int e = 6 - max ( a , b + 1 ) ;",
        "while ( true ) { solve ( ) ; }",
        "solve ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "int e = 6 - max ( a , b + 1 ) ;",
        "solve ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        9,
        8
      ],
      "mod_code": [
        "while ( true ) { solve ( ) ; }",
        "int e = 6 - max ( a , b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "while ( true ) { solve ( ) ; }",
        "solve ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "int e = 6 - max ( a , b ) ;",
        "solve ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    }
  ]
}