{
  "meta": {
    "index": 2167,
    "hitid": "3UEDKCTP9VKL6662GWA3PRCY7FYK71",
    "workerid": "AIWEXPJAU66D9",
    "probid": "745A",
    "subid": "47808957"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let st be a unique set of strings",
      "code": "set < string > st ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string variables s and p",
      "code": "string s , p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read from the input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i from 0 to length of s exclusive incrementing i",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set p to s [ length of s - 1 ]",
      "code": "p = s [ s . length ( ) - 1 ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "remove element at position s . length ( ) - 1 from s",
      "code": "s . erase ( s . length ( ) - 1 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "change s to p + s",
      "code": "s = p + s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if there is no s in st , insert s into st",
      "code": "if ( st . find ( s ) == st . end ( ) ) { st . insert ( s ) ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print length of st",
      "code": "cout << st . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "set < strings > st ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s , s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "cout << st . length ( ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "cout << st . length ( ) << endl ;",
        "string s , s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        6
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        7
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "s += s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        8,
        10,
        6
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "cout << st . length ( ) << endl ;",
        "s . erase ( s . begin ( ) - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        8,
        10,
        6,
        7
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "cout << st . length ( ) << endl ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        8,
        10,
        7
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "cout << st . length ( ) << endl ;",
        "s += s ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "string s , s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        8,
        2,
        6
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        8,
        2,
        6,
        7
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        8,
        2,
        7
      ],
      "mod_code": [
        "if ( st . begin ( ) == st . end ( ) ) { st . insert ( s ) ; }",
        "string s , s ;",
        "s += s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "string s , s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        2,
        6,
        7
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        2,
        6,
        8
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        2,
        7
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "s += s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        2,
        7,
        8
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "s += s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        2,
        8
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "string s , s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "s . erase ( s . begin ( ) - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        10,
        6,
        7
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        10,
        6,
        7,
        8
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        10,
        6,
        8
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "s += s ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<std::__cxx11::basic_string<char> >’ has no member named ‘length’"
    },
    {
      "mod_line": [
        10,
        7,
        8
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "s += s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        8
      ],
      "mod_code": [
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "string s , s ;",
        "s . erase ( s . begin ( ) - 1 ) ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "string s , s ;",
        "s += s ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "string s , s ;",
        "s += s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string s , s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) - 1 ) ;",
        "s += s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) - 1 ) ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "s += s ;",
        "if ( ! st . find ( s ) ) { st . insert ( s ) ; }"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >}’)"
    }
  ]
}