{
  "meta": {
    "index": 2668,
    "hitid": "341H3G5YF082DQ54VYS4XRQO28X0ZQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "16A",
    "subid": "48163869"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create boolean valid with valid = true",
      "code": "bool valid = true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 1 to m exclusive",
      "code": "for ( int j = 1 ; j < m ; ++ j )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ j ] is not s [ j - 1 ]",
      "code": "if ( s [ j ] != s [ j - 1 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set valid to false",
      "code": "valid = false ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create character c with c = s [ 0 ]",
      "code": "char c = s [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ 0 ] is c , set valid to false",
      "code": "if ( s [ 0 ] == c ) { valid = false ; }",
      "indent": 2
    },
    {
      "line": 16,
      "text": "for j = 1 to m and valid exclusive",
      "code": "for ( int j = 1 ; j < m && valid ; ++ j )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if s [ j ] is not s [ j - 1 ]",
      "code": "if ( s [ j ] != s [ j - 1 ] )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "set valid to false",
      "code": "valid = false ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" YES \" if valid is true , else \" NO \" print newline",
      "code": "cout << ( valid ? \" YES \" : \" NO \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "character = s [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        23,
        6,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "for ( int j = 1 ; j <= m ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        23,
        18,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        23,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        23,
        7,
        12
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        6,
        18,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "for ( int j = 1 ; j <= m ; j ++ )",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        6,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "for ( int j = 1 ; j <= m ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        6,
        7,
        12
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "for ( int j = 1 ; j <= m ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        18,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        18,
        7,
        12
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16,
        7,
        12
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m && valid ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        6,
        18,
        7
      ],
      "mod_code": [
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "for ( int j = 1 ; j <= m ; j ++ )",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        6,
        7
      ],
      "mod_code": [
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "for ( int j = 1 ; j <= m ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        6,
        7,
        12
      ],
      "mod_code": [
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "for ( int j = 1 ; j <= m ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        18,
        7
      ],
      "mod_code": [
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        18,
        7,
        12
      ],
      "mod_code": [
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7
      ],
      "mod_code": [
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        7,
        12
      ],
      "mod_code": [
        "cout << ( valid ? \" YES \" : \" YES \" ) << endl ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        18,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m ; j ++ )",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        18,
        7,
        12
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m ; j ++ )",
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "for ( int j = 1 ; j <= m ; j ++ )",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        18,
        7
      ],
      "mod_code": [
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        18,
        7,
        12
      ],
      "mod_code": [
        "bool valid = false ;",
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( s [ j ] ] != s [ j - 1 ] )",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}