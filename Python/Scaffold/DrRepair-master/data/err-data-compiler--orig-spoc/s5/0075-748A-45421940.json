{
  "meta": {
    "index": 75,
    "hitid": "34YWR3PJ284D8V5PUG4J06ADUNG0X4",
    "workerid": "AIWEXPJAU66D9",
    "probid": "748A",
    "subid": "45421940"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer INF = 2e9",
      "code": "const int INF = ( int ) 2e9 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare constant double EPS = 1e - 9",
      "code": "const double EPS = ( double ) 1e-9 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare constant double PI = acos ( - 1 )",
      "code": "const double PI = ( double ) acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare constant long long MOD = 1e9 + 7",
      "code": "const long long MOD = ( long long ) 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "function gcd with integer arguments a and b that returns integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "if a is less than b , swap a and b",
      "code": "if ( a < b ) swap ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a % b = 0 return b",
      "code": "if ( a % b == 0 ) return b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "call function gcd with arguments a % b and b",
      "code": "gcd ( a % b , b ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "boolean function palin with string argument s",
      "code": "bool palin ( string s )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare integer len = length of s",
      "code": "int len = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for integer i = 0 to len / 2 exclusive",
      "code": "for ( int i = 0 ; i < len / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s [ i ] ! = s [ len - 1 - i ] return false",
      "code": "if ( s [ i ] != s [ len - 1 - i ] ) { return false ; }",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "void empty function fast_io",
      "code": "void fast_io ( ) { }",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "create integers n , m , k and temp",
      "code": "int n , m , k , temp ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read n , m and k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "temp = k",
      "code": "temp = k ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "increment temp if temp % 2 is not 0",
      "code": "if ( temp % 2 ) temp ++ ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "divide temp by 2",
      "code": "temp /= 2 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if temp % m = 0",
      "code": "if ( temp % m == 0 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print temp / m and \" \"",
      "code": "cout << temp / m << \" \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ( temp / m ) + 1 and \" \"",
      "code": "cout << ( temp / m ) + 1 << \" \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if temp % m = 0",
      "code": "if ( temp % m == 0 )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print m and \" \"",
      "code": "cout << m << \" \" ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print temp % m and \" \"",
      "code": "cout << temp % m << \" \" ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if k % 2 is not 0",
      "code": "if ( k % 2 )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print \" L \\ n \"",
      "code": "cout << \" L\\n \" ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print \" R \\ n \"",
      "code": "cout << \" R\\n \" ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gcd ( a % b % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int temp = k ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int temp’"
    },
    {
      "mod_line": [
        34,
        19,
        28,
        4
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cin >> n >> m >> n ;",
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        19,
        28,
        9
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cin >> n >> m >> n ;",
        "cout << m << \" \" << endl ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        19,
        4
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cin >> n >> m >> n ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        19,
        4,
        9
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cin >> n >> m >> n ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        19,
        4,
        30
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cin >> n >> m >> n ;",
        "int gcd ( int a , int b ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        19,
        9
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cin >> n >> m >> n ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        19,
        9,
        30
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cin >> n >> m >> n ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        28,
        4
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        28,
        4,
        9
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        28,
        4,
        30
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        28,
        9
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cout << m << \" \" << endl ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        28,
        9,
        30
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "cout << m << \" \" << endl ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        4
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        4,
        9
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        4,
        9,
        30
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        4,
        30
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "int gcd ( int a , int b ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        9
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        9,
        30
      ],
      "mod_code": [
        "cout << \" #\\n \" ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        28,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        28,
        4,
        9
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        28,
        4,
        30
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        28,
        9
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "cout << m << \" \" << endl ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        28,
        9,
        30
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "cout << m << \" \" << endl ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        4,
        9
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        4,
        9,
        30
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        4,
        30
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "int gcd ( int a , int b ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        9
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        9,
        30
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        4
      ],
      "mod_code": [
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        4,
        9
      ],
      "mod_code": [
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        4,
        9,
        30
      ],
      "mod_code": [
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        4,
        30
      ],
      "mod_code": [
        "cout << m << \" \" << endl ;",
        "int gcd ( int a , int b ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        9
      ],
      "mod_code": [
        "cout << m << \" \" << endl ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        9,
        30
      ],
      "mod_code": [
        "cout << m << \" \" << endl ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        9,
        30
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        30
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        30
      ],
      "mod_code": [
        "bool palin ( string s ) ;",
        "cout << temp % m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}