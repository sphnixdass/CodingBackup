{
  "meta": {
    "index": 2214,
    "hitid": "3RTFSSG7T80BGRPL94UGW7OUP6IWLO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "540A",
    "subid": "41943225"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "new integers x , y = 0 , comp1 = 0 , comp2 = 0 , z = 0",
      "code": "int x , y = 0 , comp1 = 0 , comp2 = 0 , z = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare new strings num1 , num2 and num",
      "code": "string num1 , num2 , num ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read the input to x , num1 and num2",
      "code": "cin >> x >> num1 >> num2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a is a new array of integers with x elements",
      "code": "int a [ x ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create new array of integers b with size x",
      "code": "int b [ x ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "in a for loop , change i from 0 to x exclusive",
      "code": "for ( int i = 0 ; i < x ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "assign the new value = num1 [ i ] to num",
      "code": "num = num1 [ i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set a [ i ] to num converted to integer",
      "code": "a [ i ] = atoi ( num . c_str ( ) ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i from 0 to x exclusive",
      "code": "for ( int i = 0 ; i < x ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set num to num2 [ i ]",
      "code": "num = num2 [ i ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set the value of b [ i ] to num converted to integer",
      "code": "b [ i ] = atoi ( num . c_str ( ) ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "in a for loop , change i from 0 to x exclusive",
      "code": "for ( int i = 0 ; i < x ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set comp1 to the absolute value of ( a [ i ] - b [ i ] )",
      "code": "comp1 = abs ( a [ i ] - b [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set comp2 to 0",
      "code": "comp2 = 0 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "assign the new value = a [ i ] to z",
      "code": "z = a [ i ] ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "in the infinite loop",
      "code": "while ( true )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if z is equal to 10",
      "code": "if ( z == 10 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "assign 0 to z",
      "code": "z = 0 ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "else if z = - 1",
      "code": "else if ( z == - 1 )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "assign the new value = 9 to z",
      "code": "z = 9 ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if z = b [ i ]",
      "code": "if ( z == b [ i ] )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if a [ i ] is greater than b [ i ]",
      "code": "if ( a [ i ] > b [ i ] )",
      "indent": 4
    },
    {
      "line": 28,
      "text": "set z to z + 1",
      "code": "z = z + 1 ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 30,
      "text": "change the value of z to z - 1",
      "code": "z = z - 1 ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 32,
      "text": "change comp2 to comp2 + 1",
      "code": "comp2 = comp2 + 1 ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "if comp2 is less than comp1",
      "code": "if ( comp2 < comp1 )",
      "indent": 2
    },
    {
      "line": 36,
      "text": "change y to y + comp2",
      "code": "y = y + comp2 ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 38,
      "text": "assign the new value = y + comp1 to y",
      "code": "y = y + comp1 ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print y to the standard output",
      "code": "cout << y << endl ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int x , y = 0 , comp1 = 0 , comp2 = 0 , comp2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int comp2’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> x >> num1 >> n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int * b [ x ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < x ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a [ i ] = atoi ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int (*)(const char*) throw ()’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < x ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "char num = num2 [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "b [ i ] = atoi ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int (*)(const char*) throw ()’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < x ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else if ( z == 10 )"
      ],
      "err_line": 19,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "if ( z == b [ i ] ) break ;"
      ],
      "err_line": 26,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( a [ i ] ] > b [ i ] )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        8,
        12,
        21
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        8,
        12,
        21,
        5
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int * b [ x ] ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        8,
        12,
        21,
        7
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        21,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        5
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        8,
        12,
        5,
        7
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        5,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        7
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        7,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "b [ i ] = atoi ( num ) ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        8,
        21,
        5
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int * b [ x ] ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        8,
        21,
        5,
        7
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        21,
        5,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int * b [ x ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        21,
        7
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        21,
        7,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        21,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        8,
        5,
        7
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        7,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        5,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "a [ i ] = atoi ( num ) ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        12,
        21,
        5
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int * b [ x ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        12,
        21,
        5,
        7
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        12,
        21,
        5,
        2
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int * b [ x ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        21,
        7
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        12,
        21,
        7,
        2
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        21,
        2
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "else if ( z == ' - ' )",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘int atoi(const char*)’"
    },
    {
      "mod_line": [
        12,
        5,
        7
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        12,
        5,
        7,
        2
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        5,
        2
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "int * b [ x ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        12,
        7,
        2
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "b [ i ] = atoi ( num ) ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        5
      ],
      "mod_code": [
        "else if ( z == ' - ' )",
        "int * b [ x ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        5,
        7
      ],
      "mod_code": [
        "else if ( z == ' - ' )",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        21,
        5,
        7,
        2
      ],
      "mod_code": [
        "else if ( z == ' - ' )",
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        5,
        2
      ],
      "mod_code": [
        "else if ( z == ' - ' )",
        "int * b [ x ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        7
      ],
      "mod_code": [
        "else if ( z == ' - ' )",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        21,
        7,
        2
      ],
      "mod_code": [
        "else if ( z == ' - ' )",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        2
      ],
      "mod_code": [
        "else if ( z == ' - ' )",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘c_str’ in ‘num’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "int * b [ x ] ;",
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "int * b [ x ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "int num = num1 [ i ] ;",
        "int num1 , num2 , num ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}