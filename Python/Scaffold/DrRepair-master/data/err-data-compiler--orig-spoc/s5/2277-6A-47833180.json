{
  "meta": {
    "index": 2277,
    "hitid": "34ZTTGSNJXI4AYA96AGCCQD1JMDQHN",
    "workerid": "AIWEXPJAU66D9",
    "probid": "6A",
    "subid": "47833180"
  },
  "lines": [
    {
      "line": 0,
      "text": "function tr with integer arguments a , b and c",
      "code": "bool tr ( int a , int b , int c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return ( ( a + b > c ) and ( a + c > b ) and ( b + c > a ) )",
      "code": "return ( ( a + b > c ) && ( a + c > b ) && ( b + c > a ) ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "function seg with integer arguments a , b and c",
      "code": "bool seg ( int a , int b , int c )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return ( ( a = b + c ) or ( b = a + c ) or ( c = a + b ) )",
      "code": "return ( ( a == b + c ) || ( b == a + c ) || ( c == a + b ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "normal = false",
      "code": "bool normal = false ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "deg = false",
      "code": "bool deg = false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "a , b , c and d = integers",
      "code": "int a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read a , b , c and d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "normal = normal | | ( tr ( a , b , c ) )",
      "code": "normal = normal || ( tr ( a , b , c ) ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "normal = normal | | ( tr ( a , b , d ) )",
      "code": "normal = normal || ( tr ( a , b , d ) ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "normal = normal | | ( tr ( a , c , d ) )",
      "code": "normal = normal || ( tr ( a , c , d ) ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "normal = normal | | ( tr ( b , c , d ) )",
      "code": "normal = normal || ( tr ( b , c , d ) ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "deg = deg | | ( seg ( a , b , c ) )",
      "code": "deg = deg || ( seg ( a , b , c ) ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "deg = deg | | ( seg ( a , b , d ) )",
      "code": "deg = deg || ( seg ( a , b , d ) ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "deg = deg | | ( seg ( a , c , d ) )",
      "code": "deg = deg || ( seg ( a , c , d ) ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "deg = deg | | ( seg ( b , c , d ) )",
      "code": "deg = deg || ( seg ( b , c , d ) ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if normal is true",
      "code": "if ( normal )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" TRIANGLE \" and a new line",
      "code": "cout << \" TRIANGLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else if deg is true",
      "code": "else if ( deg )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" SEGMENT \" and a new line",
      "code": "cout << \" SEGMENT \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" IMPOSSIBLE \" and a new line",
      "code": "cout << \" IMPOSSIBLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "normal = false ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "deg = false ;"
      ],
      "err_line": 8,
      "err_msg": "‘deg’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘bool seg(int, int, int)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) && ( b + c > a ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "normal = normal | ( tr ( a , b ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘bool tr(int, int, int)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "normal = normal | ( tr ( a , b ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "too few arguments to function ‘bool tr(int, int, int)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "normal = normal | ( tr ( a , c ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘bool tr(int, int, int)’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "normal = normal | ( tr ( b , c ) ) ;"
      ],
      "err_line": 14,
      "err_msg": "too few arguments to function ‘bool tr(int, int, int)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool seg(int, int, int)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "deg = deg | ( seg ( a , c ) ) ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘bool seg(int, int, int)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "deg = deg | ( seg ( b , c ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "too few arguments to function ‘bool seg(int, int, int)’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        4
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        7
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        4
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        7
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        7
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        8,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        7
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "void seg ( int a , int b , int c )",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a = b + c ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        7
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        8,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        8,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "normal = false ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "void tr ( int a , int b , int c )",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        7
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        8
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        8
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        3,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "void seg ( int a , int b , int c )",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        4,
        7,
        8
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        4,
        7,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        4,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "return ( a = b + c ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "normal = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        7,
        8,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "normal = false ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        7,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "deg = false ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        8,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "return ( a + b > c ) && ( b + c > b ) , ( b + c > a ) ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        8
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        15
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = false ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        15
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        15
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "return ( a = b + c ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "normal = false ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        8
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        15
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "normal = false ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        15
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "deg = false ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        15
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "void seg ( int a , int b , int c )",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "return ( a = b + c ) ;",
        "normal = false ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        8
      ],
      "mod_code": [
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        15
      ],
      "mod_code": [
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        15
      ],
      "mod_code": [
        "return ( a = b + c ) ;",
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "return ( a = b + c ) ;",
        "deg = false ;"
      ],
      "err_line": 8,
      "err_msg": "‘deg’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        15
      ],
      "mod_code": [
        "return ( a = b + c ) ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘deg’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "return ( a = b + c ) ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘bool seg(int, int, int)’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "normal = false ;",
        "deg = false ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        15
      ],
      "mod_code": [
        "normal = false ;",
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "normal = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘normal’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "deg = false ;",
        "deg = deg | ( seg ( a , b ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘deg’ was not declared in this scope"
    }
  ]
}