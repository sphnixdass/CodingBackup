{
  "meta": {
    "index": 2008,
    "hitid": "3L1EFR8WWTZE432HUIHQNABZU9E9F9",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "1027A",
    "subid": "42296882"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare can_change taking in chars a and b and returning bool",
      "code": "bool can_change ( char a , char b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a + 1 is equal to b + 1 or a + 1 is equal to b - 1 or a - 1 is equal to b + 1 or a - 1 is equal to b - 1",
      "code": "if ( a + 1 == b + 1 || a + 1 == b - 1 || a - 1 == b + 1 || a - 1 == b - 1 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "make integer c",
      "code": "int c ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while c - - is truthy",
      "code": "while ( c -- )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create int len",
      "code": "int len ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "make string s",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "read len and s",
      "code": "cin >> len >> s ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "create int j = len - 1",
      "code": "int j = len - 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "let bool can = true",
      "code": "bool can = true ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for i = 0 while i is less than len / 2 and can is truthy",
      "code": "for ( int i = 0 ; i < len / 2 && can ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if can_change ( s [ i ] , s [ j ] ) is falsy , set can to false",
      "code": "if ( ! can_change ( s [ i ] , s [ j ] ) ) { can = false ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "subtract 1 from j",
      "code": "j -- ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if can is truthy",
      "code": "if ( can )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "display \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "output \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin . get ( c ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 12,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int * j = len - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        13,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "char len ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        13,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        15,
        16,
        13,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        16,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "char len ;"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        10,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "char len ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘int len’"
    },
    {
      "mod_line": [
        15,
        16,
        10,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "char len ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        16,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        15,
        16,
        12,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        16,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int * j = len - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        13,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int * j = len - 1 ;",
        "char len ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        13,
        10,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int * j = len - 1 ;",
        "char len ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘int len’"
    },
    {
      "mod_line": [
        15,
        13,
        10,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int * j = len - 1 ;",
        "char len ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        13,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int * j = len - 1 ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        15,
        13,
        12,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int * j = len - 1 ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        13,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int * j = len - 1 ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "char len ;"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        10,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "char len ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘int len’"
    },
    {
      "mod_line": [
        15,
        10,
        12,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "char len ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        10,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "char len ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        15,
        12,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < len / 2 ; i ++ )",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        13,
        10
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "char len ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        13,
        10,
        12
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "char len ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘int len’"
    },
    {
      "mod_line": [
        16,
        13,
        10,
        3
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "char len ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13,
        12
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        16,
        13,
        12,
        3
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13,
        3
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int * j = len - 1 ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10,
        12
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "char len ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘int len’"
    },
    {
      "mod_line": [
        16,
        10,
        12,
        3
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "char len ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10,
        3
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "char len ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        16,
        12,
        3
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "if ( can_change ( s [ i ] , s [ j ] ) ) can = false ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "int * j = len - 1 ;",
        "char len ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        10,
        12
      ],
      "mod_code": [
        "int * j = len - 1 ;",
        "char len ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘int len’"
    },
    {
      "mod_line": [
        13,
        10,
        12,
        3
      ],
      "mod_code": [
        "int * j = len - 1 ;",
        "char len ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        10,
        3
      ],
      "mod_code": [
        "int * j = len - 1 ;",
        "char len ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "int * j = len - 1 ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        13,
        12,
        3
      ],
      "mod_code": [
        "int * j = len - 1 ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "int * j = len - 1 ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "char len ;",
        "int len , s ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘int len’"
    },
    {
      "mod_line": [
        10,
        12,
        3
      ],
      "mod_code": [
        "char len ;",
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "char len ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "int len , s ;",
        "else do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}