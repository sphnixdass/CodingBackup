{
  "meta": {
    "index": 906,
    "hitid": "35XW21VSVG8I9A8CPZKFZIL9JTISL1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "213A",
    "subid": "35763854"
  },
  "lines": [
    {
      "line": 0,
      "text": "create 3 by 3 2d array of integers mo with elements { 0 , 1 , 2 } , { 2 , 0 , 1 } , { 1 , 2 , 0 }",
      "code": "const int mo [ 3 ] [ 3 ] = { { 0 , 1 , 2 } , { 2 , 0 , 1 } , { 1 , 2 , 0 } } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create an arrays of integers a , ind and t with 205 elements",
      "code": "int a [ 205 ] , ind [ 205 ] , t [ 205 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create boolean array vis with 205 elements and 2d array G with size 205 by 205",
      "code": "bool vis [ 205 ] , G [ 205 ] [ 205 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integers n , u and ans",
      "code": "int n , u , ans ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "integer function F with int argument x",
      "code": "int F ( int x )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare integers c and f = 0",
      "code": "int c = 0 , f = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "start of the while loop",
      "code": "do",
      "indent": 1
    },
    {
      "line": 7,
      "text": "change f to 0",
      "code": "f = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "start for loop from i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if ind [ i ] is false and vis [ i ] is false and a [ i ] = x",
      "code": "if ( ! ind [ i ] && ! vis [ i ] && a [ i ] == x )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "change vis [ i ] to true",
      "code": "vis [ i ] = true ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increment c by one",
      "code": "c ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "in a for loop , change j from 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if vis [ j ] is false and G [ i ] [ j ] is true , decrement ind [ j ] by one",
      "code": "if ( ! vis [ j ] && G [ i ] [ j ] ) ind [ j ] -- ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "assign 1 to f",
      "code": "f = 1 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if ! = 0 , go back to the start of the loop",
      "code": "while ( f ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "start for loop from i = 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if ind [ i ] is 0 and vis [ i ] is 0 and mo [ x ] [ a [ i ] ] is 1 , return c + 1 + F ( a [ i ] )",
      "code": "if ( ! ind [ i ] && ! vis [ i ] && mo [ x ] [ a [ i ] ] == 1 ) return c + 1 + F ( a [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "in a for loop , change i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ind [ i ] is 0 and vis [ i ] = 0 , return c + 2 + F ( a [ i ] )",
      "code": "if ( ! ind [ i ] && ! vis [ i ] ) return c + 2 + F ( a [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "return c",
      "code": "return c ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 24,
      "text": "read n from the user input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "in a for loop , change i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "read a [ i ] from the user input",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "decrement a [ i ] by one",
      "code": "a [ i ] -- ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "in a for loop , change i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "read user input to t [ i ]",
      "code": "cin >> t [ i ] ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "for j from 0 to t [ i ] exclusive",
      "code": "for ( int j = 0 ; j < t [ i ] ; j ++ )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "read u from the user input",
      "code": "cin >> u ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "set G [ u - 1 ] [ i ] to true",
      "code": "G [ u - 1 ] [ i ] = true ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "assign 0xfffffff to ans",
      "code": "ans = 0xfffffff ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "for integer i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for j from 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "if t [ j ] = 0 and i = a [ j ]",
      "code": "if ( ! t [ j ] && i == a [ j ] )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "set first sizeof ( vis ) bytes at the pointer vis to 0",
      "code": "memset ( vis , 0 , sizeof ( vis ) ) ;",
      "indent": 4
    },
    {
      "line": 41,
      "text": "for k from 0 to n exclusive , assign t [ k ] to ind [ k ]",
      "code": "for ( int k = 0 ; k < n ; k ++ ) ind [ k ] = t [ k ] ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "assign min of F ( i ) and ans to ans",
      "code": "ans = min ( F ( i ) , ans ) ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 45,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 42,
      "err_msg": "no matching function for call to ‘min(int)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 2 , 0 , 1 } , { 1 , 2 , 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 205 ] , ind [ 205 ] ;"
      ],
      "err_line": 30,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long n , u , ans ;"
      ],
      "err_line": 42,
      "err_msg": "no matching function for call to ‘min(int, long long int&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int F ( int x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "vis [ i ] to true ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( ! ! 1 ) continue ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "{ cin >> a [ i ] ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "a [ i ] -= one ;"
      ],
      "err_line": 27,
      "err_msg": "‘one’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "t >> t [ i ] ;"
      ],
      "err_line": 30,
      "err_msg": "invalid operands of types ‘int [205]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( j = 0 ; j < t [ i ] ; j ++ )"
      ],
      "err_line": 31,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "if ( G [ u - 1 ] [ i ] )"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 38,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "memset ( vis ) , sizeof ( vis ) ;"
      ],
      "err_line": 40,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 43,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        6
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        9
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        2,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        9
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        16,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        16,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        18,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        6
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        9
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        9,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        18,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        9
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        16,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        16,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        18,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "while ( 1 )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        16,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        16,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        18,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16,
        18,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        42
      ],
      "mod_code": [
        "int mo [ 3 ] [ 3 ] = { 0 , 1 , 2 } , { 1 , 0 , 1 } , { 1 , 2 , 0 } ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        9
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        16
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        16
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        16
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        16,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        16,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        18,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        9
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        16
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        16
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        16,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        18,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "while ( 1 )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        9,
        16
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        9,
        16,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        9,
        16,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        9,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        9,
        18,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        9,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        18,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        42
      ],
      "mod_code": [
        "int a [ 205 ] , ind , t [ 205 ] ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        16
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        18
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        16
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        16,
        18
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        16,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        18
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        18,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        6,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "while ( 1 )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        9,
        16
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        9,
        16,
        18
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        9,
        16,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        9,
        18
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        9,
        18,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        9,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        16,
        18
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        16,
        18,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        16,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        18,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        2,
        42
      ],
      "mod_code": [
        "bool vis [ 205 ] [ 205 ] , G [ 205 ] ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [205]’"
    },
    {
      "mod_line": [
        6,
        9,
        16
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 16,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        6,
        9,
        16,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 16,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        6,
        9,
        16,
        42
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        6,
        9,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        18,
        42
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        42
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 42,
      "err_msg": "no matching function for call to ‘min(int)’"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 16,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        6,
        16,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 16,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        6,
        16,
        18,
        42
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        6,
        16,
        42
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        18,
        42
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        42
      ],
      "mod_code": [
        "while ( 1 )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 42,
      "err_msg": "no matching function for call to ‘min(int)’"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        16,
        18
      ],
      "mod_code": [
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        16,
        18,
        42
      ],
      "mod_code": [
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        16,
        42
      ],
      "mod_code": [
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        18,
        42
      ],
      "mod_code": [
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        42
      ],
      "mod_code": [
        "if ( ind [ i ] == false && vis [ i ] == false && a [ i ] == false )",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 42,
      "err_msg": "no matching function for call to ‘min(int)’"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        16,
        18,
        42
      ],
      "mod_code": [
        "if ( ! ! ( ! 0 ) ) continue ;",
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        16,
        42
      ],
      "mod_code": [
        "if ( ! ! ( ! 0 ) ) continue ;",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        18,
        42
      ],
      "mod_code": [
        "if ( ind [ i ] == 0 && vis [ i ] [ a [ i ] ] == 0 && mo [ x ] [ a [ i ] ] == 1 ) { return c + 1 + F ( a [ i ] ) ; }",
        "ans = min ( F ( i ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    }
  ]
}