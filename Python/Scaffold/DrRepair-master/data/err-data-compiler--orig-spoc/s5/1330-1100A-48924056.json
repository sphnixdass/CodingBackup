{
  "meta": {
    "index": 1330,
    "hitid": "35O6H0UNLSAB8IM1AIVUQSYP1K5J5O",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "1100A",
    "subid": "48924056"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer maxn = 110",
      "code": "const int maxn = 110 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array a of size maxn",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integers i , j , n , and k",
      "code": "int i , j , n , k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integers e , s , and maxx = - 1",
      "code": "int e , s , maxx = - 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to k exclusive",
      "code": "for ( i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set e to 0",
      "code": "e = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set s to 0",
      "code": "s = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if ( j - i ) modulo k is 0",
      "code": "if ( ( j - i ) % k == 0 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "continue to next loop iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if a [ j ] is equal to 1",
      "code": "if ( a [ j ] == 1 )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "increment e",
      "code": "e ++ ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "else if a [ j ] is equal to - 1",
      "code": "else if ( a [ j ] == - 1 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "increment s",
      "code": "s ++ ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set maxx to the max of maxx and the absolute value of e - s",
      "code": "maxx = max ( maxx , abs ( e - s ) ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print maxx",
      "code": "cout << maxx << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int * a [ maxn ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int i , j , n , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        14
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        12
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        20
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "if ( a [ j ] == ' 1 ' )",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        14,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "if ( a [ j ] == ' 1 ' )",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        12
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "continue continue ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        12,
        20
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        12,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "continue continue ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        20
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        20,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "maxx = max ( e , abs ( e - s ) ) ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        4,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "cin >> n and k ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        14,
        12
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        14,
        12,
        20
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        14,
        12,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        14,
        20
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "if ( a [ j ] == ' 1 ' )",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        14,
        20,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "if ( a [ j ] == ' 1 ' )",
        "maxx = max ( e , abs ( e - s ) ) ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        14,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "if ( a [ j ] == ' 1 ' )",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "continue continue ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        12,
        20
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        12,
        20,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        12,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "continue continue ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        20,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "maxx = max ( e , abs ( e - s ) ) ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int * a [ maxn ] ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        4,
        14,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        4,
        14,
        12,
        20
      ],
      "mod_code": [
        "cin >> n and k ;",
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        4,
        14,
        12,
        16
      ],
      "mod_code": [
        "cin >> n and k ;",
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        4,
        12,
        20
      ],
      "mod_code": [
        "cin >> n and k ;",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        4,
        12,
        20,
        16
      ],
      "mod_code": [
        "cin >> n and k ;",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        4,
        12,
        16
      ],
      "mod_code": [
        "cin >> n and k ;",
        "continue continue ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        14,
        12,
        20
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        14,
        12,
        20,
        16
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        14,
        12,
        16
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "continue continue ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        12,
        20,
        16
      ],
      "mod_code": [
        "continue continue ;",
        "maxx = max ( e , abs ( e - s ) ) ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "continue continue ;",
        "else if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    }
  ]
}