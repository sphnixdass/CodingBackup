{
  "meta": {
    "index": 339,
    "hitid": "3L1EFR8WWTZE432HUIHQNABZU99F9A",
    "workerid": "A1AYVATMT88U1W",
    "probid": "340A",
    "subid": "43980524"
  },
  "lines": [
    {
      "line": 0,
      "text": "let x , y , a , b be integers",
      "code": "int x , y , a , b ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let ans be a integer",
      "code": "int ans ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "it is a function which returns Greatest Common Divisor of two integers k , l",
      "code": "int GCD ( int k , int l )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if l is equal to 0",
      "code": "if ( l == 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return the value of k",
      "code": "return k ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return the Greatest Common Divisor of l , k modulo l",
      "code": "return GCD ( l , k % l ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "it is a function which returns Least Common Multiple of two integers m , n",
      "code": "int LCM ( int m , int n )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "return the value of ( m * n ) / Greatest Common Divisor of m , n",
      "code": "return ( m * n ) / GCD ( m , n ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "ans is equal to 0",
      "code": "ans = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read x , y , a , b",
      "code": "cin >> x >> y >> a >> b ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "let kpk be a integer",
      "code": "int kpk ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "kpk is equal to Least Common Multiple of x , y",
      "code": "kpk = LCM ( x , y ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "ans is equal to floor ( b / kpk ) - floor ( ( a - 1 ) / kpk )",
      "code": "ans = floor ( b / kpk ) - floor ( ( a - 1 ) / kpk ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "void it ( int m , int n , int n )"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 9,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘Least’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "void it ( int k , int l , int l )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "Least ( m + m ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return ( m * n ) / Greatest * Divisor ( m , n ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "kpk = Least * Multiple ( x , y ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘Least’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Greatest ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Greatest ( l , k % l ) ;",
        "void it ( int m , int n , int n )"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        9
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Greatest ( l , k % l ) ;",
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        15
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Greatest ( l , k % l ) ;",
        "void it ( int m , int n , int n )",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Greatest ( l , k % l ) ;",
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        15
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Greatest ( l , k % l ) ;",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        15
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Greatest ( l , k % l ) ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "void it ( int m , int n , int n )"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        15
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        8,
        15
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "void it ( int m , int n , int n )",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        8,
        15,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "void it ( int m , int n , int n )",
        "kpk = Least ( x , y ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "void it ( int m , int n , int n )",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        9,
        15
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        9,
        15,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return ( m * n ) / Greatest ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        15,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "kpk = Least ( x , y ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "Greatest = Divisor ( k , l ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘Greatest’ does not name a type"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;",
        "void it ( int m , int n , int n )"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;",
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        15
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;",
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        15
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;",
        "void it ( int m , int n , int n )",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;",
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        15
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "return Greatest ( l , k % l ) ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        8,
        9,
        15
      ],
      "mod_code": [
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        8,
        9,
        15,
        6
      ],
      "mod_code": [
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        6
      ],
      "mod_code": [
        "void it ( int m , int n , int n )",
        "return ( m * n ) / Greatest ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "void it ( int m , int n , int n )",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        8,
        15,
        6
      ],
      "mod_code": [
        "void it ( int m , int n , int n )",
        "kpk = Least ( x , y ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "void it ( int m , int n , int n )",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘Greatest’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        6
      ],
      "mod_code": [
        "return ( m * n ) / Greatest ;",
        "kpk = Least ( x , y ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "return ( m * n ) / Greatest ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "kpk = Least ( x , y ) ;",
        "return Divisor ( l , k % l ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘Divisor’ was not declared in this scope"
    }
  ]
}