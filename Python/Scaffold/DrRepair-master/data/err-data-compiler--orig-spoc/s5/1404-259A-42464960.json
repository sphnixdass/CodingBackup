{
  "meta": {
    "index": 1404,
    "hitid": "38G0E1M85MZ1KSCAS8HL1S1ZVOAVU8",
    "workerid": "AIWEXPJAU66D9",
    "probid": "259A",
    "subid": "42464960"
  },
  "lines": [
    {
      "line": 0,
      "text": "ch is a boolean function with string argument x",
      "code": "bool ch ( string x )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( int i = 0 ; i + 1 < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return true if x [ i ] = x [ i + 1 ]",
      "code": "if ( x [ i ] == x [ i + 1 ] ) return true ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "new boolean ok = 1",
      "code": "bool ok = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "x is a new string variable",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to 8 exclusive incrementing i",
      "code": "for ( int i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create new integers w and b = 0",
      "code": "int w = 0 , b = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read x from the user input",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "start for loop from j = 0 to 8 exclusive",
      "code": "for ( int j = 0 ; j < 8 ; j ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if x [ j ] is equal to ' B '",
      "code": "if ( x [ j ] == ' B ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment b",
      "code": "b ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment w by one",
      "code": "w ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if w ! = b or ch ( x ) returned true",
      "code": "if ( w != b || ch ( x ) )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set ok to 0",
      "code": "ok = 0 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" YES \\ n \" if ok is not 0 , or \" NO \\ n \" otherwise",
      "code": "cout << ( ok ? \" YES\\n \" : \" NO\\n \" ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool ch ( string x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int x ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int x ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        12
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        7
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "int x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        17
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "int ok = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        7
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "int x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        7,
        17
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "int x ;",
        "int ok = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        7,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "int x ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        17
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "int ok = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        17,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int w = 0 , w = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "if ( x [ j ] ] == ' B ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        7
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "if ( x [ j ] ] == ' B ' )",
        "int x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        7,
        17
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "if ( x [ j ] ] == ' B ' )",
        "int x ;",
        "int ok = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        7,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "if ( x [ j ] ] == ' B ' )",
        "int x ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        17
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "if ( x [ j ] ] == ' B ' )",
        "int ok = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        17,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "if ( x [ j ] ] == ' B ' )",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "if ( x [ j ] ] == ' B ' )",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int x ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        17
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int x ;",
        "int ok = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        17,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int x ;",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int x ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int ok = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "bool ch ( string x ) ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        9,
        12,
        7
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "int x ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        9,
        12,
        7,
        17
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "int x ;",
        "int ok = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        9,
        12,
        7,
        6
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "int x ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        17
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "int ok = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        9,
        12,
        17,
        6
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        6
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "if ( x [ j ] ] == ' B ' )",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "int x ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        9,
        7,
        17
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "int x ;",
        "int ok = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        9,
        7,
        17,
        6
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "int x ;",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7,
        6
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "int x ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "int ok = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int w’"
    },
    {
      "mod_line": [
        9,
        17,
        6
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "int w = 0 , w = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )",
        "int x ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        17
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )",
        "int x ;",
        "int ok = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        17,
        6
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )",
        "int x ;",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7,
        6
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )",
        "int x ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )",
        "int ok = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        17,
        6
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "if ( x [ j ] ] == ' B ' )",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "int x ;",
        "int ok = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        6
      ],
      "mod_code": [
        "int x ;",
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "int x ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        6
      ],
      "mod_code": [
        "int ok = 0 ;",
        "bool * ok = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    }
  ]
}