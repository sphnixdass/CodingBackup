{
  "meta": {
    "index": 2269,
    "hitid": "33EEIIWHK719SZ5TBZXGRR4AR1OVQI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "6A",
    "subid": "42274460"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "int i , int array a of size 11111",
      "code": "int i , a [ 11111 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "bool f",
      "code": "bool f ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 1 to 4 inclusive read a [ i ]",
      "code": "for ( i = 1 ; i <= 4 ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "sort array a from index 1 to 5",
      "code": "sort ( a + 1 , a + 5 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set f to false",
      "code": "f = false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ 1 ] + a [ 2 ] > a [ 3 ] & & f is false",
      "code": "if ( a [ 1 ] + a [ 2 ] > a [ 3 ] && f == false )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" TRIANGLE \" and a new line",
      "code": "cout << \" TRIANGLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set value of f to true",
      "code": "f = true ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if a [ 1 ] + a [ 2 ] > a [ 4 ] & & f is false",
      "code": "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f == false )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" TRIANGLE \" and a new line",
      "code": "cout << \" TRIANGLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set value of f to true",
      "code": "f = true ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if a [ 2 ] + a [ 3 ] > a [ 4 ] and f is false",
      "code": "if ( a [ 2 ] + a [ 3 ] > a [ 4 ] && f == false )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" TRIANGLE \" and a new line",
      "code": "cout << \" TRIANGLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "f = true",
      "code": "f = true ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if a [ 1 ] + a [ 2 ] = a [ 3 ] & & f is false",
      "code": "if ( a [ 1 ] + a [ 2 ] == a [ 3 ] && f == false )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" SEGMENT \" and a new line",
      "code": "cout << \" SEGMENT \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set f to true",
      "code": "f = true ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if a [ 1 ] + a [ 2 ] = a [ 4 ] & & f is false",
      "code": "if ( a [ 1 ] + a [ 2 ] == a [ 4 ] && f == false )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" SEGMENT \" and a new line",
      "code": "cout << \" SEGMENT \" << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set value of f to true",
      "code": "f = true ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if a [ 2 ] + a [ 3 ] = a [ 4 ] and f is false",
      "code": "if ( a [ 2 ] + a [ 3 ] == a [ 4 ] && f == false )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print \" SEGMENT \" and a new line",
      "code": "cout << \" SEGMENT \" << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set f to true",
      "code": "f = true ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if f is false print \" IMPOSSIBLE \" and a new line",
      "code": "if ( f == false ) cout << \" IMPOSSIBLE \" << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "sort ( a from 1 , a + 5 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘from’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool f = false ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘bool f’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] && f [ 4 ] && f == false )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        30,
        10,
        2
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        30,
        10,
        18
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        30,
        2
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        30,
        2,
        18
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        30,
        18
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        10,
        2
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        10,
        2,
        18
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        10,
        2,
        30
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        10,
        18
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        10,
        18,
        30
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "bool f = true ;",
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        2,
        18
      ],
      "mod_code": [
        "bool f = true ;",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        2,
        18,
        30
      ],
      "mod_code": [
        "bool f = true ;",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        2,
        30
      ],
      "mod_code": [
        "bool f = true ;",
        "bool f ( )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        18,
        30
      ],
      "mod_code": [
        "bool f = true ;",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        30,
        10,
        2
      ],
      "mod_code": [
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        30,
        10,
        2,
        18
      ],
      "mod_code": [
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        30,
        10,
        18
      ],
      "mod_code": [
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        30,
        2
      ],
      "mod_code": [
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        30,
        2,
        18
      ],
      "mod_code": [
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        30,
        18
      ],
      "mod_code": [
        "if ( f ) cout << \" IMPOSSIBLE \" << endl ;",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        10,
        2,
        18
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        10,
        2,
        18,
        30
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        10,
        2,
        30
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "bool f ( )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        18,
        30
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] > a [ 4 ] && f )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        2,
        18,
        30
      ],
      "mod_code": [
        "bool f ( )",
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        2,
        30
      ],
      "mod_code": [
        "bool f ( )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        18,
        30
      ],
      "mod_code": [
        "if ( a [ 1 ] + a [ 2 ] && f [ 3 ] && f == false )",
        "if ( f ) { cout << \" IMPOSSIBLE \" << endl ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    }
  ]
}