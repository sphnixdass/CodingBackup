{
  "meta": {
    "index": 928,
    "hitid": "3FW4EL5A3LIJ3P56LEN4T49WFZV22M",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "106A",
    "subid": "41149396"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare big taking in chars m and n and returning char",
      "code": "char big ( char m , char n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let char array a containing { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' T ' , ' J ' , ' Q ' , ' K ' , ' A ' }",
      "code": "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' T ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create ints a_pos and b_pos",
      "code": "int a_pos , b_pos ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 9 exclusive",
      "code": "for ( int i = 0 ; i < 9 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if m is equal to a [ i ] , set a_pos to i",
      "code": "if ( m == a [ i ] ) a_pos = i ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = 0 to 9 exclusive",
      "code": "for ( int i = 0 ; i < 9 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if n is equal to a [ i ] , set b_pos to i",
      "code": "if ( n == a [ i ] ) b_pos = i ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a_pos is greater than b_pos",
      "code": "if ( a_pos > b_pos )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return ' a '",
      "code": "return ' a ' ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return ' b '",
      "code": "return ' b ' ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "create char tramp",
      "code": "char tramp ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read tramp",
      "code": "cin >> tramp ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "let strings a and b",
      "code": "string a , b ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if a [ 1 ] is equal to tramp and b [ 1 ] is not equal to tramp",
      "code": "if ( a [ 1 ] == tramp && b [ 1 ] != tramp )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if a [ 1 ] is equal to b [ 1 ]",
      "code": "if ( a [ 1 ] == b [ 1 ] )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "create char great = big ( a [ 0 ] , b [ 0 ] )",
      "code": "char great = big ( a [ 0 ] , b [ 0 ] ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if great is equal to ' a '",
      "code": "if ( great == ' a ' )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char big ( char m , char n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 9 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 9 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return ' a ' ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "return ' b ' ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "strings = a ;"
      ],
      "err_line": 15,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( a [ 1 ] ] == b [ 1 ] )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else if ( great == ' a ' )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        22,
        10
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        15
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "strings = a ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        15,
        1
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        15,
        9
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "strings = a ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        15,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "strings = a ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        1
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        1,
        9
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        1,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        9
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        9,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "else do",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        10,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "return ' b ' ] ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22,
        15
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "strings = a ;"
      ],
      "err_line": 15,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        15,
        1
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;"
      ],
      "err_line": 15,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        15,
        1,
        9
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        15,
        1,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        15,
        9
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "strings = a ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        15,
        9,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "strings = a ;",
        "else do",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        15,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "strings = a ;",
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        1
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        1,
        9
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        1,
        9,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        1,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        9
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        9,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "else do",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        13
      ],
      "mod_code": [
        "char * great = big ( a [ 0 ] , b [ 0 ] ) ;",
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "strings = a ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        15,
        1
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        15,
        1,
        9
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        15,
        1,
        13
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        15,
        9
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "strings = a ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        15,
        9,
        13
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "strings = a ;",
        "else do",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        15,
        13
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "strings = a ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        1,
        9
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        1,
        9,
        13
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        1,
        13
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "else do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        9,
        13
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "else do",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "return ' b ' ] ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;"
      ],
      "err_line": 15,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        1,
        9
      ],
      "mod_code": [
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        1,
        9,
        13
      ],
      "mod_code": [
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        1,
        13
      ],
      "mod_code": [
        "strings = a ;",
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        9
      ],
      "mod_code": [
        "strings = a ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        9,
        13
      ],
      "mod_code": [
        "strings = a ;",
        "else do",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "strings = a ;",
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        9,
        13
      ],
      "mod_code": [
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "else do",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "char a [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 8 ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘tramp’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "else do",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}