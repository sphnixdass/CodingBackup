{
  "meta": {
    "index": 378,
    "hitid": "324N5FAHSX5NHW7YYUDJV5S1TXBVKA",
    "workerid": "A1APYLD4DUK33J",
    "probid": "703A",
    "subid": "46765079"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , cp , mp , m , c",
      "code": "int n , cp , mp , m , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let mp be cp be 0",
      "code": "mp = cp = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while decrement n is true",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read m and c",
      "code": "cin >> m >> c ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if m is greater than c",
      "code": "if ( m > c )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment mp",
      "code": "mp ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if m is less than c",
      "code": "else if ( m < c )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment cp",
      "code": "cp ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if mp is greater than cp",
      "code": "if ( mp > cp )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" Mishka \" and newline",
      "code": "cout << \" Mishka \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if mp is less than cp",
      "code": "else if ( mp < cp )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" Chris \" and newline",
      "code": "cout << \" Chris \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" Friendship is magic ! ^ ^ \" , newline",
      "code": "cout << \" Friendship is magic!^^ \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        11,
        13,
        3
      ],
      "mod_code": [
        "cout << \" Friendship \" << endl ;",
        "if ( mp >= cp )",
        "else if ( mp <= cp )",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        11,
        3
      ],
      "mod_code": [
        "cout << \" Friendship \" << endl ;",
        "if ( mp >= cp )",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        11,
        3,
        2
      ],
      "mod_code": [
        "cout << \" Friendship \" << endl ;",
        "if ( mp >= cp )",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        13,
        3
      ],
      "mod_code": [
        "cout << \" Friendship \" << endl ;",
        "else if ( mp <= cp )",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        13,
        3,
        2
      ],
      "mod_code": [
        "cout << \" Friendship \" << endl ;",
        "else if ( mp <= cp )",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "cout << \" Friendship \" << endl ;",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        3,
        2
      ],
      "mod_code": [
        "cout << \" Friendship \" << endl ;",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        11,
        13,
        16,
        3
      ],
      "mod_code": [
        "if ( mp >= cp )",
        "else if ( mp <= cp )",
        "cout << \" back\\n \" ;",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        11,
        13,
        3
      ],
      "mod_code": [
        "if ( mp >= cp )",
        "else if ( mp <= cp )",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        11,
        13,
        3,
        2
      ],
      "mod_code": [
        "if ( mp >= cp )",
        "else if ( mp <= cp )",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        11,
        16,
        3
      ],
      "mod_code": [
        "if ( mp >= cp )",
        "cout << \" back\\n \" ;",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        11,
        16,
        3,
        2
      ],
      "mod_code": [
        "if ( mp >= cp )",
        "cout << \" back\\n \" ;",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "if ( mp >= cp )",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        11,
        3,
        2
      ],
      "mod_code": [
        "if ( mp >= cp )",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        16,
        3
      ],
      "mod_code": [
        "else if ( mp <= cp )",
        "cout << \" back\\n \" ;",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        16,
        3,
        2
      ],
      "mod_code": [
        "else if ( mp <= cp )",
        "cout << \" back\\n \" ;",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "else if ( mp <= cp )",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        3,
        2
      ],
      "mod_code": [
        "else if ( mp <= cp )",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "cout << \" back\\n \" ;",
        "mp = 0 = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        3,
        2
      ],
      "mod_code": [
        "cout << \" back\\n \" ;",
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "mp = 0 = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}