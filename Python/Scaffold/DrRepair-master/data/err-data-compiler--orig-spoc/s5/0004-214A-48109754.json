{
  "meta": {
    "index": 4,
    "hitid": "34KYK9TV2R26W1M0YMVLLFP47Z9SBJ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "214A",
    "subid": "48109754"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new int variables n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m from the user input",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create new integer called cnt with value 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i from 0 to n inclusive incrementing i",
      "code": "for ( int i = 0 ; i * i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "new integer variable k = n - i * i",
      "code": "int k = n - i * i ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment cnt by one if k squared + i = m",
      "code": "if ( k * k + i == m ) { cnt ++ ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print cnt and ' \\ n '",
      "code": "cout << cnt << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n declare m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int cnt create 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n declare m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n declare m ;",
        "int cnt create 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n declare m ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n declare m ;",
        "int cnt create 0 ;",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n declare m ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        4,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n declare m ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n declare m ;",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int cnt create 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        3,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        3,
        4,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        3,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int cnt create 0 ;",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt += m ;",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n declare m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n declare m ;",
        "int cnt create 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n declare m ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n declare m ;",
        "int cnt create 0 ;",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n declare m ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        4,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n declare m ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n declare m ;",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int cnt create 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        3,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        3,
        4,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        3,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int cnt create 0 ;",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( k + i == m ) cnt ++ ;",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n declare m ;",
        "int cnt create 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n declare m ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        2
      ],
      "mod_code": [
        "int n declare m ;",
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "int n declare m ;",
        "int cnt create 0 ;",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n declare m ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "int n declare m ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n declare m ;",
        "int n >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "int cnt create 0 ;",
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int cnt create 0 ;",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i <= n ; i ++ )",
        "int n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    }
  ]
}