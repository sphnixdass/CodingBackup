{
  "meta": {
    "index": 1780,
    "hitid": "3B623HUYJ4KNU3OTVABBUDZ3ZTN8SZ",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "87A",
    "subid": "48993547"
  },
  "lines": [
    {
      "line": 0,
      "text": "a , b , lcm = long long",
      "code": "long long a , b , lcm ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in function LCM taking long long a , long long b and returning long long",
      "code": "long long LCM ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return ( a * b ) / __gcd of a , b",
      "code": "return ( a * b ) / __gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read a then b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set lcm to LCM of a , b",
      "code": "lcm = LCM ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a < b",
      "code": "if ( a < b )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set a to lcm / a - 1 then set b to lcm / b",
      "code": "a = lcm / a - 1 , b = lcm / b ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set a to lcm / a then set b to lcm / b - 1",
      "code": "a = lcm / a , b = lcm / b - 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if a > b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" Dasha \"",
      "code": "cout << \" Dasha \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if a < b",
      "code": "else if ( a < b )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" Masha \"",
      "code": "cout << \" Masha \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" Equal \"",
      "code": "cout << \" Equal \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        16
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        16,
        13
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "cout << \" Equal \" ;",
        "else if ( a < ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        16,
        14
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "cout << \" Equal \" ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        16,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "cout << \" Equal \" ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        13
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "else if ( a < ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        14
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "else if ( a < ' b ' )",
        "cout << \" Masha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "else if ( a < ' b ' )",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "cout << \" Masha \" ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        8,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "int a = lcm / a - 1 , b = lcm / b ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Equal \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        16,
        13
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Equal \" ;",
        "else if ( a < ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        16,
        13,
        14
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Equal \" ;",
        "else if ( a < ' b ' )",
        "cout << \" Masha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        16,
        13,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Equal \" ;",
        "else if ( a < ' b ' )",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        16,
        14
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Equal \" ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        16,
        14,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Equal \" ;",
        "cout << \" Masha \" ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        16,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Equal \" ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "else if ( a < ' b ' )"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        13,
        14
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "else if ( a < ' b ' )",
        "cout << \" Masha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "else if ( a < ' b ' )",
        "cout << \" Masha \" ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        13,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "else if ( a < ' b ' )",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Masha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        14,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Masha \" ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "long long void LCM ( long long a , long long b )",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘long long’ invalid for ‘LCM’"
    }
  ]
}