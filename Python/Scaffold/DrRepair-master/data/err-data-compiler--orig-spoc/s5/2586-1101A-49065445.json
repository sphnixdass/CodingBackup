{
  "meta": {
    "index": 2586,
    "hitid": "32LAQ1JNT9JM708LNDH60ADEXGVTUG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1101A",
    "subid": "49065445"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and ans",
      "code": "int n , ans ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare doubles l , r and d",
      "code": "double l , r , d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "decrement n in a loop while n > 0",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read l , r and d",
      "code": "cin >> l >> r >> d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if l is greater than d",
      "code": "if ( l > d )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign value of d to ans",
      "code": "ans = d ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "ans = ( ( ( r + 1 ) / d ) rounded up ) * d",
      "code": "ans = ceil ( ( r + 1 ) / d ) * d ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print ans and \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4,
        5,
        9
      ],
      "mod_code": [
        "cout << ans << \" \\0 \" ;",
        "while ( n -- ) n -- ;",
        "cin >> l >> r >> n ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4,
        9
      ],
      "mod_code": [
        "cout << ans << \" \\0 \" ;",
        "while ( n -- ) n -- ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4,
        9,
        2
      ],
      "mod_code": [
        "cout << ans << \" \\0 \" ;",
        "while ( n -- ) n -- ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;",
        "long long l , r , d ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        5,
        9
      ],
      "mod_code": [
        "cout << ans << \" \\0 \" ;",
        "cin >> l >> r >> n ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        5,
        9,
        2
      ],
      "mod_code": [
        "cout << ans << \" \\0 \" ;",
        "cin >> l >> r >> n ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;",
        "long long l , r , d ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "cout << ans << \" \\0 \" ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        9,
        2
      ],
      "mod_code": [
        "cout << ans << \" \\0 \" ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;",
        "long long l , r , d ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "while ( n -- ) n -- ;",
        "cin >> l >> r >> n ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        2
      ],
      "mod_code": [
        "while ( n -- ) n -- ;",
        "cin >> l >> r >> n ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;",
        "long long l , r , d ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( n -- ) n -- ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        9,
        2
      ],
      "mod_code": [
        "while ( n -- ) n -- ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;",
        "long long l , r , d ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "cin >> l >> r >> n ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        9,
        2
      ],
      "mod_code": [
        "cin >> l >> r >> n ;",
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;",
        "long long l , r , d ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "for ( int ans = ceil ( ( r + 1 ) / d ) * d ) ;",
        "long long l , r , d ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}