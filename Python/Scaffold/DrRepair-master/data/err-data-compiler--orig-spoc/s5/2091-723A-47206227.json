{
  "meta": {
    "index": 2091,
    "hitid": "3MQY1YVHS3EDR25247GFUXC095AB2Z",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "723A",
    "subid": "47206227"
  },
  "lines": [
    {
      "line": 0,
      "text": "N = const integer with N = 3",
      "code": "const int N = 3 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function distance that takes integer a , b , c and returns integer",
      "code": "int distance ( int a , int b , int c ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n1 , n2 , n3 = integers",
      "code": "int n1 , n2 , n3 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while read n1 , n2 , n3 , print distance ( n1 , n2 , n3 )",
      "code": "while ( cin >> n1 >> n2 >> n3 ) cout << distance ( n1 , n2 , n3 ) << endl ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "in the function distance that takes integer a , b , c and returns integer",
      "code": "int distance ( int a , int b , int c )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "if ( ( a > = b ) and ( a < = c ) ) , return abs ( a - b ) + abs ( a - c )",
      "code": "if ( ( a >= b ) && ( a <= c ) ) return abs ( a - b ) + abs ( a - c ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ( ( a > = c ) and ( a < = b ) ) , return abs ( a - b ) + abs ( a - c )",
      "code": "if ( ( a >= c ) && ( a <= b ) ) return abs ( a - b ) + abs ( a - c ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( ( b > = a ) and ( b < = c ) ) , return abs ( b - a ) + abs ( b - c )",
      "code": "if ( ( b >= a ) && ( b <= c ) ) return abs ( b - a ) + abs ( b - c ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ( ( b > = c ) and ( b < = a ) ) , return abs ( b - a ) + abs ( b - c )",
      "code": "if ( ( b >= c ) && ( b <= a ) ) return abs ( b - a ) + abs ( b - c ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if ( ( c > = b ) and ( c < = a ) ) , return abs ( c - a ) + abs ( c - b )",
      "code": "if ( ( c >= b ) && ( c <= a ) ) return abs ( c - a ) + abs ( c - b ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ( ( c > = a ) and ( c < = b ) ) , return abs ( c - a ) + abs ( c - b )",
      "code": "if ( ( c >= a ) && ( c <= b ) ) return abs ( c - a ) + abs ( c - b ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ) { cout << distance ( n1 , n2 , n3 ) << endl ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "long long distance ( int a , int b , int c )"
      ],
      "err_line": 7,
      "err_msg": "ambiguating new declaration of ‘long long int distance(int, int, int)’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        11
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        10
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        11
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        10
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        8,
        11
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        8,
        11,
        10
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        8,
        10
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        11,
        10
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int distance ( int a , int b , int c )",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        8,
        11
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        8,
        11,
        10
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        8,
        11,
        1
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        10
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        8,
        10,
        1
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        1
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        11,
        10,
        1
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        1
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        10,
        1
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "while ( cin >> n1 >> n2 >> n3 >> distance ( n1 , n2 , n3 ) )",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        10,
        1
      ],
      "mod_code": [
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        1
      ],
      "mod_code": [
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10,
        1
      ],
      "mod_code": [
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( a >= b ) return abs ( a ) + abs ( a - b ) + abs ( a - c ) ;",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        10,
        1
      ],
      "mod_code": [
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( b >= c ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( b >= a ) { return abs ( b ) + abs ( b - c ) + abs ( b - c ) ; }",
        "int distance ( a , b , c ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘a’ was not declared in this scope"
    }
  ]
}