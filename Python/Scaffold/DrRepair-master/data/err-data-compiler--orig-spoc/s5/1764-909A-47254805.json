{
  "meta": {
    "index": 1764,
    "hitid": "3VCK0Q0PO588W1RLSAHA24JFTW0N0C",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "909A",
    "subid": "47254805"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s1 and s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "print s1 , s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let answer be string",
      "code": "string answer ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set answer to answer + s1 [ 0 ]",
      "code": "answer += s1 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to length of s1 exclusive",
      "code": "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s1 [ i ] > = s2 [ 0 ]",
      "code": "if ( s1 [ i ] >= s2 [ 0 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set answer = answer + s1 [ i ]",
      "code": "answer += s1 [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set answer to answer + s2 [ 0 ]",
      "code": "answer += s2 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print answer",
      "code": "cout << answer << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s1 create s2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i < s1 . length ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "string s1 create s2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "string s1 create s2 ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        6
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "string s1 create s2 ;",
        "break the ;",
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        3
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "string s1 create s2 ;",
        "break the ;",
        "char answer ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "string s1 create s2 ;",
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2,
        1,
        6,
        3
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "string s1 create s2 ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2,
        1,
        3
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "string s1 create s2 ;",
        "char answer ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "break the ;",
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7,
        6,
        3
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "break the ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "break the ;",
        "char answer ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "cout << s1 << \" \" << s2 << endl ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "break the ;",
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        3
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "break the ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        2
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "break the ;",
        "if ( s1 [ i ] >= s2 )",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "break the ;",
        "char answer ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        7,
        3,
        2
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "break the ;",
        "char answer ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "break the ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        6,
        3,
        2
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        6,
        2
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "if ( s1 [ i ] >= s2 )",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "char answer ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "char answer ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string s1 create s2 ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "break the ;",
        "if ( s1 [ i ] >= s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6,
        3
      ],
      "mod_code": [
        "break the ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6,
        3,
        2
      ],
      "mod_code": [
        "break the ;",
        "if ( s1 [ i ] >= s2 )",
        "char answer ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "break the ;",
        "if ( s1 [ i ] >= s2 )",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "break the ;",
        "char answer ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "break the ;",
        "char answer ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "break the ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s1 [ i ] >= s2 )",
        "char answer ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        3,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] >= s2 )",
        "char answer ;",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] >= s2 )",
        "cout << s1 << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}