{
  "meta": {
    "index": 2479,
    "hitid": "34O39PNDK62UVMMNJXVGV5K8KVBBRU",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "48200901"
  },
  "lines": [
    {
      "line": 0,
      "text": "let x be an array of strings of length 3",
      "code": "string x [ 3 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "m is an array of strings with elements \" rock \" , \" scissors \" and \" paper \"",
      "code": "string m [ 3 ] = { \" rock \" , \" scissors \" , \" paper \" } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "ans = string with value \" FMS \"",
      "code": "string ans = \" FMS \" ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "cnt = map from string to integer",
      "code": "map < string , int > cnt ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; ++ i ) cin >> x [ i ] , cnt [ x [ i ] ] ++ ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "string win = \" \"",
      "code": "string win = \" \" ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; ++ i )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if cnt [ m [ i ] ] = 1 & & cnt [ m [ ( i + 1 ) % 3 ] ] = 2 set win to m [ i ]",
      "code": "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] == 2 ) win = m [ i ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if win = \" \"",
      "code": "if ( win == \" \" )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; ++ i )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if x [ i ] = win print ans [ i ]",
      "code": "if ( x [ i ] == win ) cout << ans [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘win’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "x [ 3 ] ;"
      ],
      "err_line": 0,
      "err_msg": "‘x’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "‘win’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string win = \" \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] ] = m [ i ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( win == \" \" )"
      ],
      "err_line": 10,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "‘win’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "else if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "‘win’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "else if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "‘win’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "else if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string win = \" \" ;",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "else if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "else if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        8,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "‘win’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "else if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "‘win’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "else if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 3 ; i ++ )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        2
      ],
      "mod_code": [
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "else if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        2
      ],
      "mod_code": [
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "else if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        8,
        2
      ],
      "mod_code": [
        "string win = \" \" ;",
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "string win = \" \" ;",
        "if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "string win = \" \" ;",
        "else if ( win == \" \" )"
      ],
      "err_line": 10,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "string win = \" \" ;",
        "else if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "string win = \" \" ;",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "else if ( win == \" \" )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "else if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( cnt [ m [ i ] ] == 1 && cnt [ m [ ( i + 1 ) % 3 ] ] ] == 2 ) { win = m [ i ] ; }",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "else if ( win == \" \" )",
        "string * ans = \" FMS \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    }
  ]
}