{
  "meta": {
    "index": 1154,
    "hitid": "3KG2UQJ0MJIWKUWK98BPHAAX60VQNA",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "41A",
    "subid": "48882447"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s1 , s2 = strings",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s1",
      "code": "cin >> s1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s2",
      "code": "cin >> s2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a = integer with a = length of s1",
      "code": "int a = s1 . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "b = integer with b = length of s2",
      "code": "int b = s2 . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "flag = integer with flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to a exclusive",
      "code": "for ( int i = 0 ; i < a ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s1 [ i ] is not s2 [ b - i - 1 ] or a is not b )",
      "code": "if ( s1 [ i ] != s2 [ b - i - 1 ] || a != b )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "for ( i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "for ( i = 0 ; i < a ; i ++ )",
        "cout << s2 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        3,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "for ( i = 0 ; i < a ; i ++ )",
        "cout << s2 << endl ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        7,
        3,
        1
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "for ( i = 0 ; i < a ; i ++ )",
        "cout << s2 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "for ( i = 0 ; i < a ; i ++ )",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        7,
        2,
        1
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "for ( i = 0 ; i < a ; i ++ )",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        1
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "for ( i = 0 ; i < a ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "cout << s2 << endl ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        3,
        2,
        1
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3,
        1
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "cout << s2 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        2,
        1
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( s1 [ i ] != s2 [ b - i - 1 ] && a != b )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )",
        "cout << s2 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )",
        "cout << s2 << endl ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        3,
        2,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )",
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )",
        "cout << s2 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        2,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    }
  ]
}