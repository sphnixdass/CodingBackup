{
  "meta": {
    "index": 1650,
    "hitid": "3Y7LTZE0YTGITCHKT56OMYEVIX0UZM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "47102558"
  },
  "lines": [
    {
      "line": 0,
      "text": "boolean function judge with integer arguments y",
      "code": "bool judge ( int y ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer u = 1 and an array of integers a of size 1000",
      "code": "int a [ 1000 ] , u = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "assign value of 2 to the a [ 0 ]",
      "code": "a [ 0 ] = 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 3 to 1000 exclusive incrementing by 2",
      "code": "for ( int i = 3 ; i < 1000 ; i += 2 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign value 1 to the boolean flag",
      "code": "bool flag = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for j = 0 to u exclusive",
      "code": "for ( int j = 0 ; j < u ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if i % a [ j ] is equal to 0",
      "code": "if ( i % a [ j ] == 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set value of flag to 0",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "a [ u ] = i",
      "code": "a [ u ] = i ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment u",
      "code": "u ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "m and n = integers",
      "code": "int m , n ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "assign value 0 to the integer aa",
      "code": "int aa = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for integer ii = 2 to n inclusive",
      "code": "for ( int ii = 2 ; ii <= n ; ii ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "create boolean p with value 0",
      "code": "bool p = 0 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "for s = 0 to a [ s ] < = ii",
      "code": "for ( int s = 0 ; a [ s ] <= ii ; s ++ )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if a [ s ] is equal to ii , set p to 1",
      "code": "if ( a [ s ] == ii ) p = 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if p is 1",
      "code": "if ( p )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "for r = 0 to to a [ r + 1 ] < ii",
      "code": "for ( int r = 0 ; a [ r + 1 ] < ii ; r ++ )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if a [ r ] + a [ r + 1 ] + 1 is equal to ii",
      "code": "if ( a [ r ] + a [ r + 1 ] + 1 == ii )",
      "indent": 4
    },
    {
      "line": 28,
      "text": "increment aa",
      "code": "aa ++ ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "if aa > = m",
      "code": "if ( aa >= m )",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool judge ( int y )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "a [ 0 ] assign ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < u ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "* flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 9,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "aa = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘aa’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "bool * p = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( s = 0 ; a [ s ] <= ii ; s ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "else if ( p == 1 )"
      ],
      "err_line": 25,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( r = 0 ; a [ r + 1 ] < ii ; r ++ )"
      ],
      "err_line": 26,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 29,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        29
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "stop ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        29,
        3
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "stop ;",
        "a [ 0 ] assign ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        29,
        21
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "stop ;",
        "bool * p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        29,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "stop ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        3
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "a [ 0 ] assign ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        3,
        21
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        3,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "a [ 0 ] assign ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        21
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "bool * p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        21,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        5,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "flag = 1 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "bool judge ( int y )",
        "stop ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        29,
        3
      ],
      "mod_code": [
        "bool judge ( int y )",
        "stop ;",
        "a [ 0 ] assign ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        29,
        3,
        21
      ],
      "mod_code": [
        "bool judge ( int y )",
        "stop ;",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        29,
        3,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "stop ;",
        "a [ 0 ] assign ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        29,
        21
      ],
      "mod_code": [
        "bool judge ( int y )",
        "stop ;",
        "bool * p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        29,
        21,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "stop ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        29,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "stop ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "bool judge ( int y )",
        "a [ 0 ] assign ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        21
      ],
      "mod_code": [
        "bool judge ( int y )",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        21,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        3,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "a [ 0 ] assign ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "bool judge ( int y )",
        "bool * p = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        21,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "bool judge ( int y )",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        5,
        29
      ],
      "mod_code": [
        "flag = 1 ;",
        "stop ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        29,
        3
      ],
      "mod_code": [
        "flag = 1 ;",
        "stop ;",
        "a [ 0 ] assign ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5,
        29,
        3,
        21
      ],
      "mod_code": [
        "flag = 1 ;",
        "stop ;",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5,
        29,
        3,
        2
      ],
      "mod_code": [
        "flag = 1 ;",
        "stop ;",
        "a [ 0 ] assign ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5,
        29,
        21
      ],
      "mod_code": [
        "flag = 1 ;",
        "stop ;",
        "bool * p = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        29,
        21,
        2
      ],
      "mod_code": [
        "flag = 1 ;",
        "stop ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        29,
        2
      ],
      "mod_code": [
        "flag = 1 ;",
        "stop ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "flag = 1 ;",
        "a [ 0 ] assign ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5,
        3,
        21
      ],
      "mod_code": [
        "flag = 1 ;",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5,
        3,
        21,
        2
      ],
      "mod_code": [
        "flag = 1 ;",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "flag = 1 ;",
        "a [ 0 ] assign ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "flag = 1 ;",
        "bool * p = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        21,
        2
      ],
      "mod_code": [
        "flag = 1 ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "flag = 1 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        3
      ],
      "mod_code": [
        "stop ;",
        "a [ 0 ] assign ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        29,
        3,
        21
      ],
      "mod_code": [
        "stop ;",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        29,
        3,
        21,
        2
      ],
      "mod_code": [
        "stop ;",
        "a [ 0 ] assign ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        29,
        3,
        2
      ],
      "mod_code": [
        "stop ;",
        "a [ 0 ] assign ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        29,
        21
      ],
      "mod_code": [
        "stop ;",
        "bool * p = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        21,
        2
      ],
      "mod_code": [
        "stop ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        2
      ],
      "mod_code": [
        "stop ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "a [ 0 ] assign ;",
        "bool * p = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        3,
        21,
        2
      ],
      "mod_code": [
        "a [ 0 ] assign ;",
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "a [ 0 ] assign ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        21,
        2
      ],
      "mod_code": [
        "bool * p = 0 ;",
        "int a [ 1000 ] , u [ 1000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}