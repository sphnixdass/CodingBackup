{
  "meta": {
    "index": 1201,
    "hitid": "39O6Z4JLX2RT1W65XDS8LZ03OJTXVT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "870A",
    "subid": "40917977"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , m , i , j , x and y = 10 , cnt = 0 be integers ; a , b and c are integer arrays with 10 elements each",
      "code": "int n , m , i , j , a [ 10 ] , b [ 10 ] , c [ 10 ] , x = 10 , y = 10 , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare boolean flag = 0",
      "code": "bool flag = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if a [ i ] is less than x , change x to a [ i ]",
      "code": "if ( a [ i ] < x ) x = a [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read b [ i ]",
      "code": "cin >> b [ i ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if b [ i ] is less than y , change y to b [ i ]",
      "code": "if ( b [ i ] < y ) y = b [ i ] ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for j = 0 to m exclusive",
      "code": "for ( j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if a [ i ] = b [ j ] , set flag to 1 , set c [ cnt ] to a [ i ] and increment cnt",
      "code": "if ( a [ i ] == b [ j ] ) flag = 1 , c [ cnt ++ ] = a [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "assign value of 10 to x",
      "code": "x = 10 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "for i = 0 to cnt exclusive",
      "code": "for ( i = 0 ; i < cnt ; i ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if c [ i ] is less than x , change x to c [ i ]",
      "code": "if ( c [ i ] < x ) x = c [ i ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print x",
      "code": "cout << x << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if x is less than y",
      "code": "if ( x < y )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print x and y",
      "code": "cout << x << y << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print y and x",
      "code": "cout << y << x << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 0 , x = 10 , b [ 10 ] , c [ 10 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 15,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << x << \" \""
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "cout << y << \" \""
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        22
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        24
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "cout << y << \" \" << x << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        3
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        24
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << y << \" \" << x << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        24,
        3
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << y << \" \" << x << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        24,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << y << \" \" << x << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        3
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        3,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cin >> m >> m ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << x << \" \" << y << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        22,
        24
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << x << \" \" << y << endl ;",
        "cout << y << \" \" << x << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        22,
        24,
        3
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << x << \" \" << y << endl ;",
        "cout << y << \" \" << x << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        22,
        24,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << x << \" \" << y << endl ;",
        "cout << y << \" \" << x << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        22,
        3
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << x << \" \" << y << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        22,
        3,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << x << \" \" << y << endl ;",
        "cin >> m >> m ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        22,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << x << \" \" << y << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << y << \" \" << x << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        24,
        3
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << y << \" \" << x << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        24,
        3,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << y << \" \" << x << endl ;",
        "cin >> m >> m ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        24,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cout << y << \" \" << x << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "cin >> m >> m ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , m , i , j = 10 , x = 10 , x = 10 , b [ 10 ] , c [ 10 ] ;",
        "bool flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        14,
        22
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        22,
        24
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "cout << y << \" \" << x << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        22,
        24,
        3
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "cout << y << \" \" << x << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        22,
        24,
        2
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "cout << y << \" \" << x << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        22,
        3
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        22,
        3,
        2
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "cin >> m >> m ;",
        "bool flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        22,
        2
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << x << \" \" << y << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << y << \" \" << x << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        24,
        3
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << y << \" \" << x << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        24,
        3,
        2
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << y << \" \" << x << endl ;",
        "cin >> m >> m ;",
        "bool flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        24,
        2
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cout << y << \" \" << x << endl ;",
        "bool flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cin >> m >> m ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        3,
        2
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "cin >> m >> m ;",
        "bool flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "if ( a [ i ] == b [ j ] ) flag [ cnt ++ ] = a [ i ] ;",
        "bool flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    }
  ]
}