{
  "meta": {
    "index": 207,
    "hitid": "39RRBHZ0AUVI6R6KYVGTIKGEW49VZC",
    "workerid": "A1APYLD4DUK33J",
    "probid": "9A",
    "subid": "48540331"
  },
  "lines": [
    {
      "line": 0,
      "text": "create long long spf with size 100001",
      "code": "long long spf [ 100001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with long longs a , b as arguments , returning long long",
      "code": "long long gcd ( long long a , long long b ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare palindrome with string s as argument , returning long long",
      "code": "long long palindrome ( string s ) ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare modexp with long longs a , b , m as arguments , returning long long",
      "code": "long long modexp ( long long a , long long b , long long m ) ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare sieve with no arguments , returning void",
      "code": "void sieve ( ) ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare ceil with long longs a , b as arguments returning long long",
      "code": "long long ceil ( long long a , long long b ) ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare getFactorization with long long x as argument , returning long long vector",
      "code": "vector < long long > getFactorization ( long long x ) ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare getZarr with string str , long long array Z as arguments , returning void",
      "code": "void getZarr ( string str , long long Z [ ] ) ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare prefix_function with string s as argument , returning long long vector",
      "code": "vector < long long > prefix_function ( string s ) ;",
      "indent": 0
    },
    {
      "line": 9,
      "text": "create long long vector pi",
      "code": "vector < long long > pi ;",
      "indent": 0
    },
    {
      "line": 10,
      "text": "create strings s1 , s2 , virus",
      "code": "string s1 , s2 , virus ;",
      "indent": 0
    },
    {
      "line": 11,
      "text": "create 3d long long array dp with size 105 by 105 by 105",
      "code": "long long dp [ 105 ] [ 105 ] [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 12,
      "text": "declare prefix with long long j , string s , character ch as arguments , returning long long",
      "code": "long long prefix ( long long j , string s , char ch )",
      "indent": 0
    },
    {
      "line": 13,
      "text": "while j is greater than 0 and ch is not s [ j ] , set j to pi [ j - 1 ]",
      "code": "while ( j > 0 && ch != s [ j ] ) { j = pi [ j - 1 ] ; }",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ch is s [ j ] , increment j",
      "code": "if ( ch == s [ j ] ) { j ++ ; }",
      "indent": 1
    },
    {
      "line": 15,
      "text": "return j from function",
      "code": "return j ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "declare f with long longs i , j , k as arguments , returning long long",
      "code": "long long f ( long long i , long long j , long long k )",
      "indent": 0
    },
    {
      "line": 18,
      "text": "if dp [ i ] [ j ] [ k ] is not - 1 , return dp [ i ] [ j ] [ k ]",
      "code": "if ( dp [ i ] [ j ] [ k ] != - 1 ) { return dp [ i ] [ j ] [ k ] ; }",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if k is length of virus , return set dp [ i ] [ j ] [ k ] to - 1",
      "code": "if ( k == virus . length ( ) ) { return dp [ i ] [ j ] [ k ] = - 1 ; }",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if i is length of s1 or j is length of s2",
      "code": "if ( i == s1 . length ( ) || j == s2 . length ( ) )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "return set dp [ i ] [ j ] [ k ] to 0",
      "code": "return dp [ i ] [ j ] [ k ] = 0 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else if s1 [ i ] is not s2 [ j ]",
      "code": "else if ( s1 [ i ] != s2 [ j ] )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "return set dp [ i ] [ j ] [ k ] to maximum of result of run f with i + 1 , j , k as arguments , and result of run f with i , j + 1 , k as arguments",
      "code": "return dp [ i ] [ j ] [ k ] = max ( f ( i + 1 , j , k ) , f ( i , j + 1 , k ) ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "create long long a with a = result of run prefix with k , virus , s1 [ i ] as arguments",
      "code": "long long a = prefix ( k , virus , s1 [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if a is less than k",
      "code": "if ( a < k )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "return set dp [ i ] [ j ] [ k ] to 1 + result of run f with i + 1 , j + 1 , a as arguments",
      "code": "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 , a ) ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 29,
      "text": "return set dp [ i ] [ j ] [ k ] to maximum of 1 + result of run f with i + 1 , j + 1 , a as arguments and result of run f with i + 1 , j + 1 , k as arguments",
      "code": "return dp [ i ] [ j ] [ k ] = max ( 1 + f ( i + 1 , j + 1 , a ) , f ( i + 1 , j + 1 , k ) ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 33,
      "text": "create long longs y , w",
      "code": "long long y , w ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "read y read w",
      "code": "cin >> y >> w ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "create long long x with x = maximum of y and w",
      "code": "long long x = max ( y , w ) ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "create long long num with num = 6 - x + 1",
      "code": "long long num = 6 - x + 1 ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "create long long den with den = 6",
      "code": "long long den = 6 ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "create long long g with g = run gcd with num , den as arguments",
      "code": "long long g = gcd ( num , den ) ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print num / g print \" / \" print den / g print ' \\ n '",
      "code": "cout << num / g << \" / \" << den / g << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 41,
      "text": "declare gcd with long longs a , b as arguments , returning long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 42,
      "text": "if a is 0 , return b from function",
      "code": "if ( a == 0 ) return b ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "if b is 0 , return a from function",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "if a is b , return a from function",
      "code": "if ( a == b ) return a ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "if a is greater than b , return result of run gcd with a % b , b as arguments from function",
      "code": "if ( a > b ) return gcd ( a % b , b ) ;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "return result of run gcd with a , b % a as arguments from function",
      "code": "return gcd ( a , b % a ) ;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 48,
      "text": "declare palindrome with string s as argument , returning long long",
      "code": "long long palindrome ( string s )",
      "indent": 0
    },
    {
      "line": 49,
      "text": "create long long l with l = 0",
      "code": "long long l = 0 ;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "create long long h with h = length of s - 1",
      "code": "long long h = s . length ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "while h is greater than l",
      "code": "while ( h > l )",
      "indent": 1
    },
    {
      "line": 52,
      "text": "if s [ increment l ] is not s [ decrement h ] , return 0 from function",
      "code": "if ( s [ l ++ ] != s [ h -- ] ) { return 0 ; }",
      "indent": 2
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 54,
      "text": "return 1 from function",
      "code": "return 1 ;",
      "indent": 1
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 56,
      "text": "declare modexp with long longs a , b , m as arguments , returning long long",
      "code": "long long modexp ( long long a , long long b , long long m )",
      "indent": 0
    },
    {
      "line": 57,
      "text": "if b is 0 , return 1 from function",
      "code": "if ( b == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 58,
      "text": "create long long temp with temp = result of run modexp with a , b / 2 , m as arguments",
      "code": "long long temp = modexp ( a , b / 2 , m ) ;",
      "indent": 1
    },
    {
      "line": 59,
      "text": "set temp to ( temp * temp ) % m",
      "code": "temp = ( temp * temp ) % m ;",
      "indent": 1
    },
    {
      "line": 60,
      "text": "if b bitwise and 1 , return ( temp * ( a % m ) ) % m from function",
      "code": "if ( b & 1 ) return ( temp * ( a % m ) ) % m ;",
      "indent": 1
    },
    {
      "line": 61,
      "text": "return temp from function",
      "code": "return temp ;",
      "indent": 1
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 63,
      "text": "declare sieve with no arguments , returning void",
      "code": "void sieve ( )",
      "indent": 0
    },
    {
      "line": 64,
      "text": "set spf [ 1 ] to 1",
      "code": "spf [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 65,
      "text": "for i = 2 to 100001 exclusive , set spf [ i ] to i",
      "code": "for ( long long i = 2 ; i < 100001 ; i ++ ) spf [ i ] = i ;",
      "indent": 1
    },
    {
      "line": 66,
      "text": "for i = 4 to 100001 exclusive , set spf [ i ] to 2",
      "code": "for ( long long i = 4 ; i < 100001 ; i += 2 ) spf [ i ] = 2 ;",
      "indent": 1
    },
    {
      "line": 67,
      "text": "for i = 3 to i * i is less than 100001 , incrementing i",
      "code": "for ( long long i = 3 ; i * i < 100001 ; i ++ )",
      "indent": 1
    },
    {
      "line": 68,
      "text": "if spf [ i ] is i",
      "code": "if ( spf [ i ] == i )",
      "indent": 2
    },
    {
      "line": 69,
      "text": "for j = i * i to 100001 exclusive , incrementing j by i",
      "code": "for ( long long j = i * i ; j < 100001 ; j += i )",
      "indent": 3
    },
    {
      "line": 70,
      "text": "if spf [ j ] is j , set spf [ j ] to i",
      "code": "if ( spf [ j ] == j ) spf [ j ] = i ;",
      "indent": 4
    },
    {
      "line": 71,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 72,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 73,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 74,
      "text": "declare getFactorization with long long x as argument , returning long long vector",
      "code": "vector < long long > getFactorization ( long long x )",
      "indent": 0
    },
    {
      "line": 75,
      "text": "create long long vector ret",
      "code": "vector < long long > ret ;",
      "indent": 1
    },
    {
      "line": 76,
      "text": "while x is not 1",
      "code": "while ( x != 1 )",
      "indent": 1
    },
    {
      "line": 77,
      "text": "add element spf [ x ] to end of ret",
      "code": "ret . push_back ( spf [ x ] ) ;",
      "indent": 2
    },
    {
      "line": 78,
      "text": "set x to x / spf [ x ]",
      "code": "x = x / spf [ x ] ;",
      "indent": 2
    },
    {
      "line": 79,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 80,
      "text": "return ret from function",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 81,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 82,
      "text": "declare ceil with long longs a , b as arguments , returning long long",
      "code": "long long ceil ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 83,
      "text": "return a / b + ( result of if a % b is not 0 ) from function",
      "code": "return a / b + ( a % b != 0 ) ;",
      "indent": 1
    },
    {
      "line": 84,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 85,
      "text": "declare getZarr with string str , long long array Z as arguments , returning void",
      "code": "void getZarr ( string str , long long Z [ ] )",
      "indent": 0
    },
    {
      "line": 86,
      "text": "create long long n with n = length of str",
      "code": "long long n = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 87,
      "text": "create long longs L , R , k",
      "code": "long long L , R , k ;",
      "indent": 1
    },
    {
      "line": 88,
      "text": "set L to R to 0",
      "code": "L = R = 0 ;",
      "indent": 1
    },
    {
      "line": 89,
      "text": "for i = 1 to n exclusive",
      "code": "for ( long long i = 1 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 90,
      "text": "if i is greater than R",
      "code": "if ( i > R )",
      "indent": 2
    },
    {
      "line": 91,
      "text": "set L to R to i",
      "code": "L = R = i ;",
      "indent": 3
    },
    {
      "line": 92,
      "text": "while R is less than n and str [ R - L ] is str [ R ] , increment R",
      "code": "while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;",
      "indent": 3
    },
    {
      "line": 93,
      "text": "set Z [ i ] to R - L",
      "code": "Z [ i ] = R - L ;",
      "indent": 3
    },
    {
      "line": 94,
      "text": "decrement R",
      "code": "R -- ;",
      "indent": 3
    },
    {
      "line": 95,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 96,
      "text": "set k to i - L",
      "code": "k = i - L ;",
      "indent": 3
    },
    {
      "line": 97,
      "text": "if Z [ k ] is less than R - i - 1",
      "code": "if ( Z [ k ] < R - i + 1 )",
      "indent": 3
    },
    {
      "line": 98,
      "text": "set Z [ i ] to Z [ k ]",
      "code": "Z [ i ] = Z [ k ] ;",
      "indent": 4
    },
    {
      "line": 99,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 100,
      "text": "set L to i",
      "code": "L = i ;",
      "indent": 4
    },
    {
      "line": 101,
      "text": "while R is less than n and str [ R - L ] is str [ R ] , increment R",
      "code": "while ( R < n && str [ R - L ] == str [ R ] ) R ++ ;",
      "indent": 4
    },
    {
      "line": 102,
      "text": "set Z [ i ] to R - L",
      "code": "Z [ i ] = R - L ;",
      "indent": 4
    },
    {
      "line": 103,
      "text": "decrement R",
      "code": "R -- ;",
      "indent": 4
    },
    {
      "line": 104,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 105,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 106,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 107,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 108,
      "text": "declare prefix_function with string s as argument , returning long long vector",
      "code": "vector < long long > prefix_function ( string s )",
      "indent": 0
    },
    {
      "line": 109,
      "text": "create long long n with n = long long casted length of s",
      "code": "long long n = ( long long ) s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 110,
      "text": "create long long vector pi initilized with n",
      "code": "vector < long long > pi ( n ) ;",
      "indent": 1
    },
    {
      "line": 111,
      "text": "for i = 1 to n exclusive",
      "code": "for ( long long i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 112,
      "text": "create long long j with j = pi [ i - 1 ]",
      "code": "long long j = pi [ i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 113,
      "text": "while j is greater than 0 and s [ i ] is not s [ j ] , set j to pi [ j - 1 ]",
      "code": "while ( j > 0 && s [ i ] != s [ j ] ) j = pi [ j - 1 ] ;",
      "indent": 2
    },
    {
      "line": 114,
      "text": "if s [ i ] is s [ j ] , increment j",
      "code": "if ( s [ i ] == s [ j ] ) j ++ ;",
      "indent": 2
    },
    {
      "line": 115,
      "text": "set pi [ i ] to j",
      "code": "pi [ i ] = j ;",
      "indent": 2
    },
    {
      "line": 116,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 117,
      "text": "return pi from function",
      "code": "return pi ;",
      "indent": 1
    },
    {
      "line": 118,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long palindrome ( string s )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void sieve ( )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        74
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        85
      ],
      "mod_code": [
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 86,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        108
      ],
      "mod_code": [
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 109,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x )"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void getZarr ( string str , long long str [ ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘long long int* str’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "vector < long long > prefix_function ( string s )"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "vector < long long pi ;"
      ],
      "err_line": 9,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "strings , s2 , virus ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "long long dp [ 105 ] [ 105 ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "long long prefix ( long long j , string ch , long long ch )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘long long int ch’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "while ( j )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "long long f ( long long i , long long j , long long k ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] ] != s2 [ j ] )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "long long a = prefix ( k , virus ) , s1 [ i ] ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int prefix(long long int, std::__cxx11::string, char)’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "while ( cin >> y >> w )"
      ],
      "err_line": 36,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "long long x = y max max ( y , w ) ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘,’ or ‘;’ before ‘max’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "long long g = gcd ( num ) ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 42,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "long long palindrome ( string s ) ;"
      ],
      "err_line": 49,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "if ( s [ l ++ ] != s [ -- h ) return 0 ;"
      ],
      "err_line": 52,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m ) ;"
      ],
      "err_line": 57,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        58
      ],
      "mod_code": [
        "long long temp = modexp ( a , b / 2 ) ;"
      ],
      "err_line": 58,
      "err_msg": "too few arguments to function ‘long long int modexp(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "void sieve ( ) ;"
      ],
      "err_line": 64,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        65
      ],
      "mod_code": [
        "for ( i = 2 ; i < 100001 ; i ++ ) spf [ i ] = i ;"
      ],
      "err_line": 65,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        66
      ],
      "mod_code": [
        "for ( i = 4 ; i < 100001 ; i ++ ) spf [ i ] = 2 ;"
      ],
      "err_line": 66,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        67
      ],
      "mod_code": [
        "for ( i = 3 ; i * i < 100001 ; i ++ )"
      ],
      "err_line": 67,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        69
      ],
      "mod_code": [
        "for ( j = i * i ; j < 100001 ; j += i )"
      ],
      "err_line": 69,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        77
      ],
      "mod_code": [
        "ret . push ( spf [ x ] ) ;"
      ],
      "err_line": 77,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        80
      ],
      "mod_code": [
        "while ( ret )"
      ],
      "err_line": 80,
      "err_msg": "could not convert ‘ret’ from ‘std::vector<long long int>’ to ‘bool’"
    },
    {
      "mod_line": [
        82
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b ) ;"
      ],
      "err_line": 83,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        85
      ],
      "mod_code": [
        "void getZarr ( string str , long long str [ ] ) ;"
      ],
      "err_line": 85,
      "err_msg": "conflicting declaration ‘long long int* str’"
    },
    {
      "mod_line": [
        88
      ],
      "mod_code": [
        "int L = R ;"
      ],
      "err_line": 88,
      "err_msg": "conflicting declaration ‘int L’"
    },
    {
      "mod_line": [
        93
      ],
      "mod_code": [
        "Z [ i ] = R - \" L \" ;"
      ],
      "err_line": 93,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        102
      ],
      "mod_code": [
        "Z [ i ] = R - \" L \" ;"
      ],
      "err_line": 102,
      "err_msg": "invalid operands of types ‘long long int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        109
      ],
      "mod_code": [
        "long long n = ( long long ) s . length long ) ;"
      ],
      "err_line": 109,
      "err_msg": "invalid use of member function (did you forget the ‘()’ ?)"
    },
    {
      "mod_line": [
        117
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 117,
      "err_msg": "return-statement with no value, in function returning ‘std::vector<long long int>’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        27,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        27,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        27,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        74,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        74,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        2,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long palindrome ( string s )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        27,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        27,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        27,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        74,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        74,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        3,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        23,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        27,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        27,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        27,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        74,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        74,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        4,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        27,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        27,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        27,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        74,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        74,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        5,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        27,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        27,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        27,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        74,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        74,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        23,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        27,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        27,
        74,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        27,
        74,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        27,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        27,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        27,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        74
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        74,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        74,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        74,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        85
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        85,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        1,
        108
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        23
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        23
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        23,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        27,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        27,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        27,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        74,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        74,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        85,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        3,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        23
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        27,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        27,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        27,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        74,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        74,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        85,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        4,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        23,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        27,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        27,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        27,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        74,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        74,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        85,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        5,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        27,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        27,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        27,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        74,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        74,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        85,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        23,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        27,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        27,
        74,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        27,
        74,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        27,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        27,
        85,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        27,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        74
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        74,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        74,
        85,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        74,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        85
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        85,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        2,
        108
      ],
      "mod_code": [
        "long long palindrome ( string s )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        27
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        27
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        23,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        27
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        27,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        27,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        27,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        74,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        74,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        85,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        4,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        27
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        27
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        27,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        27,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        27,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        74,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        74,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        85,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        5,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        27
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        27,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        27,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        27,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        74,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        74,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        85,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        23,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        27
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        27,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        27,
        74,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        27,
        74,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        27,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        27,
        85,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        27,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        74
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        74,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        74,
        85,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        74,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        85
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        85,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        3,
        108
      ],
      "mod_code": [
        "long long modexp ( long long a , long long b , long long m )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘void’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        27
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        74
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        23,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        27
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        27,
        74
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        27,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        27,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        74
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        74,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        74,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        85,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        5,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        27
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        27,
        74
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        27,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        27,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        74
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        74,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        74,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        85,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        23,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        27
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        27,
        74
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        27,
        74,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        27,
        74,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        27,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        27,
        85,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        27,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        74
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        74,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        74,
        85,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        74,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        85
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        85,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        4,
        108
      ],
      "mod_code": [
        "void sieve ( )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        5,
        23
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        27
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        27,
        74
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        27,
        85
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        27,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        74
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        74,
        85
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        74,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        85
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        85,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        23,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        27,
        74
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        27,
        74,
        85
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        27,
        74,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        27,
        85
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        27,
        85,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        27,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        74
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        74,
        85
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        74,
        85,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        74,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        85
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        85,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        5,
        108
      ],
      "mod_code": [
        "long long ceil ( long long a , long long b )",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘vector’"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        23,
        27,
        74
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        23,
        27,
        74,
        85
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        23,
        27,
        74,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        23,
        27,
        85
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        23,
        27,
        85,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        23,
        27,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        23,
        74
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        74,
        85
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        74,
        85,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        74,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        85
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 86,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        85,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 86,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = max ( i + 1 , j , k ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 109,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        74
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        27,
        74,
        85
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        27,
        74,
        85,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        27,
        74,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        27,
        85
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        27,
        85,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        27,
        108
      ],
      "mod_code": [
        "return dp [ i ] [ j ] [ k ] = 1 + f ( i + 1 , j + 1 ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 27,
      "err_msg": "too few arguments to function ‘long long int f(long long int, long long int, long long int)’"
    },
    {
      "mod_line": [
        74,
        85
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        74,
        85,
        108
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x ) ;",
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        74,
        108
      ],
      "mod_code": [
        "vector < long long > getFactorization ( long long x ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 75,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        85,
        108
      ],
      "mod_code": [
        "void getZarr ( string str , long long Z [ ] ) ;",
        "vector < long long > prefix_function ( string s ) ;"
      ],
      "err_line": 86,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}