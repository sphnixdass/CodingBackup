{
  "meta": {
    "index": 953,
    "hitid": "3K8CQCU3KEV14RS6LHAV9ZSJTELNW9",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "119A",
    "subid": "47805562"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function gcd that takes integers x , y and returns integer",
      "code": "int gcd ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "t , t1 = integer",
      "code": "int t , t1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if x > y",
      "code": "if ( x > y )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "t = x",
      "code": "t = x ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "t = y",
      "code": "t = y ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for t > = 1 with decrement t",
      "code": "for ( ; t >= 1 ; t -- )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if x modulo t is 0 and y modulo t is 0",
      "code": "if ( x % t == 0 && y % t == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "t1 = t",
      "code": "t1 = t ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return t1",
      "code": "return t1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "a , b , n , flag , s , a1 = integers with flag = 1 , s = 0 , a1 = 0",
      "code": "int a , b , n , flag = 1 , s = 0 , a1 = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read a , b , n",
      "code": "cin >> a >> b >> n ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "while 1",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if flag modulo 2 is 1",
      "code": "if ( flag % 2 == 1 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if n is 0",
      "code": "if ( n == 0 )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "gcd_s = integer with call gcd on a and n",
      "code": "int gcd_s = gcd ( a , n ) ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "increment flag",
      "code": "flag ++ ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "n = n - gcd_s",
      "code": "n = n - gcd_s ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "increment s",
      "code": "s ++ ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else if flag modulo 2 is 0",
      "code": "else if ( flag % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if n is 0",
      "code": "if ( n == 0 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 32,
      "text": "gcd_a = integer with call gcd on b and n",
      "code": "int gcd_a = gcd ( b , n ) ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "increment flag",
      "code": "flag ++ ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "n = n - gcd_a",
      "code": "n = n - gcd_a ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "increment a1",
      "code": "a1 ++ ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "if a1 > = s",
      "code": "if ( a1 >= s )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5,
        30
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t = y ;",
        "break break ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5,
        30,
        9
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t = y ;",
        "break break ;",
        "int t1 = t ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5,
        30,
        21
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t = y ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5,
        30,
        16
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t = y ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5,
        9,
        21
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t = y ;",
        "int t1 = t ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5,
        21
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t = y ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5,
        21,
        16
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t = y ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        30
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        30,
        9
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;",
        "int t1 = t ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        30,
        9,
        21
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;",
        "int t1 = t ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        30,
        9,
        16
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;",
        "int t1 = t ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        30,
        21
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        30,
        21,
        16
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        30,
        16
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        9,
        21
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t1 = t ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        9,
        21,
        16
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "int t1 = t ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        21,
        16
      ],
      "mod_code": [
        "for ( t = 1 ; ; t -- )",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        30
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        30,
        9
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;",
        "int t1 = t ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        30,
        9,
        21
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;",
        "int t1 = t ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        30,
        9,
        16
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;",
        "int t1 = t ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        30,
        21
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        30,
        21,
        16
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        30,
        16
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        21
      ],
      "mod_code": [
        "int t = y ;",
        "int t1 = t ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        21,
        16
      ],
      "mod_code": [
        "int t = y ;",
        "int t1 = t ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        21,
        16
      ],
      "mod_code": [
        "int t = y ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        9
      ],
      "mod_code": [
        "break break ;",
        "int t1 = t ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        9,
        21
      ],
      "mod_code": [
        "break break ;",
        "int t1 = t ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        9,
        21,
        16
      ],
      "mod_code": [
        "break break ;",
        "int t1 = t ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        9,
        16
      ],
      "mod_code": [
        "break break ;",
        "int t1 = t ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        21
      ],
      "mod_code": [
        "break break ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        21,
        16
      ],
      "mod_code": [
        "break break ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        16
      ],
      "mod_code": [
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "int t1 = t ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        21,
        16
      ],
      "mod_code": [
        "int t1 = t ;",
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        16
      ],
      "mod_code": [
        "break break ;",
        "int a , b , n , flag = 0 , s = 0 , a1 = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}