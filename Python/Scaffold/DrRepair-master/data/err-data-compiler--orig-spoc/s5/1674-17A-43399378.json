{
  "meta": {
    "index": 1674,
    "hitid": "302U8RURJZVOP2S1V75ZNX95MQ1NVN",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "43399378"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer N with N = 2222",
      "code": "const int N = 2222 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer arrays prime , pre , with prime size N , pre size N",
      "code": "int prime [ N ] , pre [ N ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare check with integer num as argument , returning boolean",
      "code": "bool check ( int num )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "for i = 2 to i * i is less than or equal to num , incrementing i",
      "code": "for ( int i = 2 ; i * i <= num ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if num % i is 0 , return false from function",
      "code": "if ( num % i == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare init with no arguments , returning void",
      "code": "void init ( )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create integers i , j , cnt",
      "code": "int i , j , cnt ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 2 to 1000 inclusive",
      "code": "for ( i = 2 ; i <= 1000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if not prime [ i ]",
      "code": "if ( ! prime [ i ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for j = i + i to 1000 inclusive , incrementing j by i , set prime [ j ] to 1",
      "code": "for ( j = i + i ; j <= 1000 ; j += i ) prime [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set cnt to 0",
      "code": "cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 2 to 1000 inclusive",
      "code": "for ( i = 2 ; i <= 1000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if not prime [ i ] , set prime [ incremented cnt ] to i",
      "code": "if ( ! prime [ i ] ) prime [ ++ cnt ] = i ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 2 to cnt inclusive",
      "code": "for ( i = 2 ; i <= cnt ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create integer t with t = prime [ i ] + prime [ i - 1 ] + 1",
      "code": "int t = prime [ i ] + prime [ i - 1 ] + 1 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if result of run check with t as argument is true , set pre [ t ] to 1",
      "code": "if ( check ( t ) ) pre [ t ] = 1 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 1 to 1000 inclusive , increment pre [ i ] by pre [ i - 1 ]",
      "code": "for ( i = 1 ; i <= 1000 ; i ++ ) { pre [ i ] += pre [ i - 1 ] ; }",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 24,
      "text": "run init",
      "code": "init ( ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "create integers n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "while read n read k is true",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if pre [ n ] is greater than or equal to k",
      "code": "if ( pre [ n ] >= k )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool check ( int num ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "continue ;"
      ],
      "err_line": 5,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void init ( ) { }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int cnt = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "init ( )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "while ( { cin >> n >> k )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        27,
        2
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        27,
        2,
        13
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "int cnt = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        27,
        2,
        3
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        27,
        2,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        27,
        13
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "int cnt = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        27,
        13,
        3
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        13,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "int cnt = 0 ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        27,
        3
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        3,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        27,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "if ( pre [ n ] >= ' k ' )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "bool check ( int num ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        13
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "bool check ( int num ) ;",
        "int cnt = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        3
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "bool check ( int num ) ;",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "bool check ( int num ) ;",
        "int cnt = 0 ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        2,
        3
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "bool check ( int num ) ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        3,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "bool check ( int num ) ;",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        2,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "bool check ( int num ) ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "int cnt = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        13,
        3
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        3,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        13,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "int cnt = 0 ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( prime [ i ] )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        27,
        2
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        2,
        13
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "int cnt = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        2,
        13,
        3
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        2,
        13,
        1
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "int cnt = 0 ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        27,
        2,
        3
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        2,
        3,
        1
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        27,
        2,
        1
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "bool check ( int num ) ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        27,
        13
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "int cnt = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        27,
        13,
        3
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        13,
        3,
        1
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        27,
        13,
        1
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "int cnt = 0 ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        27,
        3
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        3,
        1
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        27,
        1
      ],
      "mod_code": [
        "if ( pre [ n ] >= ' k ' )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "bool check ( int num ) ;",
        "int cnt = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        13,
        3
      ],
      "mod_code": [
        "bool check ( int num ) ;",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        13,
        3,
        1
      ],
      "mod_code": [
        "bool check ( int num ) ;",
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        2,
        13,
        1
      ],
      "mod_code": [
        "bool check ( int num ) ;",
        "int cnt = 0 ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "bool check ( int num ) ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "bool check ( int num ) ;",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "bool check ( int num ) ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3,
        1
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= num ; i ++ )",
        "int prime [ N , pre [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘,’ token"
    }
  ]
}