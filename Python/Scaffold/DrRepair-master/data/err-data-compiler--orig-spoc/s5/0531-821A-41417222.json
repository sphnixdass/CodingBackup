{
  "meta": {
    "index": 531,
    "hitid": "3OREP8RUT2536WD93M14W161JOGBGJ",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "821A",
    "subid": "41417222"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "m = integer array with length of 55 by 55",
      "code": "int m [ 55 ] [ 55 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to n exclusive read m [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { cin >> m [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "flag = integer with value of 1",
      "code": "int flag = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if flag",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if m [ i ] [ j ] does not equal 1",
      "code": "if ( m [ i ] [ j ] != 1 )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "for s = 0 to n exclusive",
      "code": "for ( int s = 0 ; s < n ; s ++ )",
      "indent": 5
    },
    {
      "line": 14,
      "text": "for t = 0 to n exclusive",
      "code": "for ( int t = 0 ; t < n ; t ++ )",
      "indent": 6
    },
    {
      "line": 15,
      "text": "if m [ i ] [ j ] equals m [ i ] [ s ] plus m [ t ] [ j ]",
      "code": "if ( m [ i ] [ j ] == m [ i ] [ s ] + m [ t ] [ j ] )",
      "indent": 7
    },
    {
      "line": 16,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 8
    },
    {
      "line": 17,
      "text": "break",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 7
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "if flag equals 0 break",
      "code": "if ( flag == 0 ) { break ; }",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if flag",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print Yes",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print No",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ ) { cin >> m [ i ] [ j ] ; }"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( s = 0 ; s < n ; s ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) m += m [ t ] [ j ] ;"
      ],
      "err_line": 15,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [55][55]’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        2
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        14,
        2,
        11
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        14,
        2,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        14,
        2,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        14,
        11
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "if ( m [ i ] [ j ] != ' 1 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        11,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        11,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        14,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        10,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        14,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( t = 0 ; t < n ; t ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "int m [ 55 ] . size ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        2,
        11
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        2,
        11,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        2,
        11,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        2,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "int m [ 55 ] . size ( ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        2,
        10,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "int m [ 55 ] . size ( ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        2,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "int m [ 55 ] . size ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        15,
        11,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        11,
        10,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        11,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        10,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] == m [ i ] [ s ] ) { t += m [ t ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        14,
        2,
        11
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        14,
        2,
        11,
        10
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        14,
        2,
        11,
        8
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        14,
        2,
        10
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        14,
        2,
        10,
        8
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        14,
        2,
        8
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "int m [ 55 ] . size ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        14,
        11
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "if ( m [ i ] [ j ] != ' 1 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        11,
        10
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        11,
        10,
        8
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        11,
        8
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        10,
        8
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "for ( t = 0 ; t < n ; t ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        11,
        10
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        11,
        10,
        8
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        11,
        8
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;",
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        10,
        8
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int m [ 55 ] . size ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        10,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "if ( m [ i ] [ j ] != ' 1 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}