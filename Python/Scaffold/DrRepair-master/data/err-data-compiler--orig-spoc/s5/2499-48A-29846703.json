{
  "meta": {
    "index": 2499,
    "hitid": "3EHVO81VN5FGTUQSLVQXBP5TBAM1H4",
    "workerid": "A1APYLD4DUK33J",
    "probid": "48A",
    "subid": "29846703"
  },
  "lines": [
    {
      "line": 0,
      "text": "create map gesture from string to string",
      "code": "map < string , string > gesture ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set gesture [ \" rock \" ] to \" scissors \"",
      "code": "gesture [ \" rock \" ] = \" scissors \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set gesture [ \" scissors \" ] to \" paper \"",
      "code": "gesture [ \" scissors \" ] = \" paper \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set gesture [ \" paper \" ] to \" rock \"",
      "code": "gesture [ \" paper \" ] = \" rock \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create string f , m , s",
      "code": "string f , m , s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read f read m read s",
      "code": "cin >> f >> m >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if gesture [ f ] is m and gesture [ f ] is s",
      "code": "if ( gesture [ f ] == m && gesture [ f ] == s )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" F \" print newline",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if gesture [ m ] is f and gesture [ m ] is s",
      "code": "else if ( gesture [ m ] == f && gesture [ m ] == s )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" M \" print newline",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if gesture [ s ] is f and gesture [ s ] is m",
      "code": "else if ( gesture [ s ] == f && gesture [ s ] == m )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" S \" print newline",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" ? \" print newline",
      "code": "cout << \" ? \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string f , m , n ;"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        7
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        11
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        11
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        11,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "string f , m , n ;",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        11
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        4,
        11
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        11,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "gesture [ \" scissors \" ] to \" paper \" ;",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        7
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        7,
        11
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        7,
        9
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        11
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        11,
        9
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        9
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        9
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "string f , m , n ;",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "string f , m , n ;",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11,
        9
      ],
      "mod_code": [
        "string f , m , n ;",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "string f , m , n ;",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        11
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        11,
        9
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        9
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "if ( gesture [ \" paper \" ] == \" rock \" )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        7,
        11,
        9
      ],
      "mod_code": [
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( gesture [ f ] == ' m ' && gesture [ f ] == s )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "else if ( gesture [ s ] == ' f ' && gesture [ s ] == m )",
        "else if ( gesture [ m ] == ' f ' && gesture [ m ] == s )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    }
  ]
}