{
  "meta": {
    "index": 289,
    "hitid": "3421H3BM9ABU95ODD88B283RNGO9J5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "61A",
    "subid": "42335426"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let string1 and string2 be strings",
      "code": "string string1 , string2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read string1 and string2",
      "code": "cin >> string1 >> string2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for size_t i from 0 to length of string1 exclusive",
      "code": "for ( size_t i = 0 ; i < string1 . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if string1 [ i ] = string2 [ i ]",
      "code": "if ( string1 [ i ] == string2 [ i ] )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set string1 [ i ] = ' 0 '",
      "code": "string1 [ i ] = ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set string1 [ i ] = ' 1 '",
      "code": "string1 [ i ] = ' 1 ' ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print string1",
      "code": "cout << string1 << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string string1 let , string2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "string string1 let , string2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        1,
        5
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "string string1 let , string2 ;",
        "if ( string1 [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        1,
        5,
        4
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "string string1 let , string2 ;",
        "if ( string1 [ i ] == ' 0 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        1,
        5,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "string string1 let , string2 ;",
        "if ( string1 [ i ] == ' 0 ' )",
        "cout << string1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        1,
        4
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "string string1 let , string2 ;",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        1,
        4,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "string string1 let , string2 ;",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )",
        "cout << string1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        1,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "string string1 let , string2 ;",
        "cout << string1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "if ( string1 [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "if ( string1 [ i ] == ' 0 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        4,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "if ( string1 [ i ] == ' 0 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )",
        "cout << string1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "if ( string1 [ i ] == ' 0 ' )",
        "cout << string1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )",
        "cout << string1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 1 ' )",
        "cout << string1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string string1 let , string2 ;",
        "if ( string1 [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "string string1 let , string2 ;",
        "if ( string1 [ i ] == ' 0 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        1,
        5,
        4,
        10
      ],
      "mod_code": [
        "string string1 let , string2 ;",
        "if ( string1 [ i ] == ' 0 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )",
        "cout << string1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "string string1 let , string2 ;",
        "if ( string1 [ i ] == ' 0 ' )",
        "cout << string1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string string1 let , string2 ;",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "string string1 let , string2 ;",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )",
        "cout << string1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "string string1 let , string2 ;",
        "cout << string1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 0 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        10
      ],
      "mod_code": [
        "if ( string1 [ i ] == ' 0 ' )",
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )",
        "cout << string1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "if ( strcmp ( string1 [ i ] ) == string2 [ i ] )",
        "cout << string1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    }
  ]
}