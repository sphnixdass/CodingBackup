{
  "meta": {
    "index": 148,
    "hitid": "3AXFSPQOYQS3AFFQGU83C4P2QEOFJ8",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "915A",
    "subid": "48558495"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k = integers and a = integer array of size 1000",
      "code": "int n , k , a [ 1000 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "sort a and a + n",
      "code": "sort ( a , a + n ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = n - 1 down to 0",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( k modulo a [ i ] is 0 )",
      "code": "if ( k % a [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print k / a [ i ]",
      "code": "cout << k / a [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        7
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        5
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "cout << k / a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        5
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "cout << k / a [ i ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cin >> n >> n ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "if ( k % a [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        5
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cout << k / a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "cout << k / a [ i ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a [ 1000 ] , k , k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        5
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        6,
        5
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        5,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        5,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "cout << k / a [ i ] ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        8
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "cout << k / a [ i ] ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5,
        8
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        8
      ],
      "mod_code": [
        "cout << k / a [ i ] ;",
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "cout << k / a [ i ] ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}