{
  "meta": {
    "index": 1405,
    "hitid": "39O6Z4JLX2RT1W65XDS8LZ03P6RVX0",
    "workerid": "AUD1I8FZAO4VF",
    "probid": "259A",
    "subid": "41214188"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let c be a string of length 8",
      "code": "string c [ 8 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read c [ 0 ]",
      "code": "while ( cin >> c [ 0 ] )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 1 to 8 exclusive read c [ i ]",
      "code": "for ( int i = 1 ; i < 8 ; ++ i ) cin >> c [ i ] ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "let t be an int with value 1",
      "code": "int t = 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( int i = 0 ; i < 8 ; ++ i )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for j = 0 to 8 exclusive",
      "code": "for ( int j = 0 ; j < 8 ; ++ j )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if c [ i ] [ j ] is c [ i ] [ j + 1 ]",
      "code": "if ( c [ i ] [ j ] == c [ i ] [ j + 1 ] )",
      "indent": 4
    },
    {
      "line": 8,
      "text": "set t to 0",
      "code": "t = 0 ;",
      "indent": 5
    },
    {
      "line": 9,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if t",
      "code": "if ( t )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print YES",
      "code": "cout << \" YES \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print NO",
      "code": "cout << \" NO \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string c = 8 ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int * t = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        4
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "int * t = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        4,
        7
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        4,
        8
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "int * t = 1 ;",
        "int t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        4,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "int * t = 1 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        7
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        8
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "int t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        8,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "break break ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int * t = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        8
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int * t = 1 ;",
        "int t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int * t = 1 ;",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int * t = 1 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int t = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "while ( c >> c [ 0 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string [8] {aka std::__cxx11::basic_string<char> [8]}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "break break ;",
        "int * t = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        7
      ],
      "mod_code": [
        "break break ;",
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        7,
        8
      ],
      "mod_code": [
        "break break ;",
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        7,
        6
      ],
      "mod_code": [
        "break break ;",
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        8
      ],
      "mod_code": [
        "break break ;",
        "int * t = 1 ;",
        "int t = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        8,
        6
      ],
      "mod_code": [
        "break break ;",
        "int * t = 1 ;",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        6
      ],
      "mod_code": [
        "break break ;",
        "int * t = 1 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "break break ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        7,
        8
      ],
      "mod_code": [
        "break break ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        7,
        8,
        6
      ],
      "mod_code": [
        "break break ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        6
      ],
      "mod_code": [
        "break break ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "break break ;",
        "int t = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        8,
        6
      ],
      "mod_code": [
        "break break ;",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "break break ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        8
      ],
      "mod_code": [
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        6
      ],
      "mod_code": [
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "int * t = 1 ;",
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "int * t = 1 ;",
        "int t = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        6
      ],
      "mod_code": [
        "int * t = 1 ;",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "int * t = 1 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        6
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] != c [ i ] [ j + 1 ] )",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "int t = 0 ;",
        "for ( j = 0 ; j < 8 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}