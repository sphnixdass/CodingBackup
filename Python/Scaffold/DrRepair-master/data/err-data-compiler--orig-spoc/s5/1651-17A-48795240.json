{
  "meta": {
    "index": 1651,
    "hitid": "338GLSUI435W9IYG3OHH45GPLVLFS3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "48795240"
  },
  "lines": [
    {
      "line": 0,
      "text": "function c with integer arguments a that returns boolean",
      "code": "bool c ( int a )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is less than 2 return false",
      "code": "if ( a < 2 ) return false ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for integer i = 2 to sqrt of a inclusive",
      "code": "for ( int i = 2 ; i <= sqrt ( a ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a % i is equal to 0 return false",
      "code": "if ( a % i == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let g be an array of integers of size 1000005",
      "code": "int g [ 1000005 ] ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create integer l with value 0",
      "code": "int l = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to 1000 inclusive",
      "code": "for ( int i = 0 ; i <= 1000 ; ++ i )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if c ( i ) is true",
      "code": "if ( c ( i ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if l ! = 0 , set g [ l + 1 + i ] to true",
      "code": "if ( l != 0 ) g [ l + 1 + i ] = true ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set l to i",
      "code": "l = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for integer i = 0 to 1000 inclusive",
      "code": "for ( int i = 0 ; i <= 1000 ; ++ i )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if c ( i ) is false , set g [ i ] to false",
      "code": "if ( ! c ( i ) ) g [ i ] = false ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "let n and k be integers",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set integer kol to 0",
      "code": "int kol = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for integer i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if g [ i ] is 1 , increment kol",
      "code": "if ( g [ i ] ) kol ++ ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if kol > = k",
      "code": "if ( kol >= k )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool c ( int a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int kol to 0 ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        9
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        9,
        0
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        9,
        0,
        18
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "int kol to 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        9,
        0,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "int l = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        9,
        0,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        9,
        18
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int kol to 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        9,
        18,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int kol to 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        9,
        18,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int kol to 0 ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        9,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        9,
        12,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        9,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        0
      ],
      "mod_code": [
        "cin >> n and k ;",
        "bool c ( int a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0,
        18
      ],
      "mod_code": [
        "cin >> n and k ;",
        "bool c ( int a ) ;",
        "int kol to 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0,
        18,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "bool c ( int a ) ;",
        "int kol to 0 ;",
        "int l = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0,
        18,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "bool c ( int a ) ;",
        "int kol to 0 ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "bool c ( int a ) ;",
        "int l = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0,
        12,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "bool c ( int a ) ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "bool c ( int a ) ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "cin >> n and k ;",
        "int kol to 0 ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        17,
        18,
        12
      ],
      "mod_code": [
        "cin >> n and k ;",
        "int kol to 0 ;",
        "int l = i ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        17,
        18,
        12,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "int kol to 0 ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        17,
        18,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "int kol to 0 ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        17,
        12,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "cin >> n and k ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "int kol to 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        18,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "int kol to 0 ;",
        "int l = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        18,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "int kol to 0 ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "int l = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "bool c ( int a ) ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int kol to 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int kol to 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int kol to 0 ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int kol to 0 ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "bool c ( int a ) ;",
        "int kol to 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        12
      ],
      "mod_code": [
        "bool c ( int a ) ;",
        "int kol to 0 ;",
        "int l = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        12,
        21
      ],
      "mod_code": [
        "bool c ( int a ) ;",
        "int kol to 0 ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        21
      ],
      "mod_code": [
        "bool c ( int a ) ;",
        "int kol to 0 ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "bool c ( int a ) ;",
        "int l = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        21
      ],
      "mod_code": [
        "bool c ( int a ) ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "bool c ( int a ) ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "int kol to 0 ;",
        "int l = i ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        18,
        12,
        21
      ],
      "mod_code": [
        "int kol to 0 ;",
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        18,
        21
      ],
      "mod_code": [
        "int kol to 0 ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "int l = i ;",
        "if ( kol >= k ) k ++ ;"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}