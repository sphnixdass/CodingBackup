{
  "meta": {
    "index": 2278,
    "hitid": "3IV1AEQ4DR7UV0538G2X2C8G28W8J0",
    "workerid": "A1APYLD4DUK33J",
    "probid": "6A",
    "subid": "47461308"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string array arr with size 4",
      "code": "string arr [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers a , b , c , d",
      "code": "int a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a read b read c read d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if a + b is greater than c and a + c is greater than b and b + c is greater than a",
      "code": "if ( a + b > c && a + c > b && b + c > a )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set arr [ 0 ] to \" TRIANGLE \"",
      "code": "arr [ 0 ] = \" TRIANGLE \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else if a + b is greater than or equal to c and a + c is greater than or equal to b and b + c is greater than or equal to a",
      "code": "else if ( a + b >= c && a + c >= b && b + c >= a )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set arr [ 0 ] to \" SEGMENT \"",
      "code": "arr [ 0 ] = \" SEGMENT \" ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set arr [ 0 ] to \" IMPOSSIBLE \"",
      "code": "arr [ 0 ] = \" IMPOSSIBLE \" ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if b + c is greater than d and b + d is greater than c and c + d is greater than b",
      "code": "if ( b + c > d && b + d > c && c + d > b )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set arr [ 1 ] to \" TRIANGLE \"",
      "code": "arr [ 1 ] = \" TRIANGLE \" ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else if b + c is greater than or equal to d and b + d is greater than or equal to c and c + d is greater than or equal to b",
      "code": "else if ( b + c >= d && b + d >= c && c + d >= b )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set arr [ 1 ] to \" SEGMENT \"",
      "code": "arr [ 1 ] = \" SEGMENT \" ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set arr [ 1 ] to \" IMPOSSIBLE \"",
      "code": "arr [ 1 ] = \" IMPOSSIBLE \" ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if a + b is greater than d and b + d is greater than a and a + d is greater than b",
      "code": "if ( a + b > d && b + d > a && a + d > b )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set arr [ 2 ] to \" TRIANGLE \"",
      "code": "arr [ 2 ] = \" TRIANGLE \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else if a + b is greater than or equal to d and b + d is greater than or equal to a and a + d is greater than or equal to b",
      "code": "else if ( a + b >= d && b + d >= a && a + d >= b )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set arr [ 2 ] to \" SEGMENT \"",
      "code": "arr [ 2 ] = \" SEGMENT \" ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "set arr [ 2 ] to \" IMPOSSIBLE \"",
      "code": "arr [ 2 ] = \" IMPOSSIBLE \" ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if a + c is greater than d and a + d is greater than c and c + d is greater than a",
      "code": "if ( a + c > d && a + d > c && c + d > a )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set arr [ 3 ] to \" TRIANGLE \"",
      "code": "arr [ 3 ] = \" TRIANGLE \" ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else if a + c is greater than or equal to d and a + d is greater than or equal to c and c + d is greater than or equal to a",
      "code": "else if ( a + c >= d && a + d >= c && c + d >= a )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "set arr [ 3 ] to \" SEGMENT \"",
      "code": "arr [ 3 ] = \" SEGMENT \" ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 27,
      "text": "set arr [ 3 ] to \" IMPOSSIBLE \"",
      "code": "arr [ 3 ] = \" IMPOSSIBLE \" ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "for x = 0 to 4 exclusive",
      "code": "for ( int x = 0 ; x < 4 ; x ++ )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if arr [ x ] is \" TRIANGLE \"",
      "code": "if ( arr [ x ] == \" TRIANGLE \" )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print \" TRIANGLE \" print newline",
      "code": "cout << \" TRIANGLE \" << endl ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "for x = 0 to 4 exclusive",
      "code": "for ( int x = 0 ; x < 4 ; x ++ )",
      "indent": 1
    },
    {
      "line": 35,
      "text": "if arr [ x ] is \" SEGMENT \"",
      "code": "if ( arr [ x ] == \" SEGMENT \" )",
      "indent": 2
    },
    {
      "line": 36,
      "text": "print \" SEGMENT \" print newline",
      "code": "cout << \" SEGMENT \" << endl ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "print \" IMPOSSIBLE \" print newline",
      "code": "cout << \" IMPOSSIBLE \" << endl ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char arr [ 4 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( arr [ 0 ] == \" IMPOSSIBLE \" )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( arr [ 1 ] == \" IMPOSSIBLE \" )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( x = 0 ; x < 4 ; x ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 29,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "for ( x = 0 ; x < 4 ; x ++ )"
      ],
      "err_line": 34,
      "err_msg": "name lookup of ‘x’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )"
      ],
      "err_line": 35,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        21,
        27
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        35
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        35,
        29
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        35,
        17
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        35,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        29
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        29,
        17
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        29,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        17
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        27,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        35
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        35,
        29
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        35,
        29,
        17
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        35,
        29,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        35,
        17
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        35,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        35,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        29
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        29,
        17
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        29,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        29,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        17
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        13
      ],
      "mod_code": [
        "if ( arr [ 2 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        35
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        35,
        29
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        35,
        29,
        17
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        35,
        29,
        13
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        35,
        17
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        35,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        35,
        13
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        29
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        29,
        17
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        29,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        29,
        13
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        17
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        13
      ],
      "mod_code": [
        "if ( arr [ 3 ] == \" IMPOSSIBLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        29
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )"
      ],
      "err_line": 29,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        35,
        29,
        17
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        35,
        29,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 31,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        35,
        29,
        13
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        35,
        17
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 36,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        35,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 37,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        35,
        13
      ],
      "mod_code": [
        "if ( arr [ x ] == ' SEGMENT ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 36,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        29,
        17
      ],
      "mod_code": [
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        29,
        17,
        13
      ],
      "mod_code": [
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 2 ] == \" TRIANGLE \" )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 31,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        29,
        13
      ],
      "mod_code": [
        "if ( arr [ x ] == ' TRIANGLE ' )",
        "if ( arr [ 1 ] == \" SEGMENT \" )"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    }
  ]
}