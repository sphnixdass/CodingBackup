{
  "meta": {
    "index": 1631,
    "hitid": "3GMLHYZ0LERIOM7FXJ458R5TC3WUYV",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "47632280"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare sieve with integer n , integer vector address prime as arguments , returning void",
      "code": "void sieve ( int n , vector < int > & prime ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare is_prime with integer num as argument , returning boolean",
      "code": "bool is_prime ( int num ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer k",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer count with count = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer sum with sum = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer vector prime",
      "code": "vector < int > prime ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "run sieve with n , prime as arguments",
      "code": "sieve ( n , prime ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to size of prime exclusive",
      "code": "for ( int i = 0 ; i < prime . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set sum to prime [ i ] + prime [ i + 1 ] + 1",
      "code": "sum = prime [ i ] + prime [ i + 1 ] + 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if result of run is_prime with sum as argument is true and sum is less than or equal to n",
      "code": "if ( is_prime ( sum ) == true && sum <= n )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if count is greater than or equal to k",
      "code": "if ( count >= k )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 24,
      "text": "declare sieve with integer n , integer vector address prime as arguments , returning void",
      "code": "void sieve ( int n , vector < int > & prime )",
      "indent": 0
    },
    {
      "line": 25,
      "text": "create boolean array mark with size n + 1",
      "code": "bool mark [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set bytes from mark to size of mark to value true",
      "code": "memset ( mark , true , sizeof ( mark ) ) ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for i = 2 to i * i is less than or equal to n , incrementing i",
      "code": "for ( int i = 2 ; i * i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if mark [ i ] is true",
      "code": "if ( mark [ i ] == true )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "for j = i * i to n inclusive , incrementing j by i , set mark [ j ] to false",
      "code": "for ( int j = i * i ; j <= n ; j += i ) { mark [ j ] = false ; }",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if mark [ i ] is true , add element i to end of prime",
      "code": "if ( mark [ i ] == true ) { prime . push_back ( i ) ; }",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 36,
      "text": "declare is_prime with integer num as argument , returning boolean",
      "code": "bool is_prime ( int num )",
      "indent": 0
    },
    {
      "line": 37,
      "text": "create integer count with count = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "if num is 0",
      "code": "if ( num == 0 )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 41,
      "text": "for i = 2 to num / 2 inclusive",
      "code": "for ( int i = 2 ; i <= num / 2 ; i ++ )",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if num % i is 0",
      "code": "if ( num % i == 0 )",
      "indent": 3
    },
    {
      "line": 43,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 45,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 46,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 49,
      "text": "if count is 0",
      "code": "if ( count == 0 )",
      "indent": 2
    },
    {
      "line": 50,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 3
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 52,
      "text": "return false from function",
      "code": "return false ;",
      "indent": 3
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool is_prime ( int num )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘push_back’ in ‘prime’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void sieve ( int n , int & prime ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid initialization of reference of type ‘int&’ from expression of type ‘std::vector<int>’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( cin >> n >> k )"
      ],
      "err_line": 13,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "vector < long int > prime ;"
      ],
      "err_line": 9,
      "err_msg": "invalid initialization of reference of type ‘std::vector<int>&’ from expression of type ‘std::vector<long int>’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "sieve ( n , prime ( ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "no match for call to ‘(std::vector<int>) ()’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "void sieve ( int n , int & prime ) ;"
      ],
      "err_line": 25,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "bool mark [ n ] [ 1 ] ;"
      ],
      "err_line": 28,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= n ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 32,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 37,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "for ( i = 2 ; i <= num / 2 ; i ++ )"
      ],
      "err_line": 41,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "continue ;"
      ],
      "err_line": 50,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 52,
      "err_msg": "return-statement with no value, in function returning ‘bool’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        24
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        5
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "while ( cin >> n >> k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "while ( cin >> n >> k )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        36,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        1,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "void sieve ( int n , int & prime )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        24,
        5
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        24,
        5,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        24,
        5,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        24,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        24,
        36,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        24,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "void sieve ( int n , int & prime )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        5,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        5,
        36,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        5,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        36,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘bool’"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        24,
        5
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        24,
        5,
        36
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        24,
        5,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        24,
        36
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        24,
        36,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        24,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "void sieve ( int n , int & prime )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "while ( cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        36
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        36,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "while ( cin >> n >> k )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        36
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        36,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )"
      ],
      "err_line": 13,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        24,
        5,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 13,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        24,
        5,
        36,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        5,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "while ( cin >> n >> k )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        36
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘push_back’ in ‘prime’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        24,
        36,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        10
      ],
      "mod_code": [
        "void sieve ( int n , int & prime )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        36
      ],
      "mod_code": [
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;"
      ],
      "err_line": 13,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        5,
        36,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> k )",
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "while ( cin >> n >> k )",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        10
      ],
      "mod_code": [
        "bool is_prime ( int num ) ;",
        "for ( i = 0 ; i < prime . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}