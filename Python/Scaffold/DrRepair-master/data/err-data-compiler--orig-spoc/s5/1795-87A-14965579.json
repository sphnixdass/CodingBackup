{
  "meta": {
    "index": 1795,
    "hitid": "3XBYQ44Z6PYZZ4XQIDW7IYYBJJ3TWN",
    "workerid": "AIWEXPJAU66D9",
    "probid": "87A",
    "subid": "14965579"
  },
  "lines": [
    {
      "line": 0,
      "text": "function gcd with long long arguments a and b that returns long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return gcd ( b , a % b ) if a modulo b is not 0 , or b otherwise",
      "code": "return a % b ? gcd ( b , a % b ) : b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create long longs a , b , c , d and e",
      "code": "long long a , b , c , d , e ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a and b from the user input",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "assign the new value = ( a * b ) / gcd ( a , b ) to c",
      "code": "c = ( a * b ) / gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "assign the new value = c / a to d",
      "code": "d = c / a ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "change e to c / b",
      "code": "e = c / b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a > b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "decrease e by 1",
      "code": "e -= 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if b is greater than a",
      "code": "else if ( b > a )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "change d to d - 1",
      "code": "d -= 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if d > e",
      "code": "if ( d > e )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" Dasha \" to the standard output",
      "code": "cout << \" Dasha \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if e is greater than d",
      "code": "else if ( e > d )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" Masha \"",
      "code": "cout << \" Masha \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" Equal \" to the standard output",
      "code": "cout << \" Equal \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        16,
        15,
        5
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "cout << \" Masha \" ;",
        "else if ( e >= d )",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        16,
        14,
        5
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "cout << \" Masha \" ;",
        "cout << \" Dasha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        16,
        5
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "cout << \" Masha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        16,
        5,
        18
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "cout << \" Masha \" ;",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        15,
        14,
        5
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "else if ( e >= d )",
        "cout << \" Dasha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        15,
        5
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "else if ( e >= d )",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        15,
        5,
        18
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "else if ( e >= d )",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        5
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "cout << \" Dasha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        14,
        5,
        18
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "cout << \" Dasha \" ;",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        1,
        5,
        18
      ],
      "mod_code": [
        "return ( a % b != 0 ) ? gcd ( b , a ) : b ;",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        15,
        14,
        5
      ],
      "mod_code": [
        "cout << \" Masha \" ;",
        "else if ( e >= d )",
        "cout << \" Dasha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        15,
        5
      ],
      "mod_code": [
        "cout << \" Masha \" ;",
        "else if ( e >= d )",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        15,
        5,
        18
      ],
      "mod_code": [
        "cout << \" Masha \" ;",
        "else if ( e >= d )",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        14,
        5
      ],
      "mod_code": [
        "cout << \" Masha \" ;",
        "cout << \" Dasha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        14,
        5,
        18
      ],
      "mod_code": [
        "cout << \" Masha \" ;",
        "cout << \" Dasha \" ;",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "cout << \" Masha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        5,
        18
      ],
      "mod_code": [
        "cout << \" Masha \" ;",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        15,
        14,
        5
      ],
      "mod_code": [
        "else if ( e >= d )",
        "cout << \" Dasha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        15,
        14,
        5,
        18
      ],
      "mod_code": [
        "else if ( e >= d )",
        "cout << \" Dasha \" ;",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "else if ( e >= d )",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        15,
        5,
        18
      ],
      "mod_code": [
        "else if ( e >= d )",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "cout << \" Dasha \" ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        14,
        5,
        18
      ],
      "mod_code": [
        "cout << \" Dasha \" ;",
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "int a >> b ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    }
  ]
}