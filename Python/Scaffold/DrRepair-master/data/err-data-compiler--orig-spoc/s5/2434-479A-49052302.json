{
  "meta": {
    "index": 2434,
    "hitid": "3XJOUITW8ULUF71464X1Q9GPUVQTQC",
    "workerid": "AIWEXPJAU66D9",
    "probid": "479A",
    "subid": "49052302"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers a , b and c",
      "code": "int a , b , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer array arr with 5 elements",
      "code": "int arr [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "arr [ 0 ] = a + b * c",
      "code": "arr [ 0 ] = a + b * c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "arr [ 1 ] = a * ( b + c )",
      "code": "arr [ 1 ] = a * ( b + c ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "arr [ 2 ] = a * b * c",
      "code": "arr [ 2 ] = a * b * c ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "arr [ 3 ] = ( a + b ) * c",
      "code": "arr [ 3 ] = ( a + b ) * c ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "arr [ 4 ] = a + b + c",
      "code": "arr [ 4 ] = a + b + c ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integer variable maximum = arr [ 0 ]",
      "code": "int maximum = arr [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 1 to 4 inclusive",
      "code": "for ( int i = 1 ; i <= 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if arr [ i ] is greater than maximum , set maximum to arr [ i ]",
      "code": "if ( arr [ i ] > maximum ) { maximum = arr [ i ] ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print maximum",
      "code": "cout << maximum << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << max << endl ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::ostream {aka std::basic_ostream<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = ( a + b ) * c ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘int arr [3]’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 4 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        8
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        8,
        9
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        8,
        4
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        8,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        9
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        9,
        4
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        9,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "int arr = arr [ 0 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        4
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        4,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        2,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 5 5 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 4 ] += c + c ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::ostream {aka std::basic_ostream<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        13,
        8,
        9
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        13,
        8,
        9,
        4
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        13,
        8,
        9,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        13,
        8,
        4
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 4 ] += c + c ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::ostream {aka std::basic_ostream<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        13,
        8,
        4,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 4 ] += c + c ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        13,
        8,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 4 ] += c + c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        13,
        9,
        4
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        13,
        9,
        4,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        13,
        9,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr = arr [ 0 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::ostream {aka std::basic_ostream<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        13,
        4,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "cout << max << endl ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        4
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        5
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        4
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        4,
        5
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        8,
        5
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 4 ] += c + c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        9,
        4
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        9,
        4,
        5
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        9,
        5
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "int arr = arr [ 0 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int arr [ 5 5 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        8,
        9,
        4
      ],
      "mod_code": [
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        8,
        9,
        4,
        5
      ],
      "mod_code": [
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        8,
        9,
        5
      ],
      "mod_code": [
        "arr [ 4 ] += c + c ;",
        "int arr = arr [ 0 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        8,
        4,
        5
      ],
      "mod_code": [
        "arr [ 4 ] += c + c ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "arr [ 4 ] += c + c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        4,
        5
      ],
      "mod_code": [
        "int arr = arr [ 0 ] ;",
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "int arr = arr [ 0 ] ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "arr [ 0 ] += c * c ;",
        "int arr [ 1 ] = a * ( b + c ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int arr [1]’"
    }
  ]
}