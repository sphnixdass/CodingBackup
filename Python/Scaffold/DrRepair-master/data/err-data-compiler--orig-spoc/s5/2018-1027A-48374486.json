{
  "meta": {
    "index": 2018,
    "hitid": "3QO7EE372OHUJL7N6I6GQFA3PBQBQF",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1027A",
    "subid": "48374486"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = array of integers of length n",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let ans , t be integers with ans = 0",
      "code": "int ans = 0 , t ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to t / 2 exclusive",
      "code": "for ( int j = 0 ; j < t / 2 ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "let g , g1 be integers with g = s [ j ] + 1 , g1 = s [ t - j - 1 ] + 1",
      "code": "int g = s [ j ] + 1 , g1 = s [ t - j - 1 ] + 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "let b , b1 be integers with b = s [ j ] - 1 , b1 = s [ t - j - 1 ] - 1",
      "code": "int b = s [ j ] - 1 , b1 = s [ t - j - 1 ] - 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if ( g is equal to g1 ) or ( g is equal to b1 ) or ( b is equal to g1 ) or ( b is equal to b1 ) , increment ans by 1",
      "code": "if ( ( g == g1 ) || ( g == b1 ) || ( b == g1 ) || ( b == b1 ) ) ans ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if ans is equal to t / 2",
      "code": "if ( ans == t / 2 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "a [ i ] is equal to 1",
      "code": "a [ i ] = 1 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "a [ i ] is equal to 0",
      "code": "a [ i ] = 0 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if a [ i ] is equal to 1",
      "code": "if ( a [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print YES and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print NO and new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * a [ n ] ;"
      ],
      "err_line": 15,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin . get ( t ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < t / 2 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int g = s [ j ] + 1 , g1 -= 1 - j - 1 ] + 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        12,
        7
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        12,
        7,
        11
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        12,
        7,
        19
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        12,
        7,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        12,
        11
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        5,
        12,
        11,
        19
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        5,
        12,
        11,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        5,
        12,
        19
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        12,
        19,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "char s ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        19
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        19
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "char s ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        19,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "char s ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "char s ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        5,
        11,
        19
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        5,
        11,
        19,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        5,
        11,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        20
      ],
      "mod_code": [
        "int ans , t = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        11
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        11,
        19
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        11,
        20
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        19
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        19,
        20
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        7,
        20
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "char s ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        12,
        11,
        19
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        12,
        11,
        19,
        20
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        12,
        11,
        20
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        20
      ],
      "mod_code": [
        "if ( ( g == g1 ) || ( b == g1 ) || ( b == g1 ) ) ans ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        19
      ],
      "mod_code": [
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        19,
        20
      ],
      "mod_code": [
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        20
      ],
      "mod_code": [
        "char s ;",
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19
      ],
      "mod_code": [
        "char s ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        20
      ],
      "mod_code": [
        "char s ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "char s ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        19
      ],
      "mod_code": [
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        11,
        19,
        20
      ],
      "mod_code": [
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        11,
        20
      ],
      "mod_code": [
        "int b = s [ j ] - 1 , b1 *= 1 - j - 1 ] - 1 ;",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘*=’ token"
    },
    {
      "mod_line": [
        19,
        20
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] == ' 1 ' )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}