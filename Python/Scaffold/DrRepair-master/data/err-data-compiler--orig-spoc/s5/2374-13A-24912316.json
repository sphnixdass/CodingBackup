{
  "meta": {
    "index": 2374,
    "hitid": "3OCZWXS7ZO1H38A1D37767BH47ZL5C",
    "workerid": "A1APYLD4DUK33J",
    "probid": "13A",
    "subid": "24912316"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare lcm with integers a , b as arguments , returning integer",
      "code": "int lcm ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is less than b",
      "code": "if ( a < b )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer tem with tem = a",
      "code": "int tem = a ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "set a to b",
      "code": "a = b ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "set b to tem",
      "code": "b = tem ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a % b is 0",
      "code": "if ( a % b == 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return b from function",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return result of run lcm with arguments b , a % b",
      "code": "return lcm ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "create integers sum , n , su , i",
      "code": "int sum , n , su , i ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while read n is true",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set sum to 0",
      "code": "sum = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for i = 2 to n exclusive",
      "code": "for ( i = 2 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set su to 0",
      "code": "su = 0 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "create integer tem with tem = n",
      "code": "int tem = n ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "while tem is not 0",
      "code": "while ( tem != 0 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment su by tem % i",
      "code": "su += tem % i ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "set tem to tem / i",
      "code": "tem = tem / i ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "increment sum by su",
      "code": "sum += su ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "create integer re with re = result of run lcm with arguments sum , n - 2",
      "code": "int re = lcm ( sum , n - 2 ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print sum / re print / print ( n - 2 ) / re print newline",
      "code": "cout << sum / re << \" / \" << ( n - 2 ) / re << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        24,
        0
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int re = lcm ( sum , n ) - 2 ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        24,
        0,
        13
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int re = lcm ( sum , n ) - 2 ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        24,
        0,
        9
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int re = lcm ( sum , n ) - 2 ;",
        "int lcm ( int a , int b ) ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        24,
        13,
        9
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int re = lcm ( sum , n ) - 2 ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        24,
        9
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int re = lcm ( sum , n ) - 2 ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        0
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0,
        13
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0,
        13,
        9
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0,
        9
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        13,
        9
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        9
      ],
      "mod_code": [
        "cout << sum / re << \" \" << ( n - 2 ) / re << endl ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        25,
        0
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        25,
        0,
        13
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        25,
        0,
        9
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        25,
        13,
        9
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        25,
        9
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        0
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        0,
        13
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        0,
        13,
        9
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        0,
        9
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "int lcm ( int a , int b ) ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        13,
        9
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        9
      ],
      "mod_code": [
        "int re = lcm ( sum , n ) - 2 ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        0
      ],
      "mod_code": [
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0,
        13
      ],
      "mod_code": [
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0,
        13,
        9
      ],
      "mod_code": [
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0,
        9
      ],
      "mod_code": [
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "int lcm ( int a , int b ) ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        13,
        9
      ],
      "mod_code": [
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        9
      ],
      "mod_code": [
        "cout << sum / re << ( n - 2 ) / re << endl ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "while ( n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        9
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "while ( n )",
        "return lcm run ( b , a % b ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    }
  ]
}