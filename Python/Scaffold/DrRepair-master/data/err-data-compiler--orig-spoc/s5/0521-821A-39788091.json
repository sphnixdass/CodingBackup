{
  "meta": {
    "index": 521,
    "hitid": "36D1BWBEHNV9AT9ZVW6O8DNUL4FM20",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "821A",
    "subid": "39788091"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = n by n int matrix",
      "code": "int a [ n ] [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to n exclusive , increment j after , read a [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "ans = 1 = int",
      "code": "int ans = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = - to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if a [ i ] [ j ] isn ' t 1",
      "code": "if ( a [ i ] [ j ] != 1 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "flag = int = 0",
      "code": "int flag = 0 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "for k = 0 to n exclusive",
      "code": "for ( int k = 0 ; k < n ; k ++ )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "for l = 0 to l exclusive",
      "code": "for ( int l = 0 ; l < n ; l ++ )",
      "indent": 5
    },
    {
      "line": 14,
      "text": "if k = i and l = j are both not met",
      "code": "if ( ! ( k == i && l == j ) )",
      "indent": 6
    },
    {
      "line": 15,
      "text": "if a [ k ] kj ] + a [ i ] [ j ] = a [ i ] [ j ]",
      "code": "if ( a [ k ] [ j ] + a [ i ] [ l ] == a [ i ] [ j ] )",
      "indent": 7
    },
    {
      "line": 16,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 8
    },
    {
      "line": 17,
      "text": "exit loop",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 7
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "if flag is 0",
      "code": "if ( flag == 0 )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "reset ans to 0",
      "code": "ans = 0 ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "exit loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if ans is = then exit loop",
      "code": "if ( ans == 0 ) { break ; }",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if ans is 0",
      "code": "if ( ans == 0 )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print No",
      "code": "cout << \" No\\n \" ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print Yes",
      "code": "cout << \" Yes\\n \" ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( k == i && l == met )"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "string flag = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( k = 0 ; k < n ; k ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( l = 0 ; l < l ; l ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( a [ k ] == a + a [ i ] ) j = a [ i ] [ j ] ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        13,
        14
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        14,
        15
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        14,
        4
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        14,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        15
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        13,
        15,
        4
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        15,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "int flag = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        13,
        4
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        4,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( int l = 0 ; l < l ; l ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( k == i && l == met )"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        15
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        15,
        4
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        15,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        4
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( k == i && l == met )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        4,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( k == i && l == met )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( k == i && l == met )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        15,
        4
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        4,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "int flag = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4,
        16
      ],
      "mod_code": [
        "for ( int j = - 1 ; j < n ; j ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        4
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        16
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        4
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        4,
        16
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( k == i && l == met )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        15,
        4
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        4,
        16
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "int flag = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        4,
        16
      ],
      "mod_code": [
        "for ( int l = 0 ; l < l ; l ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        4
      ],
      "mod_code": [
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        4,
        16
      ],
      "mod_code": [
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        16
      ],
      "mod_code": [
        "if ( k == i && l == met )",
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "if ( k == i && l == met )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        4,
        16
      ],
      "mod_code": [
        "if ( k == i && l == met )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "if ( k == i && l == met )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘met’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4,
        16
      ],
      "mod_code": [
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "if ( a [ k ] == a + a [ i ] ) { a [ i ] [ j ] = a [ i ] [ j ] ; }",
        "int flag = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}