{
  "meta": {
    "index": 2265,
    "hitid": "3SD15I2WD2OW68KQCGDC2RV00GK630",
    "workerid": "AIWEXPJAU66D9",
    "probid": "6A",
    "subid": "42108057"
  },
  "lines": [
    {
      "line": 0,
      "text": "let l be an array of integers of size 4",
      "code": "int l [ 4 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "for i = 0 to 3 inclusive read l [ i ]",
      "code": "for ( int i = 0 ; i <= 3 ; ++ i ) cin >> l [ i ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "sort array l",
      "code": "sort ( l , l + 4 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if l [ 1 ] + l [ 2 ] is greater than l [ 3 ] or l [ 0 ] + l [ 1 ] is greater than l [ 2 ]",
      "code": "if ( ( l [ 1 ] + l [ 2 ] > l [ 3 ] ) || ( l [ 0 ] + l [ 1 ] > l [ 2 ] ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" TRIANGLE \" and a new line",
      "code": "cout << \" TRIANGLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if l [ 1 ] + l [ 2 ] = l [ 3 ] or l [ 0 ] + l [ 1 ] = l [ 2 ]",
      "code": "if ( ( l [ 1 ] + l [ 2 ] == l [ 3 ] ) || ( l [ 0 ] + l [ 1 ] == l [ 2 ] ) )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" SEGMENT \" and a new line",
      "code": "cout << \" SEGMENT \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" IMPOSSIBLE \" and a new line",
      "code": "cout << \" IMPOSSIBLE \" << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "sort ( l , l + n ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        9,
        5
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        9,
        5,
        4
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        9,
        5,
        12
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        9,
        4
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        12
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        12
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        5,
        12
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "sort ( l . begin ( ) , l . end ( ) ) ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘begin’ in ‘l’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        9,
        5,
        3
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        3,
        4
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        3,
        12
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3,
        4
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3,
        4,
        12
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3,
        12
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        12
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3,
        12
      ],
      "mod_code": [
        "cout << \" yes\\n \" << endl ;",
        "sort ( l , l + n ) ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "sort ( l , l + n ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "sort ( l , l + n ) ;",
        "if ( l [ 1 ] + l [ 2 ] > l [ 3 ] && l [ 0 ] + l [ 1 ] > l [ 2 ] )",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "sort ( l , l + n ) ;",
        "cout << \" yes\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}