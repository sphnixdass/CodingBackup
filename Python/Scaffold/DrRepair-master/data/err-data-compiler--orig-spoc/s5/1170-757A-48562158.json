{
  "meta": {
    "index": 1170,
    "hitid": "3Q2T3FD0ON2YVB5IZWKTRNSMRIAM36",
    "workerid": "AIWEXPJAU66D9",
    "probid": "757A",
    "subid": "48562158"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string s1",
      "code": "string s1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer array a with 7 elements filled with 0",
      "code": "int a [ 7 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s1",
      "code": "cin >> s1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to length of s1 exclusive",
      "code": "for ( int i = 0 ; i < s1 . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s1 [ i ] = ' B '",
      "code": "if ( s1 [ i ] == ' B ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment a [ 0 ]",
      "code": "a [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if s1 [ i ] = ' u '",
      "code": "else if ( s1 [ i ] == ' u ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment a [ 1 ]",
      "code": "a [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if s1 [ i ] = ' l '",
      "code": "else if ( s1 [ i ] == ' l ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment a [ 2 ]",
      "code": "a [ 2 ] ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if s1 [ i ] = ' b '",
      "code": "else if ( s1 [ i ] == ' b ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment a [ 3 ]",
      "code": "a [ 3 ] ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if s1 [ i ] = ' a '",
      "code": "else if ( s1 [ i ] == ' a ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment a [ 4 ]",
      "code": "a [ 4 ] ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if s1 [ i ] = ' s '",
      "code": "else if ( s1 [ i ] == ' s ' )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment a [ 5 ]",
      "code": "a [ 5 ] ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if s1 [ i ] = ' r '",
      "code": "else if ( s1 [ i ] == ' r ' )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment a [ 6 ]",
      "code": "a [ 6 ] ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "change a [ 1 ] to a [ 1 ] / 2",
      "code": "a [ 1 ] = a [ 1 ] / 2 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "change a [ 4 ] to a [ 4 ] / 2",
      "code": "a [ 4 ] = a [ 4 ] / 2 ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "sort a",
      "code": "sort ( a , a + 7 ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print a [ 0 ]",
      "code": "cout << a [ 0 ] << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "sort ( a , a + n ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s1 declare"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' u ' ) i ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' b ' ) i ++ ;"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 17,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "request for member ‘begin’ in ‘a’, which is of non-class type ‘int [7]’"
    },
    {
      "mod_line": [
        22,
        9
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' l ' ) i ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        9,
        15
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        9,
        15,
        23
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        9,
        15,
        5
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        9,
        23
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "cout << a [ 0 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        9,
        23,
        5
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        9,
        5
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        15
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 17,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        15,
        23
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        15,
        23,
        5
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        15,
        5
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        23
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "cout << a [ 0 ] ;"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        23,
        5
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        5
      ],
      "mod_code": [
        "sort ( a , a + n ) ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        15,
        23
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        15,
        23,
        5
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        15,
        23,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        15,
        5
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        15,
        5,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        15,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "cout << a [ 0 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        23,
        5
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        23,
        5,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        23,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        5,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' l ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;"
      ],
      "err_line": 17,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        23,
        5
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        23,
        5,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        23,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "cout << a [ 0 ] ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        5,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        22
      ],
      "mod_code": [
        "else if ( s1 [ i ] == ' s ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        5
      ],
      "mod_code": [
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        5,
        22
      ],
      "mod_code": [
        "cout << a [ 0 ] ;",
        "if ( s1 [ i ] == ' B ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        22
      ],
      "mod_code": [
        "cout << a [ 0 ] ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "request for member ‘begin’ in ‘a’, which is of non-class type ‘int [7]’"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "if ( s1 [ i ] == ' B ' ) i ++ ;",
        "sort ( a . begin ( ) , a . end ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}