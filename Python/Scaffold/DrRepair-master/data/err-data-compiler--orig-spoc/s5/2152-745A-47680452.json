{
  "meta": {
    "index": 2152,
    "hitid": "3DQYSJDTYL5CZLKJ2N3YLVCHPBHEX6",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "745A",
    "subid": "47680452"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare function rotate which string S and integer len as arguments",
      "code": "void rotate ( char S [ ] , int len )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character t with t = first letter of string S",
      "code": "char t = S [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for integer i = 0 to len - 1 with increment i do set S [ i ] to S [ i + 1 ]",
      "code": "for ( int i = 0 ; i < len - 1 ; i ++ ) { S [ i ] = S [ i + 1 ] ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set S [ len - 1 ] to t",
      "code": "S [ len - 1 ] = t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create string S with 51 characters",
      "code": "char S [ 51 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "get S",
      "code": "cin >> S ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create two dimensional string array arr with arguments 51 and 51",
      "code": "char arr [ 51 ] [ 51 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create integer len with len = 0",
      "code": "int len = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for integer i = 0 to S [ i ] with increment i do increment len",
      "code": "for ( int i = 0 ; S [ i ] ; i ++ ) { len ++ ; }",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for integer i = 0 to len - 1 with increment i",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "copy S to arr [ i ]",
      "code": "strcpy ( arr [ i ] , S ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "call rotate function with arguments S and len",
      "code": "rotate ( S , len ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create integers flag and count with count = 0",
      "code": "int flag , count = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for integer j = 0 to i exclusive",
      "code": "for ( int j = 0 ; j < i ; j ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if arr [ i ] equal to arr [ [ j ] then",
      "code": "if ( strcmp ( arr [ i ] , arr [ j ] ) == 0 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if flag equal to 1 then increment count",
      "code": "if ( flag ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print count",
      "code": "cout << count << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char t [ S ] ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string S ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char t [ t ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string S [ 51 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [51] {aka std::__cxx11::basic_string<char> [51]}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "strcpy ( arr [ i ] , arr ) ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char (*)[51]’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "rotate ( S & len ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid operands of types ‘char [51]’ and ‘int’ to binary ‘operator&’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( arr [ i ] == arr [ [ j ] )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘{’ before ‘)’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        8
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        10
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "string S ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "string S ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        8
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        8,
        10
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        8,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "string arr [ 51 ] [ 51 ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        10
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        10,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        1,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "char t [ S ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string S ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        10
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        6,
        10
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string S ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        6,
        10,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string S ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        6,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string S ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        8,
        10
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        8,
        10,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        0,
        8,
        19
      ],
      "mod_code": [
        "int rotate ( string S , int len )",
        "string arr [ 51 ] [ 51 ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string S ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        10
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        19
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string S ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        19
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string S ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        6,
        19
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string S ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        8,
        10
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        19
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        8,
        19
      ],
      "mod_code": [
        "char t [ S ] ;",
        "string arr [ 51 ] [ 51 ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char t [ S ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        10,
        19
      ],
      "mod_code": [
        "char t [ S ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "char t [ S ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘t’ has non-integral type ‘char*’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        19
      ],
      "mod_code": [
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        6,
        8,
        19
      ],
      "mod_code": [
        "string S ;",
        "string arr [ 51 ] [ 51 ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "string S ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        6,
        10,
        19
      ],
      "mod_code": [
        "string S ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "string S ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8,
        10,
        19
      ],
      "mod_code": [
        "string arr [ 51 ] [ 51 ] ;",
        "for ( int i = 0 ; S [ i ] ; i ++ )",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "string arr [ 51 ] [ 51 ] ;",
        "if ( arr [ i ] == arr [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    }
  ]
}