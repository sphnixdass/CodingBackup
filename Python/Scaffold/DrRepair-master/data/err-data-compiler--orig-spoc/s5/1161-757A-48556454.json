{
  "meta": {
    "index": 1161,
    "hitid": "36GJS3V78VK9OFBLREELUPPERTKJG7",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "757A",
    "subid": "48556454"
  },
  "lines": [
    {
      "line": 0,
      "text": "alpha = 2d integer array of size [ 2 ] [ 26 ]",
      "code": "int alpha [ 2 ] [ 26 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "c = character",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read c",
      "code": "while ( cin >> c )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if c is new line , break loop",
      "code": "if ( c == ' \\n ' ) break ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if isalpha ( c )",
      "code": "if ( isalpha ( c ) )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if c > = a and c < = z",
      "code": "if ( c >= ' a ' && c <= ' z ' )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increment alpha [ 0 ] [ c - a ]",
      "code": "alpha [ 0 ] [ c - ' a ' ] ++ ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment alpha [ 1 ] [ c - A ]",
      "code": "alpha [ 1 ] [ c - ' A ' ] ++ ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "out = integer with out = alpha [ 1 ] [ B - A ]",
      "code": "int out = alpha [ 1 ] [ ' B ' - ' A ' ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if alpha [ 0 ] [ u - a ] / 2 < out , out = alpha [ 0 ] [ u - a ] / 2",
      "code": "if ( alpha [ 0 ] [ ' u ' - ' a ' ] / 2 < out ) out = alpha [ 0 ] [ ' u ' - ' a ' ] / 2 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if alpha [ 0 ] [ l - a ] < out , out = alpha [ 0 ] [ l - a ]",
      "code": "if ( alpha [ 0 ] [ ' l ' - ' a ' ] < out ) out = alpha [ 0 ] [ ' l ' - ' a ' ] ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if alpha [ 0 ] [ b - a ] < out , out = alpha [ 0 ] [ b - a ]",
      "code": "if ( alpha [ 0 ] [ ' b ' - ' a ' ] < out ) out = alpha [ 0 ] [ ' b ' - ' a ' ] ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if alpha [ 0 ] [ a - a ] / 2 < out , out = alpha [ 0 ] [ a - a ] / 2",
      "code": "if ( alpha [ 0 ] [ ' a ' - ' a ' ] / 2 < out ) out = alpha [ 0 ] [ ' a ' - ' a ' ] / 2 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if alpha [ 0 ] [ s - a ] < out , out = alpha [ 0 ] [ s - a ]",
      "code": "if ( alpha [ 0 ] [ ' s ' - ' a ' ] < out ) out = alpha [ 0 ] [ ' s ' - ' a ' ] ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if alpha [ 0 ] [ r - a ] < out , out = alpha [ 0 ] [ r - a ]",
      "code": "if ( alpha [ 0 ] [ ' r ' - ' a ' ] < out ) out = alpha [ 0 ] [ ' r ' - ' a ' ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print out",
      "code": "cout << out << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( c >= a && c <= z )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 17,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 18,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( { cin >> c )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( c == \" \\n \" ) break ;"
      ],
      "err_line": 4,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "alpha [ 0 ] [ c - a ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "alpha [ 1 ] [ c - A ] ++ ;"
      ],
      "err_line": 9,
      "err_msg": "‘A’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) { out = alpha [ 0 ] [ u - a ] / 2 ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) { out = alpha [ 0 ] [ l - a ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) out = alpha [ 0 ] [ b - a ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) { out = alpha [ 0 ] [ a - a ] / 2 ; }"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ s - ' a ' ] == out ) { out = alpha [ 0 ] [ s - ' a ' ] ; }"
      ],
      "err_line": 17,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ r - a ] < out ) { out = alpha [ 0 ] [ r - a ] ; }"
      ],
      "err_line": 18,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        14
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        15
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        15
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        15
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        16,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        16,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        17,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14,
        15
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        15
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        15,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        15,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        15,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        16,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        16,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        17,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        15
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        17,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        16,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        16,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "if ( c >= a && c <= z )",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        14
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        15
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        16
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        15
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        15,
        16
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        15,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        15,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        16
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        16,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        16,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        17,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        15
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        16
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        16
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        16,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        16,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        17,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        16
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        16,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        16,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        17,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16,
        17,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "int out = alpha [ 1 ] [ B - ' A ' ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘B’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ u - a ] / 2 < out ) out = alpha [ 0 ] [ u - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘u’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ l - a ] < out ) out = alpha [ 0 ] [ l - a ] ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 14,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ b - a ] < out ) { out = alpha [ 0 ] [ b - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ a - a ] / 2 < out ) out = alpha [ 0 ] [ a - a ] / 2 ;",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "if ( alpha [ 0 ] [ s - a ] < out ) { out = alpha [ 0 ] [ s - a ] ; }",
        "if ( alpha [ 0 ] [ r - a ] < out ) out = alpha [ 0 ] [ r - a ] ;"
      ],
      "err_line": 17,
      "err_msg": "‘s’ was not declared in this scope"
    }
  ]
}