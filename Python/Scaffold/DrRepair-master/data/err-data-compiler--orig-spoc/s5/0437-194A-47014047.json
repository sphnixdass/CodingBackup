{
  "meta": {
    "index": 437,
    "hitid": "3RTFSSG7T80BGRPL94UGW7OUP6MWLS",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "194A",
    "subid": "47014047"
  },
  "lines": [
    {
      "line": 0,
      "text": "create const int N = 1e5 + 100",
      "code": "const int N = 1e5 + 100 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make ints n , k , and ans and int array a of size 55",
      "code": "int n , k , ans , a [ 55 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer vector v",
      "code": "vector < int > v ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "make bool flag",
      "code": "bool flag ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare check returning bool",
      "code": "bool check ( )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "make integer sum = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive , add a [ i ] to sum",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if sum is equal to k , return true",
      "code": "if ( sum == k ) return true ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive , set a [ i ] to 2",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = 2 ; }",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if check ( ) returns true",
      "code": "if ( check ( ) )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "show n",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 2 to 5",
      "code": "for ( int i = 2 ; i <= 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment a [ j ]",
      "code": "a [ j ] ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if check ( ) is truthy",
      "code": "if ( check ( ) )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "set flag to true",
      "code": "flag = true ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if flag is truthy , break loop",
      "code": "if ( flag ) break ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if a [ i ] is equal to 2 , add 1 to ans",
      "code": "if ( a [ i ] == 2 ) ans ++ ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "display ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a , a [ 55 ] , ans ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int a [55]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool check ( ) { }"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( check ( ) == ) )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 27,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        27
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        27,
        18
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        27,
        18,
        2
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4,
        27,
        18,
        3
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        27,
        18,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        27,
        2
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4,
        27,
        2,
        3
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "vector < vector < int > v ;",
        "bool flag = )"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4,
        27,
        2,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "vector < vector < int > v ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        27,
        3
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        27,
        3,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        27,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "if ( flag ) return ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "bool check ( ) { }",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        18,
        2
      ],
      "mod_code": [
        "bool check ( ) { }",
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4,
        18,
        2,
        3
      ],
      "mod_code": [
        "bool check ( ) { }",
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;",
        "bool flag = )"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4,
        18,
        2,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        18,
        3
      ],
      "mod_code": [
        "bool check ( ) { }",
        "for ( j = 0 ; j < n ; j ++ )",
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        18,
        3,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "for ( j = 0 ; j < n ; j ++ )",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        18,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "for ( j = 0 ; j < n ; j ++ )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "bool check ( ) { }",
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "bool check ( ) { }",
        "vector < vector < int > v ;",
        "bool flag = )"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "vector < vector < int > v ;",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        2,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "vector < vector < int > v ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "bool check ( ) { }",
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "bool check ( ) { }",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        27,
        18
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        18,
        2
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        27,
        18,
        2,
        3
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;",
        "bool flag = )"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        27,
        18,
        2,
        0
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        27,
        18,
        3
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        27,
        18,
        3,
        0
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        27,
        18,
        0
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        27,
        2
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        27,
        2,
        3
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "vector < vector < int > v ;",
        "bool flag = )"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        27,
        2,
        3,
        0
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "vector < vector < int > v ;",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        27,
        2,
        0
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "vector < vector < int > v ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        27,
        3
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        27,
        3,
        0
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        27,
        0
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        18,
        2,
        3
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;",
        "bool flag = )"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        18,
        2,
        3,
        0
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        18,
        2,
        0
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "vector < vector < int > v ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "bool flag = )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        3,
        0
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        18,
        0
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "vector < vector < int > v ;",
        "bool flag = )"
      ],
      "err_line": 2,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        2,
        3,
        0
      ],
      "mod_code": [
        "vector < vector < int > v ;",
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "vector < vector < int > v ;",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "bool flag = )",
        "const const int N = 1e5 + 100 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    }
  ]
}