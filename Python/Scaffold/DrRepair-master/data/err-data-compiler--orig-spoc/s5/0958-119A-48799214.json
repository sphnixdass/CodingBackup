{
  "meta": {
    "index": 958,
    "hitid": "3PCPFX4U40KKW2J3BKSC951O3MIQF1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "119A",
    "subid": "48799214"
  },
  "lines": [
    {
      "line": 0,
      "text": "integer function gcd with integer arguments a and b",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is less than b",
      "code": "if ( a < b )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integer variable t = a",
      "code": "int t = a ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "set value of a to b",
      "code": "a = b ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "b = t",
      "code": "b = t ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while a % b is not 0",
      "code": "while ( a % b )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "a = b",
      "code": "a = b ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "b = a / b",
      "code": "b = a / b ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return b",
      "code": "return b ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "create integers a , b and n",
      "code": "int a , b , n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read a , b and n",
      "code": "cin >> a >> b >> n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "start infinite loop",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "decrease n by gcd ( a , n )",
      "code": "n -= gcd ( a , n ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if n = 0",
      "code": "if ( n == 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" 0 \"",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "decrease n by gcd ( b , n )",
      "code": "n -= gcd ( b , n ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if n = 0",
      "code": "if ( n == 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print \" 1 \"",
      "code": "cout << \" 1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a = a ;"
      ],
      "err_line": 4,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 24,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "int b = a / b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        8,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "int b = a / b ;",
        "int b = t ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        8,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "int b = a / b ;",
        "* a = b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        8,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "int b = a / b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "int b = t ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        4,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "int b = t ;",
        "* a = b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        4,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "int b = t ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "* a = b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        3,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        21,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "n *= gcd ( b , n ) ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = a / b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = a / b ;",
        "int b = t ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        4,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = a / b ;",
        "int b = t ;",
        "* a = b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        4,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = a / b ;",
        "int b = t ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = a / b ;",
        "* a = b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        3,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = a / b ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = a / b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = t ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = t ;",
        "* a = b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        3,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = t ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int b = t ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "* a = b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        8,
        4,
        3
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int b = a / b ;",
        "int b = t ;",
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21,
        8,
        3
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int b = a / b ;",
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21,
        8,
        3,
        18
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int b = a / b ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21,
        4,
        3
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int b = t ;",
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21,
        4,
        3,
        18
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int b = t ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21,
        3
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21,
        3,
        18
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        4,
        3
      ],
      "mod_code": [
        "int b = a / b ;",
        "int b = t ;",
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        4,
        3,
        18
      ],
      "mod_code": [
        "int b = a / b ;",
        "int b = t ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "int b = a / b ;",
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8,
        3,
        18
      ],
      "mod_code": [
        "int b = a / b ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int b = t ;",
        "* a = b ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        3,
        18
      ],
      "mod_code": [
        "int b = t ;",
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "* a = b ;",
        "cout << \" 0 \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}