{
  "meta": {
    "index": 1990,
    "hitid": "36AZSFEYZ4UMOT34SH0QW29B635BV9",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "1027A",
    "subid": "42441033"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function upLetter taking char letter and returning char",
      "code": "char upLetter ( char letter )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if letter is ' z '",
      "code": "if ( letter == ' z ' )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return ' z '",
      "code": "return ' z ' ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return letter + 1",
      "code": "return ( letter + 1 ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "in function downLetter taking char letter and returning char",
      "code": "char downLetter ( char letter )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "if letter is ' a '",
      "code": "if ( letter == ' a ' )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return ' a '",
      "code": "return ' a ' ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return letter - 1",
      "code": "return ( letter - 1 ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "in function palindrom taking char begin , char end and returning bool",
      "code": "bool palindrom ( char begin , char end )",
      "indent": 0
    },
    {
      "line": 15,
      "text": "ok = bool with ok = false",
      "code": "bool ok = false ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if downLetter of begin is downLetter of end and begin is not ' a ' and end is not ' a '",
      "code": "if ( downLetter ( begin ) == downLetter ( end ) && begin != ' a ' && end != ' a ' )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set ok to true",
      "code": "ok = true ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else if downLetter of begin is upLetter if end and begin is not ' a ' and end is not ' z '",
      "code": "else if ( downLetter ( begin ) == upLetter ( end ) && begin != ' a ' && end != ' z ' )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set ok to true",
      "code": "ok = true ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else if upLetter of begin is downLetter of end and begin is not ' z ' and end is not ' a '",
      "code": "else if ( upLetter ( begin ) == downLetter ( end ) && begin != ' z ' && end != ' a ' )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "set ok to true",
      "code": "ok = true ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else if upLetter of begin is upLetter of end and begin is not ' z ' and end is not ' z '",
      "code": "else if ( upLetter ( begin ) == upLetter ( end ) && begin != ' z ' && end != ' z ' )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set ok to true",
      "code": "ok = true ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "return ok",
      "code": "return ok ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 28,
      "text": "numW , numL , size = int",
      "code": "int numW , numL , size ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "check = bool",
      "code": "bool check ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "word = string",
      "code": "string word ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "readn numW",
      "code": "cin >> numW ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for i = 0 to numW",
      "code": "for ( unsigned i = 0 ; i < numW ; i ++ )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "read numL",
      "code": "cin >> numL ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "set check to false",
      "code": "check = false ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "read word",
      "code": "cin >> word ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "for j = 0 to numL / 2",
      "code": "for ( unsigned j = 0 ; j < numL / 2 ; j ++ )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "set size to length of word",
      "code": "size = word . length ( ) ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "if palindrom of word [ j ] m word [ size - 1 - j ]",
      "code": "if ( palindrom ( word . at ( j ) , word . at ( size - ( 1 + j ) ) ) )",
      "indent": 3
    },
    {
      "line": 39,
      "text": "set check to true",
      "code": "check = true ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 41,
      "text": "set check to false",
      "code": "check = false ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 45,
      "text": "if check",
      "code": "if ( check )",
      "indent": 2
    },
    {
      "line": 46,
      "text": "print \" YES \"",
      "code": "cout << \" YES \"",
      "indent": 3
    },
    {
      "line": 47,
      "text": "print newline",
      "code": "<< \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 48,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 49,
      "text": "print \" NO \"",
      "code": "cout << \" NO \"",
      "indent": 3
    },
    {
      "line": 50,
      "text": "print newline",
      "code": "<< \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "readn = 0 ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 50,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 50,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char upLetter ( char letter [ ] )"
      ],
      "err_line": 1,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "else if ( letter == ' z ' )"
      ],
      "err_line": 1,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "char downLetter ( char letter [ ] )"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else if ( letter == ' a ' )"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return ' a ' ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "bool palindrom ( char begin , char begin )"
      ],
      "err_line": 14,
      "err_msg": "redefinition of ‘char begin’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) ) != end && end != ' a ' && end != ' a ' )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else if ( downLetter ( begin ( begin ) != upLetter && end != ' a ' && end != ' z ' )"
      ],
      "err_line": 18,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) ) != ' z ' && begin != ' a ' )"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) ) != ' z ' && begin != ' z ' )"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int numW , numL , size ) ;"
      ],
      "err_line": 28,
      "err_msg": "expected initializer before ‘)’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "bool check ( )"
      ],
      "err_line": 30,
      "err_msg": "expected initializer before ‘string’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "char word ;"
      ],
      "err_line": 37,
      "err_msg": "request for member ‘length’ in ‘word’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "for ( i = 0 ; i < numW ; i ++ )"
      ],
      "err_line": 32,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "cin . get ( numL ) ;"
      ],
      "err_line": 33,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "for ( j = 0 ; j < numL / 2 ; j ++ )"
      ],
      "err_line": 36,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) != word [ size - 1 - j ] )"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "puts ( \" YES \" ) ;"
      ],
      "err_line": 47,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "puts ( \" NO \" ) ;"
      ],
      "err_line": 50,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 50,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        22
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        31
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        22
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        22,
        31
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        22,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        22,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        22,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        22,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        22,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        31
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        31,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        31,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        31,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        31,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        31,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        38,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        38,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        38,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        38,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        46,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        46,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        46,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        47,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        47,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        18,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        22
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        31
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        31
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        31,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        31,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        31,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        31,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        31,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        38,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        38,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        38,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        38,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        46,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        46,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        46,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        47,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        47,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        20,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        31
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        31,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        31,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        31,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        31,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        31,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        38,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        38,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        38,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        38,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        46,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        46,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        46,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        47,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        47,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        22,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        38,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        38,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        38,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        38,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        46,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        46,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        46,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        47,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        47,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        31,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        46,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        46,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        46,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        47,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        47,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        38,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        46
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        46,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        46,
        47,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        46,
        47,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        46,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        46,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        46,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        47
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        47,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        47,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        47,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        49
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        49,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        50
      ],
      "mod_code": [
        "if ( downLetter ( begin ( end ) == downLetter && begin != ' a ' && end != ' a ' )",
        "cout << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        22
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        31
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        38
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        31
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        31,
        38
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        31,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        31,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        31,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        31,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        38
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        38,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        38,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        38,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        38,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        46,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        46,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        46,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        47,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        47,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        49,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        20,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        31
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        31,
        38
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        31,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        31,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        31,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        31,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        38
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        38,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        38,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        38,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        38,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        46,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        46,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        46,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        47,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        47,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        49,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        22,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        38
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        38,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        38,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        38,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        38,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        46,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        46,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        46,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        47,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        47,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        49,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        31,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        46,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        46,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        46,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        47,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        47,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        49,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        38,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        46
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        46,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        46,
        47,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        46,
        47,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        46,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        46,
        49,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        46,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        47
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        47,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        47,
        49,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        47,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        49
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        49,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        50
      ],
      "mod_code": [
        "else if ( downLetter ( upLetter , upLetter ) && begin != ' a ' && end != ' z ' )",
        "cout << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        31
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        31,
        38
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        31,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        31,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        31,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        31,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        38
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        38,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        38,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        38,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        38,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        46,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        46,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        46,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        22,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        38
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        38,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        38,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        38,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        38,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        46,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        46,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        46,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        31,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        46,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        46,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        46,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        38,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        46,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        46,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        46,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        46,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        46,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        46,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        47,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        20,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' a ' ) )",
        "cout << endl ;"
      ],
      "err_line": 20,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        38
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        38,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        38,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        38,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        38,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        46,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        46,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        46,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        31,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        46,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        46,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        46,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        38,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        46
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        46,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        46,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        46,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        46,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        46,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        46,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        47
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        47,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        47,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        47,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        49
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        49,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        22,
        50
      ],
      "mod_code": [
        "else if ( upLetter ( begin ( end ) && begin ( end ) != ' z ' && end != ' z ' ) )",
        "cout << endl ;"
      ],
      "err_line": 22,
      "err_msg": "‘begin’ cannot be used as a function"
    },
    {
      "mod_line": [
        31,
        38
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        46
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        46,
        47
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        46,
        49
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        46,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        47
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        47,
        49
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        47,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        49
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        49,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        38,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        46
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        46,
        47
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        46,
        47,
        49
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        46,
        47,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        46,
        49
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        46,
        49,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        46,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        47
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        47,
        49
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        47,
        49,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        47,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        49
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        49,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        50
      ],
      "mod_code": [
        "readn = 0 ;",
        "cout << endl ;"
      ],
      "err_line": 31,
      "err_msg": "‘readn’ was not declared in this scope"
    },
    {
      "mod_line": [
        38,
        46
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        46,
        47
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        46,
        47,
        49
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        46,
        47,
        50
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        46,
        49
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        46,
        49,
        50
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        46,
        50
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        47
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        47,
        49
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        47,
        49,
        50
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        47,
        50
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        49
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        49,
        50
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        38,
        50
      ],
      "mod_code": [
        "if ( palindrom ( word [ j ] ) == word [ size - 1 - j ] )",
        "cout << endl ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘bool palindrom(char, char)’"
    },
    {
      "mod_line": [
        46,
        47,
        49
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 50,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        46,
        47,
        50
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 50,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        46,
        49
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        46,
        49,
        50
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        46,
        50
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        47,
        49
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        47,
        49,
        50
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        47,
        50
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}