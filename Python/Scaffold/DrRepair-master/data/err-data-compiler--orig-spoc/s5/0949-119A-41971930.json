{
  "meta": {
    "index": 949,
    "hitid": "3E9ZFLPWOYMOFQM5Y6TP6AA9GHXXIW",
    "workerid": "AIWEXPJAU66D9",
    "probid": "119A",
    "subid": "41971930"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers a , b and st",
      "code": "int a , b , st ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b and st and keep looping",
      "code": "while ( cin >> a >> b >> st )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integers x and st_taken where x = 0",
      "code": "int x = 0 , st_taken ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "while st is not 0",
      "code": "while ( st != 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "assign value of __gcd ( a , st ) to st_taken",
      "code": "st_taken = __gcd ( a , st ) ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "set value of st to st - st_taken",
      "code": "st = st - st_taken ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increase x by one",
      "code": "x ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "swap a and b",
      "code": "swap ( a , b ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if x is odd",
      "code": "if ( x % 2 == 1 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> a >> b >> st ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "* st = st - st_taken ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "swap ( a and b ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘swap(bool)’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "* st = st - st_taken ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "* st = st - st_taken ;",
        "while ( cin >> a >> b >> st ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        8
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "* st = st - st_taken ;",
        "while ( cin >> a >> b >> st ;",
        "swap ( a and b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        5
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "* st = st - st_taken ;",
        "while ( cin >> a >> b >> st ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "* st = st - st_taken ;",
        "swap ( a and b ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        5
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "* st = st - st_taken ;",
        "swap ( a and b ) ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "* st = st - st_taken ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "while ( cin >> a >> b >> st ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        2,
        8
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "while ( cin >> a >> b >> st ;",
        "swap ( a and b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        2,
        8,
        5
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "while ( cin >> a >> b >> st ;",
        "swap ( a and b ) ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "while ( cin >> a >> b >> st ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "swap ( a and b ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘swap(bool)’"
    },
    {
      "mod_line": [
        3,
        8,
        5
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "swap ( a and b ) ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int x , st_taken = 0 ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "* st = st - st_taken ;",
        "while ( cin >> a >> b >> st ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        2,
        8
      ],
      "mod_code": [
        "* st = st - st_taken ;",
        "while ( cin >> a >> b >> st ;",
        "swap ( a and b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        2,
        8,
        5
      ],
      "mod_code": [
        "* st = st - st_taken ;",
        "while ( cin >> a >> b >> st ;",
        "swap ( a and b ) ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "* st = st - st_taken ;",
        "while ( cin >> a >> b >> st ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "* st = st - st_taken ;",
        "swap ( a and b ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        6,
        8,
        5
      ],
      "mod_code": [
        "* st = st - st_taken ;",
        "swap ( a and b ) ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "* st = st - st_taken ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> a >> b >> st ;",
        "swap ( a and b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        8,
        5
      ],
      "mod_code": [
        "while ( cin >> a >> b >> st ;",
        "swap ( a and b ) ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "while ( cin >> a >> b >> st ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "swap ( a and b ) ;",
        "st_taken assign __gcd ( a , st ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘assign’"
    }
  ]
}