{
  "meta": {
    "index": 1627,
    "hitid": "37PGLWGSJT0IVQNYZNE0GG27KT0IKG",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "41082308"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer N with N = 20000",
      "code": "const int N = 20000 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create boolean array f with size N + 5 with f = { 0 }",
      "code": "bool f [ N + 5 ] = { 0 } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer array prime with size 20000",
      "code": "int prime [ 20000 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integer array fin with size 30000",
      "code": "int fin [ 30000 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare seive with no arguments , returning void",
      "code": "void seive ( )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "set f [ 0 ] to f [ 1 ] to 1",
      "code": "f [ 0 ] = f [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to N inclusive",
      "code": "for ( int i = 1 ; i <= N ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if f [ 1 ] is true , break current loop iteration",
      "code": "if ( f [ i ] ) continue ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = i * i to N inclusive , incrementing j by i , set f [ j ] to 1",
      "code": "for ( long long j = ( long long ) i * i ; j <= N ; j += i ) f [ j ] = 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare primes with no arguments , returning void",
      "code": "void primes ( )",
      "indent": 0
    },
    {
      "line": 12,
      "text": "run seive",
      "code": "seive ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create integers sum , prevI , c , with sum = 5 , prevI = 2 , c = 1",
      "code": "int sum = 5 , prevI = 2 , c = 1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set prime [ 0 ] to 6",
      "code": "prime [ 0 ] = 6 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 4 to 2000 exclusive",
      "code": "for ( int i = 4 ; i < 2000 ; ++ i )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if not f [ i ]",
      "code": "if ( ! f [ i ] )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "decrement sum by prevI",
      "code": "sum -= prevI ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "set prevI to sum",
      "code": "prevI = sum ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment sum by i",
      "code": "sum += i ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "set prime [ incremented c ] to sum + 1",
      "code": "prime [ c ++ ] = sum + 1 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set bytes from fin to 3000 to value 0",
      "code": "memset ( fin , 0 , 3000 ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "create integer test",
      "code": "int test ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for i = 0 to 200 exclusive",
      "code": "for ( int i = 0 ; i < 200 ; ++ i )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set test to prime [ i ]",
      "code": "test = prime [ i ] ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if not f [ test ] , set fin [ test ] to 1",
      "code": "if ( ! f [ test ] ) fin [ test ] = 1 ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for i = 1 to 3000 exclusive , increment fin [ i ] by fin [ i - 1 ]",
      "code": "for ( int i = 1 ; i < 3000 ; ++ i ) { fin [ i ] += fin [ i - 1 ] ; }",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 32,
      "text": "run primes",
      "code": "primes ( ) ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "create integers num , k",
      "code": "int num , k ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "read num read k",
      "code": "cin >> num >> k ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print \" YES \\ n \" if fin [ num ] is greater than or equal to k , else \" NO \\ n \"",
      "code": "cout << ( ( fin [ num ] >= k ) ? \" YES\\n \" : \" NO\\n \" ) ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "void primes ( ) { }"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int N = 20000 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int fin [ 30000 30000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void seive ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "void seive ( )"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int sum = 5 , prevI = 2 , c , c ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 4 ; i < 2000 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "memset ( 3000 , 0 , sizeof ( fin ) ) ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘int’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < 200 ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "primes ( )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "cin >> num read k ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        0
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "int N = 20000 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        11,
        0,
        26
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "int N = 20000 ;",
        "char test = prime [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        11,
        0,
        5
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "int N = 20000 ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        11,
        0,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "int N = 20000 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        11,
        26
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "char test = prime [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        26,
        5
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        26,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "char test = prime [ i ] ;",
        "primes ( )"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        5
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        5,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "void primes ( ) { }",
        "primes ( )"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "int N = 20000 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        0,
        26
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "int N = 20000 ;",
        "char test = prime [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        0,
        26,
        5
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "int N = 20000 ;",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        0,
        26,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "int N = 20000 ;",
        "char test = prime [ i ] ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        0,
        5
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "int N = 20000 ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        0,
        5,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "int N = 20000 ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        0,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "int N = 20000 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        26,
        5
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        26,
        5,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        26,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "char test = prime [ i ] ;",
        "primes ( )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        5,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        32
      ],
      "mod_code": [
        "if ( f [ 1 ] ) continue ;",
        "primes ( )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "void primes ( ) { }",
        "int N = 20000 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        0,
        26
      ],
      "mod_code": [
        "void primes ( ) { }",
        "int N = 20000 ;",
        "char test = prime [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        0,
        26,
        5
      ],
      "mod_code": [
        "void primes ( ) { }",
        "int N = 20000 ;",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        0,
        26,
        32
      ],
      "mod_code": [
        "void primes ( ) { }",
        "int N = 20000 ;",
        "char test = prime [ i ] ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        0,
        5
      ],
      "mod_code": [
        "void primes ( ) { }",
        "int N = 20000 ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        0,
        5,
        32
      ],
      "mod_code": [
        "void primes ( ) { }",
        "int N = 20000 ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        0,
        32
      ],
      "mod_code": [
        "void primes ( ) { }",
        "int N = 20000 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        26
      ],
      "mod_code": [
        "void primes ( ) { }",
        "char test = prime [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        26,
        5
      ],
      "mod_code": [
        "void primes ( ) { }",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        26,
        5,
        32
      ],
      "mod_code": [
        "void primes ( ) { }",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        26,
        32
      ],
      "mod_code": [
        "void primes ( ) { }",
        "char test = prime [ i ] ;",
        "primes ( )"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "void primes ( ) { }",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        5,
        32
      ],
      "mod_code": [
        "void primes ( ) { }",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        32
      ],
      "mod_code": [
        "void primes ( ) { }",
        "primes ( )"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        26
      ],
      "mod_code": [
        "int N = 20000 ;",
        "char test = prime [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        26,
        5
      ],
      "mod_code": [
        "int N = 20000 ;",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        26,
        5,
        32
      ],
      "mod_code": [
        "int N = 20000 ;",
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        26,
        32
      ],
      "mod_code": [
        "int N = 20000 ;",
        "char test = prime [ i ] ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int N = 20000 ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        5,
        32
      ],
      "mod_code": [
        "int N = 20000 ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        32
      ],
      "mod_code": [
        "int N = 20000 ;",
        "primes ( )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        26,
        5
      ],
      "mod_code": [
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        5,
        32
      ],
      "mod_code": [
        "char test = prime [ i ] ;",
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        32
      ],
      "mod_code": [
        "char test = prime [ i ] ;",
        "primes ( )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        5,
        32
      ],
      "mod_code": [
        "f [ 0 ] = 1 [ 1 ] = 1 ;",
        "primes ( )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}