{
  "meta": {
    "index": 2290,
    "hitid": "3PIOQ99R7YGOCN31QHVURB7M9L6NUH",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "6A",
    "subid": "46756952"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function tri taking a pointer to an int a and returning an int",
      "code": "int tri ( int * a )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a [ 0 ] < a [ 1 ] + a [ 2 ] and a [ 1 ] < a [ 0 ] + a [ 2 ] and a [ 2 ] < a [ 1 ] + a [ 0 ] return 1",
      "code": "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] && a [ 2 ] < a [ 1 ] + a [ 0 ] ) { return 1 ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if a [ 0 ] is a [ 1 ] + a [ 2 ] or a [ 1 ] is a [ 0 ] + a [ 2 ] or a [ 2 ] is a [ 1 ] + a [ 0 ] return 0",
      "code": "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] + a [ 0 ] ) { return 0 ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return - 1",
      "code": "return - 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "a = int array of size 4",
      "code": "int a [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read 4 values into a",
      "code": "for ( int i = 0 ; i < 4 ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "triangle , segment = bool with triangle = false and segment = false",
      "code": "bool triangle = false , segment = false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "stat = int",
      "code": "int stat ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "call swap of a [ i ] , a [ 3 ]",
      "code": "swap ( a [ i ] , a [ 3 ] ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set stat to tri of a",
      "code": "stat = tri ( a ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "call swap of a [ i ] , a [ 3 ]",
      "code": "swap ( a [ i ] , a [ 3 ] ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if stat is 1",
      "code": "if ( stat == 1 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set triangle to true",
      "code": "triangle = true ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if stat is 0 set segment to true",
      "code": "if ( stat == 0 ) { segment = true ; }",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set stat to tri of a",
      "code": "stat = tri ( a ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if stat is 1 set triangle to true",
      "code": "if ( stat == 1 ) { triangle = true ; }",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if stat is 0 set segment to true",
      "code": "if ( stat == 0 ) { segment = true ; }",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if triangle",
      "code": "if ( triangle )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" TRIANGLE \"",
      "code": "cout << \" TRIANGLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else if segment",
      "code": "else if ( segment )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" SEGMENT \"",
      "code": "cout << \" SEGMENT \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" IMPOSSIBLE \"",
      "code": "cout << \" IMPOSSIBLE \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int tri ( int * a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char a [ 4 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "bool triangle = false , tmp = false ;"
      ],
      "err_line": 18,
      "err_msg": "‘segment’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "stat = a ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "stat = a ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        14
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "if ( ! stat )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "if ( ! stat )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        10,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "char a [ 4 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        1,
        6,
        14
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "char a [ 4 ] ;",
        "if ( ! stat )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "char a [ 4 ] ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "char a [ 4 ] ;",
        "if ( ! stat )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "char a [ 4 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "char a [ 4 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        6,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "char a [ 4 ] ;",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        14,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        10,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        14,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "if ( ! stat )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] < a [ 1 ] + a [ 2 ] && a [ 1 ] < a [ 0 ] + a [ 2 ] + a [ 1 ] + a [ 0 ] ) return 1 ;",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        2,
        6,
        14
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "if ( ! stat )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        14,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "if ( ! stat )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        6,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        6,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "char a [ 4 ] ;",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        14,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        14,
        10,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        14,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "if ( ! stat )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "if ( a [ 0 ] == a [ 1 ] + a [ 2 ] || a [ 1 ] == a [ 0 ] + a [ 2 ] || a [ 2 ] == a [ 1 ] ) return 0 ;",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "char a [ 4 ] ;",
        "if ( ! stat )"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘char*’ to ‘int*’ for argument ‘1’ to ‘int tri(int*)’"
    },
    {
      "mod_line": [
        6,
        14,
        10
      ],
      "mod_code": [
        "char a [ 4 ] ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        14,
        10,
        11
      ],
      "mod_code": [
        "char a [ 4 ] ;",
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        14,
        11
      ],
      "mod_code": [
        "char a [ 4 ] ;",
        "if ( ! stat )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "char a [ 4 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        11
      ],
      "mod_code": [
        "char a [ 4 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "char a [ 4 ] ;",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        10,
        11
      ],
      "mod_code": [
        "if ( ! stat )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        14,
        11
      ],
      "mod_code": [
        "if ( ! stat )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "swap ( a [ i ] , \" a a [ 3 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    }
  ]
}