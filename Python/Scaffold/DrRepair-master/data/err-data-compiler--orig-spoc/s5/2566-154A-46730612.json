{
  "meta": {
    "index": 2566,
    "hitid": "3E24UO25QZKLSXDCVEX4QUTBVMWO6N",
    "workerid": "AIWEXPJAU66D9",
    "probid": "154A",
    "subid": "46730612"
  },
  "lines": [
    {
      "line": 0,
      "text": "create a map from characters to characters called mpu",
      "code": "map < char , char > mpu ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let vec be a vector of long longs",
      "code": "vector < long long > vec ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create empty long long arrays q and a with 1000006 elements",
      "code": "long long q [ 1000006 ] = { } , a [ 1000006 ] = { } ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare strings s and p",
      "code": "string s , p ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare long long n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read p",
      "code": "cin >> p ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set mpu [ p [ 0 ] ] to p [ 1 ]",
      "code": "mpu [ p [ 0 ] ] = p [ 1 ] ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set value of p [ 0 ] to mpu [ p [ 1 ] ]",
      "code": "mpu [ p [ 1 ] ] = p [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "n = length of s",
      "code": "n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "declare integer variables ct1 , ct2 and sum = 0",
      "code": "int ct1 = 0 , ct2 = 0 , sum = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to length of s - 1 exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) - 1 ; )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "ct1 = 1",
      "code": "ct1 = 1 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "while s [ i ] = s [ i + 1 ] & & i is less than n - 1",
      "code": "while ( s [ i ] == s [ i + 1 ] && i < n - 1 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment ct1",
      "code": "ct1 ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if s [ i ] is the last char in mpu | | mpu [ s [ i ] ] ! = s [ i + 1 ]",
      "code": "if ( mpu . find ( s [ i ] ) == mpu . end ( ) || mpu [ s [ i ] ] != s [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increase i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set value of ct1 to 0",
      "code": "ct1 = 0 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "ct2 = 0",
      "code": "ct2 = 0 ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "continue the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if i > = n - 1 , break",
      "code": "if ( i >= n - 1 ) break ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "declare character variables a1 = s [ i ] and a2 = s [ i + 1 ]",
      "code": "char a1 = s [ i ] , a2 = s [ i + 1 ] ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "set value of ct2 to 1",
      "code": "ct2 = 1 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "increase i by 2",
      "code": "i += 2 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "while ( s [ i ] = a1 | | s [ i ] = a2 ) & & i is less than n",
      "code": "while ( ( s [ i ] == a1 || s [ i ] == a2 ) && i < n )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if s [ i ] = a1",
      "code": "if ( s [ i ] == a1 )",
      "indent": 3
    },
    {
      "line": 33,
      "text": "increase ct1 by one",
      "code": "ct1 ++ ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 35,
      "text": "increment ct2",
      "code": "ct2 ++ ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "increase sum by min of ct1 and ct2",
      "code": "sum += min ( ct1 , ct2 ) ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "set ct1 to 0",
      "code": "ct1 = 0 ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "set ct2 to 0",
      "code": "ct2 = 0 ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print sum",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int n = s . length ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "vector < char , char > mpu ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::vector<char, char>’ and ‘char’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < long long let ;"
      ],
      "err_line": 1,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "strings = s + p ;"
      ],
      "err_line": 4,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "mpu [ p [ 0 ] = p [ 1 ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "* p [ 0 ] = mpu [ p [ 1 ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int ct1 = 0 , ct2 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . length ( ) - 1 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "while ( s [ i ] == s [ i + 1 ] && i [ i ] < n - 1 )"
      ],
      "err_line": 17,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( mpu [ i ] == mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "char a1 = s [ i ] , a1 = s [ i + 1 ] ;"
      ],
      "err_line": 28,
      "err_msg": "redeclaration of ‘char a1’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "* ct2 = 1 ;"
      ],
      "err_line": 29,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        21
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        31
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        15,
        32
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        21
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        21,
        31
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        21,
        32
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        31
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        31,
        32
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        13,
        32
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "int n = s . length ( ) ;",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        11,
        15,
        21
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        11,
        15,
        21,
        31
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        11,
        15,
        21,
        32
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        11,
        21
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        11,
        21,
        31
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        11,
        21,
        31,
        32
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        11,
        21,
        32
      ],
      "mod_code": [
        "p [ 0 ] = mpu [ p [ 1 ] ] ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        21
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        21,
        31
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        21,
        32
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        31
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        31,
        32
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        15,
        32
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        21
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        21,
        31
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        21,
        31,
        32
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        21,
        32
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        31
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        31,
        32
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        13,
        32
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int n’"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        15,
        21,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        15,
        21,
        31,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        15,
        21,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) - 1 ; i ++ )",
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        21,
        31
      ],
      "mod_code": [
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        21,
        31,
        32
      ],
      "mod_code": [
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "while ( s [ i ] == ' a1 ' || s [ i ] == ' a2 ' && i < n )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    },
    {
      "mod_line": [
        21,
        32
      ],
      "mod_code": [
        "if ( mpu [ i ] != mpu && mpu [ s [ i ] ] != s [ i + 1 ] )",
        "if ( s [ i ] == ' a1 ' )"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::map<char, char>::mapped_type {aka char}’ and ‘std::map<char, char>’)"
    }
  ]
}