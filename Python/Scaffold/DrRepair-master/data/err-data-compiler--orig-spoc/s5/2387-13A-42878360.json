{
  "meta": {
    "index": 2387,
    "hitid": "3A9LA2FRWS8OJVBLSOB46Y9UGP0XHR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "13A",
    "subid": "42878360"
  },
  "lines": [
    {
      "line": 0,
      "text": "set constant integer INF to 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define function gcd with integer arguments a and b",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a is less than b swap ( a , b )",
      "code": "if ( a < b ) swap ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if b is not defined return a",
      "code": "if ( ! b ) return a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return result of the call to function gcd with arguments b and remainder of a divided by b",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "let i , j , k and l be integers",
      "code": "int i , j , k , l ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "let n , m and s be integers with s = 0",
      "code": "int n , m , s = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 2 to n exclusive",
      "code": "for ( i = 2 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "k = i",
      "code": "k = i ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set value of m to n",
      "code": "m = n ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "while remainder of m divided by k is not 0",
      "code": "while ( m / k != 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increase s by m % k",
      "code": "s += m % k ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "divide m by k",
      "code": "m /= k ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increase s by m % k",
      "code": "s += m % k ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "k = gcd ( s , n - 2 )",
      "code": "k = gcd ( s , n - 2 ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print s / k , character \" / \" , ( n - 2 ) / k and a new line",
      "code": "cout << s / k << \" / \" << ( n - 2 ) / k << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void gcd ( int a , int b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "* m = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int k = gcd ( s , n - 2 ) ;"
      ],
      "err_line": 19,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        20
      ],
      "mod_code": [
        "if ( b != a ) return a ;",
        "return gcd ( b , a ) % b ;",
        "while ( m % k != 0 )",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        3,
        4,
        20
      ],
      "mod_code": [
        "if ( b != a ) return a ;",
        "return gcd ( b , a ) % b ;",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        3,
        4,
        20,
        8
      ],
      "mod_code": [
        "if ( b != a ) return a ;",
        "return gcd ( b , a ) % b ;",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;",
        "int n , m , s ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        3,
        13,
        20
      ],
      "mod_code": [
        "if ( b != a ) return a ;",
        "while ( m % k != 0 )",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        3,
        13,
        20,
        8
      ],
      "mod_code": [
        "if ( b != a ) return a ;",
        "while ( m % k != 0 )",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;",
        "int n , m , s ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "if ( b != a ) return a ;",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        3,
        20,
        8
      ],
      "mod_code": [
        "if ( b != a ) return a ;",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;",
        "int n , m , s ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        13,
        20
      ],
      "mod_code": [
        "return gcd ( b , a ) % b ;",
        "while ( m % k != 0 )",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        13,
        20,
        8
      ],
      "mod_code": [
        "return gcd ( b , a ) % b ;",
        "while ( m % k != 0 )",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;",
        "int n , m , s ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "return gcd ( b , a ) % b ;",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        20,
        8
      ],
      "mod_code": [
        "return gcd ( b , a ) % b ;",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;",
        "int n , m , s ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        13,
        20
      ],
      "mod_code": [
        "while ( m % k != 0 )",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        13,
        20,
        8
      ],
      "mod_code": [
        "while ( m % k != 0 )",
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;",
        "int n , m , s ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        20,
        8
      ],
      "mod_code": [
        "cout << s / k << \" \" << ( n - \" 2 \" ) / k << endl ;",
        "int n , m , s ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    }
  ]
}