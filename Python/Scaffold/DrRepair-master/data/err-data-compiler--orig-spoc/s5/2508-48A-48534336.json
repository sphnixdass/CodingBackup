{
  "meta": {
    "index": 2508,
    "hitid": "3T2EL38U0ME1WOAOBEYYFC1V8EDXQ9",
    "workerid": "A1APYLD4DUK33J",
    "probid": "48A",
    "subid": "48534336"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare map from string to string m",
      "code": "map < string , string > m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare character array ch size 3 = { ' F ' , ' M ' , ' S ' }",
      "code": "char ch [ 3 ] = { ' F ' , ' M ' , ' S ' } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string array str size 3",
      "code": "string str [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read str [ 0 ] and str [ 1 ] and str [ 2 ]",
      "code": "cin >> str [ 0 ] >> str [ 1 ] >> str [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer index = - 1",
      "code": "int index = - 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let m [ \" rock \" ] be \" scissors \"",
      "code": "m [ \" rock \" ] = \" scissors \" ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "let m [ \" paper \" ] be \" rock \"",
      "code": "m [ \" paper \" ] = \" rock \" ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let m [ \" scissors \" ] be \" paper \"",
      "code": "m [ \" scissors \" ] = \" paper \" ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if str [ 0 ] is str [ 1 ] and m [ str [ 2 ] ] is str [ 0 ]",
      "code": "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] ] == str [ 0 ] )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print ch [ 2 ] and newline",
      "code": "cout << ch [ 2 ] << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else if str [ 2 ] is str [ 0 ] and m [ str [ 1 ] ] is str [ 0 ]",
      "code": "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] ] == str [ 0 ] )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print ch [ 1 ] and newline",
      "code": "cout << ch [ 1 ] << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if str [ 2 ] is str [ 1 ] and m [ str [ 0 ] ] is str [ 1 ]",
      "code": "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] ] == str [ 1 ] )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ch [ 0 ] and newline",
      "code": "cout << ch [ 0 ] << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" ? \" and newline",
      "code": "cout << \" ? \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char str [ 3 ] ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘char’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "m [ \" scissors \" ] be \" paper \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4,
        12
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4,
        12,
        14
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4,
        12,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        4,
        12,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        10,
        4,
        14
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        4,
        14,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        4,
        14,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        10,
        4,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        4,
        2,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        4,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        12,
        14
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        12,
        14,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        12,
        14,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        10,
        12,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        12,
        2,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        12,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        14,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        14,
        2,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        14,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        2,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( str [ 0 ] == str [ 1 ] && m [ str [ 2 ] == str [ 0 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        14
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        2
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        8
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        4,
        12,
        2
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        4,
        12,
        2,
        8
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        4,
        12,
        8
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        14,
        2
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        4,
        14,
        2,
        8
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        4,
        14,
        8
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cin >> str [ 1 ] >> str [ 1 ] >> str [ 2 ] ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        14,
        2
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        12,
        14,
        2,
        8
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        12,
        14,
        8
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        12,
        2,
        8
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 0 ] && m [ str [ 1 ] == str [ 0 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        14,
        2,
        8
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "else if ( str [ 2 ] == str [ 1 ] && m [ str [ 0 ] == str [ 1 ] )",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘be’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "char ch = { ' F ' , ' M ' , ' S ' } ;",
        "m [ \" paper \" ] be \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "scalar object ‘ch’ requires one element in initializer"
    }
  ]
}