{
  "meta": {
    "index": 2400,
    "hitid": "3FHTJGYT8NU5AQEJMRJ5RLBQZQFGPO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "13A",
    "subid": "40511301"
  },
  "lines": [
    {
      "line": 0,
      "text": "integer function number with integer arguments x and y",
      "code": "int number ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let sum and ans be integers with ans = 0",
      "code": "int sum , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while x",
      "code": "while ( x )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "increase ans by x % y",
      "code": "ans += x % y ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "divide x by y",
      "code": "x /= y ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "function gcd with integer arguments a and b that returns integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "if a divides by b without a remainder",
      "code": "if ( a % b == 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return gcd of b and a % b",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "let n , sum and y be integers",
      "code": "int n , sum , y ;",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 2 to n exclusive , add number ( n , i ) to sum",
      "code": "for ( int i = 2 ; i < n ; i ++ ) sum += number ( n , i ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create integer a with value sum",
      "code": "int a = sum ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "create integer b with value n - 2",
      "code": "int b = n - 2 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set integer g to gcd ( a , b )",
      "code": "int g = gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "divide a by g",
      "code": "a /= g ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "divide b by g",
      "code": "b /= g ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print a , \" / \" , b and a new line",
      "code": "cout << a << \" / \" << b << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return gcd ( b and a % b ) ;"
      ],
      "err_line": 12,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int b create n - 2 ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int g ( a , b ) ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        20
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "if ( a % b != 0 )",
        "int g ( a , b ) ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        20,
        18
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "if ( a % b != 0 )",
        "int g ( a , b ) ;",
        "int a = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        20,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "if ( a % b != 0 )",
        "int g ( a , b ) ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        18,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "if ( a % b != 0 )",
        "int a = 1 ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "if ( a % b != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int g ( a , b ) ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        18
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int g ( a , b ) ;",
        "int a = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        18,
        9
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int g ( a , b ) ;",
        "int a = 1 ;",
        "if ( ( a % b ) != 0 )"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        18,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int g ( a , b ) ;",
        "int a = 1 ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        20,
        9
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int g ( a , b ) ;",
        "if ( ( a % b ) != 0 )"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        9,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int g ( a , b ) ;",
        "if ( ( a % b ) != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        20,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int g ( a , b ) ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        9,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int a = 1 ;",
        "if ( ( a % b ) != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int a = 1 ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "if ( ( a % b ) != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "int sum = 0 , ans ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        20
      ],
      "mod_code": [
        "if ( a % b != 0 )",
        "int g ( a , b ) ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        20,
        18
      ],
      "mod_code": [
        "if ( a % b != 0 )",
        "int g ( a , b ) ;",
        "int a = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        20,
        18,
        0
      ],
      "mod_code": [
        "if ( a % b != 0 )",
        "int g ( a , b ) ;",
        "int a = 1 ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        20,
        0
      ],
      "mod_code": [
        "if ( a % b != 0 )",
        "int g ( a , b ) ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        18,
        0
      ],
      "mod_code": [
        "if ( a % b != 0 )",
        "int a = 1 ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( a % b != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        18
      ],
      "mod_code": [
        "int g ( a , b ) ;",
        "int a = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        18,
        9
      ],
      "mod_code": [
        "int g ( a , b ) ;",
        "int a = 1 ;",
        "if ( ( a % b ) != 0 )"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        18,
        9,
        0
      ],
      "mod_code": [
        "int g ( a , b ) ;",
        "int a = 1 ;",
        "if ( ( a % b ) != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        18,
        0
      ],
      "mod_code": [
        "int g ( a , b ) ;",
        "int a = 1 ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        9
      ],
      "mod_code": [
        "int g ( a , b ) ;",
        "if ( ( a % b ) != 0 )"
      ],
      "err_line": 20,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        9,
        0
      ],
      "mod_code": [
        "int g ( a , b ) ;",
        "if ( ( a % b ) != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "int g ( a , b ) ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        9,
        0
      ],
      "mod_code": [
        "int a = 1 ;",
        "if ( ( a % b ) != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        0
      ],
      "mod_code": [
        "int a = 1 ;",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( ( a % b ) != 0 )",
        "int number ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}