{
  "meta": {
    "index": 1265,
    "hitid": "3OEWW2KGQJ5KD6SR515IW033DVCDO8",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "621A",
    "subid": "48492563"
  },
  "lines": [
    {
      "line": 0,
      "text": "set EPS = 1e - 9",
      "code": "double EPS = 1e-9 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set INFF = 1000000000000000005LL",
      "code": "long long INFF = 1000000000000000005LL ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create long long mi , s and n , set mi to INFF , s to 0",
      "code": "long long mi = INFF , s = 0 , n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while decrement n",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create long long k",
      "code": "long long k ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "s = s + k",
      "code": "s += k ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if k mod 2 = 1 , set min = min of mi and k",
      "code": "if ( k % 2 == 1 ) { mi = min ( mi , k ) ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if s is odd , set s to s - mi",
      "code": "if ( s % 2 != 0 ) { s -= mi ; }",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print s and a newline",
      "code": "cout << s << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;"
      ],
      "err_line": 1,
      "err_msg": "‘INFF’ does not name a type"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( n -- decrement )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘INFF’ does not name a type"
    },
    {
      "mod_line": [
        1,
        9,
        5
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "‘INFF’ does not name a type"
    },
    {
      "mod_line": [
        1,
        9,
        5,
        0
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "while ( n -- decrement )",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9,
        0
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "‘INFF’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        9
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "while ( n -- decrement )",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }"
      ],
      "err_line": 1,
      "err_msg": "‘INFF’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        9,
        0
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "while ( n -- decrement )",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        5,
        0
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "while ( n -- decrement )",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }"
      ],
      "err_line": 1,
      "err_msg": "‘INFF’ does not name a type"
    },
    {
      "mod_line": [
        1,
        9,
        0
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "INFF = 1000000000000000005LL ;",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "while ( n -- decrement )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "while ( n -- decrement )",
        "bool INFF = 1000000000000000005LL ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        9,
        5,
        1,
        0
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "while ( n -- decrement )",
        "bool INFF = 1000000000000000005LL ;",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        5,
        0
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "while ( n -- decrement )",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "bool INFF = 1000000000000000005LL ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9,
        1,
        0
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "bool INFF = 1000000000000000005LL ;",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) min = min ( mi , k ) ;",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "while ( n -- decrement )",
        "bool INFF = 1000000000000000005LL ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        5,
        1,
        9
      ],
      "mod_code": [
        "while ( n -- decrement )",
        "bool INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        5,
        1,
        9,
        0
      ],
      "mod_code": [
        "while ( n -- decrement )",
        "bool INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        1,
        0
      ],
      "mod_code": [
        "while ( n -- decrement )",
        "bool INFF = 1000000000000000005LL ;",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "while ( n -- decrement )",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        5,
        9,
        0
      ],
      "mod_code": [
        "while ( n -- decrement )",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "while ( n -- decrement )",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "bool INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        9,
        0
      ],
      "mod_code": [
        "bool INFF = 1000000000000000005LL ;",
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "bool INFF = 1000000000000000005LL ;",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( k % 2 == 1 ) { min = min ( mi , k ) ; }",
        "const const double EPS = 1e-9 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    }
  ]
}