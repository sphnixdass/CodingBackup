{
  "meta": {
    "index": 1618,
    "hitid": "3QQUBC64ZE8GTRXWVM6HBI6Q219XN0",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "47102058"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer MAXN with MAXN = 1000005",
      "code": "const int MAXN = 1000005 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array prime [ MAXN ] , create integer num with num = 0",
      "code": "int prime [ MAXN ] , num = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create boolean array pd of size MAXN",
      "code": "bool pd [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare find_prime with no arguments , returning void",
      "code": "void find_prime ( )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create integers i , j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set pd [ 0 ] to pd [ 1 ] to true",
      "code": "pd [ 0 ] = pd [ 1 ] = true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 2 to MAXN inclusive",
      "code": "for ( i = 2 ; i <= MAXN ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if pd [ i ] is false , set prime [ incremented num ] to i",
      "code": "if ( ! pd [ i ] ) prime [ num ++ ] = i ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 0 to num exclusive",
      "code": "for ( j = 0 ; j < num ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if i * prime [ j ] is greater than MAXN , break loop",
      "code": "if ( i * prime [ j ] > MAXN ) break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set pd [ i * prime [ j ] ] to true",
      "code": "pd [ i * prime [ j ] ] = true ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if i % prime [ j ] is 0 , break loop",
      "code": "if ( i % prime [ j ] == 0 ) break ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "declare find with integer n as argument , returning integer",
      "code": "int find ( int n )",
      "indent": 0
    },
    {
      "line": 16,
      "text": "create integers l , r , mid",
      "code": "int l , r , mid ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set l to 0",
      "code": "l = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set r to num - 1",
      "code": "r = num - 1 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while l is less than or equal to r",
      "code": "while ( l <= r )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set mid to ( l + r ) / 2",
      "code": "mid = ( l + r ) / 2 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if n is greater than prime [ mid ]",
      "code": "if ( n > prime [ mid ] )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set l to mid + 1",
      "code": "l = mid + 1 ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else if n is less than prime [ mid ]",
      "code": "else if ( n < prime [ mid ] )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set r to mid - 1",
      "code": "r = mid - 1 ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 26,
      "text": "return mid from function",
      "code": "return mid ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "return - 1 from function",
      "code": "return - 1 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 30,
      "text": "declare mz with integer n as argument , returning integer",
      "code": "int mz ( int n )",
      "indent": 0
    },
    {
      "line": 31,
      "text": "create integers pos , t , with t = n",
      "code": "int pos , t = n ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "set t to ( t - 1 ) / 2",
      "code": "t = ( t - 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "while pd [ t ] is true , increment t",
      "code": "while ( pd [ t ] ) t ++ ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "set pos to result of run find with argument t",
      "code": "pos = find ( t ) ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "if prime [ pos - 1 ] + prime [ pos ] + 1 is n , return 1 from function",
      "code": "if ( prime [ pos - 1 ] + prime [ pos ] + 1 == n ) return 1 ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 39,
      "text": "create integers n , k , num i , flag , with num = 0 , flag = 0",
      "code": "int n , k , num = 0 , i , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "run find_prime",
      "code": "find_prime ( ) ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "for i = 0 to prime [ i ] is less than or equal to n , incrementing n",
      "code": "for ( i = 0 ; prime [ i ] <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 43,
      "text": "if result of run mz with prime [ i ] as argument is true , increment num",
      "code": "if ( mz ( prime [ i ] ) ) num ++ ;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if num is greater than or equal to k",
      "code": "if ( num >= k )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 49,
      "text": "if flag is 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 50,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 52,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "void find_prime ( ) { }"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;"
      ],
      "err_line": 42,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int prime [ MAXN ] , num [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int l = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "t = ( l + r ) / 2 ;"
      ],
      "err_line": 20,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( n [ mid ] > prime [ mid ] )"
      ],
      "err_line": 21,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "while ( mid )"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "while ( - 1 )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "int mz ( int n ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "* pos ( t ) ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "int n , k , i = 0 , i , flag ;"
      ],
      "err_line": 39,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "find_prime ( )"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘for’"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        31
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        39
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        39,
        30
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        39,
        34
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "* pos ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        39,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        30
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "int mz ( int n ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        30,
        34
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "int mz ( int n ) ;",
        "* pos ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        30,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "int mz ( int n ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        34
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "* pos ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        34,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        31,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int pos = n , t ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        39
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int n , k , num = 0 , flag = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        39,
        30
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        39,
        30,
        34
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;",
        "* pos ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        39,
        30,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        39,
        34
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int n , k , num = 0 , flag = 0 ;",
        "* pos ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        39,
        34,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int n , k , num = 0 , flag = 0 ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        39,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int n , k , num = 0 , flag = 0 ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        30
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int mz ( int n ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        30,
        34
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int mz ( int n ) ;",
        "* pos ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        30,
        34,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int mz ( int n ) ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        30,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "int mz ( int n ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        34
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "* pos ( t ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        34,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "void find_prime ( ) { }",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        39
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;"
      ],
      "err_line": 42,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        39,
        30
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        39,
        30,
        34
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;",
        "* pos ( t ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        39,
        30,
        7
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        39,
        34
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "* pos ( t ) ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    },
    {
      "mod_line": [
        31,
        39,
        34,
        7
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    },
    {
      "mod_line": [
        31,
        39,
        7
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int n , k , num = 0 , flag = 0 ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 42,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        30
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int mz ( int n ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        30,
        34
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int mz ( int n ) ;",
        "* pos ( t ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        30,
        34,
        7
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int mz ( int n ) ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        30,
        7
      ],
      "mod_code": [
        "int pos = n , t ;",
        "int mz ( int n ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        34
      ],
      "mod_code": [
        "int pos = n , t ;",
        "* pos ( t ) ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    },
    {
      "mod_line": [
        31,
        34,
        7
      ],
      "mod_code": [
        "int pos = n , t ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    },
    {
      "mod_line": [
        39,
        30
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        30,
        34
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;",
        "* pos ( t ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        30,
        34,
        7
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        30,
        7
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;",
        "int mz ( int n ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        39,
        34
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;",
        "* pos ( t ) ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    },
    {
      "mod_line": [
        39,
        34,
        7
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    },
    {
      "mod_line": [
        39,
        7
      ],
      "mod_code": [
        "int n , k , num = 0 , flag = 0 ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 42,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        34
      ],
      "mod_code": [
        "int mz ( int n ) ;",
        "* pos ( t ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        30,
        34,
        7
      ],
      "mod_code": [
        "int mz ( int n ) ;",
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        30,
        7
      ],
      "mod_code": [
        "int mz ( int n ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        7
      ],
      "mod_code": [
        "* pos ( t ) ;",
        "if ( pd [ i ] == false ) prime [ ++ num ] = i ;"
      ],
      "err_line": 34,
      "err_msg": "‘pos’ cannot be used as a function"
    }
  ]
}