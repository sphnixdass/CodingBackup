{
  "meta": {
    "index": 308,
    "hitid": "3N3WJQXELSKP4BREVK598085LZK2L9",
    "workerid": "A1APYLD4DUK33J",
    "probid": "61A",
    "subid": "48709002"
  },
  "lines": [
    {
      "line": 0,
      "text": "create strings s1 , s2",
      "code": "string s1 , s2 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "while read s1 is true",
      "code": "while ( cin >> s1 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s2",
      "code": "cin >> s2 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "create integer i with i = 0",
      "code": "int i = 0 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "while s2 [ i ] is not ' \\ 0 '",
      "code": "while ( s2 [ i ] != ' \\0 ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s1 [ i ] is s2 [ i ]",
      "code": "if ( s1 [ i ] == s2 [ i ] )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "print 0",
      "code": "cout << 0 ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "print 1",
      "code": "cout << 1 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        6
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        6,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        6,
        0
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        9,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 1 << endl ;",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        2,
        0
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 1 << endl ;",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        9,
        0
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "cout << 1 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "if ( s1 [ i ] == s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6,
        2,
        0
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        6,
        0
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        2,
        0
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "cout << 0 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        7
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        7,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "cout << \" 0 \" << endl ;",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        7,
        0
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "cout << \" 0 \" << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        6,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        2,
        0
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        6,
        0
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( s1 [ i ] == s2 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        7,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << \" 0 \" << endl ;",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        7,
        2,
        0
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << \" 0 \" << endl ;",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        7,
        0
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << \" 0 \" << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        0
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )",
        "cout << \" 0 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )",
        "cout << \" 0 \" << endl ;",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        2,
        0
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )",
        "cout << \" 0 \" << endl ;",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        6,
        7,
        0
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )",
        "cout << \" 0 \" << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        0
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "if ( s1 [ i ] == s2 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "while ( s1 >> s1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        2,
        0
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "while ( s1 >> s1 )",
        "strings , s2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    }
  ]
}