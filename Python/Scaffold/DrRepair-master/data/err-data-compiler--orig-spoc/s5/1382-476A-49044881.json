{
  "meta": {
    "index": 1382,
    "hitid": "3RDTX9JRTYV1PANBCZJEZIYIVYU97T",
    "workerid": "AIWEXPJAU66D9",
    "probid": "476A",
    "subid": "49044881"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers p , q , temp and move where temp = 0",
      "code": "int p , q , temp = 0 , move ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while reading p and q in a loop",
      "code": "while ( cin >> p >> q )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if p is less than q , print \" - 1 \"",
      "code": "if ( p < q ) cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "if p = q",
      "code": "if ( p == q )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print p",
      "code": "cout << p << endl ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if p is even",
      "code": "if ( p % 2 == 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "temp = p / 2",
      "code": "temp = p / 2 ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "temp = ( p - 1 ) / 2",
      "code": "temp = ( p - 1 ) / 2 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increase temp by 1",
      "code": "temp += 1 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set value of move to 0",
      "code": "move = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "while temp ! = p",
      "code": "while ( temp != p )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if temp modulo q is 0",
      "code": "if ( temp % q == 0 )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "set value of move to temp",
      "code": "move = temp ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "print move",
      "code": "cout << move << endl ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increase temp by one",
      "code": "temp ++ ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int p , q , temp = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "* move = temp ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        2
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        2,
        8
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "while (",
        "temp /= 2 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        2,
        4
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "while (",
        "if ( p == q ) break ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        2,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "while (",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        8
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "temp /= 2 ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        8,
        4
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "temp /= 2 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        18,
        8,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "temp /= 2 ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        4
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        18,
        4,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        18,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "break the ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while (",
        "temp /= 2 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        4
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while (",
        "temp /= 2 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while (",
        "temp /= 2 ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while (",
        "if ( p == q ) break ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while (",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while (",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "temp /= 2 ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "temp /= 2 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        8,
        4,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "temp /= 2 ;",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "temp /= 2 ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        4,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int p , q , temp = 0 ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘move’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "break the ;",
        "while ("
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        8
      ],
      "mod_code": [
        "break the ;",
        "while (",
        "temp /= 2 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        8,
        4
      ],
      "mod_code": [
        "break the ;",
        "while (",
        "temp /= 2 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        8,
        14
      ],
      "mod_code": [
        "break the ;",
        "while (",
        "temp /= 2 ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        4
      ],
      "mod_code": [
        "break the ;",
        "while (",
        "if ( p == q ) break ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        4,
        14
      ],
      "mod_code": [
        "break the ;",
        "while (",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        2,
        14
      ],
      "mod_code": [
        "break the ;",
        "while (",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        8
      ],
      "mod_code": [
        "break the ;",
        "temp /= 2 ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        18,
        8,
        4
      ],
      "mod_code": [
        "break the ;",
        "temp /= 2 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18,
        8,
        4,
        14
      ],
      "mod_code": [
        "break the ;",
        "temp /= 2 ;",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18,
        8,
        14
      ],
      "mod_code": [
        "break the ;",
        "temp /= 2 ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "break the ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18,
        4,
        14
      ],
      "mod_code": [
        "break the ;",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "break the ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while (",
        "temp /= 2 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        4
      ],
      "mod_code": [
        "while (",
        "temp /= 2 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        4,
        14
      ],
      "mod_code": [
        "while (",
        "temp /= 2 ;",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        14
      ],
      "mod_code": [
        "while (",
        "temp /= 2 ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while (",
        "if ( p == q ) break ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "while (",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "while (",
        "while ( temp != p ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "temp /= 2 ;",
        "if ( p == q ) break ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8,
        4,
        14
      ],
      "mod_code": [
        "temp /= 2 ;",
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "if ( p == q ) break ;",
        "while ( temp != p ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}