{
  "meta": {
    "index": 2710,
    "hitid": "3CO05SML7VZTBZJDLHYRBOOPUTN0RB",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "16A",
    "subid": "48950978"
  },
  "lines": [
    {
      "line": 0,
      "text": "matriz = integer array of length 110 by 110",
      "code": "int matriz [ 110 ] [ 110 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , m , suma = integers",
      "code": "int n , m , suma ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "aux = string",
      "code": "string aux ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set every value of matriz to - 1",
      "code": "memset ( matriz , - 1 , sizeof matriz ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read one line into aux",
      "code": "getline ( cin , aux ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = int ( 0 ) ; i < int ( n ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read one line into aux",
      "code": "getline ( cin , aux ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to m exclusive set matriz [ i ] [ j ] to the integer value of ( aux [ j ] minus 48 )",
      "code": "for ( int j = int ( 0 ) ; j < int ( m ) ; j ++ ) { matriz [ i ] [ j ] = int ( aux [ j ] ) - 48 ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "prom = integer with value of 0",
      "code": "int prom = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "pass = boolean with value of true",
      "code": "bool pass = true ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = int ( 0 ) ; i < int ( n ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set suma to 0",
      "code": "suma = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for j = 0 to m - 1",
      "code": "for ( int j = int ( 0 ) ; j < int ( m - 1 ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if matriz [ i ] [ j + 1 ] equals matrix [ i ] [ j ]",
      "code": "if ( matriz [ i ] [ j + 1 ] == matriz [ i ] [ j ] )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set pass to boolean ( pass and true )",
      "code": "pass = pass && true ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set pass to false",
      "code": "pass = false ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if pass is true",
      "code": "if ( pass )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for k = 0 to n - 1 exclusive",
      "code": "for ( int k = int ( 0 ) ; k < int ( n - 1 ) ; k ++ )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if matriz [ k ] [ 0 ] does not equals matriz [ k + 1 ] [ 0 ]",
      "code": "if ( matriz [ k ] [ 0 ] != matriz [ k + 1 ] [ 0 ] )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "set pass to boolean ( pass and true )",
      "code": "pass = pass && true ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 27,
      "text": "set pass to false",
      "code": "pass = false ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if pass is true",
      "code": "if ( pass )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int matriz = - 1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )"
      ],
      "err_line": 16,
      "err_msg": "‘matrix’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 17,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 25,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int matriz [ 110 + 110 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char aux ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "matriz = - 1 ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [110][110]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( aux ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "gets ( aux ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == ( matrix [ i ] [ j ] ) )"
      ],
      "err_line": 16,
      "err_msg": "‘matrix’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 17,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( k = 0 ; k < n - 1 ; k ++ )"
      ],
      "err_line": 23,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "if ( matriz [ k ] [ 0 ] != matriz [ k + 1 ] [ ' 0 ' )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 25,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        17
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        25
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        25
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        25,
        17
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        25,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        17
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        17,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "pass = bool ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        17,
        25
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        17,
        25,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        17,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        25,
        17
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;",
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        25,
        17,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;",
        "pass = bool ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        25,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        17,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "pass = bool ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "int matriz = - 1 ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘matrix’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17,
        25
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘matrix’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17,
        25,
        15
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17,
        15
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        25
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘matrix’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        25,
        17
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘matrix’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        25,
        17,
        15
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "pass = bool ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        25,
        15
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘matrix’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17,
        15
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "pass = bool ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "if ( matriz [ i ] [ j + 1 ] == matrix [ i ] [ j ] )",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        25
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;",
        "bool pass ( pass , true ) ;"
      ],
      "err_line": 17,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        25,
        15
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;",
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        17
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;",
        "pass = bool ( pass , true ) ;"
      ],
      "err_line": 17,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        17,
        15
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;",
        "pass = bool ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15
      ],
      "mod_code": [
        "bool pass ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "pass = bool ( pass , true ) ;",
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}