{
  "meta": {
    "index": 525,
    "hitid": "38O9DZ0A62H7LQO78GZ7JHQ8V4162B",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "821A",
    "subid": "46202054"
  },
  "lines": [
    {
      "line": 0,
      "text": "LIM = 50 + 10",
      "code": "const int LIM = 50 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int dat [ LIM ] [ LIM ]",
      "code": "int dat [ LIM ] [ LIM ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to n exclusive , read dat [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { cin >> dat [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if dat [ i ] [ j ] = 1 , continue",
      "code": "if ( dat [ i ] [ j ] == 1 ) continue ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set flag to true",
      "code": "bool flag = true ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "for k = 0 to flag and k < n",
      "code": "for ( int k = 0 ; flag && k < n ; k ++ )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "for w = 0 to n exclusive",
      "code": "for ( int w = 0 ; w < n ; w ++ )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if dat [ i ] [ j ] = dat [ i ] [ k ] + dat [ w ] [ j ]",
      "code": "if ( dat [ i ] [ j ] == dat [ i ] [ k ] + dat [ w ] [ j ] )",
      "indent": 5
    },
    {
      "line": 15,
      "text": "set flag to false",
      "code": "flag = false ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "break",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if flag different from 0",
      "code": "if ( flag )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "print No and a newline",
      "code": "cout << \" No\\n \" ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print Yes and a newline",
      "code": "cout << \" Yes\\n \" ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "LIM = 50 + 10 ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "flag = true ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( w = 0 ; w < n ; w ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        11,
        12
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        11,
        12,
        1
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        11,
        12,
        3
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "char n ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        11,
        12,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "break break ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        11,
        1
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        11,
        1,
        3
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        11,
        1,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "int dat [ LIM ] [ ' ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        11,
        3
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "char n ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        11,
        3,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "char n ;",
        "break break ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        11,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "flag = true ;",
        "break break ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        1
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        12,
        1,
        3
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        12,
        1,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        12,
        3
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "char n ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        3,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "char n ;",
        "break break ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        12,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "break break ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        1,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "int dat [ LIM ] [ ' ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "char n ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        3,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "char n ;",
        "break break ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "LIM = 50 + 10 ;",
        "break break ;"
      ],
      "err_line": 0,
      "err_msg": "‘LIM’ does not name a type"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        1
      ],
      "mod_code": [
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        3
      ],
      "mod_code": [
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        16
      ],
      "mod_code": [
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        12,
        3
      ],
      "mod_code": [
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        3,
        16
      ],
      "mod_code": [
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "char n ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        16
      ],
      "mod_code": [
        "flag = true ;",
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "flag = true ;",
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        1,
        3
      ],
      "mod_code": [
        "flag = true ;",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        1,
        3,
        16
      ],
      "mod_code": [
        "flag = true ;",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        1,
        16
      ],
      "mod_code": [
        "flag = true ;",
        "int dat [ LIM ] [ ' ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "flag = true ;",
        "char n ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        3,
        16
      ],
      "mod_code": [
        "flag = true ;",
        "char n ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "flag = true ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        1,
        3
      ],
      "mod_code": [
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        1,
        3,
        16
      ],
      "mod_code": [
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;",
        "char n ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        1,
        16
      ],
      "mod_code": [
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "int dat [ LIM ] [ ' ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        3,
        16
      ],
      "mod_code": [
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "char n ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "for ( int k = 0 ; k < flag && k < n ; k ++ )",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int dat [ LIM ] [ ' ] ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        3,
        16
      ],
      "mod_code": [
        "int dat [ LIM ] [ ' ] ;",
        "char n ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int dat [ LIM ] [ ' ] ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "char n ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}