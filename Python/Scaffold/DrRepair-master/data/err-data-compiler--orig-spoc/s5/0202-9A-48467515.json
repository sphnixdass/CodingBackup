{
  "meta": {
    "index": 202,
    "hitid": "38F60IALAGB6REW5P63MB3P7HCB0TA",
    "workerid": "AIWEXPJAU66D9",
    "probid": "9A",
    "subid": "48467515"
  },
  "lines": [
    {
      "line": 0,
      "text": "function gcd_1 with integer arguments a and b that returns integer",
      "code": "int gcd_1 ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if b is equal to 0",
      "code": "if ( b == 0 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return a",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return gcd_1 of b and a % b",
      "code": "return gcd_1 ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "float k = max of n and m",
      "code": "float k = max ( n , m ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "float answer = gcd_1 of 7 - k and 6",
      "code": "float answer = gcd_1 ( 7 - k , 6 ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ( 7 - k ) / answer , \" / \" , 6 / answer and a new line",
      "code": "cout << ( 7 - k ) / answer << \" / \" << 6 / answer << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘float’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘float’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        12,
        10,
        4
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        10,
        4,
        1
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        10,
        4,
        11
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        10,
        4,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        10,
        1
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "if ( b == ' 0 ' )"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘float’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        12,
        10,
        1,
        11
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        10,
        1,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "if ( b == ' 0 ' )",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        10,
        11
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        10,
        11,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        10,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float k = min ( n , m ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "return gcd_1 ( b % b ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        4,
        1
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        4,
        1,
        11
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        4,
        1,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        11
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "return gcd_1 ( b % b ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        4,
        11,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "return gcd_1 ( b % b ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        4,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "return gcd_1 ( b % b ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "if ( b == ' 0 ' )"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘float’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        12,
        1,
        11
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        1,
        11,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        1,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "if ( b == ' 0 ' )",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        12,
        11,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "cout << ( 7 - k ) / answer , \" / \" , 6 / answer << endl ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        10,
        4,
        1
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        10,
        4,
        1,
        11
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        10,
        4,
        1,
        0
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        4,
        11
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        10,
        4,
        11,
        0
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        4,
        0
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "return gcd_1 ( b % b ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        1,
        11
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        10,
        1,
        11,
        0
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        1,
        0
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "if ( b == ' 0 ' )",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        10,
        11,
        0
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "float k = min ( n , m ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        4,
        1,
        11
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        4,
        1,
        11,
        0
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        1,
        0
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;",
        "if ( b == ' 0 ' )",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        4,
        11,
        0
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "return gcd_1 ( b % b ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd_1(int, int)’"
    },
    {
      "mod_line": [
        1,
        11,
        0
      ],
      "mod_code": [
        "if ( b == ' 0 ' )",
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "if ( b == ' 0 ' )",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "float answer = gcd_1 ( 7 - k - 6 ) ;",
        "int gcd_1 ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}