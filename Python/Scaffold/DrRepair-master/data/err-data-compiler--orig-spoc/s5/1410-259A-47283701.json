{
  "meta": {
    "index": 1410,
    "hitid": "3GV1I4SEO9JDMCAFIMHCYDPH14QL6D",
    "workerid": "A59A6LMCQRBL3",
    "probid": "259A",
    "subid": "47283701"
  },
  "lines": [
    {
      "line": 0,
      "text": "let arr [ 10 ] be a string array with 10 values",
      "code": "string arr [ 10 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let k be an integer that equals 0",
      "code": "int k = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "for int i = 0 to 8 exclusive",
      "code": "for ( int i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for int j = 0 to 8 exclusive",
      "code": "for ( int j = 0 ; j < 8 ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if j is not equal to 0",
      "code": "if ( ( j != 0 ) )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "read arr [ i ] [ j ]",
      "code": "cin >> arr [ i ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "if arr [ i ] [ j ] = = arr [ i ] [ j - 1 ] , k = - 1",
      "code": "if ( arr [ i ] [ j ] == arr [ i ] [ j - 1 ] ) { k = - 1 ; }",
      "indent": 4
    },
    {
      "line": 8,
      "text": "if last statement was false",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "read arr [ i ] [ j ]",
      "code": "cin >> arr [ i ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if k equals - 1",
      "code": "if ( k == - 1 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print NO and endline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if last statement was false",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print YES and endline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string arr [ 10 ] = { 10 } ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( ! last )"
      ],
      "err_line": 8,
      "err_msg": "‘last’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( ! last )"
      ],
      "err_line": 15,
      "err_msg": "‘last’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        0,
        6,
        9
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        15
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( k == - l )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        0,
        6,
        15
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        0,
        6,
        15,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        0,
        6,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( k == - l )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        0,
        9,
        15
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )"
      ],
      "err_line": 15,
      "err_msg": "‘last’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9,
        15,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "if ( ! last )"
      ],
      "err_line": 15,
      "err_msg": "‘last’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        15,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] [ 10 ] ;",
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        6,
        9,
        0
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        9,
        0,
        15
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( ! last )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        9,
        0,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( k == - l )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        9,
        15
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        6,
        9,
        15,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( k == - l )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        0,
        15
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( ! last )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        0,
        15,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        0,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( k == - l )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        6,
        15,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( k == - l )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        0,
        15
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( ! last )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        0,
        15,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        0,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "string arr [ 10 ] = { 10 } ;",
        "if ( k == - l )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )"
      ],
      "err_line": 15,
      "err_msg": "‘last’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;",
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "string arr [ 10 ] = { 10 } ;",
        "if ( ! last )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        15,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] = { 10 } ;",
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "string arr [ 10 ] = { 10 } ;",
        "if ( k == - l )"
      ],
      "err_line": 0,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "if ( ! last )",
        "if ( k == - l )"
      ],
      "err_line": 13,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}