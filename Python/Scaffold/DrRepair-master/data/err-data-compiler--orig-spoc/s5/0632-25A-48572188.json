{
  "meta": {
    "index": 632,
    "hitid": "38RHULDV9Y99QQHFO1X34RW270AIWD",
    "workerid": "AIWEXPJAU66D9",
    "probid": "25A",
    "subid": "48572188"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n be integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer pointer a pointed at new integer array of size n",
      "code": "int * a = new int [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "index and index1 are integers = 0",
      "code": "int index = 0 , index1 = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "f and f1 are integers = 0",
      "code": "int f = 0 , f1 = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ i ] is even",
      "code": "if ( a [ i ] % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set index to i",
      "code": "index = i ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment f",
      "code": "f ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "index1 = i",
      "code": "index1 = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increase f1 by one",
      "code": "f1 ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if f is equal to 1",
      "code": "if ( f == 1 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print index + 1 and a new line",
      "code": "cout << index + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print index1 + 1 and a new line",
      "code": "cout << index1 + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( f == 1 ) break ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "if ( f == 1 ) break ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3,
        16,
        9
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "if ( f == 1 ) break ;",
        "int index = i ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3,
        16,
        9,
        7
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        3,
        16,
        9,
        12
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "int index1 = i ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3,
        16,
        7
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "if ( f == 1 ) break ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        3,
        16,
        7,
        12
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "if ( f == 1 ) break ;",
        "cout << a [ i ] ;",
        "int index1 = i ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        3,
        16,
        12
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "if ( f == 1 ) break ;",
        "int index1 = i ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "int index = i ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "int index = i ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        3,
        9,
        7,
        12
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "int index = i ;",
        "cout << a [ i ] ;",
        "int index1 = i ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "int index = i ;",
        "int index1 = i ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        3,
        7,
        12
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "cout << a [ i ] ;",
        "int index1 = i ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "int * a [ n ] ;",
        "int index1 = i ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index = i ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        9,
        7
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        9,
        7,
        12
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "cout << a [ i ] ;",
        "int index1 = i ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        9,
        7,
        3
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "cout << a [ i ] ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int**’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        16,
        9,
        12
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "int index1 = i ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        9,
        12,
        3
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "int index1 = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    },
    {
      "mod_line": [
        16,
        9,
        3
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        7,
        12
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "cout << a [ i ] ;",
        "int index1 = i ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        7,
        12,
        3
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "cout << a [ i ] ;",
        "int index1 = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int**’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        16,
        7,
        3
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "cout << a [ i ] ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int**’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index1 = i ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        16,
        12,
        3
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int index1 = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "if ( f == 1 ) break ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    },
    {
      "mod_line": [
        9,
        7,
        12,
        3
      ],
      "mod_code": [
        "int index = i ;",
        "cout << a [ i ] ;",
        "int index1 = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int**’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        9,
        7,
        3
      ],
      "mod_code": [
        "int index = i ;",
        "cout << a [ i ] ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int**’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        9,
        12,
        3
      ],
      "mod_code": [
        "int index = i ;",
        "int index1 = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "int index = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    },
    {
      "mod_line": [
        7,
        12,
        3
      ],
      "mod_code": [
        "cout << a [ i ] ;",
        "int index1 = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int**’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "cout << a [ i ] ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int**’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "int index1 = i ;",
        "int * * a [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int**’)"
    }
  ]
}