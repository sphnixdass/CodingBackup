{
  "meta": {
    "index": 57,
    "hitid": "3RHLQY6EDTYG9DI9MHQ9I2XYW4L4DY",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "271A",
    "subid": "49043293"
  },
  "lines": [
    {
      "line": 0,
      "text": "function somebodytrue ( get int x , return int )",
      "code": "int somebodytrue ( int x )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "q , w , e , r = int",
      "code": "int q , w , e , r ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if x < = 1022 return 1023",
      "code": "if ( x <= 1022 ) return 1023 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = x + 1 to 9876 inclusive",
      "code": "for ( int i = x + 1 ; i <= 9876 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "q = i modulo 10",
      "code": "q = i % 10 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "w = i / 10 modulo 10",
      "code": "w = i / 10 % 10 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "e = i / 100 modulo 10",
      "code": "e = i / 100 % 10 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "r = i / 1000 modulo 10",
      "code": "r = i / 1000 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if q , e , w and r are all different return i",
      "code": "if ( q != w && e != r && w != r && q != e && w != e && q != r ) return i ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print somebodytrue ( n )",
      "code": "cout << somebodytrue ( n ) << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( q && e && w && r )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = x + 1 ; i <= 9876 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( q && e && w && r && r )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5,
        14
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "cout << somebodytrue ( n ) << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5,
        14,
        4
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "cout << somebodytrue ( n ) << \" \" ;",
        "q %= 10 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5,
        14,
        0
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "cout << somebodytrue ( n ) << \" \" ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        14,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "cout << somebodytrue ( n ) << \" \" ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5,
        4
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "q %= 10 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5,
        4,
        0
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "q %= 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        4,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "q %= 10 ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5,
        0
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        0,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "w /= 10 % 10 ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "cout << somebodytrue ( n ) << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        4
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "cout << somebodytrue ( n ) << \" \" ;",
        "q %= 10 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        4,
        0
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "cout << somebodytrue ( n ) << \" \" ;",
        "q %= 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        4,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "cout << somebodytrue ( n ) << \" \" ;",
        "q %= 10 ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        0
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "cout << somebodytrue ( n ) << \" \" ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        0,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "cout << somebodytrue ( n ) << \" \" ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "cout << somebodytrue ( n ) << \" \" ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "q %= 10 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        4,
        0
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "q %= 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        0,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "q %= 10 ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "q %= 10 ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        0,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( q && e && w && r )",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        14,
        4,
        0
      ],
      "mod_code": [
        "w /= 10 % 10 ;",
        "cout << somebodytrue ( n ) << \" \" ;",
        "q %= 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        14,
        0
      ],
      "mod_code": [
        "w /= 10 % 10 ;",
        "cout << somebodytrue ( n ) << \" \" ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        14,
        0,
        12
      ],
      "mod_code": [
        "w /= 10 % 10 ;",
        "cout << somebodytrue ( n ) << \" \" ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        0
      ],
      "mod_code": [
        "w /= 10 % 10 ;",
        "q %= 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        0,
        12
      ],
      "mod_code": [
        "w /= 10 % 10 ;",
        "q %= 10 ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "w /= 10 % 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        0,
        12
      ],
      "mod_code": [
        "w /= 10 % 10 ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        4,
        0
      ],
      "mod_code": [
        "cout << somebodytrue ( n ) << \" \" ;",
        "q %= 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        4,
        0,
        12
      ],
      "mod_code": [
        "cout << somebodytrue ( n ) << \" \" ;",
        "q %= 10 ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        0
      ],
      "mod_code": [
        "cout << somebodytrue ( n ) << \" \" ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        0,
        12
      ],
      "mod_code": [
        "cout << somebodytrue ( n ) << \" \" ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "q %= 10 ;",
        "void somebodytrue ( int x )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        0,
        12
      ],
      "mod_code": [
        "q %= 10 ;",
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "void somebodytrue ( int x )",
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    }
  ]
}