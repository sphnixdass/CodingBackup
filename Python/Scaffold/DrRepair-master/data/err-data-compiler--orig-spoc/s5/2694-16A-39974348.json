{
  "meta": {
    "index": 2694,
    "hitid": "32TZXEA1OLEMHI2X6O6EH0WP65014I",
    "workerid": "AIWEXPJAU66D9",
    "probid": "16A",
    "subid": "39974348"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "r , c and num = integers",
      "code": "int r , c , num ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "last is a char = ' x '",
      "code": "char last = ' x ' ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read r and c",
      "code": "cin >> r >> c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to r exclusive",
      "code": "for ( int i = 0 ; i < r ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let start be integer",
      "code": "int start ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "let n be string",
      "code": "string n ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if n [ 0 ] is equal to last",
      "code": "if ( n [ 0 ] == last )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "last = n [ 0 ]",
      "code": "last = n [ 0 ] ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "for j = 1 to c exclusive",
      "code": "for ( int j = 1 ; j < c ; j ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if n [ 0 ] ! = n [ j ]",
      "code": "if ( n [ 0 ] != n [ j ] )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = 1 ; j < c ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12,
        14
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12,
        14,
        2
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        14,
        20
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12,
        14,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        12,
        2
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int last = n [ 0 ] ;",
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        2,
        20
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int last = n [ 0 ] ;",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        12,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int last = n [ 0 ] ;",
        "char * last = ' x ' ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( n [ 0 ] ] != n [ j ] )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        14,
        2
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        14,
        2,
        20
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        14,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        14,
        20
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( n [ 0 ] ] != n [ j ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        14,
        20,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( n [ 0 ] ] != n [ j ] )",
        "cout << \" YES\\n \" << endl ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        14,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( n [ 0 ] ] != n [ j ] )",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "while ( cin >> n )",
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        2,
        20
      ],
      "mod_code": [
        "while ( cin >> n )",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        2,
        20,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "char * last = ' x ' ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        14,
        2
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        2,
        20
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        2,
        8
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        20
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        14,
        20,
        8
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "cout << \" YES\\n \" << endl ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        14,
        8
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "if ( n [ 0 ] ] != n [ j ] )",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2,
        20
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2,
        20,
        8
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2,
        8
      ],
      "mod_code": [
        "int last = n [ 0 ] ;",
        "char * last = ' x ' ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        2,
        20
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        2,
        20,
        8
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        2,
        8
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )",
        "char * last = ' x ' ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        20,
        8
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )",
        "cout << \" YES\\n \" << endl ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "if ( n [ 0 ] ] != n [ j ] )",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        20,
        8
      ],
      "mod_code": [
        "char * last = ' x ' ;",
        "cout << \" YES\\n \" << endl ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "char * last = ' x ' ;",
        "if ( n [ 0 ] == ' last ' )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    }
  ]
}