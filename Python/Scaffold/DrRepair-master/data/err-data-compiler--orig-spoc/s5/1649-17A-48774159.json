{
  "meta": {
    "index": 1649,
    "hitid": "3PIOQ99R7YGOCN31QHVURB7M8JSNUY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "48774159"
  },
  "lines": [
    {
      "line": 0,
      "text": "let point be integer = 0 , primes is an integer with size 600",
      "code": "int primes [ 600 ] , point = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "boolean function isprime with integer argument x",
      "code": "bool isprime ( int x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer res = 0",
      "code": "int res = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for integer i = 1 to x inclusive",
      "code": "for ( int i = 1 ; i <= x ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x % i = 0 increment res",
      "code": "if ( x % i == 0 ) res ++ ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "return true if res = 2 or false if it is not",
      "code": "return res == 2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "define function putprime",
      "code": "void putprime ( )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "for integer i = 2 to 600 exclusive",
      "code": "for ( int i = 2 ; i < 600 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if isprime ( i ) is true , set primes [ point ] to i and increment i",
      "code": "if ( isprime ( i ) ) primes [ point ++ ] = i ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "return",
      "code": "return ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "boolean function isNoldPrime with int argument x",
      "code": "bool isNoldPrime ( int x )",
      "indent": 0
    },
    {
      "line": 13,
      "text": "if isprime ( x ) returned false",
      "code": "if ( ! isprime ( x ) ) return false ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for integer i = 0 to peimrs [ i ] * 2 < = x",
      "code": "for ( int i = 0 ; primes [ i ] * 2 <= x ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if primes [ i ] + primes [ i + 1 ] + 1 = x , return true",
      "code": "if ( primes [ i ] + primes [ i + 1 ] + 1 == x ) return true ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "declare integers a and b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "call function putprime",
      "code": "putprime ( ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for integer i = 2 to a inclusive",
      "code": "for ( int i = 2 ; i <= a ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if isNoldPrime ( i ) is true , decrement b",
      "code": "if ( isNoldPrime ( i ) ) b -- ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print \" YES \" if b < = 0 or \" NO \" if it is not",
      "code": "puts ( b <= 0 ? \" YES \" : \" NO \" ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘peimrs’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int point = 0 , primes = 600 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool isprime ( int x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void putprime ( ) { }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )"
      ],
      "err_line": 14,
      "err_msg": "‘peimrs’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "putprime ( )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘for’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        14
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        14,
        12
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        14,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        14
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        14,
        12
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        14,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        12
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14,
        12
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14,
        12,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14,
        12
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14,
        12,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int point = 0 , primes = 0 ;",
        "return )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘peimrs’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        12
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        14,
        12,
        10
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        14,
        10
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )"
      ],
      "err_line": 14,
      "err_msg": "‘peimrs’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        12
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        14,
        12,
        10
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        14,
        10
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        12,
        10
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( isprime ( i ) ) primes [ point ] = i ;",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        12,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; i ++ )",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "bool isNoldPrime ( int x ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        12,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; peimrs [ i ] * 2 <= x ; ++ i )",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "bool isNoldPrime ( int x ) ;",
        "return )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}