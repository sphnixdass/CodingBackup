{
  "meta": {
    "index": 2302,
    "hitid": "3B286OTISEB8EOYI5EMBY3EBTYAAJP",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "713A",
    "subid": "44291132"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare alter taking in string x and returning string",
      "code": "string alter ( string x )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make string y = \" \"",
      "code": "string y = \" \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "make integer idx = 0",
      "code": "int idx = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while idx is less than size of x and ( x [ idx ] - ' 0 ' ) modulo 2 is 0 , increment idx",
      "code": "while ( idx < x . size ( ) && ( x [ idx ] - ' 0 ' ) % 2 == 0 ) idx ++ ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = idx to x . size ( ) exclusive",
      "code": "for ( int i = idx ; i < x . size ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer dig = ( x [ i ] - ' 0 ' ) % 2",
      "code": "int dig = ( x [ i ] - ' 0 ' ) % 2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "make char c = dig + ' 0 '",
      "code": "char c = dig + ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set y to y + c",
      "code": "y = y + c ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return y",
      "code": "return y ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "create integer t",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "make char c",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create string x",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "make map cnt from strings to integers",
      "code": "map < string , int > cnt ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while t - - is truthy",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read c and x",
      "code": "cin >> c >> x ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "create integer idx = 0",
      "code": "int idx = 0 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set x to alter ( x )",
      "code": "x = alter ( x ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if c is equal to ' + '",
      "code": "if ( c == ' + ' )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if cnt . find ( x ) is not equal to cnt . end ( )",
      "code": "if ( cnt . find ( x ) != cnt . end ( ) )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment cnt [ x ]",
      "code": "cnt [ x ] ++ ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else do",
      "code": "else",
      "indent": 3
    },
    {
      "line": 25,
      "text": "insert { x , 1 } into cnt",
      "code": "cnt . insert ( { x , 1 } ) ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else if c is equal to ' - '",
      "code": "else if ( c == ' - ' )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if cnt . find ( x ) is equal to cnt . end ( )",
      "code": "if ( cnt . find ( x ) == cnt . end ( ) )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "else do",
      "code": "else",
      "indent": 3
    },
    {
      "line": 31,
      "text": "decrease cnt [ x ] by 1",
      "code": "cnt [ x ] -- ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print cnt [ x ]",
      "code": "cout << cnt [ x ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string alter ( string x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n = \" \" ;"
      ],
      "err_line": 7,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char c += ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cin . get ( t ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 18,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "map < strings , int > cnt ;"
      ],
      "err_line": 16,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int x = alter ( x ) ;"
      ],
      "err_line": 20,
      "err_msg": "could not convert ‘x’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 27,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "cnt . insert ( x , 1 } ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else if ( c is ' - ' )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 36,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        15
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        21
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        21,
        33
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        21,
        30
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        21,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        33
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        33,
        30
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "else do",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        33,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        30
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        30,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        15,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "string n ;",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        21
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        21,
        33
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        21,
        33,
        30
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "if ( c == ' + ' ) break ;",
        "else do",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        21,
        33,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "if ( c == ' + ' ) break ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        21,
        30
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        21,
        30,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "if ( c == ' + ' ) break ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        21,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "if ( c == ' + ' ) break ;",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        33
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        33,
        30
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "else do",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        33,
        30,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "else do",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        33,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        30
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        30,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        4
      ],
      "mod_code": [
        "cnt . insert { x , 1 } ;",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "string n ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        33
      ],
      "mod_code": [
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        33,
        30
      ],
      "mod_code": [
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "else do",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        33,
        4
      ],
      "mod_code": [
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        30
      ],
      "mod_code": [
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        30,
        4
      ],
      "mod_code": [
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        4
      ],
      "mod_code": [
        "string n ;",
        "if ( c == ' + ' ) break ;",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        33
      ],
      "mod_code": [
        "string n ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        33,
        30
      ],
      "mod_code": [
        "string n ;",
        "else do",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        33,
        30,
        4
      ],
      "mod_code": [
        "string n ;",
        "else do",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        33,
        4
      ],
      "mod_code": [
        "string n ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        30
      ],
      "mod_code": [
        "string n ;",
        "else do"
      ],
      "err_line": 18,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        30,
        4
      ],
      "mod_code": [
        "string n ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "string n ;",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        33
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 27,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21,
        33,
        30
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else do",
        "else do"
      ],
      "err_line": 27,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21,
        33,
        30,
        4
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else do",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        33,
        4
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        30
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else do"
      ],
      "err_line": 27,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        21,
        30,
        4
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        4
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        30
      ],
      "mod_code": [
        "else do",
        "else do"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        33,
        30,
        4
      ],
      "mod_code": [
        "else do",
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        4
      ],
      "mod_code": [
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        4
      ],
      "mod_code": [
        "else do",
        "for ( i = idx ; i < x . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}