{
  "meta": {
    "index": 1878,
    "hitid": "3P6ENY9P79QRT0MQT2B33OMFTEFHIZ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "572A",
    "subid": "48885182"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare strings n1 , n2 , k , m",
      "code": "int n1 , n2 , k , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integers v1 , v2 , x",
      "code": "int v1 , v2 , x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n1 , n2",
      "code": "cin >> n1 >> n2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read k , m",
      "code": "cin >> k >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n1 exclusive",
      "code": "for ( int i = 0 ; i < n1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if i is k - 1 , let v1 be k",
      "code": "if ( i == k - 1 ) { v1 = x ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n2 exclusive",
      "code": "for ( int i = 0 ; i < n2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if i is n2 - m , let v2 be x",
      "code": "if ( i == n2 - m ) { v2 = x ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if v1 is less than v2",
      "code": "if ( v1 < v2 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        10
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "cout << x << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        3
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "cout << x << endl ;",
        "cin >> n1 >> n1 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        9
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "cout << x << endl ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "cout << x << endl ;",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        3
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "cin >> n1 >> n1 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        3,
        9
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        3,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "cin >> n1 >> n1 ;",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        9
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        7,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( i == k - 1 ) v1 = k ;",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cout << x << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        10,
        3
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cout << x << endl ;",
        "cin >> n1 >> n1 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        10,
        3,
        9
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cout << x << endl ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        10,
        3,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cout << x << endl ;",
        "cin >> n1 >> n1 ;",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        10,
        9
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cout << x << endl ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        10,
        9,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cout << x << endl ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        10,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cout << x << endl ;",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cin >> n1 >> n1 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        9
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "cin >> n1 >> n1 ;",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        9,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "string n1 , n2 , k , m ;",
        "if ( v1 <= v2 )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        10,
        3,
        9
      ],
      "mod_code": [
        "if ( i == k - 1 ) v1 = k ;",
        "cout << x << endl ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        9
      ],
      "mod_code": [
        "if ( i == k - 1 ) v1 = k ;",
        "cout << x << endl ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        9,
        13
      ],
      "mod_code": [
        "if ( i == k - 1 ) v1 = k ;",
        "cout << x << endl ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        9
      ],
      "mod_code": [
        "if ( i == k - 1 ) v1 = k ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        9,
        13
      ],
      "mod_code": [
        "if ( i == k - 1 ) v1 = k ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( i == k - 1 ) v1 = k ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        13
      ],
      "mod_code": [
        "if ( i == k - 1 ) v1 = k ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        3,
        9,
        13
      ],
      "mod_code": [
        "cout << x << endl ;",
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        9,
        13
      ],
      "mod_code": [
        "cout << x << endl ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "cin >> n1 >> n1 ;",
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n2 ; i ++ )",
        "if ( v1 <= v2 )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}