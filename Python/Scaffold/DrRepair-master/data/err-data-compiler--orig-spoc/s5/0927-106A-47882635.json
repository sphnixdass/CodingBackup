{
  "meta": {
    "index": 927,
    "hitid": "3CZH926SIC8L1JW9IC1TOKFJWGHE4W",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "106A",
    "subid": "47882635"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "card = basic_string of type char with card = \" SHDC \"",
      "code": "basic_string < char > card = \" SHDC \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "levl = basic_string of type char with levl = \" 6789TJQKA \"",
      "code": "basic_string < char > levl = \" 6789TJQKA \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a , b = string",
      "code": "string a , b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "tr = char",
      "code": "char tr ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read tr then a then b",
      "code": "cin >> tr >> a >> b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a contains tr and b does not contains tr",
      "code": "if ( a . find ( tr ) != a . npos && b . find ( tr ) == b . npos )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else if a [ 1 ] is not b [ 1 ]",
      "code": "else if ( a [ 1 ] != b [ 1 ] )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if find of a [ 0 ] on levl > find of b [ 0 ] on levl",
      "code": "if ( levl . find ( a [ 0 ] ) > levl . find ( b [ 0 ] ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "return true bitwise - and false",
      "code": "return true & false ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char card = \" SHDC \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a != tr && b != tr . end ( ) )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘find(char&)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char basic_string = \" SHDC \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char levl = \" qwertyuiopasdfghjkl;zxcvbnm,./ \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char a , b ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘find’ in ‘a’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char res ;"
      ],
      "err_line": 5,
      "err_msg": "‘tr’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a . find ( tr ) != tr . end ( ) )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘end’ in ‘tr’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘find(char&)’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        8
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        11,
        8
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "else if ( a [ 1 ] ] != b [ 1 ] )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "char levl = \" 6789TJQKA \" ;",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( a != tr && b != tr . end ( ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        11,
        8
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        8
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "else if ( a [ 1 ] ] != b [ 1 ] )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char card = \" SHDC \" ;",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        11
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        11,
        8
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        11
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        11
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        8
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        11
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "else if ( a [ 1 ] ] != b [ 1 ] )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "char levl = \" 6789TJQKA \" ;",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        6,
        11,
        8
      ],
      "mod_code": [
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( a != tr && b != tr . end ( ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        6,
        8,
        11
      ],
      "mod_code": [
        "if ( a != tr && b != tr . end ( ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a != tr && b != tr . end ( ) )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "if ( find ( a [ 0 ] ) > find ( b [ 0 ] ) )",
        "else if ( a [ 1 ] ] != b [ 1 ] )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "else if ( a [ 1 ] ] != b [ 1 ] )",
        "if ( find > find ( a [ 0 ] ) > find ( b [ 0 ] ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}