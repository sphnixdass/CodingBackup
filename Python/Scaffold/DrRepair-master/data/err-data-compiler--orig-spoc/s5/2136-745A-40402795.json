{
  "meta": {
    "index": 2136,
    "hitid": "3HXCEECSQMNZAL1P363DPJK8E0UYZ1",
    "workerid": "AY9SI82Y2PX3C",
    "probid": "745A",
    "subid": "40402795"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let k , len and flag = integers",
      "code": "int k , len , flag ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let s = String",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while cin > > s",
      "code": "while ( cin >> s )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set len to the length of s",
      "code": "len = s . length ( ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set k to 0",
      "code": "k = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for int i = 0 and i < len / 2 + 1",
      "code": "for ( int i = 0 ; i < len / 2 + 1 ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment k by 1",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if len mod k is 0",
      "code": "if ( len % k == 0 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "for int j = 0 and j must be < k",
      "code": "for ( int j = 0 ; j < k ; j ++ )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "for int l - k and l + k must be < = len",
      "code": "for ( int l = k ; l + k <= len ; l += k )",
      "indent": 5
    },
    {
      "line": 12,
      "text": "if s [ j ] does not equal s [ l + j ]",
      "code": "if ( s [ j ] != s [ l + j ] )",
      "indent": 6
    },
    {
      "line": 13,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 7
    },
    {
      "line": 14,
      "text": "break from if",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 17,
      "text": "if flag is false , or 0 then break",
      "code": "if ( ! flag ) break ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if flag is true , or 1 , then break",
      "code": "if ( flag ) break ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if flag is false , or 0 , then set k to len",
      "code": "if ( ! flag ) k = len ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "output k and new line",
      "code": "cout << k << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s = String ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s = String ;"
      ],
      "err_line": 2,
      "err_msg": "‘String’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin > s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( break )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( flag ) break && flag ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        13
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        13,
        14
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "if ( break )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        13,
        9
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        13,
        12
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        14
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( break )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        14,
        9
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( break )",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        14,
        12
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( break )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        9
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        9,
        12
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11,
        12
      ],
      "mod_code": [
        "s = String ;",
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        14
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 0 ;",
        "if ( break )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        14,
        9
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 0 ;",
        "if ( break )",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        14,
        12
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 0 ;",
        "if ( break )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        9
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 0 ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        9,
        12
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 0 ;",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        12
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 0 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "s = String ;",
        "if ( break )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        14,
        9
      ],
      "mod_code": [
        "s = String ;",
        "if ( break )",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        14,
        9,
        12
      ],
      "mod_code": [
        "s = String ;",
        "if ( break )",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        14,
        12
      ],
      "mod_code": [
        "s = String ;",
        "if ( break )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        12
      ],
      "mod_code": [
        "s = String ;",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "s = String ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        14
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "if ( break )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        11,
        13,
        14,
        9
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "if ( break )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        11,
        13,
        14,
        12
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "if ( break )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        11,
        13,
        9,
        12
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        11,
        13,
        12
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 0 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( break )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        11,
        14,
        9
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( break )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        11,
        14,
        9,
        12
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( break )",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        11,
        14,
        12
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( break )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        11,
        9,
        12
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "for ( int l = len ; l + k <= len ; l ++ )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "int flag = 0 ;",
        "if ( break )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        13,
        14,
        9
      ],
      "mod_code": [
        "int flag = 0 ;",
        "if ( break )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        13,
        14,
        9,
        12
      ],
      "mod_code": [
        "int flag = 0 ;",
        "if ( break )",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        13,
        14,
        12
      ],
      "mod_code": [
        "int flag = 0 ;",
        "if ( break )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        13,
        9,
        12
      ],
      "mod_code": [
        "int flag = 0 ;",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "int flag = 0 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "if ( break )",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        14,
        9,
        12
      ],
      "mod_code": [
        "if ( break )",
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "if ( break )",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "int flag = 1 ;",
        "if ( s [ j ] does ! s [ l + j ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘does’"
    }
  ]
}