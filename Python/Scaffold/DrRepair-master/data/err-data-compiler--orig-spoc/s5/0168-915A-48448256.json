{
  "meta": {
    "index": 168,
    "hitid": "3QX22DUVOOBI7K71J6QZAIK5I27VMG",
    "workerid": "AUD1I8FZAO4VF",
    "probid": "915A",
    "subid": "48448256"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n and k be ints",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let a be an int array of length 105 with first two elements 12 and 13",
      "code": "int a [ 105 ] = { 12 , 13 } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if k / a [ i ] is k * 1 . 0 / a [ i ]",
      "code": "if ( k / a [ i ] == k * 1.0 / a [ i ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "a [ i ] is k / a [ i ]",
      "code": "a [ i ] = k / a [ i ] ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "a [ i ] is 0",
      "code": "a [ i ] = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "call sort on a and a + n",
      "code": "sort ( a , a + n ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let i be an int with value 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while a [ i ] is 0 increment i",
      "code": "while ( a [ i ] == 0 ) i ++ ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print a [ i ]",
      "code": "cout << a [ i ] << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a [ 105 ] [ 13 ] = { 12 } ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [13]’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "sort ( a and a + n ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘sort(bool)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int i be 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        9
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "a [ i ] = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        7
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "a [ i ] *= a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "a [ i ] = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        7
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "a [ i ] = ' 0 ' ;",
        "a [ i ] *= a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "a [ i ] = ' 0 ' ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "a [ i ] *= a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "a [ i ] *= a [ i ] ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        3,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cin >> n and k ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "a [ i ] = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        7
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "a [ i ] = ' 0 ' ;",
        "a [ i ] *= a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "a [ i ] = ' 0 ' ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "a [ i ] *= a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "a [ i ] *= a [ i ] ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        6,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "if ( k / a [ i ] == k * 0.5 / a [ i ] )",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "a [ i ] = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        9,
        7
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "a [ i ] = ' 0 ' ;",
        "a [ i ] *= a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "a [ i ] = ' 0 ' ;",
        "a [ i ] *= a [ i ] ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        9,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "a [ i ] = ' 0 ' ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "a [ i ] *= a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        7,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "a [ i ] *= a [ i ] ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "int a [ 105 ] [ 12 ] , 13 ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before numeric constant"
    }
  ]
}