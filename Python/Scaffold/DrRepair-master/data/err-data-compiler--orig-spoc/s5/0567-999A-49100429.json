{
  "meta": {
    "index": 567,
    "hitid": "31J7RYECZLKIFQ9ICG5V3HY0TT51LQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "999A",
    "subid": "49100429"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create ints n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m and keep looping",
      "code": "while ( cin >> n >> m )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create an array of integers arr with 100 elements",
      "code": "int arr [ 100 ] ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "create integer sum = 0",
      "code": "int sum = 0 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for integer i = 0 to n exclusive , read input to arr [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if arr [ i ] < = m",
      "code": "if ( arr [ i ] <= m )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment sum by one",
      "code": "sum ++ ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for integer i = n - 1 to 0 exclusive decrementing i",
      "code": "for ( int i = n - 1 ; i > 0 ; i -- )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if arr [ i ] < = m",
      "code": "if ( arr [ i ] <= m )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 16,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "change sum to n if sum > n",
      "code": "sum = sum > n ? n : sum ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print sum",
      "code": "cout << sum << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 16,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        13
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        13,
        6
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        13,
        7
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        13,
        2
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        6
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        6,
        7
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        6,
        2
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        7
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        3,
        7,
        2
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        2
      ],
      "mod_code": [
        "break break ;",
        "int arr [ 100 100 ] ;",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        13,
        6
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        6,
        7
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        6,
        2
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        7
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        13,
        7,
        2
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        2
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        6,
        7
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        6,
        7,
        2
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        6,
        2
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        7,
        2
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "break break ;",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        13,
        6
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        13,
        6,
        7
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        13,
        6,
        2
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        13,
        7
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        13,
        7,
        2
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        13,
        2
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        2
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int arr [ 100 100 ] ;",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        6,
        7
      ],
      "mod_code": [
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        6,
        7,
        2
      ],
      "mod_code": [
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        6,
        2
      ],
      "mod_code": [
        "if ( arr [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        7,
        2
      ],
      "mod_code": [
        "if ( arr [ i ] <= ' m ' )",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( arr [ i ] <= ' m ' )",
        "while ( { cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}