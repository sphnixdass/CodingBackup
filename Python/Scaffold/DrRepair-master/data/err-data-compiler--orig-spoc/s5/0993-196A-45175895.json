{
  "meta": {
    "index": 993,
    "hitid": "3MJ28H2Y1E2P9TDYQVNZYOFBZRL5OO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "196A",
    "subid": "45175895"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while reading s",
      "code": "while ( cin >> s )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string res = \" \"",
      "code": "string res = \" \" ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "create character prev = ' a '",
      "code": "char prev = ' a ' ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = length of s - 1 to 0 inclusive , decrementing i",
      "code": "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ i ] > = prev",
      "code": "if ( s [ i ] >= prev )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "append s [ i ] to res",
      "code": "res += s [ i ] ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "assign s [ i ] to prev",
      "code": "prev = s [ i ] ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "reverse res",
      "code": "reverse ( res . begin ( ) , res . end ( ) ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( s >> s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char * prev = ' a ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "string res = \" \" ;",
        "while ( s >> s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        8
      ],
      "mod_code": [
        "string res = \" \" ;",
        "while ( s >> s )",
        "prev ^= s [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        8,
        4
      ],
      "mod_code": [
        "string res = \" \" ;",
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        8,
        6
      ],
      "mod_code": [
        "string res = \" \" ;",
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        4
      ],
      "mod_code": [
        "string res = \" \" ;",
        "while ( s >> s )",
        "char * prev = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        4,
        6
      ],
      "mod_code": [
        "string res = \" \" ;",
        "while ( s >> s )",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "string res = \" \" ;",
        "while ( s >> s )",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        8,
        4
      ],
      "mod_code": [
        "string res = \" \" ;",
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        4,
        6
      ],
      "mod_code": [
        "string res = \" \" ;",
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string res = \" \" ;",
        "char * prev = ' a ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "string res = \" \" ;",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( s >> s )",
        "prev ^= s [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        4
      ],
      "mod_code": [
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        4,
        6
      ],
      "mod_code": [
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        4,
        3
      ],
      "mod_code": [
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;",
        "char res = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        6,
        3
      ],
      "mod_code": [
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "if ( s [ i ] >= ' prev ' )",
        "char res = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "while ( s >> s )",
        "prev ^= s [ i ] ;",
        "char res = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while ( s >> s )",
        "char * prev = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "while ( s >> s )",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        3
      ],
      "mod_code": [
        "while ( s >> s )",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )",
        "char res = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "while ( s >> s )",
        "char * prev = ' a ' ;",
        "char res = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "while ( s >> s )",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "while ( s >> s )",
        "if ( s [ i ] >= ' prev ' )",
        "char res = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "while ( s >> s )",
        "char res = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        6
      ],
      "mod_code": [
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        6,
        3
      ],
      "mod_code": [
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )",
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        3
      ],
      "mod_code": [
        "prev ^= s [ i ] ;",
        "char * prev = ' a ' ;",
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6,
        3
      ],
      "mod_code": [
        "prev ^= s [ i ] ;",
        "if ( s [ i ] >= ' prev ' )",
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "prev ^= s [ i ] ;",
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "char * prev = ' a ' ;",
        "if ( s [ i ] >= ' prev ' )",
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "char * prev = ' a ' ;",
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s [ i ] >= ' prev ' )",
        "char res = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    }
  ]
}