{
  "meta": {
    "index": 941,
    "hitid": "3ZLW647WALP8O71PPE19CEEOLDV23X",
    "workerid": "AIWEXPJAU66D9",
    "probid": "106A",
    "subid": "30779874"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer variable M with value 100 + 5",
      "code": "const int M = 100 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create an array of strings card with elements = \" 6 \" , \" 7 \" , \" 8 \" , \" 9 \" , \" T \" , \" J \" , \" Q \" , \" K \" , \" A \"",
      "code": "string card [ 9 ] = { \" 6 \" , \" 7 \" , \" 8 \" , \" 9 \" , \" T \" , \" J \" , \" Q \" , \" K \" , \" A \" } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create character variable trump",
      "code": "char trump ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read trump from the user input",
      "code": "cin >> trump ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create strings s1 and s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s1 and s2 from the user input",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s1 [ 1 ] = s2 [ 1 ]",
      "code": "if ( s1 [ 1 ] == s2 [ 1 ] )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare integer variable r1 with value - 1",
      "code": "int r1 = - 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "declare new integer r2 with value - 1",
      "code": "int r2 = - 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "declare new string variable t1 = \" \"",
      "code": "string t1 = \" \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "create string variable with name t2 with value \" \"",
      "code": "string t2 = \" \" ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "change the value of t1 to t1 concatenated with s1 [ 0 ]",
      "code": "t1 = t1 + s1 [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "change the value of t2 to t2 joined with s2 [ 0 ]",
      "code": "t2 = t2 + s2 [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i from 0 to 9 exclusive",
      "code": "for ( int i = 0 ; i < 9 ; i ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if card [ i ] is equal to t1 , change the value of r1 to i",
      "code": "if ( card [ i ] == t1 ) { r1 = i ; }",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if card [ i ] = t2 , change r2 to i",
      "code": "if ( card [ i ] == t2 ) { r2 = i ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if r1 is greater than r2",
      "code": "if ( r1 > r2 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if s1 [ 1 ] is equal to trump",
      "code": "if ( s1 [ 1 ] == trump )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print \" NO \" to the standard output",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 4,
      "err_msg": "‘trump’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "strings , s2 ;"
      ],
      "err_line": 5,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int s1 >> s2 ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int * r2 = - 1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char t1 = \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "string t2 create \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "t2 = t2 joined s2 [ 0 ] ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘joined’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < 9 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11,
        24,
        0
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        11,
        24,
        8
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        11,
        0
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "string t2 = \" \" ;",
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        11,
        0,
        8
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "string t2 = \" \" ;",
        "const int M declare 100 + 5 ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        11,
        8
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "string t2 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        24,
        0
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        24,
        0,
        8
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        24,
        8
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        0,
        8
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "const int M declare 100 + 5 ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "string t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        24,
        0
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        24,
        0,
        10
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;",
        "char t1 = \" \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        24,
        0,
        8
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        24,
        10
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "char t1 = \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        24,
        10,
        8
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "char t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        24,
        8
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "if ( s1 [ 1 ] == ' trump ' )",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        0,
        10
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "const int M declare 100 + 5 ;",
        "char t1 = \" \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        0,
        10,
        8
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "const int M declare 100 + 5 ;",
        "char t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        0,
        8
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "const int M declare 100 + 5 ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "char t1 = \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        10,
        8
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "char t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "string t2 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        24,
        0
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        24,
        0,
        10
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;",
        "char t1 = \" \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        24,
        0,
        10,
        8
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;",
        "char t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        24,
        0,
        8
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' trump ' )",
        "const int M declare 100 + 5 ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        24,
        10
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' trump ' )",
        "char t1 = \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        10,
        8
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' trump ' )",
        "char t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        24,
        8
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' trump ' )",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "const int M declare 100 + 5 ;",
        "char t1 = \" \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        0,
        10,
        8
      ],
      "mod_code": [
        "const int M declare 100 + 5 ;",
        "char t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "const int M declare 100 + 5 ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "char t1 = \" \" ;",
        "int r1 declare - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘declare’"
    }
  ]
}