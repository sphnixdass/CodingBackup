{
  "meta": {
    "index": 2228,
    "hitid": "3ZZAYRN1I6LRUVOORR5X14LPGH5TOC",
    "workerid": "AIWEXPJAU66D9",
    "probid": "540A",
    "subid": "48865739"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new integer variable n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare strings a and b",
      "code": "string a , b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "c is a new integer = 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read variable n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a and b from the user input",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "start for loop from i = 0 to n exclusive , adding min of 10 - abs ( a [ i ] - b [ i ] ) and abs ( a [ i ] - b [ i ] ) to c on each iteration",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] - b [ i ] ) ) ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print c and \" \\ n \"",
      "code": "cout << c << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘min(int, __gnu_cxx::__enable_if<true, double>::__type)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "int a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        5,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "int a >> b ;",
        "cout << c << \" \\0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6,
        5,
        7,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "int a >> b ;",
        "cout << c << \" \\0 \" ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        5,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "int a >> b ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "cout << c << \" \\0 \" ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘min(int, __gnu_cxx::__enable_if<true, double>::__type)’"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "cout << c << \" \\0 \" ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "int a >> b ;",
        "cout << c << \" \\0 \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "int a >> b ;",
        "cout << c << \" \\0 \" ;",
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        7,
        6,
        2
      ],
      "mod_code": [
        "int a >> b ;",
        "cout << c << \" \\0 \" ;",
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "int a >> b ;",
        "cout << c << \" \\0 \" ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "int a >> b ;",
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "int a >> b ;",
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "int a >> b ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << c << \" \\0 \" ;",
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "cout << c << \" \\0 \" ;",
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "cout << c << \" \\0 \" ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ ) c += min ( 10 - abs ( a [ i ] - b [ i ] ) , abs ( a [ i ] ) ) ;",
        "string a and b ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    }
  ]
}