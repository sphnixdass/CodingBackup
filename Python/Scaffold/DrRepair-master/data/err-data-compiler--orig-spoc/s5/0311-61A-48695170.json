{
  "meta": {
    "index": 311,
    "hitid": "3PKJ68EHDNQNOB6WBKW3FP1F6TWHJ3",
    "workerid": "A1AYVATMT88U1W",
    "probid": "61A",
    "subid": "48695170"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a , b , c be empty strings",
      "code": "string a , b , c = \" \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let tam be long integer with tam is equal to size of a",
      "code": "long long tam = a . size ( ) , i ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to tam exclusive",
      "code": "for ( i = 0 ; i < tam ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a [ i ] is equal to b [ i ]",
      "code": "if ( a [ i ] == b [ i ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment c by 0",
      "code": "c += ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment c by 1",
      "code": "c += ' 1 ' ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print c and newline",
      "code": "cout << c << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "c += 0 ;"
      ],
      "err_line": 6,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long int tam = a . size ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "c ++ ;"
      ],
      "err_line": 6,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "c += 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "c ++ ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        5
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "c += 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "c ++ ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        5
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "c ++ ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "if ( a [ i ] ] == b [ i ] )",
        "c += 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "long long tam = a . size ( ) ;",
        "c += 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c += 0 ;"
      ],
      "err_line": 6,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c += 0 ;",
        "c ++ ;"
      ],
      "err_line": 6,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        5
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c += 0 ;",
        "c ++ ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c += 0 ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c += 0 ;",
        "if ( a [ i ] ] == b [ i ] )",
        "c += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c += 0 ;",
        "c += 1 ;"
      ],
      "err_line": 6,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c ++ ;"
      ],
      "err_line": 8,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "c ++ ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "string a , b , c = 0 ;",
        "if ( a [ i ] ] == b [ i ] )",
        "c += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c += 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "c ++ ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        5
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "c ++ ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        5,
        8
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "if ( a [ i ] ] == b [ i ] )",
        "c += 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c += 0 ;",
        "c += 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c ++ ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        5
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c ++ ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "if ( a [ i ] ] == b [ i ] )",
        "c += 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "long long tam = a . size ( ) ;",
        "c += 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "c += 0 ;",
        "c ++ ;"
      ],
      "err_line": 6,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        8,
        5
      ],
      "mod_code": [
        "c += 0 ;",
        "c ++ ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "c += 0 ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        5,
        8
      ],
      "mod_code": [
        "c += 0 ;",
        "if ( a [ i ] ] == b [ i ] )",
        "c += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "c += 0 ;",
        "c += 1 ;"
      ],
      "err_line": 6,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "c ++ ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "if ( a [ i ] ] == b [ i ] )",
        "c += 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}