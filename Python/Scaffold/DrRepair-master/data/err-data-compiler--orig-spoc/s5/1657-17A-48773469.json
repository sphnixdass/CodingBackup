{
  "meta": {
    "index": 1657,
    "hitid": "3G57RS03HHZB2MOT3XP2RBC8Y79528",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "48773469"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers ans , n , k , create integer arrays prime , pp , cnt , with prime size 1111 , pp size 2222 , cnt size 2222",
      "code": "int ans , prime [ 1111 ] , pp [ 2222 ] , cnt [ 2222 ] , n , k ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare pm with integer x as argument , returning boolean",
      "code": "bool pm ( int x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer cnt with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 1 to x inclusive",
      "code": "for ( int i = 1 ; i <= x ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x modulus i is 0 , increment cnt",
      "code": "if ( x % i == 0 ) { cnt ++ ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return true if cnt is 2 , else false , from function",
      "code": "return cnt == 2 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare pm2 with no arguments , returning void",
      "code": "void pm2 ( )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if return of run pm with argument i is true , set prime [ i ] to 1",
      "code": "if ( pm ( i ) ) { prime [ i ] = 1 ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 1 to 1000 inclusive",
      "code": "for ( int i = 1 ; i <= 1000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if not prime [ i ] , break loop iteration",
      "code": "if ( ! prime [ i ] ) { continue ; }",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for j = i + 1 to 1000 inclusive",
      "code": "for ( int j = i + 1 ; j <= 1000 ; j ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if not prime [ j ] , break loop iteration",
      "code": "if ( ! prime [ j ] ) { continue ; }",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if not prime [ i + j + 1 ] , break loop",
      "code": "if ( ! prime [ i + j + 1 ] ) { break ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set pp [ i + j + 1 ] to 1",
      "code": "pp [ i + j + 1 ] = 1 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 23,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "run pm2",
      "code": "pm2 ( ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for i = 1 to 2222 exclusive , set cnt [ i ] to cnt [ i - 1 ] + pp [ i ]",
      "code": "for ( int i = 1 ; i < 2222 ; i ++ ) { cnt [ i ] = cnt [ i - 1 ] + pp [ i ] ; }",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set ans to cnt [ n ]",
      "code": "ans = cnt [ n ] ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if ans is greater than or equal to k",
      "code": "if ( ans >= k )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print \" NO \" print newline \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "void pm2 ( ) { }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool pm ( int x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= x ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = i + 1 ; j <= 1000 ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "pp [ i + j + 1 ] to 1 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "pm2 ( )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘for’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , pp [ 1111 ] , cnt [ 1111 ] ;",
        "void pm2 ( ) { }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        13
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , pp [ 1111 ] , cnt [ 1111 ] ;",
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        13,
        15
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , pp [ 1111 ] , cnt [ 1111 ] ;",
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "if ( ! prime [ j ] ) break ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        13,
        10
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , pp [ 1111 ] , cnt [ 1111 ] ;",
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        15
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , pp [ 1111 ] , cnt [ 1111 ] ;",
        "void pm2 ( ) { }",
        "if ( ! prime [ j ] ) break ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        15,
        10
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , pp [ 1111 ] , cnt [ 1111 ] ;",
        "void pm2 ( ) { }",
        "if ( ! prime [ j ] ) break ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        10
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , pp [ 1111 ] , cnt [ 1111 ] ;",
        "void pm2 ( ) { }",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        15
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "if ( ! prime [ j ] ) break ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        15,
        0
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "if ( ! prime [ j ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        8,
        13,
        15,
        10
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "if ( ! prime [ j ] ) break ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        0
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        8,
        13,
        0,
        10
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        8,
        13,
        10
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ i ] ) break ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ j ] ) break ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        15,
        0
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ j ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        8,
        15,
        0,
        10
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ j ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        8,
        15,
        10
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( ! prime [ j ] ) break ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        8,
        0,
        10
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "void pm2 ( ) { }",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        15,
        0
      ],
      "mod_code": [
        "if ( ! prime [ i ] ) break ;",
        "if ( ! prime [ j ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        13,
        15,
        0,
        10
      ],
      "mod_code": [
        "if ( ! prime [ i ] ) break ;",
        "if ( ! prime [ j ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "if ( ! prime [ i ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        13,
        0,
        10
      ],
      "mod_code": [
        "if ( ! prime [ i ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "if ( ! prime [ j ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        15,
        0,
        10
      ],
      "mod_code": [
        "if ( ! prime [ j ] ) break ;",
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int ans , n , k , prime [ 1111 ] , cnt [ 1111 ] , cnt [ 1111 ] ;",
        "if ( pm ( i ) , prime [ i ] ) { prime [ i ] = 1 ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt [1111]’"
    }
  ]
}