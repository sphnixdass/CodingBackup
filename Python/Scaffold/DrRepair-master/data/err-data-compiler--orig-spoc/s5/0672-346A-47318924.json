{
  "meta": {
    "index": 672,
    "hitid": "35O6H0UNLSAB8IM1AIVUQSYP1KBJ5U",
    "workerid": "AIWEXPJAU66D9",
    "probid": "346A",
    "subid": "47318924"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , g , x and m are integers with g = 0",
      "code": "int n , g = 0 , x , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and x from the input",
      "code": "cin >> n >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "change the values of m and g to x",
      "code": "g = m = x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "start for loop from i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read from the input to x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "assign the return value of __gcd ( g , x ) to g",
      "code": "g = __gcd ( g , x ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "change m to max of m and x",
      "code": "m = max ( m , x ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ( m / g - n ) & 1 is not 0",
      "code": "if ( ( m / g - n ) & 1 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" Alice \\ n \"",
      "code": "cout << \" Alice\\n \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" Bob \\ n \"",
      "code": "cout << \" Bob\\n \" ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n >> x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12,
        2
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "int n >> x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        12,
        2,
        7
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "int m = max ( m , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        12,
        2,
        6
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        2,
        12
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "cout << \" 1\\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        2,
        12,
        7
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "cout << \" 1\\n \" ;",
        "int m = max ( m , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        2,
        12,
        6
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "cout << \" 1\\n \" ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        2,
        7
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "int m = max ( m , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        2,
        7,
        6
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "int m = max ( m , x ) ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        12,
        2,
        7
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "int m = max ( m , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        12,
        2,
        7,
        6
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "int m = max ( m , x ) ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        12,
        2,
        6
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "int n >> x ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int n >> x ;",
        "cout << \" 1\\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2,
        12,
        7
      ],
      "mod_code": [
        "int n >> x ;",
        "cout << \" 1\\n \" ;",
        "int m = max ( m , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2,
        12,
        7,
        6
      ],
      "mod_code": [
        "int n >> x ;",
        "cout << \" 1\\n \" ;",
        "int m = max ( m , x ) ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2,
        12,
        6
      ],
      "mod_code": [
        "int n >> x ;",
        "cout << \" 1\\n \" ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int n >> x ;",
        "int m = max ( m , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "int n >> x ;",
        "int m = max ( m , x ) ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int n >> x ;",
        "g ^= __gcd ( g , x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘>>’ token"
    }
  ]
}