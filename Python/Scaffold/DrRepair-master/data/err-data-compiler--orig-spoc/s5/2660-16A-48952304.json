{
  "meta": {
    "index": 2660,
    "hitid": "3DW3BNF1GHC3MV5XP5GG50JAXV38VL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "16A",
    "subid": "48952304"
  },
  "lines": [
    {
      "line": 0,
      "text": "n and m = integers",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let is function with const integer arguments x and y",
      "code": "bool let ( const int x , const int y )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return 0 < = x and x < n and 0 < = y and y < m",
      "code": "return 0 <= x && x < n && 0 <= y && y < m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "set constant integer maxn to 123",
      "code": "const int maxn = 123 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "print current decimal precision",
      "code": "cout . precision ( 10 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print fixed",
      "code": "cout << fixed ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "vs ( n ) = vector of strings",
      "code": "vector < string > vs ( n ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive read vs [ i ]",
      "code": "for ( int i = 0 ; i < ( int ) ( n ) ; ++ i ) cin >> vs [ i ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < ( int ) ( n ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < ( int ) ( m ) ; ++ j )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if vs [ i ] [ j ] ! = vs [ i ] [ 0 ]",
      "code": "if ( vs [ i ] [ j ] != vs [ i ] [ 0 ] )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if i > 0 & & vs [ i ] [ 0 ] = vs [ i - 1 ] [ 0 ]",
      "code": "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ 0 ] )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" Time elapsed : \" , 1 . 0 * clock ( ) / CLOCKS_PER_SEC and \" s . \\ n \" into error stream",
      "code": "cerr << \" Time elapsed: \" << 1.0 * clock ( ) / CLOCKS_PER_SEC << \" s.\\n \" ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void let ( const int x , int y )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cout << precision << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const int maxn = 123 . 123 ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "puts ( fixed ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::ios_base& (*)(std::ios_base&)’ to ‘const char*’ for argument ‘1’ to ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "vector < string ) ( n ) ;"
      ],
      "err_line": 9,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( vs [ i ] [ j ] != vs [ i ] [ ' 0 ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "cout << ceil ( \" Time \" ) ;"
      ],
      "err_line": 24,
      "err_msg": "no matching function for call to ‘ceil(const char [5])’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        24
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cout << \" . \" ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        8
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "cin >> m >> m ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        18
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        18
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cin >> m >> m ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        18
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        18,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << precision << endl ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" . \" ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24,
        8
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" . \" ;",
        "cin >> m >> m ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24,
        8,
        18
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" . \" ;",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24,
        8,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" . \" ;",
        "cin >> m >> m ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24,
        18
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" . \" ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24,
        18,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" . \" ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" . \" ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cin >> m >> m ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        18
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        18,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cin >> m >> m ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        18,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "void let ( const int x , int y )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" . \" ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        8
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "cin >> m >> m ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        8,
        18
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        8,
        23
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "cin >> m >> m ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        18
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        18,
        23
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24,
        23
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" . \" ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cin >> m >> m ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        18
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        18,
        23
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        23
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cin >> m >> m ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        18,
        23
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "cout << precision << endl ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘precision’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        8,
        18
      ],
      "mod_code": [
        "cout << \" . \" ;",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        8,
        18,
        23
      ],
      "mod_code": [
        "cout << \" . \" ;",
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        18
      ],
      "mod_code": [
        "cout << \" . \" ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        24,
        18,
        23
      ],
      "mod_code": [
        "cout << \" . \" ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        18,
        23
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        18,
        23
      ],
      "mod_code": [
        "if ( i > 0 && vs [ i ] [ 0 ] == vs [ i - 1 ] [ ' 0 ' )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}