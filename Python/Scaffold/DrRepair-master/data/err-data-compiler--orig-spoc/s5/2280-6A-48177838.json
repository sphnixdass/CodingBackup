{
  "meta": {
    "index": 2280,
    "hitid": "3M47JKRKCXVI75QWOX88T83BG2C68S",
    "workerid": "AIWEXPJAU66D9",
    "probid": "6A",
    "subid": "48177838"
  },
  "lines": [
    {
      "line": 0,
      "text": "long long int constants N = 1e6 + 6 and inf = 1e9 + 7",
      "code": "const long long int N = 1e6 + 6 , inf = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in the function tri",
      "code": "void tri ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "print \" TRIANGLE \\ n \" , exit ( 0 )",
      "code": "cout << \" TRIANGLE\\n \" , exit ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "in the function seg",
      "code": "void seg ( )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "print \" SEGMENT \\ n \" , exit ( 0 )",
      "code": "cout << \" SEGMENT\\n \" , exit ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "let a , b , c and d be integers",
      "code": "int a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read a , b , c and d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "vector of integers vec",
      "code": "vector < int > vec ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "push a into vec",
      "code": "vec . push_back ( a ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "push b into vec",
      "code": "vec . push_back ( b ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "push c into vec",
      "code": "vec . push_back ( c ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "push d into vec",
      "code": "vec . push_back ( d ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "sort vec",
      "code": "sort ( vec . begin ( ) , vec . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer i = 1 to 3 exclusive",
      "code": "for ( int i = 1 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if vec [ i ] + vec [ i - 1 ] is greater than vec [ i + 1 ] ) , call method tri",
      "code": "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ( ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 1 to 3 exclusive",
      "code": "for ( int i = 1 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if vec [ i ] + vec [ i - 1 ] is equal to vec [ i + 1 ] ) call method seg",
      "code": "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ( ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" IMPOSSIBLE \\ n \"",
      "code": "cout << \" IMPOSSIBLE\\n \" ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const long long int N = 1e6 + 6 = inf = 1e9 + 7 ;"
      ],
      "err_line": 0,
      "err_msg": "‘inf’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void tri ( ) { }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> d )"
      ],
      "err_line": 11,
      "err_msg": "‘vec’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "vector < int > :: vec ;"
      ],
      "err_line": 10,
      "err_msg": "‘vec’ is not a member of ‘std::vector<int>’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "vec . push ( a ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "vec . push ( b ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "vec . push ( c ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "vec . push ( d ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "sort ( vec . begin ( ) , s . end ( ) ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri = tri ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘void tri()’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 1 ; i < 3 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    },
    {
      "mod_line": [
        2,
        5,
        17
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        5,
        17,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        5,
        17,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        5,
        17,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        5,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        5,
        20,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        5,
        22,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    },
    {
      "mod_line": [
        2,
        5,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        17,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        17,
        20,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        17,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        17,
        22,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        17,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        20,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2,
        22,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        17,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        17,
        20,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        17,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        17,
        22,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        17,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        20,
        22
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5,
        22,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        17,
        20,
        22
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        17,
        22
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        17,
        22,
        20
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] > vec [ i + 1 ] ) tri ++ ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg ++ ;",
        "cout << \" A\\n \" ;"
      ],
      "err_line": 20,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        22,
        20
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "if ( vec [ i ] + vec [ i - 1 ] == vec [ i + 1 ] ) seg = seg ;"
      ],
      "err_line": 20,
      "err_msg": "assignment of function ‘void seg()’"
    }
  ]
}