{
  "meta": {
    "index": 98,
    "hitid": "3NSCTNUR2ZH07PJXGCIHXTV6AAHA5U",
    "workerid": "AIWEXPJAU66D9",
    "probid": "748A",
    "subid": "46056794"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables n , m , k , p , x and y",
      "code": "int n , m , k , p , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , m and k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "p = ( k - 1 ) / 2",
      "code": "p = ( k - 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print p / m + 1 , \" \" , ( p % m ) + 1 and \" \"",
      "code": "cout << p / m + 1 << \" \" << ( p % m ) + 1 << \" \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if k & 1",
      "code": "if ( k & 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" L \"",
      "code": "cout << \" L \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" R \"",
      "code": "cout << \" R \" ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        10,
        5
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "<< \" \\n \" ;",
        "if ( ! k & 1 )"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        10,
        5,
        8
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        10,
        5,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "<< \" \\n \" ;",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        10,
        8,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "<< \" \\n \" ;",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        10,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "<< \" \\n \" ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "if ( ! k & 1 )"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "if ( ! k & 1 )",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "if ( ! k & 1 )",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "if ( ! k & 1 )",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        8,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ! k & 1 )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        5,
        4
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10,
        5,
        4,
        8
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10,
        5,
        4,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        5,
        8
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        5,
        8,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        5,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( ! k & 1 )",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10,
        4,
        8
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10,
        4,
        8,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        4,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        8,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "if ( ! k & 1 )",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        4,
        8
      ],
      "mod_code": [
        "if ( ! k & 1 )",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        4,
        8,
        3
      ],
      "mod_code": [
        "if ( ! k & 1 )",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5,
        4,
        3
      ],
      "mod_code": [
        "if ( ! k & 1 )",
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5,
        8,
        3
      ],
      "mod_code": [
        "if ( ! k & 1 )",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( ! k & 1 )",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "puts ( \" R \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        8,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "cout << p / m + 1 , \" \" << ( p % m ) + 1 << \" \" << endl ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "puts ( \" R \" ) ;",
        "int p = ( k - 1 ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int p’"
    }
  ]
}