{
  "meta": {
    "index": 965,
    "hitid": "3URJ6VVYUPH7DA9YCQ4PTW9XZVRO43",
    "workerid": "AIWEXPJAU66D9",
    "probid": "119A",
    "subid": "48782400"
  },
  "lines": [
    {
      "line": 0,
      "text": "int function sh with integer arguments a , b , n and m",
      "code": "int sh ( int a , int b , int n , int m ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "int function gcd with integer arguments x and y",
      "code": "int gcd ( int x , int y ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integers a , b and n",
      "code": "int a , b , n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while read a , b and n",
      "code": "while ( cin >> a >> b >> n )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign value sh ( a , b , n , 1 ) to integer t",
      "code": "int t = sh ( a , b , n , 1 ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if t = 1 , print \" 1 \"",
      "code": "if ( t == 1 ) cout << \" 1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if t = 0 , print \" 0 \"",
      "code": "if ( t == 0 ) cout << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "int function sh with integer arguments a , b , n and m",
      "code": "int sh ( int a , int b , int n , int m )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "if m = 1",
      "code": "if ( m == 1 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "assign value gcd ( a , n ) to integer t",
      "code": "int t = gcd ( a , n ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if n is less than t return 1",
      "code": "if ( n < t ) return 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if n > = t , call sh ( a , b , n - t , 2 )",
      "code": "if ( n >= t ) sh ( a , b , n - t , 2 ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if m = 2",
      "code": "if ( m == 2 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "assign value gcd ( b , n ) to integer t",
      "code": "int t = gcd ( b , n ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if n is less than t , return 0",
      "code": "if ( n < t ) return 0 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if n > = t , call sh ( a , b , n - t , 1 )",
      "code": "if ( n >= t ) sh ( a , b , n - t , 1 ) ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "int function gcd with integer arguments x and y",
      "code": "int gcd ( int x , int y )",
      "indent": 0
    },
    {
      "line": 23,
      "text": "declare integer s",
      "code": "int s ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if x is greater than y",
      "code": "if ( x > y )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "create integer t = x",
      "code": "int t = x ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "set value of x to y",
      "code": "x = y ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "set y to t",
      "code": "y = t ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if x = 0 , assign value of y to s",
      "code": "if ( x == 0 ) s = y ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if x ! = 0",
      "code": "if ( x != 0 )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for integer i = x to 0",
      "code": "for ( int i = x ; i > 0 ; i -- )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if x % i = 0 and y % i = 0",
      "code": "if ( x % i == 0 && y % i == 0 )",
      "indent": 3
    },
    {
      "line": 33,
      "text": "assign value of i to s",
      "code": "s = i ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "i = 0",
      "code": "i = 0 ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "return s",
      "code": "return s ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int gcd ( int x , int y )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int sh ( int a , int n , int n , int m )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> n )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "t = sh ( a , b , n , 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int sh ( int a , int n , int n , int m )"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( m == 2 ) break ;"
      ],
      "err_line": 16,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 23,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "* x = y ;"
      ],
      "err_line": 26,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "* s = i ;"
      ],
      "err_line": 33,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        17
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        17,
        11
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        17,
        22
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        17,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        11
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        11,
        22
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        11,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "if ( m == 1 ) continue ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        22
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        22,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y )",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( b , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        11
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        11,
        22
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        11,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        22
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( b , n ) ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        22,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( b , n ) ;",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( b , n ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        11,
        22
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        11,
        22,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        11,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "if ( m == 1 ) continue ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        22,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int sh ( int a , int b , int n , int m )",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17,
        11,
        22
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17,
        11,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17,
        22
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17,
        22,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( b , n ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        11,
        22
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        11,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "if ( m == 1 ) continue ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        22,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y )",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        17,
        11,
        22
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        17,
        11,
        22,
        12
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        17,
        11,
        12
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;",
        "if ( m == 1 ) continue ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        17,
        22
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        22,
        12
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "t = gcd ( b , n ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        22
      ],
      "mod_code": [
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        22,
        12
      ],
      "mod_code": [
        "if ( m == 1 ) continue ;",
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "if ( m == 1 ) continue ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 11,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        22,
        12
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "t = gcd ( a , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘t’ was not declared in this scope"
    }
  ]
}