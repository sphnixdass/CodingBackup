{
  "meta": {
    "index": 1730,
    "hitid": "3MJ28H2Y1E2P9TDYQVNZYOFB0EHO5E",
    "workerid": "A1APYLD4DUK33J",
    "probid": "573A",
    "subid": "47842512"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd with long long integers a , b as arguments , returning long long integer",
      "code": "long long int gcd ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if b is 0",
      "code": "if ( b == 0 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return a from function",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return result of run gcd with b , a % b as arguments",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare check with long long integer n as argument , returning long long integer",
      "code": "long long int check ( long long int n )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "while n % 2 is 0 , let n be n / 2",
      "code": "while ( n % 2 == 0 ) { n /= 2 ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while n % 3 is 0 , let n be n / 3",
      "code": "while ( n % 3 == 0 ) { n /= 3 ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return n from function",
      "code": "return n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "declare long long integer array a with size n",
      "code": "long long int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare gcdofarray as long long integer",
      "code": "long long int gcdofarray ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if a [ 0 ] is greater than a [ 1 ]",
      "code": "if ( a [ 0 ] > a [ 1 ] )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "let gcdofarray = result of run gcd with a [ 0 ] , a [ 1 ] as arguments",
      "code": "gcdofarray = gcd ( a [ 0 ] , a [ 1 ] ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "let gcdofarray = result of run gcd with a [ 1 ] , a [ 0 ] as arguments",
      "code": "gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "for i = 2 to n exclusive",
      "code": "for ( int i = 2 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if gcdofarray is greater than a [ i ]",
      "code": "if ( gcdofarray > a [ i ] )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "let gcdofarray = result of run gcd ( gcdofarray , a [ i ] )",
      "code": "gcdofarray = gcd ( gcdofarray , a [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 25,
      "text": "let gcdofarray = result of run gcd ( a [ i ] , gcdofarray )",
      "code": "gcdofarray = gcd ( a [ i ] , gcdofarray ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for i = 0 to n exclusive , let a [ i ] be a [ i ] / gcdofarray",
      "code": "for ( int i = 0 ; i < n ; i ++ ) a [ i ] = a [ i ] / gcdofarray ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "declare integer flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "fori = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "declare long long integer temp = result of run check with a [ i ] as argument",
      "code": "long long int temp = check ( a [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if temp is not 1",
      "code": "if ( temp != 1 )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "let flag be 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "end loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "if flag is 0",
      "code": "if ( flag == 0 )",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print \" Yes \" , newline",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print \" No \" , newline",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with no value, in function returning ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long int check ( long long int n ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "long long int gcdofarray ( long long int n )"
      ],
      "err_line": 17,
      "err_msg": "expected initializer before ‘if’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( gcdofarray [ i ] > a [ i ] )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        20,
        17
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        20,
        17,
        31
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        20,
        17,
        21
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        20,
        17,
        25
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        20,
        31,
        21
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        20,
        21
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        20,
        21,
        25
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        17
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( a [ 0 ] ] > a [ 1 ] )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        17,
        31
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        17,
        31,
        21
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        17,
        31,
        25
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        17,
        21
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        17,
        21,
        25
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        17,
        25
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37,
        31,
        21
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        31,
        21,
        25
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        21
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        21,
        25
      ],
      "mod_code": [
        "cout << \" Yes\\n \" << endl ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        17
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        17,
        31
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        17,
        31,
        21
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        17,
        31,
        25
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        17,
        21
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        17,
        21,
        25
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        17,
        25
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        31,
        21
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        31,
        21,
        25
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        21,
        25
      ],
      "mod_code": [
        "int gcdofarray = gcd ( a [ 1 ] , a [ 0 ] ) ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        31
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        31,
        21
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        31,
        21,
        25
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        31,
        25
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "if ( temp )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        21,
        25
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        25
      ],
      "mod_code": [
        "if ( a [ 0 ] ] > a [ 1 ] )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        31,
        21
      ],
      "mod_code": [
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        31,
        21,
        25
      ],
      "mod_code": [
        "if ( temp )",
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        25
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "gcdofarray = gcd ( a [ i ] , ' gcdofarray ' ) ;"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}