{
  "meta": {
    "index": 1377,
    "hitid": "3M47JKRKCXVI75QWOX88T83BGHS682",
    "workerid": "AIWEXPJAU66D9",
    "probid": "476A",
    "subid": "49048067"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function solve with integer arguments n , m and ans",
      "code": "void solve ( int n , int m , int ans )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer steps1 = n - ( 2 * ans )",
      "code": "int steps1 = n - ( 2 * ans ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integer steps2 = ( 2 * ans )",
      "code": "int steps2 = ( 2 * ans ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ( steps2 + steps1 ) = n and ( ans + steps1 ) % m = 0",
      "code": "if ( ( steps2 + steps1 ) == n && ( ans + steps1 ) % m == 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print ans + steps1",
      "code": "cout << ans + steps1 << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "return",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "call function solve with arguments n , m and ans - 1",
      "code": "solve ( n , m , ans - 1 ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if n is less than m",
      "code": "if ( n < m )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" - 1 \"",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "call function solve with arguments n , m and ( n > > 1 )",
      "code": "solve ( n , m , ( n >> 1 ) ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1,
        13
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1,
        13,
        7
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1,
        13,
        12
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "cin >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1,
        13,
        0
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        1,
        7
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1,
        7,
        12
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1,
        7,
        0
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "solve ( n , m , ans ) - 1 ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        1,
        12
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "cin >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1,
        12,
        0
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        1,
        0
      ],
      "mod_code": [
        "return )",
        "int steps1 = n - ( ans * ans ) ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "return )",
        "if ( n <= m )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13,
        7
      ],
      "mod_code": [
        "return )",
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13,
        7,
        12
      ],
      "mod_code": [
        "return )",
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13,
        7,
        0
      ],
      "mod_code": [
        "return )",
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        12
      ],
      "mod_code": [
        "return )",
        "if ( n <= m )",
        "cin >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13,
        12,
        0
      ],
      "mod_code": [
        "return )",
        "if ( n <= m )",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        0
      ],
      "mod_code": [
        "return )",
        "if ( n <= m )",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "return )",
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "return )",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        0
      ],
      "mod_code": [
        "return )",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        7,
        0
      ],
      "mod_code": [
        "return )",
        "solve ( n , m , ans ) - 1 ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "return )",
        "cin >> m >> m ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12,
        0
      ],
      "mod_code": [
        "return )",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "return )",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        7
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        1,
        13,
        7,
        12
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        1,
        13,
        7,
        0
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        12,
        0
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        13,
        0
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "if ( n <= m )",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        1,
        7,
        12
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        1,
        7,
        12,
        0
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        0
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "solve ( n , m , ans ) - 1 ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        0
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "int steps1 = n - ( ans * ans ) ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        13,
        7,
        12
      ],
      "mod_code": [
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        13,
        7,
        12,
        0
      ],
      "mod_code": [
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        7,
        0
      ],
      "mod_code": [
        "if ( n <= m )",
        "solve ( n , m , ans ) - 1 ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        12,
        0
      ],
      "mod_code": [
        "if ( n <= m )",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "if ( n <= m )",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        7,
        12,
        0
      ],
      "mod_code": [
        "solve ( n , m , ans ) - 1 ;",
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "solve ( n , m , ans ) - 1 ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void solve ( int n , int m , int ans ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}