{
  "meta": {
    "index": 47,
    "hitid": "3FVBZG9CLJ8GM55APCMXXKMJ7KY0HN",
    "workerid": "A1AYVATMT88U1W",
    "probid": "271A",
    "subid": "48971141"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let p be an integer",
      "code": "int p ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let r , x , y , z",
      "code": "int r , x , y , z ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read p",
      "code": "while ( cin >> p )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while",
      "code": "while ( 1 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increase p by 1",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "r equals p / 1000",
      "code": "r = p / 1000 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "x equals ( p / 100 ) % 10",
      "code": "x = ( p / 100 ) % 10 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "y equals ( p / 10 ) % 10",
      "code": "y = ( p / 10 ) % 10 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "z equals p % 10",
      "code": "z = p % 10 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if r is not x , y , z nd x is not y , z and y is not z , stop",
      "code": "if ( r != x && r != y && r != z && x != y && x != z && y != z ) { break ; }",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print p and endline",
      "code": "cout << p << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( sum )"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( sum )"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        4,
        6
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( sum )",
        "r /= 1000 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        4,
        6,
        3
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( sum )",
        "r /= 1000 ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        4,
        6,
        9
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( sum )",
        "r /= 1000 ;",
        "z %= 10 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        4,
        3
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( sum )",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        4,
        3,
        9
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( sum )",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        4,
        9
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( sum )",
        "z %= 10 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6,
        3
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "r /= 1000 ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        6,
        3,
        9
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "r /= 1000 ;",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        9
      ],
      "mod_code": [
        "if ( r != x && y == z && z != z && z != z ) break ;",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "while ( sum )",
        "r /= 1000 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "while ( sum )",
        "r /= 1000 ;",
        "if ( r != x && y != y && z != z && z != z ) break ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        3
      ],
      "mod_code": [
        "while ( sum )",
        "r /= 1000 ;",
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        9
      ],
      "mod_code": [
        "while ( sum )",
        "r /= 1000 ;",
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "z %= 10 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        3
      ],
      "mod_code": [
        "while ( sum )",
        "r /= 1000 ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        3,
        9
      ],
      "mod_code": [
        "while ( sum )",
        "r /= 1000 ;",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        9
      ],
      "mod_code": [
        "while ( sum )",
        "r /= 1000 ;",
        "z %= 10 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( sum )",
        "if ( r != x && y != y && z != z && z != z ) break ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        3
      ],
      "mod_code": [
        "while ( sum )",
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        10,
        3,
        9
      ],
      "mod_code": [
        "while ( sum )",
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        10,
        9
      ],
      "mod_code": [
        "while ( sum )",
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "z %= 10 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "while ( sum )",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        9
      ],
      "mod_code": [
        "while ( sum )",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( sum )",
        "z %= 10 ;"
      ],
      "err_line": 4,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        3
      ],
      "mod_code": [
        "r /= 1000 ;",
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        3,
        9
      ],
      "mod_code": [
        "r /= 1000 ;",
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "r /= 1000 ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        3,
        9
      ],
      "mod_code": [
        "r /= 1000 ;",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "while ( { cin >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        3,
        9
      ],
      "mod_code": [
        "if ( r != x && y != y && z != z && z != z ) break ;",
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( { cin >> p )",
        "z %= 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}