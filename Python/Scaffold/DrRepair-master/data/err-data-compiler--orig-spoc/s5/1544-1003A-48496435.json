{
  "meta": {
    "index": 1544,
    "hitid": "3087LXLJ6MAW89E4UMYXUZA6R5LF04",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "1003A",
    "subid": "48496435"
  },
  "lines": [
    {
      "line": 0,
      "text": "let n , ans = 0 , a [ 111 ] , vis [ 100010 ] be long long",
      "code": "long long n , ans = 0 , a [ 111 ] , vis [ 100010 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in inline long long function read",
      "code": "inline long long read ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "x = long long = 0",
      "code": "long long x = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "bool = 0 = f",
      "code": "bool f = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "ch = char = get char",
      "code": "char ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for , until not ch is digit set ch to get char , f bit exclusive or ( ch = = ' - ' )",
      "code": "for ( ; ! isdigit ( ch ) ; ch = getchar ( ) ) f ^= ( ch == ' - ' ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for , is digit of ch = false , set ch = get char ; set x to ( x < < 3 ) + ( x < < 1 ) + ( ch ^ 48 )",
      "code": "for ( ; isdigit ( ch ) ; ch = getchar ( ) ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "is f not 0 ? then return - x else return x",
      "code": "return f ? - x : x ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "n = read ( )",
      "code": "n = read ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for resgister int i = 1 to n inclusive , set a [ i ] to read , increment vis at a [ i ]",
      "code": "for ( register int i = 1 ; i <= n ; i ++ ) a [ i ] = read ( ) , vis [ a [ i ] ] ++ ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for register int i = 1 to n inclusive",
      "code": "for ( register int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ans < vis at a [ i ]",
      "code": "if ( ans < vis [ a [ i ] ] ) ans = vis [ a [ i ] ] ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "then set ans to vis at a [ i ]",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool 0 = f ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( register i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ does not name a type"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( ans < vis [ a [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "vis = vis [ a [ i ] ] ;"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        11
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        11
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        11,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        11,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        13,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        5,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        11
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        11
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        13,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        6,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "bool 0 = f ;",
        "return x ? - x : x ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "bool 0 = f ;",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "return x ? - x : x ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        11,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "bool 0 = f ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        13,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "bool 0 = f ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        11
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        13
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        13
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        13
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        13
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        13,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        7,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "return x ? - x : x ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        11,
        13
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        11,
        13,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        11,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        13,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "for ( ; ch != ' ch ' ; ch -- ) { ch = getchar ( ) ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        11
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        11,
        13
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        11,
        14
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        13
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        13,
        14
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        14
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "return x ? - x : x ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11,
        13
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11,
        13,
        14
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11,
        14
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "for ( char ch = false ; ch < digit ; ch ++ ) { x = ( x << 3 ) + ( x << 48 ) ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        11,
        13
      ],
      "mod_code": [
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        14
      ],
      "mod_code": [
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        11,
        14
      ],
      "mod_code": [
        "return x ? - x : x ;",
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        13,
        14
      ],
      "mod_code": [
        "return x ? - x : x ;",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "return x ? - x : x ;",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        13,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] ++ , vis [ a [ i ] ; }",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "if ( ans < vis [ a ] )",
        "ans = vis [ a [ i ] ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int [100010][long long int [111]]’ for array subscript"
    }
  ]
}