{
  "meta": {
    "index": 314,
    "hitid": "3QI9WAYOGQ50QP552VEDAZ3CTYTS6T",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "61A",
    "subid": "42336887"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "p1 , p2 = char array of size 105 each",
      "code": "char p1 [ 105 ] , p2 [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "x = int",
      "code": "int x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read p1 then p2",
      "code": "cin >> p1 >> p2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for x = 0 to strlen of p1",
      "code": "for ( x = 0 ; x < strlen ( p1 ) ; x ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if p1 [ x ] is p2 [ x ] and p1 [ x ] is ' 1 '",
      "code": "if ( p1 [ x ] == p2 [ x ] && p1 [ x ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set p1 [ x ] to ' 0 '",
      "code": "p1 [ x ] = ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if p1 [ x ] is not p2 [ x ]",
      "code": "else if ( p1 [ x ] != p2 [ x ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set p1 [ x ] to ' 1 '",
      "code": "p1 [ x ] = ' 1 ' ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print p1",
      "code": "cout << p1 << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "else if ( p1 [ x ] ] != p2 [ x ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7,
        10
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "cout << p1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7,
        10,
        1
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "cout << p1 ;",
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        8,
        7,
        10,
        6
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "cout << p1 ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7,
        1
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        8,
        7,
        1,
        6
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "char p1 , p2 , p2 [ 105 ] ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        8,
        7,
        6
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        10,
        1
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "cout << p1 ;",
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        8,
        10,
        1,
        6
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "cout << p1 ;",
        "char p1 , p2 , p2 [ 105 ] ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        8,
        1,
        6
      ],
      "mod_code": [
        "p1 [ x ++ ] = ' 1 ' ;",
        "char p1 , p2 , p2 [ 105 ] ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "cout << p1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        10,
        1
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "cout << p1 ;",
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        7,
        10,
        1,
        6
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "cout << p1 ;",
        "char p1 , p2 , p2 [ 105 ] ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        7,
        10,
        6
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "cout << p1 ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        7,
        1,
        6
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "char p1 , p2 , p2 [ 105 ] ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "else if ( p1 [ x ] ] != p2 [ x ] )",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "cout << p1 ;",
        "char p1 , p2 , p2 [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        10,
        1,
        6
      ],
      "mod_code": [
        "cout << p1 ;",
        "char p1 , p2 , p2 [ 105 ] ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char p1 , p2 , p2 [ 105 ] ;",
        "p1 [ x ++ ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char p2 [105]’"
    }
  ]
}