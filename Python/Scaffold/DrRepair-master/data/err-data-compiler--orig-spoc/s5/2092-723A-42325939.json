{
  "meta": {
    "index": 2092,
    "hitid": "3MVY4USGB6HGJ9064WN272TH2PTSIS",
    "workerid": "A59A6LMCQRBL3",
    "probid": "723A",
    "subid": "42325939"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n1 , n2 , n3 be integers",
      "code": "int n1 , n2 , n3 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n1 , n2 , n3",
      "code": "cin >> n1 >> n2 >> n3 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let k be an integer that equals the absolute value of ( n1 - n2 )",
      "code": "int k = abs ( n1 - n2 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let j be an integer that equals the absolute value of ( n1 - n3 )",
      "code": "int j = abs ( n1 - n3 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let h be an intger that equals k + j",
      "code": "int h = k + j ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let a be an integer that equals the absolute value of ( n2 - n1 )",
      "code": "int a = abs ( n2 - n1 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let b be an integer that equals the absolute value of ( n2 - n3 )",
      "code": "int b = abs ( n2 - n3 ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "let c be an integer that equals a + b",
      "code": "int c = a + b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let d be an integer that equals the smaller value of h or c",
      "code": "int d = min ( h , c ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "let e be an integer that equals the absolute value of ( n3 - n1 )",
      "code": "int e = abs ( n3 - n1 ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let f be an integer that equals the absolute value of ( n3 - n2 )",
      "code": "int f = abs ( n3 - n2 ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "let g be an integer that equals e + f",
      "code": "int g = e + f ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "let m be an integer that equals the smaller value of g or d",
      "code": "int m = min ( g , d ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print m and new line",
      "code": "cout << m << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n1 , n2 , n3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int n1’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int a that abs ( n2 - n1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int d = * h ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int m = * g ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        9,
        3
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        9,
        3,
        10
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        9,
        3,
        7
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        9,
        3,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        9,
        10
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        9,
        10,
        7
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        11,
        9,
        10,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "e = abs ( n3 - n1 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        9,
        7
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        11,
        9,
        7,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        9,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int d = * h ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int k be abs ( n1 - n2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        3,
        10
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        3,
        10,
        7
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        3,
        10,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        3,
        7
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int k be abs ( n1 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        3,
        7,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int k be abs ( n1 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        3,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int k be abs ( n1 - n2 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        10,
        7
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        11,
        10,
        7,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        10,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        11,
        7,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "int f that abs ( n3 - n2 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        3,
        10
      ],
      "mod_code": [
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        3,
        10,
        7
      ],
      "mod_code": [
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        3,
        10,
        4
      ],
      "mod_code": [
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        3,
        7
      ],
      "mod_code": [
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        3,
        7,
        4
      ],
      "mod_code": [
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        3,
        4
      ],
      "mod_code": [
        "int d = * h ;",
        "int k be abs ( n1 - n2 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "int d = * h ;",
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        10,
        7
      ],
      "mod_code": [
        "int d = * h ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        9,
        10,
        7,
        4
      ],
      "mod_code": [
        "int d = * h ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        10,
        4
      ],
      "mod_code": [
        "int d = * h ;",
        "e = abs ( n3 - n1 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "int d = * h ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        9,
        7,
        4
      ],
      "mod_code": [
        "int d = * h ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "int d = * h ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        3,
        10,
        7
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        3,
        10,
        7,
        4
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        3,
        10,
        4
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;",
        "e = abs ( n3 - n1 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int k be abs ( n1 - n2 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘that’"
    },
    {
      "mod_line": [
        10,
        7,
        4
      ],
      "mod_code": [
        "e = abs ( n3 - n1 ) ;",
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "e = abs ( n3 - n1 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "int b that abs ( n2 - n3 ) ;",
        "int j be abs ( n1 - n3 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘be’"
    }
  ]
}