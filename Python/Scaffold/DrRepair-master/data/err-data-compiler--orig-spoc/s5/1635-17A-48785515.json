{
  "meta": {
    "index": 1635,
    "hitid": "3YLPJ8OXX87U7JNQDHRLC90QBKF4XD",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "48785515"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function check with integer argument a",
      "code": "bool check ( int a )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return false if a is less than 2",
      "code": "if ( a < 2 ) return false ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 2 to squared i < = a",
      "code": "for ( int i = 2 ; i * i <= a ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a % i is equal to 0 return false",
      "code": "if ( a % i == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare boolean arrar good of size 2000",
      "code": "bool good [ 2000 ] ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "integer last = - 1",
      "code": "int last = - 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for integer i = 0 to 1000 inclusive",
      "code": "for ( int i = 0 ; i <= 1000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if check ( i ) is true",
      "code": "if ( check ( i ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if last is not equal to - 1 set good at the index of i + last + 1 to true",
      "code": "if ( last != - 1 ) good [ i + last + 1 ] = true ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set last to i",
      "code": "last = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i = 0 to 1000 inclusive",
      "code": "for ( int i = 0 ; i <= 1000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if check ( i ) is false set good [ i ] to false",
      "code": "if ( ! check ( i ) ) good [ i ] = false ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "n and k = integers",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create integer kol with value 0",
      "code": "int kol = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ( good [ i ] is true ) increment kol",
      "code": "if ( good [ i ] ) kol ++ ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if kol is greater or equal than k",
      "code": "if ( kol >= k )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void check ( int a )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool arrar [ 2000 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘good’ cannot be used as a function"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= a ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘at’ in ‘good’, which is of non-class type ‘bool [2000]’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int * kol = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( int i = 2 ; i <= a ; i ++ )",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "void check ( int a )",
        "bool arrar [ 2000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        11,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        11,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "bool arrar [ 2000 ] ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        11
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        11
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        14
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "bool arrar [ 2000 ] ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘good’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘at’ in ‘good’, which is of non-class type ‘bool [2000]’"
    },
    {
      "mod_line": [
        2,
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘at’ in ‘good’, which is of non-class type ‘bool [2000]’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= a ; i ++ )",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11,
        14
      ],
      "mod_code": [
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11,
        14
      ],
      "mod_code": [
        "bool arrar [ 2000 ] ;",
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "bool arrar [ 2000 ] ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "if ( last != - 1 ) good [ i ] = good ( i + last + 1 ) ;",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘good’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "if ( last != - 1 ) { good . at ( i + last + 1 ) ; }",
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘at’ in ‘good’, which is of non-class type ‘bool [2000]’"
    }
  ]
}