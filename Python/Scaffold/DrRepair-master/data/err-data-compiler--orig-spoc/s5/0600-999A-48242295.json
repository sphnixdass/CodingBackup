{
  "meta": {
    "index": 600,
    "hitid": "3KTCJ4SCVGV2L8R3CS6A3UDPTYV1MS",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "999A",
    "subid": "48242295"
  },
  "lines": [
    {
      "line": 0,
      "text": "create int n and k",
      "code": "int n , k ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set ans to 0",
      "code": "int ans = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create int array A of length 100",
      "code": "int A [ 100 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set l and r to true",
      "code": "bool l = true , r = true ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive , read A [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> A [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if A [ i ] < = k",
      "code": "if ( A [ i ] <= k )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "l = false",
      "code": "l = false ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = n - 1 to i exclusive",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if A [ i ] < = k",
      "code": "if ( A [ i ] <= k )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "add 1 to ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set r = false",
      "code": "r = false ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if l = true or r = true , assign n to ans",
      "code": "if ( ( l == true ) || ( r == true ) ) ans = n ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n create k ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "l = r = true ;"
      ],
      "err_line": 3,
      "err_msg": "‘l’ does not name a type"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = n - 1 ; i < i ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        19
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        19,
        7
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        19,
        2
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "int * A [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        19,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        7
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        7,
        2
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        7,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        2
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        2,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        15,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "ans = 0 ;",
        "bool r = false ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        19,
        7
      ],
      "mod_code": [
        "ans = 0 ;",
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        19,
        7,
        2
      ],
      "mod_code": [
        "ans = 0 ;",
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        19,
        7,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        19,
        2
      ],
      "mod_code": [
        "ans = 0 ;",
        "bool r = false ;",
        "int * A [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        19,
        2,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "bool r = false ;",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        19,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "bool r = false ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        2,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "ans = 0 ;",
        "int * A [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        2,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "ans = 0 ;",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        15,
        19,
        7
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        19,
        7,
        2
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        15,
        19,
        7,
        12
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        19,
        2
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        15,
        19,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        15,
        19,
        12
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "bool r = false ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        7,
        2
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        15,
        7,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        15,
        7,
        12
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        15,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "for ( int i = n - 1 ; i < i ; i ++ )",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        19,
        7
      ],
      "mod_code": [
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        7,
        2
      ],
      "mod_code": [
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        19,
        7,
        2,
        12
      ],
      "mod_code": [
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        19,
        7,
        12
      ],
      "mod_code": [
        "bool r = false ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "bool r = false ;",
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        19,
        2,
        12
      ],
      "mod_code": [
        "bool r = false ;",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "bool r = false ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7,
        2,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "break the ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int * A [ 100 ] ;",
        "break the ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    }
  ]
}