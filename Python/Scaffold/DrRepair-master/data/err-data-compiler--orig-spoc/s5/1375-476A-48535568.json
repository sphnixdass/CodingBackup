{
  "meta": {
    "index": 1375,
    "hitid": "3KI0JD2ZU1CE7RLDESG2F87G5XM67F",
    "workerid": "A1APYLD4DUK33J",
    "probid": "476A",
    "subid": "48535568"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m , r , re , t",
      "code": "int n , m , r , re , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n is less than m",
      "code": "if ( n < m )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if n is m",
      "code": "else if ( n == m )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print n print \" \\ n \"",
      "code": "cout << n << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set r to n / 2",
      "code": "r = n / 2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set t to r",
      "code": "t = r ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if n % 2 is not 0 , increment r by 1",
      "code": "if ( n % 2 != 0 ) r += 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "while t is not 0",
      "code": "while ( t != 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if r % m is not 0",
      "code": "if ( r % m != 0 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment r increment t",
      "code": "r ++ , t -- ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if r % m is 0",
      "code": "if ( r % m == 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print r print \" \\ n \"",
      "code": "cout << r << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        13,
        2
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "t ++ ;",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        13,
        2,
        15
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "t ++ ;",
        "cin >> n read m ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        13,
        2,
        18
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "t ++ ;",
        "cin >> n read m ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        13,
        2,
        3
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "t ++ ;",
        "cin >> n read m ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        13,
        15
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "t ++ ;",
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        13,
        15,
        18
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "t ++ ;",
        "break break ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        13,
        15,
        3
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "t ++ ;",
        "break break ;",
        "if ( n <= m )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        2,
        15
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "cin >> n read m ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        2,
        15,
        18
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "cin >> n read m ;",
        "break break ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        2,
        15,
        3
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "cin >> n read m ;",
        "break break ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        2,
        18
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "cin >> n read m ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        2,
        18,
        3
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "cin >> n read m ;",
        "cout << r << \" \" ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "cin >> n read m ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        15,
        18
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "break break ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        15,
        18,
        3
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "break break ;",
        "cout << r << \" \" ;",
        "if ( n <= m )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        15,
        3
      ],
      "mod_code": [
        "cout << n << \" \" ;",
        "break break ;",
        "if ( n <= m )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "t ++ ;",
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        13,
        2,
        15
      ],
      "mod_code": [
        "t ++ ;",
        "cin >> n read m ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        13,
        2,
        15,
        18
      ],
      "mod_code": [
        "t ++ ;",
        "cin >> n read m ;",
        "break break ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        13,
        2,
        15,
        3
      ],
      "mod_code": [
        "t ++ ;",
        "cin >> n read m ;",
        "break break ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        13,
        2,
        18
      ],
      "mod_code": [
        "t ++ ;",
        "cin >> n read m ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        13,
        2,
        18,
        3
      ],
      "mod_code": [
        "t ++ ;",
        "cin >> n read m ;",
        "cout << r << \" \" ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        13,
        2,
        3
      ],
      "mod_code": [
        "t ++ ;",
        "cin >> n read m ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "t ++ ;",
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        15,
        18
      ],
      "mod_code": [
        "t ++ ;",
        "break break ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        3
      ],
      "mod_code": [
        "t ++ ;",
        "break break ;",
        "cout << r << \" \" ;",
        "if ( n <= m )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        15,
        3
      ],
      "mod_code": [
        "t ++ ;",
        "break break ;",
        "if ( n <= m )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        15,
        18
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        15,
        18,
        3
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "cout << r << \" \" ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        15,
        3
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "cin >> n read m ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        18,
        3
      ],
      "mod_code": [
        "cin >> n read m ;",
        "cout << r << \" \" ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> n read m ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "break break ;",
        "cout << r << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        18,
        3
      ],
      "mod_code": [
        "break break ;",
        "cout << r << \" \" ;",
        "if ( n <= m )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "break break ;",
        "if ( n <= m )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}