{
  "meta": {
    "index": 2122,
    "hitid": "3DFYDSXB2WUSTXCGBJ32Y4Q5010JU8",
    "workerid": "AIWEXPJAU66D9",
    "probid": "698A",
    "subid": "48987413"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new constant integer INF_INT = 2147483647",
      "code": "const int INF_INT = 2147483647 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new constant long long INF_LL = 9223372036854775807LL",
      "code": "const long long INF_LL = 9223372036854775807LL ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare new unsigned long long constant INF_ULL with value 18446744073709551615Ull",
      "code": "const unsigned long long INF_ULL = 18446744073709551615Ull ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "P is a new constant long long = 92540646808111039LL",
      "code": "const long long P = 92540646808111039LL ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare new const long longs maxn = 1e3 + 10 and MOD = 1e9 + 7",
      "code": "const long long maxn = 1e3 + 10 , MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "Move is an 4 by 2 array of integers with elements - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1",
      "code": "const int Move [ 4 ] [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 } ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "Move_ is an 2d array of integers with size 8 by 2 filled with - 1 , - 1 , - 1 , 0 , - 1 , 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , 1 , 0 , 1 , 1",
      "code": "const int Move_ [ 8 ] [ 2 ] = { - 1 , - 1 , - 1 , 0 , - 1 , 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , 1 , 0 , 1 , 1 } ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read is an inlined integer function",
      "code": "inline int read ( )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare new ints x = 0 and f = 1",
      "code": "int x = 0 , f = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create new char variable ch and its value from the input",
      "code": "char ch = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while ch is not a digit character",
      "code": "while ( ch < ' 0 ' || ch > ' 9 ' )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ch = ' - ' , set f to - 1",
      "code": "if ( ch == ' - ' ) f = - 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set ch to char from the input",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "while ch > = ' 0 ' and ch < = ' 9 '",
      "code": "while ( ch >= ' 0 ' && ch <= ' 9 ' )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "change x to x * 10 + ch - ' 0 '",
      "code": "x = x * 10 + ch - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set ch to character from the input",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return x multiplyed by f",
      "code": "return x * f ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "define function init",
      "code": "void init ( ) { }",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "call init ( )",
      "code": "init ( ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "create new integer called n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "read variable n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "now is a new integer variable with value - 1",
      "code": "int now = - 1 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "declare new integer res = 0",
      "code": "int res = 0 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "start for loop from i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "declare new integer variable x",
      "code": "int x ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if x is equal to 0",
      "code": "if ( x == 0 )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "increment res",
      "code": "res ++ ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "assign - 1 to now",
      "code": "now = - 1 ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else if x is equal to 1",
      "code": "else if ( x == 1 )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if now is equal to - 1 or 1",
      "code": "if ( now == - 1 || now == 1 )",
      "indent": 3
    },
    {
      "line": 35,
      "text": "set now to 2",
      "code": "now = 2 ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 37,
      "text": "assign - 1 to now",
      "code": "now = - 1 ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "increment res",
      "code": "res ++ ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 40,
      "text": "else if x is equal to 2",
      "code": "else if ( x == 2 )",
      "indent": 2
    },
    {
      "line": 41,
      "text": "if value of now is - 1 or 2",
      "code": "if ( now == - 1 || now == 2 )",
      "indent": 3
    },
    {
      "line": 42,
      "text": "change now to 1",
      "code": "now = 1 ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 44,
      "text": "assign - 1 to now",
      "code": "now = - 1 ;",
      "indent": 4
    },
    {
      "line": 45,
      "text": "increment res",
      "code": "res ++ ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 47,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 48,
      "text": "if now is equal to - 1",
      "code": "if ( now == - 1 )",
      "indent": 3
    },
    {
      "line": 49,
      "text": "else if now is equal to 1",
      "code": "else if ( now == 1 )",
      "indent": 3
    },
    {
      "line": 50,
      "text": "assign 2 to now",
      "code": "now = 2 ;",
      "indent": 4
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 52,
      "text": "set now to 1",
      "code": "now = 1 ;",
      "indent": 4
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 55,
      "text": "print res to the standard output",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "void init ( )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const long long maxn = 1e3 + 10 and MOD = 1e9 + 7 ;"
      ],
      "err_line": 4,
      "err_msg": "‘MOD’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "ch = input ;"
      ],
      "err_line": 12,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "init ( ) << endl ;"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘void’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 32,
      "err_msg": "‘now’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int now is - 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘is’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "if ( now == - l )"
      ],
      "err_line": 48,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "else if ( now == l )"
      ],
      "err_line": 50,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "void init ( )"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        20,
        33
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "void init ( )",
        "else if ( x == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        20,
        33,
        22
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        20,
        33,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        20,
        22
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "void init ( )",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        20,
        22,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "void init ( )",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        20,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "void init ( )",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        33
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "else if ( x == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        33,
        22
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "else if ( x == ' 1 ' )",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        33,
        22,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "else if ( x == ' 1 ' )",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        33,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "else if ( x == ' 1 ' )",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        22,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , - 1 } ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        33
      ],
      "mod_code": [
        "void init ( )",
        "else if ( x == ' 1 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        33,
        5
      ],
      "mod_code": [
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        33,
        5,
        22
      ],
      "mod_code": [
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        33,
        5,
        50
      ],
      "mod_code": [
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        33,
        22
      ],
      "mod_code": [
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "init ( ) << endl ;"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        33,
        22,
        50
      ],
      "mod_code": [
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        33,
        50
      ],
      "mod_code": [
        "void init ( )",
        "else if ( x == ' 1 ' )",
        "int now = 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "void init ( )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        5,
        22
      ],
      "mod_code": [
        "void init ( )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        5,
        22,
        50
      ],
      "mod_code": [
        "void init ( )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        5,
        50
      ],
      "mod_code": [
        "void init ( )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "void init ( )",
        "init ( ) << endl ;"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        22,
        50
      ],
      "mod_code": [
        "void init ( )",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        20,
        50
      ],
      "mod_code": [
        "void init ( )",
        "int now = 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        33,
        5
      ],
      "mod_code": [
        "else if ( x == ' 1 ' )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        33,
        5,
        22
      ],
      "mod_code": [
        "else if ( x == ' 1 ' )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        33,
        5,
        22,
        50
      ],
      "mod_code": [
        "else if ( x == ' 1 ' )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        33,
        5,
        50
      ],
      "mod_code": [
        "else if ( x == ' 1 ' )",
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        33,
        22
      ],
      "mod_code": [
        "else if ( x == ' 1 ' )",
        "init ( ) << endl ;"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘void’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        33,
        22,
        50
      ],
      "mod_code": [
        "else if ( x == ' 1 ' )",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘void’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "init ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        22,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        5,
        50
      ],
      "mod_code": [
        "int Move [ 2 ] = { - 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 } ;",
        "int now = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "too many initializers for ‘int [2]’"
    },
    {
      "mod_line": [
        22,
        50
      ],
      "mod_code": [
        "init ( ) << endl ;",
        "int now = 2 ;"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘void’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    }
  ]
}