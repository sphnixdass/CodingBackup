{
  "meta": {
    "index": 2577,
    "hitid": "3YOAVL4CA0BJCEN5EZF69UG1JZTZ4F",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "154A",
    "subid": "34070106"
  },
  "lines": [
    {
      "line": 0,
      "text": "set const int M to 100000 + 10",
      "code": "const int M = 100000 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int [ M ]",
      "code": "int a [ M ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create string f of length 30",
      "code": "string f [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "assign s length to slen",
      "code": "int slen = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create int k",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to k exclusive , read f [ i ]",
      "code": "for ( int i = 0 ; i < k ; i ++ ) { cin >> f [ i ] ; }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "num = 0",
      "code": "int num = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to k exclusive",
      "code": "for ( int i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set id = 0",
      "code": "int id = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "while id is less than slen",
      "code": "while ( id < slen )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set num1 to 0",
      "code": "int num1 = 0 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "assign 0 to num2",
      "code": "int num2 = 0 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "while id < slen and s [ id ] is different from f [ i ] [ 0 ] and s [ id ] is different from f [ i ] [ 1 ] , increment id",
      "code": "while ( id < slen && s [ id ] != f [ i ] [ 0 ] && s [ id ] != f [ i ] [ 1 ] ) { id ++ ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "while id < slen and s [ id ] is equal to f [ i ] [ 0 ] or s [ id ] = f [ i ] [ 1 ]",
      "code": "while ( id < slen && ( s [ id ] == f [ i ] [ 0 ] || s [ id ] == f [ i ] [ 1 ] ) )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if s [ id ] is equal to f [ i ] [ 0 ]",
      "code": "if ( s [ id ] == f [ i ] [ 0 ] )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "add 1 to num1",
      "code": "num1 ++ ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 21,
      "text": "increment num2",
      "code": "num2 ++ ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "increment id",
      "code": "id ++ ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "assign num + minimum between num1 and num2 to num",
      "code": "num = num + min ( num1 , num2 ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print num and a newline",
      "code": "cout << num << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int M [ M ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "slen = s ;"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "num1 = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "num2 = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘num2’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int M to 100000 + 10 ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘to’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int M [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string f ( 30 ) ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::basic_string(int)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "slen = s . length ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 8,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "id = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘id’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "while ( id < slen && s [ id ] == f [ i ] [ 0 ] || s [ id ] [ 1 ] == f [ i ] )"
      ],
      "err_line": 17,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        14
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "num1 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        15
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "num1 = 0 ;",
        "num2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        18
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "num1 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "num1 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        15
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "num2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        18
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "num2 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        18
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        18,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "slen = s ;",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num1 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        14,
        15
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num1 = 0 ;",
        "num2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        18
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num1 = 0 ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num1 = 0 ;",
        "num2 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        14,
        18
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num1 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        14,
        18,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num1 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        14,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num1 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num2 = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        15,
        18
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        15,
        18,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        15,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "num2 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int M [ M ] ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        18,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int M [ M ] ;",
        "while ( id <= slen )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int M [100010]’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "slen = s ;",
        "num1 = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        15
      ],
      "mod_code": [
        "slen = s ;",
        "num1 = 0 ;",
        "num2 = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        18
      ],
      "mod_code": [
        "slen = s ;",
        "num1 = 0 ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        13
      ],
      "mod_code": [
        "slen = s ;",
        "num1 = 0 ;",
        "num2 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        18
      ],
      "mod_code": [
        "slen = s ;",
        "num1 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        13
      ],
      "mod_code": [
        "slen = s ;",
        "num1 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        13
      ],
      "mod_code": [
        "slen = s ;",
        "num1 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "slen = s ;",
        "num2 = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        18
      ],
      "mod_code": [
        "slen = s ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        18,
        13
      ],
      "mod_code": [
        "slen = s ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15,
        13
      ],
      "mod_code": [
        "slen = s ;",
        "num2 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "slen = s ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        18,
        13
      ],
      "mod_code": [
        "slen = s ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "slen = s ;",
        "while ( id <= slen )"
      ],
      "err_line": 6,
      "err_msg": "‘slen’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "num1 = 0 ;",
        "num2 = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        18
      ],
      "mod_code": [
        "num1 = 0 ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        18,
        13
      ],
      "mod_code": [
        "num1 = 0 ;",
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        13
      ],
      "mod_code": [
        "num1 = 0 ;",
        "num2 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "num1 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        13
      ],
      "mod_code": [
        "num1 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "num1 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 14,
      "err_msg": "‘num1’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "‘num2’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        13
      ],
      "mod_code": [
        "num2 = 0 ;",
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 15,
      "err_msg": "‘num2’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "num2 = 0 ;",
        "while ( id <= slen )"
      ],
      "err_line": 15,
      "err_msg": "‘num2’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        13
      ],
      "mod_code": [
        "if ( s [ id ] == f [ i ] [ ' 0 ' )",
        "while ( id <= slen )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}