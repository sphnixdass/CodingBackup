{
  "meta": {
    "index": 53,
    "hitid": "3MNJFORX8BYV3G05RS49BU6X8DW5FF",
    "workerid": "A1AYVATMT88U1W",
    "probid": "271A",
    "subid": "48974898"
  },
  "lines": [
    {
      "line": 0,
      "text": "mark = array of integers of length 10",
      "code": "int mark [ 20 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let m ve a void function",
      "code": "void m ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "for i = 0 to exclusive , mark [ i ] is equal to 0",
      "code": "for ( int i = 0 ; i < 10 ; i ++ ) mark [ i ] = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let t be a integer",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "increment t by 1",
      "code": "t ++ ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while the condition is true",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let c , n , d be integers with c = 0 , n = t , d = 0",
      "code": "int c = 0 , n = t , d = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "while n is true",
      "code": "while ( n )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if mark [ n modulo 10 ] equals 0 , increment c by 1 , mark [ n modulo 10 ] is equal to 1",
      "code": "if ( mark [ n % 10 ] == 0 ) c ++ , mark [ n % 10 ] = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "divide n by 10",
      "code": "n /= 10 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment d by 1",
      "code": "d ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if c equals d",
      "code": "if ( c == d )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print t and newline",
      "code": "cout << t << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "call the function m",
      "code": "m ( ) ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "increment t by 1",
      "code": "t ++ ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin . get ( t ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "void m ;"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        11,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        11,
        10,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "void m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        11,
        10,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        10,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "if ( c == ' d ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        11,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        11,
        19,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        19,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        1,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        2,
        10,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "while ( n -- )",
        "void m ;"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        2,
        10,
        19,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "while ( n -- )",
        "void m ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        19,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "while ( n -- )",
        "void m ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        2,
        10,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "while ( n -- )",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        1,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "while ( n -- )",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "void m ;"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        2,
        19,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "void m ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        19,
        1,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "void m ;",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        19,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "void m ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) mark [ i ] = 0 ;",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        10,
        19
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "void m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        10,
        19,
        1
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "void m ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10,
        19,
        15
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "void m ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        10,
        1
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10,
        1,
        15
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10,
        15
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "while ( n -- )",
        "if ( c == ' d ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        19
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        19,
        1
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        19,
        1,
        15
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ;",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        19,
        15
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        1,
        15
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "if ( mark [ n % 10 ] == 0 ) c += n % 10 ] = 1 ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "while ( n -- )",
        "void m ;"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        10,
        19,
        1
      ],
      "mod_code": [
        "while ( n -- )",
        "void m ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        19,
        1,
        15
      ],
      "mod_code": [
        "while ( n -- )",
        "void m ;",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        19,
        15
      ],
      "mod_code": [
        "while ( n -- )",
        "void m ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "while ( n -- )",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        1,
        15
      ],
      "mod_code": [
        "while ( n -- )",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "void m ;",
        "void m ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        1,
        15
      ],
      "mod_code": [
        "void m ;",
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "void m ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 19,
      "err_msg": "variable or field ‘m’ declared void"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "void m ( ) ;",
        "if ( c == ' d ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}