{
  "meta": {
    "index": 1782,
    "hitid": "3CZH926SIC8L1JW9IC1TOKFJWGIE4X",
    "workerid": "AIWEXPJAU66D9",
    "probid": "87A",
    "subid": "14667104"
  },
  "lines": [
    {
      "line": 0,
      "text": "function gcd with long long arguments a and b that returns long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "c is a new long long variable",
      "code": "long long c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while a ! = 0",
      "code": "while ( a != 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "change the value of c to a",
      "code": "c = a ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "change a to b % a",
      "code": "a = b % a ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "assign the new value = c to b",
      "code": "b = c ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return b",
      "code": "return b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare long longs a and b",
      "code": "long long a , b ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read standard input to a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "declare new long long variable lcm = a * b / result of gcd of a and b",
      "code": "long long lcm = a * b / gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "cnt1 is a new long long variable = ( lcm / a ) - 1",
      "code": "long long cnt1 = ( lcm / a ) - 1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create long long cnt2 = ( lcm / b ) - 1",
      "code": "long long cnt2 = ( lcm / b ) - 1 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "increment cnt1 by one",
      "code": "cnt1 ++ ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "increment cnt2",
      "code": "cnt2 ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if cnt1 is greater than cnt2",
      "code": "if ( cnt1 > cnt2 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" Dasha \"",
      "code": "cout << \" Dasha \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else if cnt2 is greater than cnt1",
      "code": "else if ( cnt2 > cnt1 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" Masha \"",
      "code": "cout << \" Masha \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" Equal \"",
      "code": "cout << \" Equal \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cin >> n >> b ;"
      ],
      "err_line": 11,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "long long lcm = a * b / result = gcd ( a , b ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cnt1 += one ;"
      ],
      "err_line": 16,
      "err_msg": "‘one’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        3
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "c = ' a ' ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        3,
        20
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "c = ' a ' ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        3,
        22
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "c = ' a ' ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        3,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "c = ' a ' ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        20
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        20,
        22
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "cout << \" Dasha \" ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        20,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "cout << \" Dasha \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        22
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        22,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "cout << \" Masha \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        24,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Equal \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        3
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "c = ' a ' ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        3,
        20
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "c = ' a ' ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        3,
        20,
        22
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "c = ' a ' ;",
        "cout << \" Dasha \" ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        3,
        20,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "c = ' a ' ;",
        "cout << \" Dasha \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        3,
        22
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "c = ' a ' ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        3,
        22,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "c = ' a ' ;",
        "cout << \" Masha \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        3,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "c = ' a ' ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        20
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        20,
        22
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Dasha \" ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        20,
        22,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Dasha \" ;",
        "cout << \" Masha \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        20,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Dasha \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Masha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        22,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "cout << \" Masha \" ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "if ( cnt1 > cnt2 ) cnt2 ++ ;",
        "else if ( cnt2 >= cnt1 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}