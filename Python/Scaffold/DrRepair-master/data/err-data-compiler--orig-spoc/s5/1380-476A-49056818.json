{
  "meta": {
    "index": 1380,
    "hitid": "3PEG1BH7AEL88I9STDMJUTYUPIXBKB",
    "workerid": "A1APYLD4DUK33J",
    "probid": "476A",
    "subid": "49056818"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m , count , flag with count = 0 , flag = 0",
      "code": "int n , m , count = 0 , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer mn with mn = m",
      "code": "int mn = m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n is less than m",
      "code": "if ( n < m )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print - 1 print newline",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if n is m",
      "code": "else if ( n == m )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print n print newline",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if n % 2 is 0",
      "code": "if ( n % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set mn to n / 2",
      "code": "mn = n / 2 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set mn to ( n + 1 ) / 2",
      "code": "mn = ( n + 1 ) / 2 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "while mn % m is not 0 , increment mn",
      "code": "while ( mn % m != 0 ) mn ++ ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print mn print newline",
      "code": "cout << mn << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = ( n + 1 ) / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        14,
        4
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = ( n + 1 ) / 2 ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        14,
        4,
        1
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = ( n + 1 ) / 2 ;",
        "if ( n <= m )",
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2,
        14,
        4,
        12
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = ( n + 1 ) / 2 ;",
        "if ( n <= m )",
        "int mn = n / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        14,
        1
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = ( n + 1 ) / 2 ;",
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2,
        14,
        1,
        12
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = ( n + 1 ) / 2 ;",
        "int n , m , count = 0 , flag , flag ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2,
        14,
        12
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = ( n + 1 ) / 2 ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "cin >> n read m ;",
        "if ( n <= m )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "cin >> n read m ;",
        "if ( n <= m )",
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2,
        4,
        1,
        12
      ],
      "mod_code": [
        "cin >> n read m ;",
        "if ( n <= m )",
        "int n , m , count = 0 , flag , flag ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2,
        4,
        12
      ],
      "mod_code": [
        "cin >> n read m ;",
        "if ( n <= m )",
        "int mn = n / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2,
        1,
        12
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int n , m , count = 0 , flag , flag ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "cin >> n read m ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        14,
        4,
        1
      ],
      "mod_code": [
        "int mn = ( n + 1 ) / 2 ;",
        "if ( n <= m )",
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        14,
        4,
        1,
        12
      ],
      "mod_code": [
        "int mn = ( n + 1 ) / 2 ;",
        "if ( n <= m )",
        "int n , m , count = 0 , flag , flag ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "int mn = ( n + 1 ) / 2 ;",
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        14,
        1,
        12
      ],
      "mod_code": [
        "int mn = ( n + 1 ) / 2 ;",
        "int n , m , count = 0 , flag , flag ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "if ( n <= m )",
        "int n , m , count = 0 , flag , flag ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        4,
        1,
        12
      ],
      "mod_code": [
        "if ( n <= m )",
        "int n , m , count = 0 , flag , flag ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , m , count = 0 , flag , flag ;",
        "int mn = n / 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int flag’"
    }
  ]
}