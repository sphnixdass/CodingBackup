{
  "meta": {
    "index": 1332,
    "hitid": "38LRF35D5LQH8JAR8YBFIX9G44C3UE",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1100A",
    "subid": "48985922"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant int maxn = 1e2 + 10",
      "code": "const int maxn = 1e2 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , k , numOfInfo , numOfNet and ans with numOfInfo , numOfNet and ans = 0 and int array a with size maxn",
      "code": "int a [ maxn ] , n , k , numOfInfo = 0 , numOfNet = 0 , ans = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop i from 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if a [ i ] is greater than 0",
      "code": "if ( a [ i ] > 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment numOfInfo",
      "code": "numOfInfo ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment numOfNet",
      "code": "numOfNet ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for integer i = 1 to k inclusive",
      "code": "for ( int i = 1 ; i <= k ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "declare int variable p = numOfInfo and q = numOfNet",
      "code": "int p = numOfInfo , q = numOfNet ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "loop j from i to n inclusive adding k to j",
      "code": "for ( int j = i ; j <= n ; j += k )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if a [ j ] is equal to 1",
      "code": "if ( a [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "decrement p",
      "code": "p -- ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 17,
      "text": "decrement q",
      "code": "q -- ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "change ans to max of ans and abs ( p - q )",
      "code": "ans = max ( ans , abs ( p - q ) ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = i ; j <= n ; j += k )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        1
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        1,
        6
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        1,
        5
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        1,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        6
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        6,
        5
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        6,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "if ( a [ i ] ] > 0 )",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        5
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        5,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int p = numOfNet , q = numOfNet ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        5
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        5,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "if ( a [ i ] ] > 0 )",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        5,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int maxn = 1e2 + 10 ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        12,
        1,
        6
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        12,
        1,
        6,
        5
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        12,
        1,
        6,
        18
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        12,
        1,
        5
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        12,
        1,
        5,
        18
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        12,
        1,
        18
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        5
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        5,
        18
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        18
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "if ( a [ i ] ] > 0 )",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        5,
        18
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "int p = numOfNet , q = numOfNet ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        18
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        1,
        6,
        18
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "if ( a [ i ] ] > 0 )",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        1,
        5,
        18
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int n , k , a [ maxn ] , numOfNet = 0 , numOfNet = 0 , ans = 0 ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int numOfNet’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        5,
        18
      ],
      "mod_code": [
        "if ( a [ i ] ] > 0 )",
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "if ( a [ i ] ] > 0 )",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "cout << a [ i ] ;",
        "ans = max ( ans ) , abs ( p - q ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘max(int&)’"
    }
  ]
}