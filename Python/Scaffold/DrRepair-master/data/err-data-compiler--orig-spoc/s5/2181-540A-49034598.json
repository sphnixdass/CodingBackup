{
  "meta": {
    "index": 2181,
    "hitid": "34O39PNDK62UVMMNJXVGV5K8LXQBRE",
    "workerid": "AIWEXPJAU66D9",
    "probid": "540A",
    "subid": "49034598"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer variable with name ans with value 0",
      "code": "int ans = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare new strings i and j",
      "code": "string i , j ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "int function dist with char arguments a and b",
      "code": "int dist ( char a , char b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "new integer x = a - ' 0 '",
      "code": "int x = a - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer y = b - ' 0 '",
      "code": "int y = b - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if x is greater than y , swap x and y",
      "code": "if ( x > y ) swap ( x , y ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return min of y - x and 10 - y + x",
      "code": "return min ( y - x , 10 - y + x ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "read n , i and j from the input",
      "code": "cin >> n >> i >> j ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "add the result of dist ( i [ k ] , j [ k ] ) to ans in a loop , changing k from 0 to n exclusive",
      "code": "for ( int k = 0 ; k < n ; k ++ ) ans += dist ( i [ k ] , j [ k ] ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ans to the standard output",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string i declare j ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int dist ( char a , char b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int * y = b - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "ans += dist ( 0 [ k ] , j [ k ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "string i declare j ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        2,
        4
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "string i declare j ;",
        "int * x = a - ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        2,
        4,
        7
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        2,
        4,
        0
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        2,
        7
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "string i declare j ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        2,
        7,
        0
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "string i declare j ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        2,
        0
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "string i declare j ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "int * x = a - ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        4,
        7
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "int * x = a - ' 0 ' ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        4,
        7,
        0
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "int * x = a - ' 0 ' ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        4,
        0
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "int * x = a - ' 0 ' ;",
        "int * ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        7,
        0
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "ans += dist ( i [ k ] , j [ k ] ) ;",
        "int * ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "string i declare j ;",
        "int * x = a - ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        11
      ],
      "mod_code": [
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        11,
        7
      ],
      "mod_code": [
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        11,
        0
      ],
      "mod_code": [
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        0
      ],
      "mod_code": [
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        4,
        0
      ],
      "mod_code": [
        "string i declare j ;",
        "int * x = a - ' 0 ' ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "string i declare j ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        11,
        7
      ],
      "mod_code": [
        "string i declare j ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        11,
        7,
        0
      ],
      "mod_code": [
        "string i declare j ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        11,
        0
      ],
      "mod_code": [
        "string i declare j ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "string i declare j ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        7,
        0
      ],
      "mod_code": [
        "string i declare j ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "string i declare j ;",
        "int * ans = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        7
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        7,
        0
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        0
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;",
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "int * ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        0
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "int * x = a - ' 0 ' ;",
        "int * ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        7,
        0
      ],
      "mod_code": [
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "return min ( y - x , 10 - y ) + x ;",
        "int * ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "ans += dist ( 0 [ k ] , j [ k ] ) ;",
        "int * ans = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    }
  ]
}