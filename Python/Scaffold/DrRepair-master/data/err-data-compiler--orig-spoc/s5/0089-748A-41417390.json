{
  "meta": {
    "index": 89,
    "hitid": "3H6W48L9F4J17C4J1WNNDOXETTLPW6",
    "workerid": "A1APYLD4DUK33J",
    "probid": "748A",
    "subid": "41417390"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m , k",
      "code": "int n , m , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read n read m read k is true",
      "code": "while ( cin >> n >> m >> k )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integers t1 , t2",
      "code": "int t1 , t2 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "set t1 to k / ( 2 * m )",
      "code": "t1 = k / ( 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set t2 to k / ( 2 * m )",
      "code": "t2 = k % ( 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if t2 is true",
      "code": "if ( t2 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment t1",
      "code": "t1 ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print t1 print \" \" print m print \" \"",
      "code": "cout << t1 << \" \" << m << \" \"",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print \" R \" print newline",
      "code": "<< \" R \" << endl ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "create integers t3 , t4",
      "code": "int t3 , t4 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set t3 to t2 % 2",
      "code": "t3 = t2 % 2 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set t4 to t2 / 2",
      "code": "t4 = t2 / 2 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if t3 is true",
      "code": "if ( t3 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment t4",
      "code": "t4 ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print t1 print \" \" print t4 print \" \"",
      "code": "cout << t1 << \" \" << t4 << \" \"",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print \" L \" print newline",
      "code": "<< \" L \" << endl ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print t1 print \" \" print t4 print \" \"",
      "code": "cout << t1 << \" \" << t4 << \" \"",
      "indent": 3
    },
    {
      "line": 22,
      "text": "print \" R \" print newline",
      "code": "<< \" R \" << endl ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << \" L \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> n >> m >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int t1 = k / ( 2 * m ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int t1’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int t2 = k / ( 2 * m ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int t2’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( t2 ) t2 ++ ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" R \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( t3 ) t3 ++ ;"
      ],
      "err_line": 20,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << \" L \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cout << \" R \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        18
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        19
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        9,
        18
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        18,
        19
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        18,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        18,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        19
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        19,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        19,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        21,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        18
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        18,
        19
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        18,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        18,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        19
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        19,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        19,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        21,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        18,
        19,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        18,
        19,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        18,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        18,
        21,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        18,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        19,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        19,
        21,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        19,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "t2 = k / ( 2 * m ) ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        9,
        10,
        18
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        10,
        18,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        10,
        18,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        10,
        19
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        9,
        10,
        19,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        9,
        10,
        19,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        9,
        10,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        10,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        18,
        19
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        18,
        19,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        18,
        19,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        18,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        18,
        21,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        18,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        19,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        19,
        21,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        19,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        21,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << m << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        18,
        19
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        18,
        19,
        21
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        18,
        19,
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        18,
        21
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        18,
        21,
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        18,
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        19,
        21
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        19,
        21,
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        19,
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        21,
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        22
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        18,
        19,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        19,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        18,
        21
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        21,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        22
      ],
      "mod_code": [
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        19,
        21,
        22
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << t1 << \" \" << t4 << \" \" ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}