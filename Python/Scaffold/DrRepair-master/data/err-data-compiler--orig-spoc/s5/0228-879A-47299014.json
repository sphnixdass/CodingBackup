{
  "meta": {
    "index": 228,
    "hitid": "32ZCLEW0BZEF1S4KUX48OY36RXDJP6",
    "workerid": "AIWEXPJAU66D9",
    "probid": "879A",
    "subid": "47299014"
  },
  "lines": [
    {
      "line": 0,
      "text": "inline void method getInt with int pointer argument p",
      "code": "inline void getInt ( int * p ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long n",
      "code": "long long n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let s be long long array with size 1050",
      "code": "long long s [ 1050 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let d be long long array with size 1050",
      "code": "long long d [ 1050 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create long long ans = 0",
      "code": "long long ans = 0 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare long long now = 0",
      "code": "long long now = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read s [ i ]",
      "code": "cin >> s [ i ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read d [ i ]",
      "code": "cin >> d [ i ] ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "while s [ i ] < = now , add d [ i ] to s [ i ]",
      "code": "while ( s [ i ] <= now ) { s [ i ] += d [ i ] ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "now = s [ i ]",
      "code": "now = s [ i ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print now",
      "code": "cout << now << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "inline void method getInt with int pointer argument p",
      "code": "inline void getInt ( int * p )",
      "indent": 0
    },
    {
      "line": 18,
      "text": "declare character variable ch",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read char into ch while ch = = ' ' | | ch = = ' \\ n '",
      "code": "do { ch = getchar ( ) ; } while ( ch == ' ' || ch == ' \\n ' ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ch = ' - '",
      "code": "if ( ch == ' - ' )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "* p = - ( getchar ( ) - ' 0 ' )",
      "code": "* p = - ( getchar ( ) - ' 0 ' ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "get ch from the input set * p to * p * 10 - ch + ' 0 ' if ch > = ' 0 ' and ch < = ' 9 '",
      "code": "while ( ( ch = getchar ( ) ) >= ' 0 ' && ch <= ' 9 ' ) { * p = * p * 10 - ch + ' 0 ' ; }",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "* p = ch - ' 0 '",
      "code": "* p = ch - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "get ch from the input set * p * 122220 + ch - ' 0 ' if ch > = ' 0 ' and ch < = ' 9 '",
      "code": "while ( ( ch = getchar ( ) ) >= ' 0 ' && ch <= ' 9 ' ) { * p = * p * 122220 + ch - ' 0 ' ; }",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "inline void getInt ( int * p )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }"
      ],
      "err_line": 22,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 25,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "‘now’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "char ch [ 8 ] ;"
      ],
      "err_line": 19,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘char [8]’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( ch == ' - ' ) break ;"
      ],
      "err_line": 20,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 21,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "* p -= p ;"
      ],
      "err_line": 24,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        22
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        22,
        25
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        22,
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        22,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        25
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        25,
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        25,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        17,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        19,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "char ch == ' ' || ch == ' \\n ' ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        22,
        25
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        22,
        25,
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        22,
        25,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        22,
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        22,
        17,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        22,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        25,
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        25,
        17,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        25,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        17,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p )",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘long’"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        19,
        22,
        25
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        19,
        22,
        25,
        17
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        22,
        25,
        21
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        19,
        22,
        17
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        22,
        17,
        21
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        22,
        21
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        19,
        25
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        19,
        25,
        17
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        25,
        17,
        21
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        25,
        21
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        19,
        17
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        17,
        21
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "char ch == ' ' || ch == ' \\n ' ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 19,
      "err_msg": "expected initializer before ‘==’ token"
    },
    {
      "mod_line": [
        22,
        25
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }"
      ],
      "err_line": 22,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        22,
        25,
        17
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        25,
        17,
        21
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        25,
        21
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 21,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        22,
        17
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        17,
        21
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        21
      ],
      "mod_code": [
        "for ( int 10 = ' 0 ' ; ch <= ' 0 ' && ch <= ' 0 ' ; ch ++ ) { * p * 10 - ch + ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 21,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        25,
        17
      ],
      "mod_code": [
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        17,
        21
      ],
      "mod_code": [
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        21
      ],
      "mod_code": [
        "for ( int 122220 = ' 0 ' ; ch <= ' 0 ' ; ch ++ ) { * p * 122220 + ch - ' 0 ' ; }",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 21,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "inline void getInt ( int * p ) ;",
        "* p = - ( getchar ( ) - ' 0 ' ) * p ;"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}