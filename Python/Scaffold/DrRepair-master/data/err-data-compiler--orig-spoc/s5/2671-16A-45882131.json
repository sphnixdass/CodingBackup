{
  "meta": {
    "index": 2671,
    "hitid": "3T2EL38U0ME1WOAOBEYYFC1V7CWQXG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "16A",
    "subid": "45882131"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "v is a vector if strings with size n",
      "code": "vector < string > v ( n ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read v [ i ]",
      "code": "cin >> v [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if i ! = 0",
      "code": "if ( i != 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if v [ i ] [ 0 ] = v [ i - 1 ] [ 0 ]",
      "code": "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ 0 ] )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for j = 0 to the size of v exclusive",
      "code": "for ( int j = 0 ; j < v [ i ] . size ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if v [ i ] [ j ] ! = v [ i ] [ 0 ]",
      "code": "if ( v [ i ] [ j ] != v [ i ] [ 0 ] )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < strings > v ( n ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        2
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        2,
        6
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        2,
        13
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        2,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12,
        6
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( i != 0 ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        6,
        13
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        6,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12,
        13
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        13,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        2,
        6,
        13
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        5,
        2,
        6,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        2,
        13
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "cin >> m >> m ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        5,
        2,
        13,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "cin >> m >> m ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        2,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "cin >> m >> m ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        5,
        13,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "cout << v [ i ] ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        2,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        2,
        6,
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        2,
        6,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        2,
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        2,
        13,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        2,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "cin >> m >> m ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( i != 0 ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        13,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        6,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < v . size ( ) ; j ++ )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        6,
        13
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        2,
        6,
        13,
        7
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        2,
        13,
        7
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        6,
        13,
        7
      ],
      "mod_code": [
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( i != 0 ) continue ;",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "if ( v [ i ] [ j ] != v [ i ] )",
        "if ( v [ i ] [ 0 ] == v [ i - 1 ] [ ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}