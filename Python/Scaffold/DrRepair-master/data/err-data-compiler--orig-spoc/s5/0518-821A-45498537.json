{
  "meta": {
    "index": 518,
    "hitid": "34YWR3PJ284D8V5PUG4J06ADVAG0XF",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "821A",
    "subid": "45498537"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make integer arrays a of size 55 with array of size 55 , x of size 55 with array of size 55 , and y of size 55 with array of size 55 and integer n",
      "code": "int a [ 55 ] [ 55 ] , n , x [ 55 ] [ 55 ] , y [ 55 ] [ 55 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to n exclusive , read a [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to n exclusive , set x [ i ] [ j ] to a [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { x [ i ] [ j ] = a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "sort x [ i ] using x [ i ] + n",
      "code": "sort ( x [ i ] , x [ i ] + n ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j = 0 to n exclusive , set y [ i ] [ j ] to a [ j ] [ i ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { y [ i ] [ j ] = a [ j ] [ i ] ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "sort y [ i ] using y [ i ] + n",
      "code": "sort ( y [ i ] , y [ i ] + n ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create integer flag = 1",
      "code": "int flag = 1 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 while i is less than n and flag is truthy",
      "code": "for ( int i = 0 ; i < n && flag ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for j = 0 while j is less than n and flag is truthy",
      "code": "for ( int j = 0 ; j < n && flag ; j ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if a [ i ] [ j ] is equal to 1 , continue loop",
      "code": "if ( a [ i ] [ j ] == 1 ) continue ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "create ints u = 0 and v = n - 1",
      "code": "int u = 0 , v = n - 1 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "while u is less than n and v is greater than or equal to 0",
      "code": "while ( u < n && v >= 0 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if x [ i ] [ u ] + y [ j ] [ v ] is greater than a [ i ] [ j ]",
      "code": "if ( x [ i ] [ u ] + y [ j ] [ v ] > a [ i ] [ j ] )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "subtract 1 from v",
      "code": "v -- ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "else if x [ i ] [ u ] + y [ j ] [ v ] is less than a [ i ] [ j ]",
      "code": "else if ( x [ i ] [ u ] + y [ j ] [ v ] < a [ i ] [ j ] )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "add 1 to u",
      "code": "u ++ ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "else do",
      "code": "else",
      "indent": 4
    },
    {
      "line": 25,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if v is equal to - 1 , u is equal to n , or x [ i ] [ u ] + y [ j ] [ v ] is not equal to a [ i ] [ j ] , set flag to 0",
      "code": "if ( v == - 1 || u == n || x [ i ] [ u ] + y [ j ] [ v ] != a [ i ] [ j ] ) flag = 0 ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if flag is truthy",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 33,
      "text": "display \" No \"",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( j = 0 ; j < n && flag ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , y [ 55 ] , y [ 55 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int y [55]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int v = 0 , v = n - 1 ;"
      ],
      "err_line": 18,
      "err_msg": "redeclaration of ‘int v’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( x [ i ] [ u ] + y [ j ] > a [ i ] [ j ] )"
      ],
      "err_line": 20,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 27,
      "err_msg": "invalid conversion from ‘int (*)[55]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( flag ) flag ;"
      ],
      "err_line": 32,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 34,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        16
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        16,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        16,
        8
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        16,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        27,
        8
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        8
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        8,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "sort ( x [ i ] , x [ i ] ) ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        15,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( j = 0 ; j < n && flag ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        16,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        16,
        27,
        8
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        16,
        8
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        16,
        8,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "sort ( x [ i ] , x [ i ] ) ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        16,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        27,
        8
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        8,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "sort ( x [ i ] , x [ i ] ) ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "int a [ 55 ] , x [ 55 ] , x [ 55 ] , y [ 55 ] ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x [55]’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        27,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        8,
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "sort ( x [ i ] , x [ i ] ) ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        27,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        8,
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "sort ( x [ i ] , x [ i ] ) ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n && flag ; i ++ )",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        27
      ],
      "mod_code": [
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        27,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        8,
        27
      ],
      "mod_code": [
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "sort ( x [ i ] , x [ i ] ) ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        27
      ],
      "mod_code": [
        "for ( j = 0 ; j < n && flag ; j ++ )",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        8
      ],
      "mod_code": [
        "if ( v == - 1 || u == - 1 || x [ i ] [ u ] + y [ j ] != a [ i ] [ j ] ) flag = 0 ;",
        "sort ( x [ i ] , x [ i ] ) ;"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        27
      ],
      "mod_code": [
        "sort ( x [ i ] , x [ i ] ) ;",
        "if ( v == - 1 ) u = x ;"
      ],
      "err_line": 27,
      "err_msg": "invalid conversion from ‘int (*)[55]’ to ‘int’ [-fpermissive]"
    }
  ]
}