{
  "meta": {
    "index": 1430,
    "hitid": "3UEBBGULPFICOVQKSTCHJ6YD7UMFU4",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "259A",
    "subid": "46937982"
  },
  "lines": [
    {
      "line": 0,
      "text": "N = 1e5 + 100",
      "code": "const int N = 1e5 + 100 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( int i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if s different from BWBWBWBW and s different from WBWBWBWB",
      "code": "if ( s != \" BWBWBWBW \" && s != \" WBWBWBWB \" )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print No",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "cout << \" No \" << endl ;",
        "string n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        1,
        4
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "cout << \" No \" << endl ;",
        "string n ;",
        "cout << s << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "cout << \" No \" << endl ;",
        "cout << s << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "string n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "string n ;",
        "cout << \" No\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        6,
        4
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "string n ;",
        "cout << \" No\\n \" ;",
        "cout << s << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        4
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "string n ;",
        "cout << s << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "cout << \" No\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "cout << \" No\\n \" ;",
        "cout << s << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "if ( s != BWBWBWBW && s != WBWBWBWB )",
        "cout << s << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "cout << \" No \" << endl ;",
        "string n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        4
      ],
      "mod_code": [
        "cout << \" No \" << endl ;",
        "string n ;",
        "cout << s << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        4,
        5
      ],
      "mod_code": [
        "cout << \" No \" << endl ;",
        "string n ;",
        "cout << s << endl ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        5
      ],
      "mod_code": [
        "cout << \" No \" << endl ;",
        "string n ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "cout << \" No \" << endl ;",
        "cout << s << endl ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "cout << \" No \" << endl ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string n ;",
        "cout << \" No\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "string n ;",
        "cout << \" No\\n \" ;",
        "cout << s << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        4,
        5
      ],
      "mod_code": [
        "string n ;",
        "cout << \" No\\n \" ;",
        "cout << s << endl ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "string n ;",
        "cout << \" No\\n \" ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string n ;",
        "cout << s << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "string n ;",
        "cout << s << endl ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string n ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        5
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cout << s << endl ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "cout << s << endl ;",
        "if ( s != ' BWBWBWBW ' && s != WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    }
  ]
}