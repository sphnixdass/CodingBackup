{
  "meta": {
    "index": 638,
    "hitid": "3421H3BM9ABU95ODD88B283RMEE9JQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "25A",
    "subid": "49071617"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer array dx with dx = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 }",
      "code": "int dx [ ] = { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array dy with dy = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 }",
      "code": "int dy [ ] = { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare fast with no arguments , returning void",
      "code": "void fast ( ) { }",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create constant long long md with md = 1e9 + 7",
      "code": "const long long md = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "run fast",
      "code": "fast ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create long long n , create long long array arr with size 100000",
      "code": "long long n , arr [ 100000 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive , read arr [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create integers sumeven , sumodd , with sumeven = 0 , sumodd = 0",
      "code": "int sumeven = 0 , sumodd = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if arr [ i ] % 2 is 0",
      "code": "if ( arr [ i ] % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment sumeven",
      "code": "sumeven ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment sumodd",
      "code": "sumodd ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if sumeven is greater than or equal to sumodd",
      "code": "if ( sumeven >= sumodd )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if arr [ i ] % 2 is not 0",
      "code": "if ( arr [ i ] % 2 != 0 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print i + 1 print \" \\ n \"",
      "code": "cout << i + 1 << \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if arr [ i ] % 2 is 0",
      "code": "if ( arr [ i ] % 2 == 0 )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "print i + 1 print \" \\ n \"",
      "code": "cout << i + 1 << \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "void fast ( ) { } { }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "void fast ( ) { }"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long arr , arr [ 100000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘long long int arr [100000]’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        10
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        10,
        0
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        10,
        5
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "void fast ( ) { }"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        10,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        0
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        0,
        5
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        0,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        5
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "void fast ( ) { }"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        5,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        27,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        0
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        0,
        5
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        0,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "void fast ( ) { }"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        5
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        5,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        5,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "int dy [ { 0 , 1 , 0 , - 1 , 1 , - 1 , 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        10
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        10,
        0
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        10,
        0,
        5
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        10,
        0,
        24
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        10,
        5
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "void fast ( ) { }"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        10,
        5,
        24
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        10,
        24
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        0
      ],
      "mod_code": [
        "break break ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        0,
        5
      ],
      "mod_code": [
        "break break ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        0,
        5,
        24
      ],
      "mod_code": [
        "break break ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        0,
        24
      ],
      "mod_code": [
        "break break ;",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        5
      ],
      "mod_code": [
        "break break ;",
        "void fast ( ) { }"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        5,
        24
      ],
      "mod_code": [
        "break break ;",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        27,
        24
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        5,
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "void fast ( ) { }"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        5,
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        24
      ],
      "mod_code": [
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "int dx [ { 1 , 0 , - 1 , 0 , 1 , 1 , - 1 , - 1 } ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "void fast ( ) { }",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    }
  ]
}