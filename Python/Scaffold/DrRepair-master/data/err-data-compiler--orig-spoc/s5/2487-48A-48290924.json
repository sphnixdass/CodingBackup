{
  "meta": {
    "index": 2487,
    "hitid": "3J5XXLQDHM5HLYZRDOLKEJBZH9B3VO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "48290924"
  },
  "lines": [
    {
      "line": 0,
      "text": "create char array person with elements ' F ' , ' M ' , ' S ' and ' ? '",
      "code": "char person [ 4 ] { ' F ' , ' M ' , ' S ' , ' ? ' } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integer function battle with string arguments a and b",
      "code": "int battle ( const string a , const string b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a = \" scissors \" and b = \" paper \" return 1",
      "code": "if ( a == \" scissors \" && b == \" paper \" ) { return 1 ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a = \" rock \" and b = \" scissors \" return 1",
      "code": "if ( a == \" rock \" && b == \" scissors \" ) { return 1 ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if a = \" paper \" and b = \" rock \" return 1",
      "code": "if ( a == \" paper \" && b == \" rock \" ) { return 1 ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "in the integer function wins with string arguments a , b and c",
      "code": "int wins ( const string a , const string b , const string c )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create integer ret with value 0",
      "code": "int ret = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "increase ret by battle ( a , b )",
      "code": "ret += battle ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "increase ret by battle ( a , c )",
      "code": "ret += battle ( a , c ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "declare strings called a , b and c",
      "code": "string a , b , c ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "let winA , winB , winC , winner , maxWin and winCounter be integers with winner , maxWin and winCounter = 0",
      "code": "int winA , winB , winC , winner = 0 , maxWin = 0 , winCounter = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set value of winA to wins ( a , b , c )",
      "code": "winA = wins ( a , b , c ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set value of winB to wins ( b , a , c )",
      "code": "winB = wins ( b , a , c ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set value of winC to wins ( c , a , b )",
      "code": "winC = wins ( c , a , b ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "maxWin = winA",
      "code": "maxWin = winA ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if winB is greater than winA",
      "code": "if ( winB > winA )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "assign 1 to the winner",
      "code": "winner = 1 ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set value of maxWin to winB",
      "code": "maxWin = winB ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if winC is greater than winB",
      "code": "if ( winC > winB )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "assign 2 to the winner",
      "code": "winner = 2 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "maxWin = winC",
      "code": "maxWin = winC ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if winC is greater than winA",
      "code": "if ( winC > winA )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "assign 2 to the winner",
      "code": "winner = 2 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "assign value of winC to the maxWin",
      "code": "maxWin = winC ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "winCounter = ( maxWin = = winA ) + ( maxWin = = winB ) + ( maxWin = = winC )",
      "code": "winCounter = ( maxWin == winA ) + ( maxWin == winB ) + ( maxWin == winC ) ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "if winCounter is greater than 1 , set winner to 3",
      "code": "if ( winCounter > 1 ) winner = 3 ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print person [ winner ] and \" \\ n \"",
      "code": "cout << person [ winner ] << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string battle ( string a , string b )"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;"
      ],
      "err_line": 33,
      "err_msg": "‘winCounter’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void wins ( string a , string b , string c )"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( ret )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "string a , b , n ;"
      ],
      "err_line": 15,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cin >> a >> b >> n ;"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "* winA = wins ( a , b , c ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "* winB = wins ( b , a , c ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "* winC = wins ( c , a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "* maxWin = winB ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        33
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        33,
        23
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        33,
        35
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        33,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        23
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "* maxWin = winB ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        23,
        35
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        23,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "* maxWin = winB ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        35
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        35,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        33
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        33,
        23
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        33,
        23,
        35
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        33,
        23,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        33,
        35
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        33,
        35,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        33,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "* maxWin = winB ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        23,
        35
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        23,
        35,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        23,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "* maxWin = winB ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        35
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        35,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "string battle ( string a , string b )",
        "int maxWin = winA ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        33
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;"
      ],
      "err_line": 33,
      "err_msg": "‘winCounter’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        33,
        23
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        33,
        23,
        35
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        33,
        23,
        20
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        16,
        33,
        35
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 33,
      "err_msg": "‘winCounter’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        33,
        35,
        20
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        16,
        33,
        20
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        16,
        23
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "* maxWin = winB ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        23,
        35
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        23,
        35,
        20
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        16,
        23,
        20
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "* maxWin = winB ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        16,
        35
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 33,
      "err_msg": "‘winCounter’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        35,
        20
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        16,
        20
      ],
      "mod_code": [
        "int winA , winB , winC = 0 , winner = 0 , maxWin = 0 ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        33,
        23
      ],
      "mod_code": [
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        33,
        23,
        35
      ],
      "mod_code": [
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        33,
        23,
        35,
        20
      ],
      "mod_code": [
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        33,
        23,
        20
      ],
      "mod_code": [
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "* maxWin = winB ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        33,
        35,
        20
      ],
      "mod_code": [
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        33,
        20
      ],
      "mod_code": [
        "winCounter = ( maxWin = winA ) + ( maxWin == winB ) + ( maxWin ) ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        23,
        35
      ],
      "mod_code": [
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        35,
        20
      ],
      "mod_code": [
        "* maxWin = winB ;",
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        23,
        20
      ],
      "mod_code": [
        "* maxWin = winB ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    },
    {
      "mod_line": [
        35,
        20
      ],
      "mod_code": [
        "cout << person [ winner ] << \" \\0 \" ;",
        "int maxWin = winA ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int maxWin’"
    }
  ]
}