{
  "meta": {
    "index": 2399,
    "hitid": "3UOMW19E6D0O04GV0QE83OLUAYMC5O",
    "workerid": "AIWEXPJAU66D9",
    "probid": "13A",
    "subid": "48371942"
  },
  "lines": [
    {
      "line": 0,
      "text": "integer function sumaEnOtraBase with integer arguments a and b",
      "code": "int sumaEnOtraBase ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer suma with value 0",
      "code": "int suma = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while a is greater than 0",
      "code": "while ( a > 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "increase suma by a % b",
      "code": "suma += a % b ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "a = a / b",
      "code": "a = a / b ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return suma",
      "code": "return suma ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": ";",
      "code": ";",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "integers n and numerador = 0",
      "code": "int n , numerador = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 2 to n exclusive , increase numerador by sumaEnOtraBase ( n , i )",
      "code": "for ( int i = 2 ; i < n ; ++ i ) { numerador += sumaEnOtraBase ( n , i ) ; }",
      "indent": 1
    },
    {
      "line": 12,
      "text": "assign value n - 2 to the integer denominador",
      "code": "int denominador = n - 2 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for integer i = 2 to denominador / 2 exclusive",
      "code": "for ( int i = 2 ; i < denominador / 2 ; ++ i )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if numerador % i = 0 and denominador % i is equal to 0",
      "code": "if ( numerador % i == 0 && denominador % i == 0 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "numerador = numerador / i",
      "code": "numerador = numerador / i ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "denominador = denominador / i",
      "code": "denominador = denominador / i ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "i = i - 1",
      "code": "i = i - 1 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print numerador , \" / \" , denominador and a new line",
      "code": "cout << numerador << \" / \" << denominador << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        ";"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "; ;"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        ";",
        "int numerador = numerador / i ;"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15,
        0
      ],
      "mod_code": [
        ";",
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15,
        0,
        16
      ],
      "mod_code": [
        ";",
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15,
        0,
        1
      ],
      "mod_code": [
        ";",
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15,
        16
      ],
      "mod_code": [
        ";",
        "int numerador = numerador / i ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        1
      ],
      "mod_code": [
        ";",
        "int numerador = numerador / i ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        15,
        1
      ],
      "mod_code": [
        ";",
        "int numerador = numerador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        ";",
        "int sumaEnOtraBase ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0,
        16
      ],
      "mod_code": [
        ";",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0,
        16,
        1
      ],
      "mod_code": [
        ";",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0,
        1
      ],
      "mod_code": [
        ";",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        ";",
        "int denominador = denominador / i ;"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        1
      ],
      "mod_code": [
        ";",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        ";",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        7
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "; ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        7,
        16
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "; ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        7,
        1
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "; ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        16
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        16,
        1
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        1
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "; ;"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        7,
        16
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "; ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        7,
        16,
        1
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "; ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        7,
        1
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "; ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        16,
        1
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "int numerador = numerador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;",
        "; ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        16
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;",
        "; ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        16,
        1
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;",
        "; ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        1
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;",
        "; ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16,
        1
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int sumaEnOtraBase ( int a , int b ) ;",
        "int * suma = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "; ;",
        "int denominador = denominador / i ;"
      ],
      "err_line": 9,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        16,
        1
      ],
      "mod_code": [
        "; ;",
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "; ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "int denominador = denominador / i ;",
        "int * suma = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    }
  ]
}