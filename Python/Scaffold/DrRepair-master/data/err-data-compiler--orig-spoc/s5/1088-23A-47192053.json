{
  "meta": {
    "index": 1088,
    "hitid": "36GJS3V78VK9OFBLREELUPPEQR9JGR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "23A",
    "subid": "47192053"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = array of characters of length 101",
      "code": "char a [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "assign length of a to the integer len",
      "code": "int len = strlen ( a ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let l be integer = len",
      "code": "int l = len ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while l - -",
      "code": "while ( l -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to len - l inclusive",
      "code": "for ( int i = 0 ; i <= len - l ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for integer j = i + 1 to len - l inclusive",
      "code": "for ( int j = i + 1 ; j <= len - l ; j ++ )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "create integers k = i and m = j",
      "code": "int k = i , m = j ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "increment k and m in a loop while k < = i + l and m < = j + l",
      "code": "for ( ; k <= i + l && m <= j + l ; k ++ , m ++ )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "if a [ k ] ! = a [ m ] , stop the loop",
      "code": "if ( a [ k ] != a [ m ] ) break ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if k = i + l + 1",
      "code": "if ( k == i + l + 1 )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "print l + 1 and a new line",
      "code": "cout << l + 1 << endl ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print l + 1 and a new line",
      "code": "cout << l + 1 << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int len = a . size ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int l [ len ] ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        9,
        4
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "int l [ len ] ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        5
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "int l [ len ] ;",
        "while ( l -= ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "int l [ len ] ;",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        9,
        5
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "while ( l -= ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        9,
        5,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        9,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "int l [ len ] ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "int l [ len ] ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        5
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "int l [ len ] ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "while ( l -= ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "int l [ len ] ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "int l [ len ] ;",
        "while ( l -= ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "int l [ len ] ;",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "int l [ len ] ;",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        9,
        5
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "while ( l -= ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        9,
        5,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        9,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "while ( l -= ' - ' )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [101]’"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int len = a . size ( ) ;",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "int l [ len ] ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        9,
        4,
        5
      ],
      "mod_code": [
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "int l [ len ] ;",
        "while ( l -= ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘char’ to ‘int [len]’"
    },
    {
      "mod_line": [
        9,
        4,
        5,
        1
      ],
      "mod_code": [
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "int l [ len ] ;",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        9,
        4,
        1
      ],
      "mod_code": [
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "int l [ len ] ;",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "for ( k = i + l && k <= j + l ; k <= j + l ; ++ k )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int l [ len ] ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        4,
        9,
        5
      ],
      "mod_code": [
        "int l [ len ] ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "while ( l -= ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘char’ to ‘int [len]’"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        1
      ],
      "mod_code": [
        "int l [ len ] ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        4,
        9,
        1
      ],
      "mod_code": [
        "int l [ len ] ;",
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int l [ len ] ;",
        "while ( l -= ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘char’ to ‘int [len]’"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "int l [ len ] ;",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "int l [ len ] ;",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "for ( long long k = i + l ; k <= i + l ; k ++ )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "while ( l -= ' - ' )",
        "char * a [ 101 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char* [101]’)"
    }
  ]
}