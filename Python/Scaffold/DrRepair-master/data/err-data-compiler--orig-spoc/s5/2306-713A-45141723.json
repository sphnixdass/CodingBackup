{
  "meta": {
    "index": 2306,
    "hitid": "3GITHABACYFFSBUZ7XLOLSCUQUN2NE",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "713A",
    "subid": "45141723"
  },
  "lines": [
    {
      "line": 0,
      "text": "create int t",
      "code": "int t ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create map m from string to int",
      "code": "map < string , int > m ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while decrement t",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create char x",
      "code": "char x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if x = +",
      "code": "if ( x == ' + ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "create string s , s2 and s1",
      "code": "string s , s2 , s1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "for siz = size of s",
      "code": "int siz = s . size ( ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "for i = 0 to siz exclusive",
      "code": "for ( int i = 0 ; i < siz ; i ++ )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if ( int ( s [ i ] ) - ' 0 ' ) % 2 ) = 1",
      "code": "if ( ( ( int ( s [ i ] ) - ' 0 ' ) % 2 ) == 1 )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "set s1 to s1 + 1",
      "code": "s1 = s1 + \" 1 \" ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 15,
      "text": "assign s1 + 0 to s1",
      "code": "s1 = s1 + \" 0 \" ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "for i = 0 to 19 - siz exclusive , set s2 to s2 + 0",
      "code": "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 = s2 + \" 0 \" ; }",
      "indent": 3
    },
    {
      "line": 19,
      "text": "assign s2 + s1 to s2",
      "code": "s2 = s2 + s1 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increment m [ s2 ]",
      "code": "m [ s2 ] ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if x = -",
      "code": "if ( x == ' - ' )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "create string s , s2 and s1",
      "code": "string s , s2 , s1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "set siz fo size of s",
      "code": "int siz = s . size ( ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "for i = 0 to siz exclusive",
      "code": "for ( int i = 0 ; i < siz ; i ++ )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if ( s [ i ] ) - 0 ) % 2 = 0",
      "code": "if ( ( int ( s [ i ] ) - ' 0 ' ) % 2 == 0 )",
      "indent": 4
    },
    {
      "line": 28,
      "text": "set s1 to s1 + 0",
      "code": "s1 = s1 + \" 0 \" ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 30,
      "text": "set s1 to s1 + 1",
      "code": "s1 = s1 + \" 1 \" ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "for i = 0 to 19 - siz exclusive , set s2 to s2 + 0",
      "code": "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 = s2 + \" 0 \" ; }",
      "indent": 3
    },
    {
      "line": 34,
      "text": "assign s2 + s1 to s2",
      "code": "s2 = s2 + s1 ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "decrement m [ s2 ]",
      "code": "m [ s2 ] -- ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if x = ?",
      "code": "if ( x == ' ? ' )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "create string s , s2 and s1",
      "code": "string s , s2 , s1 ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "set siz to size of s",
      "code": "int siz = s . size ( ) ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "for i = 0 to 19 - siz exclusive , set s2 to s2 + 0",
      "code": "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 = s2 + \" 0 \" ; }",
      "indent": 3
    },
    {
      "line": 42,
      "text": "set s2 to s2 + s",
      "code": "s2 = s2 + s ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "print m [ s2 ]",
      "code": "cout << m [ s2 ] << endl ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int siz . size ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 33,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 41,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "map < int , int > m ;"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<int, int>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin . get ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "string s , s2 , n ;"
      ],
      "err_line": 13,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < siz ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "s1 += 0 ;"
      ],
      "err_line": 15,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) s2 += 0 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "string s , s2 , n ;"
      ],
      "err_line": 28,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "char siz . size ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( i = 0 ; i < siz ; i ++ )"
      ],
      "err_line": 26,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - ' 0 ' ) % 2 ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "s1 += 0 ;"
      ],
      "err_line": 28,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) s2 += 0 ;"
      ],
      "err_line": 33,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "m [ ' s2 ' ] -- ;"
      ],
      "err_line": 35,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘int’)"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( x == \" ? \" )"
      ],
      "err_line": 37,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "siz = s . size ( ) ;"
      ],
      "err_line": 40,
      "err_msg": "‘siz’ was not declared in this scope"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) s2 += 0 ;"
      ],
      "err_line": 41,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15,
        18
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15,
        25
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        15,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        18
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        25
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        25
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        25,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        25,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        25,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        25,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        25,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        27,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        27,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        27,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        27,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        28,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        28,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        28,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        30,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        30,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        13,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        18
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        18,
        25
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        18,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        18,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        18,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        18,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        18,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        25
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        25,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        25,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        25,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        25,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        25,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        27,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        27,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        27,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        27,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        28,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        28,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        28,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        30,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        30,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        15,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        25
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        25,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        25,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        25,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        25,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        25,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        27,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        27,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        27,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        27,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        28,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        28,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        28,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        30,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        30,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        27,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        27,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        27,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        27,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        28,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        28,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        28,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        30,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        30,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        25,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        28,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        28,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        28,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        30,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        30,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        28
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        28,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        28,
        30,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        28,
        30,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        28,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        28,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        28,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        30
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        30,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        30,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        30,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        33
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        33,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        41
      ],
      "mod_code": [
        "for ( int siz = s . size ( ) ; siz != s . size ( ) ; siz ++ )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘siz’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        18
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        25
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        27
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        18,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        25
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        25,
        27
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        25,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        25,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        25,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        25,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        27
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        27,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        27,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        27,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        27,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        15,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        25
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        25,
        27
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        25,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        25,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        25,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        25,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        27
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        27,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        27,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        27,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        27,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        18,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        27
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        27,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        27,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        27,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        27,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        25,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        27,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        28
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        28,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        28,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        28,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        30
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        30,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        25
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        25,
        27
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        25,
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        25,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        25,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        25,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        27
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        27,
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        27,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        27,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        27,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        18,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        27
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        27,
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        27,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        27,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        27,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        25,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        27,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        28
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        28,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        28,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        28,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        30,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        27,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        27,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        27,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        27,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        28,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        28,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        28,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        30,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        30,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        33,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        25,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        28,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        28,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        28,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        30,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        30,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        33,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        27,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        28,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        28,
        30,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        28,
        30,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        28,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        28,
        33,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        28,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        30
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        30,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        30,
        33,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        30,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        33
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        33,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 18,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        25,
        27
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        28
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        28,
        30
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        28,
        33
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        28,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        30
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        30,
        33
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        30,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        33
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        33,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        27,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        28
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        28,
        30
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        28,
        30,
        33
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        28,
        30,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        28,
        33
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        28,
        33,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        28,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        30
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        30,
        33
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        30,
        33,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        30,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        33
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        33,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        25,
        41
      ],
      "mod_code": [
        "int siz . size ( ) ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        27,
        28
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        28,
        30
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        28,
        30,
        33
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        28,
        30,
        41
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        28,
        33
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        28,
        33,
        41
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        28,
        41
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        30
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        30,
        33
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        30,
        33,
        41
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        30,
        41
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        33
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        33,
        41
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        27,
        41
      ],
      "mod_code": [
        "if ( ( s [ i ] ) - 0 ) % 2 == 0 )",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        28,
        30
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        28,
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        28,
        30,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        28,
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        28,
        33
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        28,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        28,
        41
      ],
      "mod_code": [
        "s1 = s1 + 0 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        30,
        33
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        30,
        33,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        30,
        41
      ],
      "mod_code": [
        "s1 = s1 + 1 ;",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        33,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }",
        "for ( int i = 0 ; i < 19 - siz ; i ++ ) { s2 += 0 ; }"
      ],
      "err_line": 33,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    }
  ]
}