{
  "meta": {
    "index": 2317,
    "hitid": "3UZUVSO3P7P159LFOG1PAEWJI73ME0",
    "workerid": "A1AYVATMT88U1W",
    "probid": "713A",
    "subid": "40465631"
  },
  "lines": [
    {
      "line": 0,
      "text": "ok = map from string to int",
      "code": "map < string , int > ok ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let inter be a string function that accepts string ss",
      "code": "string inter ( string ss )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let res be a string",
      "code": "string res ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to length of ss exclusive",
      "code": "for ( int i = 0 ; i < ss . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if ( ss [ i ] - 0 ) modulo 2",
      "code": "if ( ( ss [ i ] - ' 0 ' ) % 2 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increment res by 1",
      "code": "res += ' 1 ' ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment res by 0",
      "code": "res += ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if res . find_first_not_of ( 0 ) is equal to string : : npos , return 0",
      "code": "if ( res . find_first_not_of ( ' 0 ' ) == string :: npos ) return \" 0 \" ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "let pos be a integer with pos = res . find_first_not_of ( 0 )",
      "code": "int pos = res . find_first_not_of ( ' 0 ' ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "res is equal to res . substr ( pos , length of ss - pos )",
      "code": "res = res . substr ( pos , ss . length ( ) - pos ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return the value of res",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "let op be a character",
      "code": "char op ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "let t be a integer",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while t is decremented by 1",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read op",
      "code": "cin >> op ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "s is equal to inter ( s )",
      "code": "s = inter ( s ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if op is equal to +",
      "code": "if ( op == ' + ' )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "increment ok [ s ] by 1",
      "code": "ok [ s ] ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else if op is equal to -",
      "code": "else if ( op == ' - ' )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "decrement ok [ s ] by 1",
      "code": "ok [ s ] -- ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print ok [ s ] and newline",
      "code": "cout << ok [ s ] << endl ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "res ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "res += 0 ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;"
      ],
      "err_line": 9,
      "err_msg": "call of overloaded ‘find_first_not_of(int)’ is ambiguous"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string inter ( string ss ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char res ;"
      ],
      "err_line": 9,
      "err_msg": "request for member ‘find_first_not_of’ in ‘res’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < ss . length ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "res ++ ;"
      ],
      "err_line": 7,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( res . substr ( 0 ) == 0 ) return 0 ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int pos = res . find_first_not_of ( 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "call of overloaded ‘find_first_not_of(int)’ is ambiguous"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "char op [ 8 ] ;"
      ],
      "err_line": 23,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 22,
      "err_msg": "could not convert ‘s’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cin . get ( t ) ;"
      ],
      "err_line": 18,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int s = inter ( s ) ;"
      ],
      "err_line": 22,
      "err_msg": "could not convert ‘s’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( op == \" + \" )"
      ],
      "err_line": 23,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "else if ( op == \" - \" )"
      ],
      "err_line": 25,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        10
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        15
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        15
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        7,
        15
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        15,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        7,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "res += 0 ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "res ++ ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "res ++ ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        15
      ],
      "mod_code": [
        "res ++ ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        9,
        15
      ],
      "mod_code": [
        "res ++ ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        15,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        9,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "res ++ ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        15
      ],
      "mod_code": [
        "res ++ ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        15,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        10,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "res ++ ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        15,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "res ++ ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        15
      ],
      "mod_code": [
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        0
      ],
      "mod_code": [
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        9,
        15
      ],
      "mod_code": [
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        9,
        15,
        0
      ],
      "mod_code": [
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        9,
        0
      ],
      "mod_code": [
        "res += 0 ;",
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "res += 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        10,
        15
      ],
      "mod_code": [
        "res += 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        10,
        15,
        0
      ],
      "mod_code": [
        "res += 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        10,
        0
      ],
      "mod_code": [
        "res += 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "res += 0 ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator+=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        15,
        0
      ],
      "mod_code": [
        "res += 0 ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "res += 0 ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;"
      ],
      "err_line": 9,
      "err_msg": "call of overloaded ‘find_first_not_of(int)’ is ambiguous"
    },
    {
      "mod_line": [
        9,
        10,
        15
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 9,
      "err_msg": "call of overloaded ‘find_first_not_of(int)’ is ambiguous"
    },
    {
      "mod_line": [
        9,
        10,
        15,
        0
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        10,
        0
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 9,
      "err_msg": "call of overloaded ‘find_first_not_of(int)’ is ambiguous"
    },
    {
      "mod_line": [
        9,
        15,
        0
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( res . find_first_not_of ( 0 ) == 0 ) return 0 ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;"
      ],
      "err_line": 23,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        15,
        0
      ],
      "mod_code": [
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "int pos = res . find_first_not_of ( 0.0 ) ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "char op [ 8 ] ;",
        "map < string = int , int > ok ;"
      ],
      "err_line": 0,
      "err_msg": "an assignment cannot appear in a constant-expression"
    }
  ]
}