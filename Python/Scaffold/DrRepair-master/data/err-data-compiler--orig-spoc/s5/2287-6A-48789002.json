{
  "meta": {
    "index": 2287,
    "hitid": "3AA88CN98PX4LQ23350324WVBECKY7",
    "workerid": "A1APYLD4DUK33J",
    "probid": "6A",
    "subid": "48789002"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare check with integers a , b , c as arguments , returning integer",
      "code": "int check ( int a , int b , int c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a + b is greater than c and b + c is greater than a and c + a is greater than b",
      "code": "return ( a + b > c && b + c > a && c + a > b ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare ch with integers a , b , c as arguments , returning integer",
      "code": "int ch ( int a , int b , int c )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "returning a + b is c or b + c is a or c + a is b",
      "code": "return ( a + b == c || b + c == a || c + a == b ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare integers a , b , c , d",
      "code": "int a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a and b and c and d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integers seg = 0 , tr = 0",
      "code": "int seg = 0 , tr = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if result of run check ( a , b , c ) or result of run check ( a , b , d ) or result of run check ( b , c , d ) or result or run check ( a , c , d ) , let tr be 1",
      "code": "if ( check ( a , b , c ) || check ( a , b , d ) || check ( b , c , d ) || check ( a , c , d ) ) { tr = 1 ; }",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if result of run ch ( a , b , c ) or result of run ch ( a , b , d ) or result of run ch ( b , c , d ) or result of run ch ( a , c , d ) , let seg be 1",
      "code": "if ( ch ( a , b , c ) || ch ( a , b , d ) || ch ( b , c , d ) || ch ( a , c , d ) ) { seg = 1 ; }",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if tr is true",
      "code": "if ( tr )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" TRIANGLE \\ n \"",
      "code": "cout << \" TRIANGLE\\n \" ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if seg is true",
      "code": "else if ( seg )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" SEGMENT \\ n \"",
      "code": "cout << \" SEGMENT\\n \" ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" IMPOSSIBLE \\ n \"",
      "code": "cout << \" IMPOSSIBLE\\n \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int ch ( int a , int b , int c ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( check ( a , b , c ) || check ( a , b , d ) || check ( b , c , d ) || check ( a , c ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘int check(int, int, int)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( ch ( a , b ) || c )"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int ch(int, int, int)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( tr ) break ;"
      ],
      "err_line": 12,
      "err_msg": "break statement not within loop or switch"
    }
  ]
}