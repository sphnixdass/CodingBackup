{
  "meta": {
    "index": 304,
    "hitid": "3JUDR1D0D6L0V87RNPD5PM7ZV572QY",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "61A",
    "subid": "48743027"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "print char arrays a of size 1000 , b of size 1000 , and k of size 1000",
      "code": "char a [ 1000 ] , b [ 1000 ] , k [ 1000 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer c",
      "code": "int c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set c to the length of string a",
      "code": "c = strlen ( a ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to c exclusive , set k [ i ] to ' 0 '",
      "code": "for ( int i = 0 ; i < c ; i ++ ) { k [ i ] = ' 0 ' ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to c exclusive",
      "code": "for ( int i = 0 ; i < c ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a [ i ] is equal to b [ i ]",
      "code": "if ( a [ i ] == b [ i ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set k [ i ] to ' 0 '",
      "code": "k [ i ] = ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set k [ i ] to ' 1 '",
      "code": "k [ i ] = ' 1 ' ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 0 to c exclusive , print k [ j ]",
      "code": "for ( int j = 0 ; j < c ; j ++ ) cout << k [ j ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "c = a . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "c = a . size ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        6
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        7
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        10
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        7
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        7,
        10
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        10
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        10
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        7,
        10
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "c = a . length ( ) ;",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        6
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        7
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        6,
        10
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        7
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        7,
        10
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        1,
        10
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        10
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        7,
        10
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "c = a . size ( ) ;",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1000]’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        10
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char a [ 1000 ] , b [ 1000 ] , b [ 1000 ] ;",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char b [1000]’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < c ; i ++ )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "if ( a [ i ] ] == b [ i ] )",
        "if ( k [ i ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}