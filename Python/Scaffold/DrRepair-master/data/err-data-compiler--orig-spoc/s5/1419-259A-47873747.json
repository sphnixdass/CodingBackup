{
  "meta": {
    "index": 1419,
    "hitid": "3NSM4HLQNROHNR9CP036L452BBPQQ4",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "259A",
    "subid": "47873747"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character variable array a size 10 by 10",
      "code": "char a [ 10 ] [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "integer = i , j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a [ i ]",
      "code": "for ( i = 0 ; i < 8 ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for = 0 to less than 8 do the following",
      "code": "for ( i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for = 0 to less than 7 do the following",
      "code": "for ( j = 0 ; j < 7 ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if a [ i ] [ j ] is a [ i ] [ j + 1 ] then do the following",
      "code": "if ( a [ i ] [ j ] == a [ i ] [ j + 1 ] )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "output NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "output YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char arr [ 10 ] [ 10 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        6
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "for ( i = 0 ; i < 7 ; i ++ )",
        "for ( j = 0 ; i < 8 ; i ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "for ( i = 0 ; i < 7 ; i ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "for ( j = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 7 ; j ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "for ( j = 0 ; i < 8 ; i ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "for ( i = 0 ; i < 7 ; j ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        4,
        3,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 7 ; i ++ )",
        "for ( j = 0 ; i < 8 ; i ++ )",
        "cout << a [ i ] ;",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        4,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 7 ; i ++ )",
        "for ( j = 0 ; i < 8 ; i ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        3,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 7 ; i ++ )",
        "cout << a [ i ] ;",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 7 ; i ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        5,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; i < 8 ; i ++ )",
        "cout << a [ i ] ;",
        "for ( i = 0 ; i < 7 ; j ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; i < 8 ; i ++ )",
        "cout << a [ i ] ;",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; i < 8 ; i ++ )",
        "for ( i = 0 ; i < 7 ; j ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; i < 8 ; i ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "cout << a [ i ] ;",
        "for ( i = 0 ; i < 7 ; j ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cout << a [ i ] ;",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 7 ; j ++ )",
        "if ( a [ i ] [ j ] == a [ i ] [ j + 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}