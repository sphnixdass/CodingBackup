{
  "meta": {
    "index": 2449,
    "hitid": "33QQ60S6ASCLRRBUPBTWGZB91SSU0A",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "991A",
    "subid": "42178209"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b , c , n = integers",
      "code": "int a , b , c , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read a , b , c , n",
      "code": "while ( cin >> a >> b >> c >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "res = integer with res = - 1",
      "code": "int res = - 1 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "if ( a < = n ) and ( b < = n ) and ( c < = n )",
      "code": "if ( ( a <= n ) && ( b <= n ) && ( c <= n ) )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "onlyA = integer with onlyA = a - c",
      "code": "int onlyA = a - c ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "onlyB = integer with onlyB = b - c",
      "code": "int onlyB = b - c ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if ( onlyA > = 0 and onlyB > = 0 ) and ( onlyA + onlyB < n ) , res = n - onlyA - onlyB - c",
      "code": "if ( ( onlyA >= 0 && onlyB >= 0 ) && ( onlyA + onlyB < n ) ) { res = n - onlyA - onlyB - c ; }",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if res is 0 , res = - 1",
      "code": "if ( res == 0 ) { res = - 1 ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( a <= n ) && ( b <= n ) && ( c <= n ) )"
      ],
      "err_line": 4,
      "err_msg": "expected identifier before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        2,
        4
      ],
      "mod_code": [
        "if ( onlyA >= 0 && onlyB >= 0 ) res = n - onlyB - onlyB - c - c - c - c ;",
        "while ( cin >> a >> b >> c )",
        "if ( a <= n ) && ( b <= n ) && ( c <= n ) )"
      ],
      "err_line": 4,
      "err_msg": "expected identifier before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( onlyA >= 0 && onlyB >= 0 ) res = n - onlyB - onlyB - c - c - c - c ;",
        "if ( a <= n ) && ( b <= n ) && ( c <= n ) )"
      ],
      "err_line": 4,
      "err_msg": "expected identifier before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        2,
        4
      ],
      "mod_code": [
        "if ( onlyA >= 0 && onlyB >= 0 ) res = n - onlyA - onlyB - c - c - c - c ;",
        "while ( cin >> a >> b >> c )",
        "if ( a <= n ) && ( b <= n ) && ( c <= n ) )"
      ],
      "err_line": 4,
      "err_msg": "expected identifier before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( onlyA >= 0 && onlyB >= 0 ) res = n - onlyA - onlyB - c - c - c - c ;",
        "if ( a <= n ) && ( b <= n ) && ( c <= n ) )"
      ],
      "err_line": 4,
      "err_msg": "expected identifier before ‘(’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c )",
        "if ( a <= n ) && ( b <= n ) && ( c <= n ) )"
      ],
      "err_line": 4,
      "err_msg": "expected identifier before ‘(’ token"
    }
  ]
}