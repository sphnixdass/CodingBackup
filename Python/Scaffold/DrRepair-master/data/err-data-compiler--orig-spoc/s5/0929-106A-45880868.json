{
  "meta": {
    "index": 929,
    "hitid": "3G57RS03HHZB2MOT3XP2RBC8Z9M25N",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "106A",
    "subid": "45880868"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function isgreater that takes char c1 , c2 and returns bool",
      "code": "bool isgreater ( char c1 , char c2 )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "arr = character array with arr = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' T ' , ' J ' , ' Q ' , ' K ' , ' A ' }",
      "code": "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' T ' , ' J ' , ' Q ' , ' K ' , ' A ' } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "i1 , i2 = integers",
      "code": "int i1 , i2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "i1 = i2 = - 1",
      "code": "i1 = i2 = - 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 8",
      "code": "for ( int i = 0 ; i < 9 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if arr [ i ] is c1 , i1 = i",
      "code": "if ( arr [ i ] == c1 ) { i1 = i ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if arr [ i ] is c2 , i2 = i",
      "code": "if ( arr [ i ] == c2 ) { i2 = i ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if i1 > i2 , return true",
      "code": "if ( i1 > i2 ) { return true ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "t = character",
      "code": "char t ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "p1 , p2 = string",
      "code": "string p1 , p2 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read p1 , p2",
      "code": "cin >> t >> p1 >> p2 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if p1 [ 1 ] is t",
      "code": "if ( p1 [ 1 ] == t )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if p2 [ 1 ] is t",
      "code": "if ( p2 [ 1 ] == t )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if isgreater ( p1 [ 0 ] , p2 [ 0 ] )",
      "code": "if ( isgreater ( p1 [ 0 ] , p2 [ 0 ] ) )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if p1 [ 1 ] is p2 [ 1 ]",
      "code": "if ( p1 [ 1 ] == p2 [ 1 ] )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if isgreater ( p1 [ 0 ] , p2 [ 0 ] )",
      "code": "if ( isgreater ( p1 [ 0 ] , p2 [ 0 ] ) )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool isgreater ( char c1 , char c2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 14,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char p1 , p2 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        13
      ],
      "mod_code": [
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' J ' , ' A ' , ' A ' , ' A ' } ;",
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        13,
        27
      ],
      "mod_code": [
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' J ' , ' A ' , ' A ' , ' A ' } ;",
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        13,
        16
      ],
      "mod_code": [
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' J ' , ' A ' , ' A ' , ' A ' } ;",
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' J ' , ' A ' , ' A ' , ' A ' } ;",
        "char p1 , p2 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        27
      ],
      "mod_code": [
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' J ' , ' A ' , ' A ' , ' A ' } ;",
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        27,
        16
      ],
      "mod_code": [
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' J ' , ' A ' , ' A ' , ' A ' } ;",
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        16
      ],
      "mod_code": [
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' J ' , ' A ' , ' A ' , ' A ' } ;",
        "char p1 , p2 ;",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        13,
        27
      ],
      "mod_code": [
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        13,
        27,
        1
      ],
      "mod_code": [
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )",
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' Q ' , ' A ' , ' A ' , ' A ' } ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        13,
        27,
        16
      ],
      "mod_code": [
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        13,
        1
      ],
      "mod_code": [
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' Q ' , ' A ' , ' A ' , ' A ' } ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        13,
        1,
        16
      ],
      "mod_code": [
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' Q ' , ' A ' , ' A ' , ' A ' } ;",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        13,
        16
      ],
      "mod_code": [
        "cin >> p1 >> p2 ;",
        "char p1 , p2 ;",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        27
      ],
      "mod_code": [
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        27,
        1
      ],
      "mod_code": [
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )",
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' Q ' , ' A ' , ' A ' , ' A ' } ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        27,
        1,
        16
      ],
      "mod_code": [
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )",
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' Q ' , ' A ' , ' A ' , ' A ' } ;",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        27,
        16
      ],
      "mod_code": [
        "char p1 , p2 ;",
        "if ( p1 [ 1 ] != p2 [ 1 ] )",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "char p1 , p2 ;",
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' Q ' , ' A ' , ' A ' , ' A ' } ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        1,
        16
      ],
      "mod_code": [
        "char p1 , p2 ;",
        "char arr [ ] = { ' 6 ' , ' 7 ' , ' 8 ' , ' 9 ' , ' J ' , ' Q ' , ' A ' , ' A ' , ' A ' } ;",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "char p1 , p2 ;",
        "if ( p2 [ 1 ] == ' t ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}