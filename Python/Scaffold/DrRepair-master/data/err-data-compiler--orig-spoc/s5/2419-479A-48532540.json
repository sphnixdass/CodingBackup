{
  "meta": {
    "index": 2419,
    "hitid": "38O9DZ0A62H7LQO78GZ7JHQ8UH2621",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "479A",
    "subid": "48532540"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function max1 taking two ints a and b",
      "code": "int max1 ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return a",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "a , b , c = int",
      "code": "int a , b , c ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "loop while reading a then b then c",
      "code": "while ( cin >> a >> b >> c )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "m , x , max = int array of size 10 each",
      "code": "int m [ 10 ] , x [ 10 ] , max [ 10 ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set m [ 0 ] to a + b",
      "code": "m [ 0 ] = a + b ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set x [ 0 ] to c",
      "code": "x [ 0 ] = c ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set m [ 1 ] to a * b",
      "code": "m [ 1 ] = a * b ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set x [ 1 ] to c",
      "code": "x [ 1 ] = c ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set m [ 2 ] to b + c",
      "code": "m [ 2 ] = b + c ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set x [ 2 ] to a",
      "code": "x [ 2 ] = a ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set m [ 3 ] to b * c",
      "code": "m [ 3 ] = b * c ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set x [ 3 ] to a",
      "code": "x [ 3 ] = a ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set max [ 0 ] to a + b + c",
      "code": "max [ 0 ] = a + b + c ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set max [ 1 ] to a * b * c",
      "code": "max [ 1 ] = a * b * c ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for i = 2 to 6 set max [ i ] to max1 of m [ i - 2 ] + x [ i - 2 ] and m [ i - 2 ] * x [ i - 2 ]",
      "code": "for ( int i = 2 ; i < 6 ; i ++ ) { max [ i ] = max1 ( m [ i - 2 ] + x [ i - 2 ] , m [ i - 2 ] * x [ i - 2 ] ) ; }",
      "indent": 2
    },
    {
      "line": 21,
      "text": "da = int with da = 0",
      "code": "int da = 0 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "for i = 0 to 6",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set da to max [ i ] if da is less then max [ i ]",
      "code": "if ( da < max [ i ] ) da = max [ i ] ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "print da",
      "code": "cout << da << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void max1 ( int a , int b )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 23,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "while ( >> a >> b >> c )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘>>’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int m , x , max [ 10 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] ; }"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( da < max ) da = max [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "int m , x , max [ 10 ] [ 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        20
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        20,
        23
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        20,
        13
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        23
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "int m , x , max [ 10 ] [ 10 ] ;",
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        23,
        13
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "int m , x , max [ 10 ] [ 10 ] ;",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        9,
        13
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "int m , x , max [ 10 ] [ 10 ] ;",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        20,
        23
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        20,
        23,
        13
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        20,
        13
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        13
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "void max1 ( int a , int b )",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        20
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        20,
        23
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        20,
        23,
        13
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        20,
        23,
        0
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        9,
        20,
        13
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        20,
        13,
        0
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "x [ ' 1 ' ] = c ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        9,
        20,
        0
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        23,
        13
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        23,
        13,
        0
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        9,
        23,
        0
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "if ( da < max ) { da = max [ i ] ; }",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        13,
        0
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "x [ ' 1 ' ] = c ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "int m , x , max [ 10 ] [ 10 ] ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        20,
        23
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        23,
        13
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        23,
        13,
        0
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        20,
        23,
        0
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "if ( da < max ) { da = max [ i ] ; }",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        20,
        13
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 20,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        13,
        0
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "x [ ' 1 ' ] = c ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        20,
        0
      ],
      "mod_code": [
        "for ( int i = 2 ; i <= 6 ; i ++ ) { max [ i ] = max1 [ i - 2 ] + x [ i - 2 ] + x [ i - 2 ] * x [ i - 2 ] ; }",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        23,
        13
      ],
      "mod_code": [
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;"
      ],
      "err_line": 23,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        13,
        0
      ],
      "mod_code": [
        "if ( da < max ) { da = max [ i ] ; }",
        "x [ ' 1 ' ] = c ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        23,
        0
      ],
      "mod_code": [
        "if ( da < max ) { da = max [ i ] ; }",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "x [ ' 1 ' ] = c ;",
        "void max1 ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘max1’ declared void"
    }
  ]
}