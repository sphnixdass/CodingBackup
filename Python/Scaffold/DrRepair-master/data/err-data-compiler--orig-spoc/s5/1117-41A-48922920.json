{
  "meta": {
    "index": 1117,
    "hitid": "36KM3FWE3R6JTGZYC30L67XPSFK705",
    "workerid": "A1APYLD4DUK33J",
    "probid": "41A",
    "subid": "48922920"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string m",
      "code": "string m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string p",
      "code": "string p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read m read p is true",
      "code": "while ( cin >> m >> p )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "reverse element order from beginning of p to end of p",
      "code": "reverse ( p . begin ( ) , p . end ( ) ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if p is m",
      "code": "if ( p == m )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( { cin >> m >> p )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        4
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        1
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "string n ;",
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        1
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "if ( p == m ) m ++ ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        4
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        4,
        1
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        3,
        2,
        4,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;",
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "reverse ( p . end ( ) , p . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( { cin >> m >> p )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        4
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        1
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        6
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;",
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        5,
        2,
        1,
        6
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        1,
        6
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        6
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( p == m ) m ++ ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        2,
        4,
        1,
        6
      ],
      "mod_code": [
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "string n ;",
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "string n ;",
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "string n ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1,
        6
      ],
      "mod_code": [
        "reverse ( p . end ( ) , p . end ( ) ) ;",
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string n ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "‘m’ was not declared in this scope"
    }
  ]
}