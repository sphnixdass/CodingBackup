{
  "meta": {
    "index": 2259,
    "hitid": "3X0EMNLXEPJOSN4EBMIRRME0M52VPR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "6A",
    "subid": "48283125"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , k , ans , i and j are long longs with ans , i and j = 0",
      "code": "long long n , k , ans = 0 , i = 0 , j = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set integer t to 1",
      "code": "int t = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while t - -",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "arr = array of integers of size 4",
      "code": "int arr [ 4 ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read 4 elements into arr",
      "code": "for ( i = 0 ; i < 4 ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "sort arr",
      "code": "sort ( arr , arr + 4 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign value 0 to the long long sum",
      "code": "long long sum = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "s = string with value \" IMPOSSIBLE \"",
      "code": "string s = \" IMPOSSIBLE \" ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for i = 0 to 2 exclusive",
      "code": "for ( i = 0 ; i < 2 ; i ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "sum = arr [ i ] + arr [ i + 1 ]",
      "code": "sum = arr [ i ] + arr [ i + 1 ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if sum is greater than arr [ i + 2 ]",
      "code": "if ( sum > arr [ i + 2 ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "print \" TRIANGLE \"",
      "code": "cout << \" TRIANGLE \"",
      "indent": 4
    },
    {
      "line": 13,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "invoke function exit ( 0 )",
      "code": "exit ( 0 ) ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else if sum is equal to arr [ i + 2 ]",
      "code": "else if ( sum == arr [ i + 2 ] )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "s = \" SEGMENT \"",
      "code": "s = \" SEGMENT \" ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print s and \" \\ n \"",
      "code": "cout << s << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long n , k , ans = 0 , i = 0 , j , j ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int j’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "sort ( arr . begin ( ) , arr . end ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘begin’ in ‘arr’, which is of non-class type ‘int [4]’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        14
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        3
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "while ( t -= ' - ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        15
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        18
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        3
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "while ( t -= ' - ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        3,
        15
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        3,
        18
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "while ( t -= ' - ' )",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        15
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        18
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        12,
        18
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "cout << \" TRIANGLE \" << endl ;",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        14,
        3,
        15
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "char exit ( 0 ) ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        14,
        15
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "char exit ( 0 ) ;",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        18
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "char exit ( 0 ) ;",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        3,
        15
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        3,
        15,
        18
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        15,
        18
      ],
      "mod_code": [
        "sort ( arr , arr + n ) ;",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        3
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "while ( t -= ' - ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        3,
        15
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        3,
        18
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "while ( t -= ' - ' )",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        15
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        18
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        18
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "char exit ( 0 ) ;",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "while ( t -= ' - ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        3,
        15
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        3,
        15,
        18
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        3,
        18
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "while ( t -= ' - ' )",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        18
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "cout << \" TRIANGLE \" << endl ;",
        "cout << s << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        3,
        15
      ],
      "mod_code": [
        "char exit ( 0 ) ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        14,
        3,
        15,
        18
      ],
      "mod_code": [
        "char exit ( 0 ) ;",
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "char exit ( 0 ) ;",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        14,
        15,
        18
      ],
      "mod_code": [
        "char exit ( 0 ) ;",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        3,
        15,
        18
      ],
      "mod_code": [
        "while ( t -= ' - ' )",
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "else if ( sum is arr [ i + 2 ] )",
        "cout << s << \" \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘is’"
    }
  ]
}