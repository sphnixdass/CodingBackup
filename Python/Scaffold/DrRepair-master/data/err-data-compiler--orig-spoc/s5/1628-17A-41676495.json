{
  "meta": {
    "index": 1628,
    "hitid": "3Y40HMYLL1CTOHH5SNI3PDYKAX2UXP",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "41676495"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare function File",
      "code": "void File ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create or open file output . txt for output",
      "code": "freopen ( \" output.txt \" , \" w \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "open file input . txt for input",
      "code": "freopen ( \" input.txt \" , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "define function fast",
      "code": "void fast ( ) { }",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare constant pi = 3 . 1415926",
      "code": "const double pi = 3.1415926 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare constant nn = 1e3 + 4",
      "code": "const int nn = 1e3 + 4 ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "arr = integer array of size nn",
      "code": "int arr [ nn ] ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create integer x with value 0",
      "code": "int x = 0 ;",
      "indent": 0
    },
    {
      "line": 9,
      "text": "function isprime with integer argument n",
      "code": "bool isprime ( int n )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "if n is equal to 2 return true",
      "code": "if ( n == 2 ) return true ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if n < 2 or n is even return false",
      "code": "if ( n < 2 || n % 2 == 0 ) return false ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for integer i = 3 to square root of n inclusive increment i by 2",
      "code": "for ( int i = 3 ; i * i <= n ; i += 2 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if n can be divided by i without remainder return false",
      "code": "if ( n % i == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "declare function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 18,
      "text": "for i = 2 to 1000 inclusive",
      "code": "for ( int i = 2 ; i <= 1000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if isprime ( i ) increment x and set arr [ x ] to i",
      "code": "if ( isprime ( i ) ) arr [ x ++ ] = i ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 23,
      "text": "invoke function fast",
      "code": "fast ( ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "call function solve",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "n , k , cnt = integers with value of cnt = 0",
      "code": "int n , k , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if k is equal to 0",
      "code": "if ( k == 0 )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for j = 0 to x exclusive",
      "code": "for ( int j = 0 ; j < x ; j ++ )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if arr [ j ] + arr [ j + 1 ] is equal to i - 1 & & isprime ( i )",
      "code": "if ( arr [ j ] + arr [ j + 1 ] == i - 1 && isprime ( i ) )",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "else if arr [ j ] + arr [ j + 1 ] is greater than i - 1",
      "code": "else if ( arr [ j ] + arr [ j + 1 ] > i - 1 )",
      "indent": 3
    },
    {
      "line": 36,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "if cnt is equal to k",
      "code": "if ( cnt == k )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "void isprime ( int n )"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "File ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "freopen ( txt , \" r \" , stdin ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "void fast ( )"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘double’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int arr [ nn nn ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘]’ before ‘nn’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "void isprime ( int n ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "void solve ( ) { }"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 2 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "void fast ( ) { }"
      ],
      "err_line": 23,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "void solve ( )"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "for ( j = 0 ; j < x ; j ++ )"
      ],
      "err_line": 32,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "else if ( arr [ j ] + arr [ j + 1 ] ] > i - 1 )"
      ],
      "err_line": 35,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 36,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "if ( cnt == k ) break ;"
      ],
      "err_line": 39,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        19
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        19,
        6
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        19,
        24
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "void solve ( )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        19,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        6,
        24
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        6,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "const const int nn = 1e3 + 4 ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        24
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "void solve ( )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        24,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void isprime ( int n )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "if ( isprime ( i ) ) arr [ x ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        6
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        6,
        24
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        6,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        24
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "void solve ( )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        24,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        24
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        24,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "const const int nn = 1e3 + 4 ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void solve ( )"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        24,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        36
      ],
      "mod_code": [
        "freopen ( txt , \" txt \" , stdin ) ;",
        "stop ;"
      ],
      "err_line": 2,
      "err_msg": "‘txt’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        6
      ],
      "mod_code": [
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        19,
        6,
        24
      ],
      "mod_code": [
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        19,
        6,
        36
      ],
      "mod_code": [
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;",
        "stop ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        19,
        24
      ],
      "mod_code": [
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "void solve ( )"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        24,
        36
      ],
      "mod_code": [
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        36
      ],
      "mod_code": [
        "void isprime ( int n )",
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "void isprime ( int n )",
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        6,
        24
      ],
      "mod_code": [
        "void isprime ( int n )",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        6,
        24,
        36
      ],
      "mod_code": [
        "void isprime ( int n )",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        6,
        36
      ],
      "mod_code": [
        "void isprime ( int n )",
        "const const int nn = 1e3 + 4 ;",
        "stop ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "void isprime ( int n )",
        "void solve ( )"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        24,
        36
      ],
      "mod_code": [
        "void isprime ( int n )",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        36
      ],
      "mod_code": [
        "void isprime ( int n )",
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        19,
        6,
        24
      ],
      "mod_code": [
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        19,
        6,
        24,
        36
      ],
      "mod_code": [
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        19,
        6,
        36
      ],
      "mod_code": [
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "const const int nn = 1e3 + 4 ;",
        "stop ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "void solve ( )"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        19,
        24,
        36
      ],
      "mod_code": [
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        19,
        36
      ],
      "mod_code": [
        "if ( isprime ( i ) ) arr [ x ] = i ;",
        "stop ;"
      ],
      "err_line": 36,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        24,
        36
      ],
      "mod_code": [
        "const const int nn = 1e3 + 4 ;",
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        36
      ],
      "mod_code": [
        "const const int nn = 1e3 + 4 ;",
        "stop ;"
      ],
      "err_line": 6,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        24,
        36
      ],
      "mod_code": [
        "void solve ( )",
        "stop ;"
      ],
      "err_line": 25,
      "err_msg": "expected initializer before ‘int’"
    }
  ]
}