{
  "meta": {
    "index": 2488,
    "hitid": "3T2HW4QDUV171RI73GRPF4QWWU59CC",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "48534092"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a , b and c be strings",
      "code": "string a , b , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read line from input into a",
      "code": "getline ( cin , a ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read line from input into b",
      "code": "getline ( cin , b ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read line from input into c",
      "code": "getline ( cin , c ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a [ 0 ] = ' r ' and b [ 0 ] = ' s ' and b [ 0 ] is equal to c [ 0 ]",
      "code": "if ( a [ 0 ] == ' r ' && b [ 0 ] == ' s ' && b [ 0 ] == c [ 0 ] )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if b [ 0 ] = ' r ' and a [ 0 ] = ' s ' and a [ 0 ] = c [ 0 ]",
      "code": "else if ( b [ 0 ] == ' r ' && a [ 0 ] == ' s ' && a [ 0 ] == c [ 0 ] )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if c [ 0 ] = ' r ' & & a [ 0 ] = ' s ' & & b [ 0 ] = a [ 0 ]",
      "code": "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] == a [ 0 ] )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if a [ 0 ] = ' s ' & & b [ 0 ] = ' p ' & & b [ 0 ] = c [ 0 ]",
      "code": "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] == c [ 0 ] )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if b [ 0 ] = ' s ' and a [ 0 ] = ' p ' and a [ 0 ] = c [ 0 ]",
      "code": "else if ( b [ 0 ] == ' s ' && a [ 0 ] == ' p ' && a [ 0 ] == c [ 0 ] )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if c [ 0 ] = ' s ' and b [ 0 ] = ' p ' and b [ 0 ] = a [ 0 ]",
      "code": "else if ( c [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] == a [ 0 ] )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if a [ 0 ] = ' p ' and b [ 0 ] = ' r ' and b [ 0 ] = c [ 0 ]",
      "code": "else if ( a [ 0 ] == ' p ' && b [ 0 ] == ' r ' && b [ 0 ] == c [ 0 ] )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else if b [ 0 ] = ' p ' and a [ 0 ] = ' r ' and a [ 0 ] = c [ 0 ]",
      "code": "else if ( b [ 0 ] == ' p ' && a [ 0 ] == ' r ' && a [ 0 ] == c [ 0 ] )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else if c [ 0 ] = ' p ' and b [ 0 ] = ' r ' and b [ 0 ] = a [ 0 ]",
      "code": "else if ( c [ 0 ] == ' p ' && b [ 0 ] == ' r ' && b [ 0 ] == a [ 0 ] )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string a , b , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( c ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        18,
        11
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        18,
        11,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        11,
        3,
        2
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        11,
        3,
        1
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        11,
        3,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        11,
        2
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        11,
        2,
        1
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( a ) ;",
        "string a , b , n ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        11,
        2,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( a ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        11,
        1
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "string a , b , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        11,
        1,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        11,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        3,
        2
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( b ) ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        3,
        2,
        1
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( b ) ;",
        "gets ( a ) ;",
        "string a , b , n ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        3,
        2,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( b ) ;",
        "gets ( a ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        3,
        1
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        3,
        1,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( b ) ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        3,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( b ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        2,
        1
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( a ) ;",
        "string a , b , n ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        2,
        1,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( a ) ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        2,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "gets ( a ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        1
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "string a , b , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        1,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        3,
        2
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        3,
        2,
        1
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "gets ( a ) ;",
        "string a , b , n ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        3,
        2,
        9
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "gets ( a ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        3,
        1
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        3,
        1,
        9
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        3,
        9
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( b ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        2,
        1
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( a ) ;",
        "string a , b , n ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        2,
        1,
        9
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( a ) ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        2,
        9
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "gets ( a ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "string a , b , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1,
        9
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "else if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' && b [ 0 ] ] == c [ 0 ] )",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "gets ( b ) ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "gets ( b ) ;",
        "gets ( a ) ;",
        "string a , b , n ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        9
      ],
      "mod_code": [
        "gets ( b ) ;",
        "gets ( a ) ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        9
      ],
      "mod_code": [
        "gets ( b ) ;",
        "gets ( a ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "gets ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        1,
        9
      ],
      "mod_code": [
        "gets ( b ) ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "gets ( b ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b , n ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        1,
        9
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "gets ( a ) ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "string a , b , n ;",
        "else if ( c [ 0 ] == ' r ' && a [ 0 ] == ' s ' && b [ 0 ] ] == a [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘c’ was not declared in this scope"
    }
  ]
}