{
  "meta": {
    "index": 1710,
    "hitid": "3SBNLSTU6UZWCA6Y7AGZCYA7XZODZJ",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "975A",
    "subid": "46737055"
  },
  "lines": [
    {
      "line": 0,
      "text": "function removeDuplicate ( get array of char str , int n , return pointer to char )",
      "code": "char * removeDuplicate ( char str [ ] , int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "index = 0",
      "code": "int index = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "j = int",
      "code": "int j ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "for j = 0 to i exclusive",
      "code": "for ( j = 0 ; j < i ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if str [ i ] is str [ j ] break",
      "code": "if ( str [ i ] == str [ j ] ) break ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "if j is i str [ index ] = str [ i ] , increment index",
      "code": "if ( j == i ) str [ index ++ ] = str [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return str",
      "code": "return str ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "n , i , j , k , x , t , f = long long",
      "code": "long long n , i , j , k , x , t , f ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "str = array of 10000 char",
      "code": "char str [ 10000 ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "s = array of 10000 string , s2 = string",
      "code": "string s [ 10000 ] , s2 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "x = 0",
      "code": "x = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "p = sizeof ( str ) / sizeof ( str [ 0 ] )",
      "code": "int p = sizeof ( str ) / sizeof ( str [ 0 ] ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "removeDuplicate ( str , p )",
      "code": "removeDuplicate ( str , p ) ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "d = sizeof ( str ) / sizeof ( str [ 0 ] )",
      "code": "int d = sizeof ( str ) / sizeof ( str [ 0 ] ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "s [ i ] = str",
      "code": "s [ i ] = str ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "sort s [ i ]",
      "code": "sort ( s [ i ] . begin ( ) , s [ i ] . end ( ) ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "t = 0",
      "code": "t = 0 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "a = array of 10000 long long",
      "code": "long long a [ 10000 ] ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "s2 = s [ i ]",
      "code": "s2 = s [ i ] ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if s2 is s [ j ] a [ j ] = i",
      "code": "if ( s2 == s [ j ] ) { a [ j ] = i ; }",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "f = 0",
      "code": "f = 0 ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "f = count ( a , a + n , i )",
      "code": "f = count ( a , a + n , i ) ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "if f increment x",
      "code": "if ( f ) { x ++ ; }",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print x",
      "code": "cout << x << endl ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "index = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int t = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "string s [ 10000 ] , s2 [ 10000 ] ;"
      ],
      "err_line": 27,
      "err_msg": "incompatible types in assignment of ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘std::__cxx11::string [10000] {aka std::__cxx11::basic_string<char> [10000]}’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int removeDuplicate ( str , p ) ;"
      ],
      "err_line": 19,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int d = sizeof ( str ) / sizeof ( str [ 0 ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s[i].std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)(& str)))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "long long t = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "redeclaration of ‘long long int t’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "char s2 = s [ i ] ;"
      ],
      "err_line": 27,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        4
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        6
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        15
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int x = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "if ( j == i ) str [ index ] = str [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        15
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        15
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "int x = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        15,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        1,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "index = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "for ( int j = 0 ; j < i ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        15
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        15
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int x = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        15,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "if ( j == i ) str [ index ] = str [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        15
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        15,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "int x = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        15,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "void removeDuplicate ( char str [ ] , int n , int n )",
        "int t = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        15
      ],
      "mod_code": [
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        24
      ],
      "mod_code": [
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        4,
        15
      ],
      "mod_code": [
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        24
      ],
      "mod_code": [
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        4,
        24
      ],
      "mod_code": [
        "index = 0 ;",
        "for ( int j = 0 ; j < i ; j ++ )",
        "int t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( j == i ) str [ index ] = str [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        6,
        15
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        24
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        6,
        24
      ],
      "mod_code": [
        "index = 0 ;",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "index = 0 ;",
        "int x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        15,
        24
      ],
      "mod_code": [
        "index = 0 ;",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "index = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        4,
        6,
        15
      ],
      "mod_code": [
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        4,
        6,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < i ; j ++ )",
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int t = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "for ( int j = 0 ; j < i ; j ++ )",
        "int x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        4,
        15,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < i ; j ++ )",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        4,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < i ; j ++ )",
        "int t = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        6,
        15,
        24
      ],
      "mod_code": [
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "if ( j == i ) str [ index ] = str [ i ] ;",
        "int t = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        15,
        24
      ],
      "mod_code": [
        "int x = 0 ;",
        "int t = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "conflicting declaration ‘int x’"
    }
  ]
}