{
  "meta": {
    "index": 2553,
    "hitid": "3UOMW19E6D0O04GV0QE83OLUB045C4",
    "workerid": "A1APYLD4DUK33J",
    "probid": "779A",
    "subid": "48210762"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare long long mod = 1000000007",
      "code": "long long mod = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare fast_exp with long long integers base , ex as arguments , returning long long integer",
      "code": "long long int fast_exp ( long long int base , long long int ex )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare long long integer res = 1",
      "code": "long long int res = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while ex is greater than 0",
      "code": "while ( ex > 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if ex % 2 is 1 , let res be ( res * base ) % mod",
      "code": "if ( ex % 2 == 1 ) res = ( res * base ) % mod ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "let base be ( base * base ) % mod",
      "code": "base = ( base * base ) % mod ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "let ex be ex / 2",
      "code": "ex /= 2 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return res % mo",
      "code": "return res % mod ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare gcd with long long integers a , b , returning long long integer",
      "code": "long long int gcd ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "if b is 0 , return a from function",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return result of run gcd ( b , a % b )",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "declare long long n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "declare long long array ar size 5 = { 0 }",
      "code": "long long ar [ 5 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "declare long long array a size n",
      "code": "long long a [ n ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "declare long long array b size n",
      "code": "long long b [ n ] ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "declare long long array ca size 5 = { 0 }",
      "code": "long long ca [ 5 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "decrement a [ i ]",
      "code": "a [ i ] -- ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "increment ar [ a [ i ] ]",
      "code": "ar [ a [ i ] ] ++ ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "increment ca [ a [ i ] ]",
      "code": "ca [ a [ i ] ] ++ ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "read b [ i ]",
      "code": "cin >> b [ i ] ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "decrement b [ i ]",
      "code": "b [ i ] -- ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "increment ar [ b [ i ] ]",
      "code": "ar [ b [ i ] ] ++ ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if ar [ i ] % 2",
      "code": "if ( ar [ i ] % 2 )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "declare long long ans = 0",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "if ar [ i ] , increment ans by absolute value of ( ca [ i ] - ( ar [ i ] / 2LL ) )",
      "code": "if ( ar [ i ] ) ans += abs ( ca [ i ] - ( ar [ i ] / 2LL ) ) ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "let ans be ans / 2",
      "code": "ans /= 2 ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print ans and \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return res % mo ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "base %= base )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return ( res % mo ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 24,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 32,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;"
      ],
      "err_line": 39,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        39
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        39,
        5
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "base %= base )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        39,
        5,
        22
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "base %= base )",
        "cout << a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        39,
        5,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "base %= base )",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        39,
        22
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        39,
        22,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        39,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        39
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        39,
        5
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "base %= base )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        39,
        5,
        22
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "base %= base )",
        "cout << a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        39,
        5,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "base %= base )",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        39,
        22
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        39,
        22,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        39,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "return res % mo ;",
        "base %= base )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        5,
        22
      ],
      "mod_code": [
        "return res % mo ;",
        "base %= base )",
        "cout << a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        5,
        22,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "base %= base )",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        5,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "base %= base )",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "return res % mo ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        22,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        23
      ],
      "mod_code": [
        "return res % mo ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 8,
      "err_msg": "‘mo’ was not declared in this scope"
    },
    {
      "mod_line": [
        39,
        5
      ],
      "mod_code": [
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "base %= base )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        5,
        22
      ],
      "mod_code": [
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "base %= base )",
        "cout << a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        5,
        22,
        23
      ],
      "mod_code": [
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "base %= base )",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        5,
        23
      ],
      "mod_code": [
        "if ( ar [ i ] == 2LL ) ans += abs ( ca [ i ] - 2LL ) ;",
        "base %= base )",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        5
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "base %= base )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        5,
        22
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "base %= base )",
        "cout << a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        5,
        22,
        23
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "base %= base )",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        5,
        23
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "base %= base )",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        22
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "cout << a [ i ] ;"
      ],
      "err_line": 39,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        22,
        23
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 39,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        39,
        23
      ],
      "mod_code": [
        "if ( ar [ i ] == ' ( ' ) ans += abs ( ca [ i ] - 2LL ) ) ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 39,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "base %= base )",
        "cout << a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        22,
        23
      ],
      "mod_code": [
        "base %= base )",
        "cout << a [ i ] ;",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        23
      ],
      "mod_code": [
        "base %= base )",
        "a [ i ] -= i ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}