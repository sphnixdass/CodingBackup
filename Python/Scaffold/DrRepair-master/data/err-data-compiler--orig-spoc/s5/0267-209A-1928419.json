{
  "meta": {
    "index": 267,
    "hitid": "37OPIVELUUXCNI3SHEJQMQYWG61HAM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "209A",
    "subid": "1928419"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare const int MOD = 1000000007",
      "code": "const int MOD = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create long long array a with elements 1 and 2",
      "code": "long long a [ 2 ] = { 1 , 2 } ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n = 1",
      "code": "if ( n == 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if n = 2",
      "code": "if ( n == 2 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print 3",
      "code": "cout << 3 << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for long long i = 0 to n - 2 exclusive",
      "code": "for ( long long i = 0 ; i < n - 2 ; ++ i )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create int num = i modulo 2",
      "code": "int num = i % 2 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increase a [ num ] by a [ ! num ] + 1",
      "code": "a [ num ] += a [ ! num ] + 1 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "a [ num ] % = MOD",
      "code": "a [ num ] %= MOD ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print ( a [ 0 ] + a [ 1 ] ) % MOD",
      "code": "cout << ( a [ 0 ] + a [ 1 ] ) % MOD << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        3
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "if ( n == 2 ) n ++ ;",
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        9,
        3
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "if ( n == 2 ) n ++ ;",
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        9,
        3,
        15
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "if ( n == 2 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        9,
        3,
        16
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "if ( n == 2 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        15
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        16
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        3,
        15
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        3,
        15,
        16
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        3,
        16
      ],
      "mod_code": [
        "long long a [ 1 ] = { 1 } ;",
        "{ cin >> n ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        9,
        5,
        3
      ],
      "mod_code": [
        "if ( n == 2 ) n ++ ;",
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        9,
        5,
        3,
        15
      ],
      "mod_code": [
        "if ( n == 2 ) n ++ ;",
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        9,
        5,
        3,
        16
      ],
      "mod_code": [
        "if ( n == 2 ) n ++ ;",
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( n == 2 ) n ++ ;",
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        9,
        3,
        15
      ],
      "mod_code": [
        "if ( n == 2 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        9,
        3,
        15,
        16
      ],
      "mod_code": [
        "if ( n == 2 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        9,
        3,
        16
      ],
      "mod_code": [
        "if ( n == 2 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        5,
        3,
        15
      ],
      "mod_code": [
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        5,
        3,
        15,
        16
      ],
      "mod_code": [
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        5,
        3,
        16
      ],
      "mod_code": [
        "if ( n == 1 ) n ++ ;",
        "{ cin >> n ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        3,
        15,
        16
      ],
      "mod_code": [
        "{ cin >> n ;",
        "a [ num ++ ] += a [ ! num ] + 1 ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "{ cin >> n ;",
        "a [ num ] = MOD ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    }
  ]
}