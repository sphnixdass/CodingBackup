{
  "meta": {
    "index": 618,
    "hitid": "3XAOZ9UYRZLT6NPV4LDRK3XU3ZS1QF",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "999A",
    "subid": "48601368"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd taking in long long ints p and q and returning long long",
      "code": "long long gcd ( long long p , long long q )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return p if q is equal to 0 or gcd ( q , p % q ) if not",
      "code": "return q == 0 ? p : gcd ( q , p % q ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create constant integer manx = 1e5 + 10",
      "code": "const int manx = 1e5 + 10 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let ints n , m , flag = 0 , and ans = 0",
      "code": "int n , m , flag = 0 , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let int array a of size 110",
      "code": "int a [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if a [ i ] is less than or equal to m",
      "code": "if ( a [ i ] <= m )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increase ans by 1",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = n - 1 to 0 by decreasing by 1",
      "code": "for ( int i = n - 1 ; i >= 0 ; -- i )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if a [ i ] is less than or equal to m",
      "code": "if ( a [ i ] <= m )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if flag is equal to 0",
      "code": "if ( flag == 0 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print n",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int n , m , flag = 0 , flag = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23,
        1
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        18
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        18,
        6
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        18,
        9
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        18,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        6
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        6,
        9
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        6,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "cin >> m >> m ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        9
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        9,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        1,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        23,
        18,
        6,
        9
      ],
      "mod_code": [
        "if ( flag )",
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        18,
        6,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23,
        18,
        9
      ],
      "mod_code": [
        "if ( flag )",
        "if ( a [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        18,
        9,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "if ( a [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        18,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "if ( a [ i ] <= ' m ' )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23,
        6,
        9
      ],
      "mod_code": [
        "if ( flag )",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        6,
        9,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        6,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "cin >> m >> m ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23,
        9
      ],
      "mod_code": [
        "if ( flag )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        9,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        21
      ],
      "mod_code": [
        "if ( flag )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        18,
        6
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        18,
        6,
        9
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        18,
        6,
        21
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        18,
        9
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        18,
        9,
        21
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        18,
        21
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "if ( a [ i ] <= ' m ' )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "cin >> m >> m ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        9
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        9,
        21
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        21
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "cin >> m >> m ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        9,
        21
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "return q == 0 || gcd ( q , p % q ) : p ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        18,
        6,
        9
      ],
      "mod_code": [
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        6,
        9,
        21
      ],
      "mod_code": [
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        6,
        21
      ],
      "mod_code": [
        "if ( a [ i ] <= ' m ' )",
        "cin >> m >> m ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        9
      ],
      "mod_code": [
        "if ( a [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        9,
        21
      ],
      "mod_code": [
        "if ( a [ i ] <= ' m ' )",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        21
      ],
      "mod_code": [
        "if ( a [ i ] <= ' m ' )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        21
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}