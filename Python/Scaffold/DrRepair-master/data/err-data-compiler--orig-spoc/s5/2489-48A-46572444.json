{
  "meta": {
    "index": 2489,
    "hitid": "39HYCOOPKOFWD37FSLQ54WEYHTODMF",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "46572444"
  },
  "lines": [
    {
      "line": 0,
      "text": "used is an array of booleans of size 111111",
      "code": "bool used [ 111111 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n and sum be long longs , a is an array of long longs with size 211111",
      "code": "long long n , a [ 211111 ] , sum ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "f , m and s are strings",
      "code": "string f , m , s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read f , m and s",
      "code": "cin >> f >> m >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( f ! = m and f ! = s and s ! = m ) or ( f = m and m = s )",
      "code": "if ( ( f != m && f != s && s != m ) || ( f == m && m == s ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" ? \"",
      "code": "puts ( \" ? \" ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if f = \" rock \" and m = \" paper \" and s = \" rock \"",
      "code": "if ( f == \" rock \" && m == \" paper \" && s == \" rock \" )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" M \"",
      "code": "puts ( \" M \" ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if f = \" rock \" and m = \" rock \" and s = \" paper \"",
      "code": "if ( f == \" rock \" && m == \" rock \" && s == \" paper \" )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" S \"",
      "code": "puts ( \" S \" ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if f = \" paper \" and m = \" rock \" and s = \" rock \"",
      "code": "if ( f == \" paper \" && m == \" rock \" && s == \" rock \" )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" F \"",
      "code": "puts ( \" F \" ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if f = \" scissors \" and m = \" scissors \" and s = \" rock \"",
      "code": "if ( f == \" scissors \" && m == \" scissors \" && s == \" rock \" )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" S \"",
      "code": "puts ( \" S \" ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if f = \" rock \" and m = \" scissors \" and s = \" scissors \"",
      "code": "if ( f == \" rock \" && m == \" scissors \" && s == \" scissors \" )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" F \"",
      "code": "puts ( \" F \" ) ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if f = \" scissors \" and m = \" rock \" and s = \" scissors \"",
      "code": "if ( f == \" scissors \" && m == \" rock \" && s == \" scissors \" )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print \" M \"",
      "code": "puts ( \" M \" ) ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if f = \" scissors \" and m = \" paper \" and s = \" paper \"",
      "code": "if ( f == \" scissors \" && m == \" paper \" && s == \" paper \" )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print \" F \"",
      "code": "puts ( \" F \" ) ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "if f = \" paper \" and m = \" paper \" and s = \" scissors \"",
      "code": "if ( f == \" paper \" && m == \" paper \" && s == \" scissors \" )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "print \" S \"",
      "code": "puts ( \" S \" ) ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "if f = \" paper \" and m = \" scissors \" and s = \" paper \"",
      "code": "if ( f == \" paper \" && m == \" scissors \" && s == \" paper \" )",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print \" M \"",
      "code": "puts ( \" M \" ) ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 45,
      "text": "print \" ? \"",
      "code": "puts ( \" ? \" ) ;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" F \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        18,
        45
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" F \" ;",
        "cout << \" ? \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        18,
        45,
        6
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "cout << \" ? \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        18,
        45,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        18,
        6
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" F \" ;",
        "cout << \" ? \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        18,
        6,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        18,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" F \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        45
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" ? \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        45,
        6
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" ? \" ;",
        "cout << \" ? \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        45,
        6,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" ? \" ;",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        45,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" ? \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s )",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        45,
        6,
        5
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        18,
        45,
        6,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        45,
        5
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        18,
        45,
        5,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        45,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        6,
        5
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        18,
        6,
        5,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        6,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        18,
        5,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        45,
        6,
        5
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        45,
        6,
        5,
        3
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        45,
        6,
        3
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        45,
        5
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        45,
        5,
        3
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        45,
        3
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        6,
        5,
        3
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "cout << \" ? \" ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( f != m && f != s && s != m ) || ( f == m ) == s ;",
        "string f , m , n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    }
  ]
}