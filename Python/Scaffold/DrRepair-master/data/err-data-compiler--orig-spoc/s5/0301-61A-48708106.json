{
  "meta": {
    "index": 301,
    "hitid": "3GITHABACYFFSBUZ7XLOLSCUQUK2NB",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "61A",
    "subid": "48708106"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "ch = character array of size 2 and width 200 and where ch [ 0 ] [ 0 ] is 0",
      "code": "char ch [ 2 ] [ 200 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read ch [ 0 ] with a limit of 200 characters",
      "code": "cin . getline ( ch [ 0 ] , 200 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read ch [ 1 ] with a limit of 200 characters",
      "code": "cin . getline ( ch [ 1 ] , 200 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i - 0 , ch [ 0 ] [ i ] is not 0 , increase i by 1",
      "code": "for ( int i = 0 ; ch [ 0 ] [ i ] != 0 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ch [ 0 ] [ i ] is 1 and ch [ 1 ] [ i ] is 1 and ch [ 0 ] [ i ] and ch [ 1 ] [ i ] share no bits in the same place",
      "code": "if ( ch [ 0 ] [ i ] == ' 1 ' ^ ch [ 1 ] [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print 1",
      "code": "cout << 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print 0",
      "code": "cout << 0 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print endline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] = { 0 } ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘char [2][0]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; ch [ 0 ] [ i ] != 0 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        6
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 1 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        8
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 0 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "cout << 1 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        8
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "cout << 1 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "cout << 1 << endl ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "cout << 0 << endl ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [0][0]’)"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 1 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        8
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 1 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 0 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cout << 1 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cout << 1 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cout << 1 << endl ;",
        "cout << 0 << endl ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cout << 1 << endl ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "cout << 0 << endl ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char ch [ 2 ] [ 0 ] [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::getline(char [0][0], int)’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 1 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        8
      ],
      "mod_code": [
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 1 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "cin >> ch [ 0 ] >> ch [ 0 ] ;",
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 0 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 1 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 1 << endl ;",
        "cout << 0 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "if ( ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 && ch [ 0 ] [ i ] == 1 && ch [ 1 ] [ i ] == 1 ) { same ++ ; }",
        "cout << 0 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘same’ was not declared in this scope"
    }
  ]
}