{
  "meta": {
    "index": 2179,
    "hitid": "33KMQD9OFJ8XBRZIX2LULM7C1V577P",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "540A",
    "subid": "48167508"
  },
  "lines": [
    {
      "line": 0,
      "text": "create ints n , ori , pas , temp , and step",
      "code": "int n , ori , pas , temp , step ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make strings originalState and passCode",
      "code": "string originalState , passCode ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n , originalState , and passCode",
      "code": "cin >> n >> originalState >> passCode ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set n to 0",
      "code": "n = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to originalState . length ( ) exclusive",
      "code": "for ( int i = 0 ; i < originalState . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set ori to originalState [ i ] - ' 0 '",
      "code": "ori = originalState [ i ] - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set pas to passCode [ i ] - ' 0 '",
      "code": "pas = passCode [ i ] - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set temp to pas",
      "code": "temp = pas ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set temp to 0",
      "code": "step = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "while temp is not equal to ori",
      "code": "while ( temp != ori )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment step",
      "code": "step ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "add 1 to temp",
      "code": "temp ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if temp is equal to 10 , set temp to 0",
      "code": "if ( temp == 10 ) { temp = 0 ; }",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if step is greater than 5",
      "code": "if ( step > 5 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set temp to pas",
      "code": "temp = pas ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "set step to 0",
      "code": "step = 0 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "while temp is not ori",
      "code": "while ( temp != ori )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "increment step",
      "code": "step ++ ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "subtract 1 from temp",
      "code": "temp -- ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "if temp is equal to - 1 , set temp to 9",
      "code": "if ( temp == - 1 ) { temp = 9 ; }",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "set n to n + step",
      "code": "n += step ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print n",
      "code": "cout << n << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , ori , pas , temp , temp ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int temp’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        16
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        16,
        22
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        16,
        1
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        16,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "while ( ! temp )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        22
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        22,
        1
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "break break ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        22,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "break break ;",
        "while ( ! temp )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        1,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        5,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "while ( ! temp )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16,
        22
      ],
      "mod_code": [
        "temp = 0 ;",
        "int step = 0 ;",
        "break break ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        16,
        22,
        1
      ],
      "mod_code": [
        "temp = 0 ;",
        "int step = 0 ;",
        "break break ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        16,
        22,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "int step = 0 ;",
        "break break ;",
        "while ( ! temp )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        16,
        1
      ],
      "mod_code": [
        "temp = 0 ;",
        "int step = 0 ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        16,
        1,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "int step = 0 ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "temp = 0 ;",
        "break break ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        22,
        1
      ],
      "mod_code": [
        "temp = 0 ;",
        "break break ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        22,
        1,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "break break ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        22,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "break break ;",
        "while ( ! temp )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "temp = 0 ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        9,
        1,
        17
      ],
      "mod_code": [
        "temp = 0 ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        22,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "break break ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        16,
        22,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "break break ;",
        "while ( ! temp )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        16,
        1,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        16,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "int step = 0 ;",
        "while ( ! temp )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        22,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "break break ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        22,
        1,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "break break ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        22,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "break break ;",
        "while ( ! temp )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        1,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < originalState . length ( ) ; i ++ )",
        "while ( ! temp )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "int step = 0 ;",
        "break break ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        22,
        1
      ],
      "mod_code": [
        "int step = 0 ;",
        "break break ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        16,
        22,
        1,
        17
      ],
      "mod_code": [
        "int step = 0 ;",
        "break break ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        16,
        22,
        17
      ],
      "mod_code": [
        "int step = 0 ;",
        "break break ;",
        "while ( ! temp )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "int step = 0 ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        16,
        1,
        17
      ],
      "mod_code": [
        "int step = 0 ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        22,
        1
      ],
      "mod_code": [
        "break break ;",
        "strings = originalState >> passCode ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        22,
        1,
        17
      ],
      "mod_code": [
        "break break ;",
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        22,
        17
      ],
      "mod_code": [
        "break break ;",
        "while ( ! temp )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "strings = originalState >> passCode ;",
        "while ( ! temp )"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ does not name a type"
    }
  ]
}