{
  "meta": {
    "index": 1678,
    "hitid": "39XCQ6V3KYYZKN7UQZ15HOTKECB56P",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "48861942"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers n , k , ans , create integer array book with size 1010",
      "code": "int n , k , ans , book [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array is_p with size 1010",
      "code": "int is_p [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer vector p",
      "code": "vector < int > p ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare inline prime with integer a as argument , returning void",
      "code": "inline void prime ( int a )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive , set is_p [ i ] to 1",
      "code": "for ( int i = 1 ; i <= n ; ++ i ) is_p [ i ] = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set is_p [ 0 ] to 0",
      "code": "is_p [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set is_p [ 1 ] to 0",
      "code": "is_p [ 1 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if is_p [ i ] is true",
      "code": "if ( is_p [ i ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "add element i to end of p",
      "code": "p . push_back ( i ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "for j = i + 1 to n inclusive , incrementing j by i , set is_p [ j ] to 0",
      "code": "for ( int j = i + i ; j <= n ; j += i ) is_p [ j ] = 0 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "run prime with n as argument",
      "code": "prime ( n ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to size of p",
      "code": "for ( int i = 0 ; i < p . size ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if p [ i ] + p [ i + 1 ] + 1 is less than or equal to n",
      "code": "if ( p [ i ] + p [ i + 1 ] + 1 <= n )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if is_p [ p [ i ] + p [ i + 1 ] + 1 ] is true , set book [ p [ i ] + p [ i + 1 ] + 1 ] to 1",
      "code": "if ( is_p [ p [ i ] + p [ i + 1 ] + 1 ] ) book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if book [ i ] is true , increment ans",
      "code": "if ( book [ i ] ) ans ++ ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if ans is greater than or equal to k",
      "code": "if ( ans >= k )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "inline void prime ( void a )"
      ],
      "err_line": 3,
      "err_msg": "invalid use of type ‘void’ in parameter declaration"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "p . push ( i ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < p . size ( ) ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        19,
        7
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        19,
        7,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        19,
        7,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        19,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        19,
        1,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        19,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        1,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) { is_p [ j ] = 0 ; }",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        19,
        7
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        7,
        10
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        7,
        10,
        1
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        7,
        10,
        21
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        7,
        1
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        7,
        1,
        21
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        7,
        21
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( i = 2 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        10
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        19,
        10,
        1
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        10,
        1,
        21
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        10,
        21
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        1,
        21
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "if ( is_p [ p [ i ] ] + p [ i + 1 ] + 1 ] ) { book [ p [ i ] + p [ i + 1 ] + 1 ] = 1 ; }",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        1
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        1,
        21
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        21
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1,
        21
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "int * is_p [ 1010 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= n ; j += i ) is_p [ j ] = 0 ;",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int * is_p [ 1010 ] ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    }
  ]
}