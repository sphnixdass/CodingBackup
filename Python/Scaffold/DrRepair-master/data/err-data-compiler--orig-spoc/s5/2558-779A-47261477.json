{
  "meta": {
    "index": 2558,
    "hitid": "3Z33IC0JC0G300O7UXMU5WELI339VY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "779A",
    "subid": "47261477"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , a , b and has are integers with has = 0 , arra and arrb are arrays with size 105",
      "code": "int n , a , b , arra [ 105 ] , arrb [ 105 ] , has = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set first sizeof ( arra ) bytes at the pointer arra to 0",
      "code": "memset ( arra , 0 , sizeof ( arra ) ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "change the values of first sizeof ( arrb ) bytes at the pointer arrb to 0",
      "code": "memset ( arrb , 0 , sizeof ( arrb ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n from the user input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for x from 1 to n inclusive incrementing x",
      "code": "for ( int x = 1 ; x <= n ; x ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read variable a from the input",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment arra [ a ] by one",
      "code": "arra [ a ] ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for x = 1 to n inclusive",
      "code": "for ( int x = 1 ; x <= n ; x ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read user input to b",
      "code": "cin >> b ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment arrb [ b ]",
      "code": "arrb [ b ] ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for x from 1 to 5 inclusive",
      "code": "for ( int x = 1 ; x <= 5 ; x ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if absolute value of ( arra [ x ] - arrb [ x ] ) is odd",
      "code": "if ( abs ( arra [ x ] - arrb [ x ] ) % 2 == 1 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" - 1 \" to the standard output",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "assign the new value = has + ( abs ( arra [ x ] - arrb [ x ] ) / 2 ) to has",
      "code": "has = has + ( abs ( arra [ x ] - arrb [ x ] ) / 2 ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set has to has divided by 2",
      "code": "has /= 2 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print has to the standard output",
      "code": "cout << has << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "memset ( arra ) , sizeof ( arra ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "memset ( arrb , 0 ) , sizeof ( arrb ) ;"
      ],
      "err_line": 3,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( x = 1 ; x <= n ; x ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "{ cin >> a ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "arra [ a ] += one ;"
      ],
      "err_line": 7,
      "err_msg": "‘one’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( x = 1 ; x <= n ; x ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘x’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( x = 1 ; x <= 5 ; x ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘x’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int has = has / 2 ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int has’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << has ( ) << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘has’ cannot be used as a function"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "int has = has / 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        14
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        14,
        18
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        14,
        21
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        18
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "int has = has / 2 ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        18,
        21
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "int has = has / 2 ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        20,
        21
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "int has = has / 2 ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14,
        18
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14,
        18,
        21
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14,
        21
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        21
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int n , a [ 105 ] , b [ 105 ] , arrb [ 105 ] ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘arra’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        14
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        20,
        14,
        18
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        20,
        14,
        18,
        21
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        20,
        14,
        18,
        1
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        20,
        14,
        21
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        20,
        14,
        21,
        1
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "cout << has ( ) << endl ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        20,
        14,
        1
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        20,
        18
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int has’"
    },
    {
      "mod_line": [
        20,
        18,
        21
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int has’"
    },
    {
      "mod_line": [
        20,
        18,
        21,
        1
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        20,
        18,
        1
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int has’"
    },
    {
      "mod_line": [
        20,
        21,
        1
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "cout << has ( ) << endl ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        20,
        1
      ],
      "mod_code": [
        "int has = has / 2 ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        18,
        21
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        18,
        21,
        1
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        14,
        18,
        1
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int [105]’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        14,
        21,
        1
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "cout << has ( ) << endl ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "if ( abs ( arra [ x ] - arrb [ x ] ) % arrb )",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        18,
        21
      ],
      "mod_code": [
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘has’ cannot be used as a function"
    },
    {
      "mod_line": [
        18,
        21,
        1
      ],
      "mod_code": [
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "cout << has ( ) << endl ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        18,
        1
      ],
      "mod_code": [
        "has = has + ( abs ( arra [ x ] - arrb [ x ] ) ) ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    },
    {
      "mod_line": [
        21,
        1
      ],
      "mod_code": [
        "cout << has ( ) << endl ;",
        "int n , a [ 105 ] , b [ 105 ] , b [ 105 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [105]’"
    }
  ]
}