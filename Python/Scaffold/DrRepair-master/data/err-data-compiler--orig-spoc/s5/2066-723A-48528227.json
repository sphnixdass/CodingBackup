{
  "meta": {
    "index": 2066,
    "hitid": "306996CF6WE62HN6L3G1PE2VHZWB1I",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "723A",
    "subid": "48528227"
  },
  "lines": [
    {
      "line": 0,
      "text": "x1 , x2 , x3 , m = integers",
      "code": "int x1 , x2 , x3 , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = integer array of size 105 with s = { }",
      "code": "int s [ 105 ] = { } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read x1 , x2 , x3",
      "code": "cin >> x1 >> x2 >> x3 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if ( x1 > x2 )",
      "code": "if ( x1 > x2 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "m = x2",
      "code": "m = x2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "x2 = x1",
      "code": "x2 = x1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "x1 = m",
      "code": "x1 = m ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ( x1 > x3 )",
      "code": "if ( x1 > x3 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "m = x3",
      "code": "m = x3 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "x3 = x1",
      "code": "x3 = x1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "x1 = m",
      "code": "x1 = m ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ( x2 > x3 )",
      "code": "if ( x2 > x3 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "m = x3",
      "code": "m = x3 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "x3 = x2",
      "code": "x3 = x2 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "x2 = m",
      "code": "x2 = m ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "i = integer",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = x1 to x3 , s [ i ] = abs ( i - x1 ) + abs ( i - x2 ) + abs ( i - x3 )",
      "code": "for ( i = x1 ; i <= x3 ; i ++ ) { s [ i ] = abs ( i - x1 ) + abs ( i - x2 ) + abs ( i - x3 ) ; }",
      "indent": 1
    },
    {
      "line": 21,
      "text": "sort s + x1 and s + x3 + 1",
      "code": "sort ( s + x1 , s + x3 + 1 ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print s [ x1 ]",
      "code": "cout << s [ x1 ] << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        12,
        22,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "int x1 = m ;",
        "cout << s [ x1 ] ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        12,
        6,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "int x1 = m ;",
        "int x2 = x1 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        12,
        7,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "int x1 = m ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        12,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        22,
        6,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "cout << s [ x1 ] ;",
        "int x2 = x1 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        22,
        7,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "cout << s [ x1 ] ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        22,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "cout << s [ x1 ] ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        6,
        7,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "int x2 = x1 ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        6,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "int x2 = x1 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        7,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        14
      ],
      "mod_code": [
        "int x3 = x2 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        22,
        6,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "cout << s [ x1 ] ;",
        "int x2 = x1 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        22,
        7,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "cout << s [ x1 ] ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        22,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "cout << s [ x1 ] ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        6,
        7,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "int x2 = x1 ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        6,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "int x2 = x1 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        7,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        6,
        7,
        14
      ],
      "mod_code": [
        "cout << s [ x1 ] ;",
        "int x2 = x1 ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        6,
        14
      ],
      "mod_code": [
        "cout << s [ x1 ] ;",
        "int x2 = x1 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        7,
        14
      ],
      "mod_code": [
        "cout << s [ x1 ] ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "cout << s [ x1 ] ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7,
        14
      ],
      "mod_code": [
        "int x2 = x1 ;",
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "int x2 = x1 ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "int x1 = m ;",
        "if ( x2 > x3 ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}