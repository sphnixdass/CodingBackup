{
  "meta": {
    "index": 945,
    "hitid": "32L724R85LEJ6HKECFJ8CXO6EIOIPT",
    "workerid": "A1AYVATMT88U1W",
    "probid": "119A",
    "subid": "48287177"
  },
  "lines": [
    {
      "line": 0,
      "text": "let gcd be a function which accepts integers x and y and returns integer values accordingly",
      "code": "int gcd ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if ( y is equal to 0 ) , return the value of x",
      "code": "if ( y == 0 ) return x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return the value of gcd ( y , x modulus y )",
      "code": "return gcd ( y , x % y ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let a , b , n , c be integers with c is equal to 0",
      "code": "int a , b , n , c = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a , b , n",
      "code": "cin >> a >> b >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for ( integer i is equal to 0 , n is greater than 0 , increase the value of i by 1 )",
      "code": "for ( int i = 0 ; n > 0 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if ( i modulus 2 is equal to 0 )",
      "code": "if ( i % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "the value of n is equal to ( n - gcd ( a , n ) )",
      "code": "n -= gcd ( a , n ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "the value of c is equal to 0",
      "code": "c = 0 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if ( i modulus 2 is not equal to 0 )",
      "code": "else if ( i % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "the value of n is equal to ( n - gcd ( b , n ) )",
      "code": "n -= gcd ( b , n ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "the value of c is equal to 1",
      "code": "c = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print c and newline",
      "code": "cout << c << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "int c = 0 ;",
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        13
      ],
      "mod_code": [
        "int c = 0 ;",
        "int gcd ( int x , int y ) ;",
        "int c = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        13,
        8
      ],
      "mod_code": [
        "int c = 0 ;",
        "int gcd ( int x , int y ) ;",
        "int c = 1 ;",
        "if ( i % 2 == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        13,
        2
      ],
      "mod_code": [
        "int c = 0 ;",
        "int gcd ( int x , int y ) ;",
        "int c = 1 ;",
        "return ( y , x % y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        8
      ],
      "mod_code": [
        "int c = 0 ;",
        "int gcd ( int x , int y ) ;",
        "if ( i % 2 == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        8,
        2
      ],
      "mod_code": [
        "int c = 0 ;",
        "int gcd ( int x , int y ) ;",
        "if ( i % 2 == ' 0 ' )",
        "return ( y , x % y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        2
      ],
      "mod_code": [
        "int c = 0 ;",
        "int gcd ( int x , int y ) ;",
        "return ( y , x % y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int c = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int c = 1 ;",
        "if ( i % 2 == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        8,
        2
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int c = 1 ;",
        "if ( i % 2 == ' 0 ' )",
        "return ( y , x % y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        2
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int c = 1 ;",
        "return ( y , x % y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "if ( i % 2 == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        2
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "if ( i % 2 == ' 0 ' )",
        "return ( y , x % y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "return ( y , x % y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}