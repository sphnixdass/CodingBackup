{
  "meta": {
    "index": 2234,
    "hitid": "3UQ1LLR26A2E9EMI8ZYOEIR3WL1AL8",
    "workerid": "A1APYLD4DUK33J",
    "probid": "6A",
    "subid": "48598356"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array a with size 100",
      "code": "int a [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers i , j , k",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 4 exclusive , read a [ i ]",
      "code": "for ( i = 0 ; i < 4 ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer mark with mark = 0",
      "code": "int mark = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 4 exclusive",
      "code": "for ( i = 0 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to 4 exclusive",
      "code": "for ( j = 0 ; j < 4 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j is not i",
      "code": "if ( j != i )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for k = 0 to 4 exclusive",
      "code": "for ( k = 0 ; k < 4 ; k ++ )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "if k is not i and k is not j",
      "code": "if ( k != i && k != j )",
      "indent": 5
    },
    {
      "line": 10,
      "text": "if a [ i ] is less than a [ j ] + a [ k ] and a [ i ] is greater than integer casted result of run fabs with arguments a [ j ] - a [ k ]",
      "code": "if ( ( a [ i ] < a [ j ] + a [ k ] ) && ( a [ i ] > ( int ) fabs ( ( a [ j ] - a [ k ] ) ) ) )",
      "indent": 6
    },
    {
      "line": 11,
      "text": "set mark to 2",
      "code": "mark = 2 ;",
      "indent": 7
    },
    {
      "line": 12,
      "text": "break loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 13,
      "text": "else if a [ i ] is a [ j ] + a [ k ]",
      "code": "else if ( a [ i ] == a [ j ] + a [ k ] )",
      "indent": 6
    },
    {
      "line": 14,
      "text": "set mark to 1",
      "code": "mark = 1 ;",
      "indent": 7
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "if mark is 2 , break loop",
      "code": "if ( mark == 2 ) break ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if mark is 2 , break loop",
      "code": "if ( mark == 2 ) break ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if mark is 0",
      "code": "if ( mark == 0 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" IMPOSSIBLE \\ n \"",
      "code": "cout << \" IMPOSSIBLE\\n \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else if mark is 1",
      "code": "else if ( mark == 1 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" SEGMENT \\ n \"",
      "code": "cout << \" SEGMENT\\n \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else if mark is 2",
      "code": "else if ( mark == 2 )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" TRIANGLE \\ n \"",
      "code": "cout << \" TRIANGLE\\n \" ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int * a [ 100 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "else if ( mark == l )"
      ],
      "err_line": 25,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        24,
        26,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        24,
        28,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        24,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        26,
        28,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        26,
        24,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "cout << \" 1\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        26,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        28,
        24,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "cout << \" 1\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        28,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        24,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "cout << \" 1\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        7,
        27
      ],
      "mod_code": [
        "for ( ; j != i ; j ++ )",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        24,
        26,
        28,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        24,
        26,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        24,
        28,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        24,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        26,
        28,
        24,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "cout << \" 1\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        26,
        28,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        26,
        24,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" 1\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        26,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        28,
        24,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "cout << \" 1\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        28,
        27
      ],
      "mod_code": [
        "cout << \" A\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    },
    {
      "mod_line": [
        24,
        27
      ],
      "mod_code": [
        "cout << \" 1\\n \" ;",
        "else if mark mark == 2 )"
      ],
      "err_line": 27,
      "err_msg": "expected ‘(’ before ‘mark’"
    }
  ]
}