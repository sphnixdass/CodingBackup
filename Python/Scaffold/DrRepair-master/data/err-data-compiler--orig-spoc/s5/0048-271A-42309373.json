{
  "meta": {
    "index": 48,
    "hitid": "3G3AJKPCXLMJ7OD0IDDNVN7ZESR4Y6",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "271A",
    "subid": "42309373"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = n + 1 to 9999",
      "code": "for ( int i = n + 1 ; i <= 9999 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "make integer a = i % 10",
      "code": "int a = i % 10 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "create int b = ( i - a ) / 10 % 10",
      "code": "int b = ( i - a ) / 10 % 10 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "make int c = i / 100 % 100",
      "code": "int c = i / 100 % 10 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "let int d = i / 1000",
      "code": "int d = i / 1000 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a is not b , a is not c , a is not d , b is not c , b is not d , and c is not d",
      "code": "if ( a != b && a != c && a != d && b != c && b != d && c != d )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print i",
      "code": "cout << i << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = n + 1 ; i < 9999 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int * d = i / 1000 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "int c = i / 100 % 100 ;",
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int * d = i / 1000 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        7,
        5
      ],
      "mod_code": [
        "int c = i / 100 % 100 ;",
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "int c = i / 100 % 100 ;",
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int * d = i / 1000 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        7,
        5
      ],
      "mod_code": [
        "int c = i / 100 % 100 ;",
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "int c = i / 100 % 100 ;",
        "int * d = i / 1000 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "int c = i / 100 % 100 ;",
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int * d = i / 1000 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        5
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        5,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int * d = i / 1000 ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int b = ( i - a ) / ( 10 % 10 ) ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d || b != d && b != d )",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int * d = i / 1000 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        5
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        5,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int * d = i / 1000 ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int b = ( i - a ) / ( 10 % 10 ) ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "if ( a != b && a != c && a != d && b != d && c != d )",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "int * d = i / 1000 ;",
        "int b = ( i - a ) / ( 10 % 10 ) ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "int * d = i / 1000 ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "int b = ( i - a ) / ( 10 % 10 ) ;",
        "int * c = i / 100 % 100 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    }
  ]
}