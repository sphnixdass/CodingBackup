{
  "meta": {
    "index": 1786,
    "hitid": "3M4KL7H8KVH0W56BPCZTEYG33YK16M",
    "workerid": "AIWEXPJAU66D9",
    "probid": "87A",
    "subid": "16846946"
  },
  "lines": [
    {
      "line": 0,
      "text": "empty definition of the long long function nod with 2 int arguments",
      "code": "long long nod ( int , int ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "empty definition of the long long function nok with 2 int arguments",
      "code": "long long nok ( int , int ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare integers a , b , c and d",
      "code": "int a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read from the input to a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a is less than b",
      "code": "if ( a < b )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "assign the new value = nok ( a , b ) / a - 1 to c",
      "code": "c = nok ( a , b ) / a - 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "change the value of d to nok ( a , b ) / b",
      "code": "d = nok ( a , b ) / b ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "change the value of d to nok ( a , b ) / b - 1",
      "code": "d = nok ( a , b ) / b - 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set c to nok ( a , b ) / a",
      "code": "c = nok ( a , b ) / a ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if c is greater than d",
      "code": "if ( c > d )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" Dasha \"",
      "code": "cout << \" Dasha \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if c is less than d",
      "code": "if ( c < d )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print \" Masha \" to the standard output",
      "code": "cout << \" Masha \" << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" Equal \" to the standard output",
      "code": "cout << \" Equal \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "nod is a long long function with int arguments a and b",
      "code": "long long nod ( int a , int b )",
      "indent": 0
    },
    {
      "line": 22,
      "text": "while b is not 0",
      "code": "while ( b )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "change a to the remainder of a divided by b",
      "code": "a %= b ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "swap a and b",
      "code": "swap ( a , b ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "return a",
      "code": "return a ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 28,
      "text": "function nok with int arguments x and y that returns long long",
      "code": "long long nok ( int x , int y )",
      "indent": 0
    },
    {
      "line": 29,
      "text": "return x / result of nod ( x , y ) * y",
      "code": "return ( x / nod ( x , y ) * y ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long nod [ 2 ] ;"
      ],
      "err_line": 21,
      "err_msg": "‘long long int nod(int, int)’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long nok ( int 2 . empty ( ) )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int a , b ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "* d = nok ( a , b ) / b ;"
      ],
      "err_line": 7,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "long long nod [ a ] ;"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "swap ( a and b ) ;"
      ],
      "err_line": 24,
      "err_msg": "no matching function for call to ‘swap(bool)’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "long long nok ( int x , int y ) ;"
      ],
      "err_line": 29,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "return x / nod * nod ( x , y ) * y ;"
      ],
      "err_line": 29,
      "err_msg": "invalid operands of types ‘int’ and ‘long long int(int, int)’ to binary ‘operator/’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nok ( int 2 [ ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        1,
        21
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        1,
        21,
        13
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        1,
        21,
        15
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "if ( c <= d )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        1,
        13
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nok ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        1,
        13,
        15
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nok ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;",
        "if ( c <= d )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        1,
        15
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nok ( int 2 [ ] ) ;",
        "if ( c <= d )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nod [ a ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        21,
        13
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        21,
        13,
        15
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;",
        "if ( c <= d )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        21,
        15
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "if ( c <= d )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        13,
        15
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;",
        "if ( c <= d )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "long long nod ( int 2 [ ] ) ;",
        "if ( c <= d )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        21,
        13
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        21,
        13,
        0
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;",
        "long long nod [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        21,
        13,
        15
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;",
        "if ( c <= d )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        21,
        0
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "long long nod [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        21,
        0,
        15
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "long long nod [ 2 ] ;",
        "if ( c <= d )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        21,
        15
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ a ] ;",
        "if ( c <= d )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        13,
        0
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;",
        "long long nod [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        13,
        0,
        15
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;",
        "long long nod [ 2 ] ;",
        "if ( c <= d )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "cout << \" Dasha \" ;",
        "if ( c <= d )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        0,
        15
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "long long nod [ 2 ] ;",
        "if ( c <= d )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "long long nok ( int 2 [ ] ) ;",
        "if ( c <= d )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        21,
        13
      ],
      "mod_code": [
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        13,
        0
      ],
      "mod_code": [
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;",
        "long long nod [ 2 ] ;"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        13,
        0,
        15
      ],
      "mod_code": [
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;",
        "long long nod [ 2 ] ;",
        "if ( c <= d )"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        13,
        15
      ],
      "mod_code": [
        "long long nod [ a ] ;",
        "cout << \" Dasha \" ;",
        "if ( c <= d )"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        0
      ],
      "mod_code": [
        "long long nod [ a ] ;",
        "long long nod [ 2 ] ;"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        0,
        15
      ],
      "mod_code": [
        "long long nod [ a ] ;",
        "long long nod [ 2 ] ;",
        "if ( c <= d )"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        15
      ],
      "mod_code": [
        "long long nod [ a ] ;",
        "if ( c <= d )"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "cout << \" Dasha \" ;",
        "long long nod [ 2 ] ;"
      ],
      "err_line": 21,
      "err_msg": "‘long long int nod(int, int)’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        13,
        0,
        15
      ],
      "mod_code": [
        "cout << \" Dasha \" ;",
        "long long nod [ 2 ] ;",
        "if ( c <= d )"
      ],
      "err_line": 21,
      "err_msg": "‘long long int nod(int, int)’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "long long nod [ 2 ] ;",
        "if ( c <= d )"
      ],
      "err_line": 21,
      "err_msg": "‘long long int nod(int, int)’ redeclared as different kind of symbol"
    }
  ]
}