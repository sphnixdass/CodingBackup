{
  "meta": {
    "index": 1619,
    "hitid": "3JYPJ2TAYI2ZWQIOB7DN90BEYBEPFX",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "47104315"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare prime with integer n as argument , returning boolean",
      "code": "bool prime ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer m with m = ( square root of n ) + 1",
      "code": "int m = sqrt ( n ) + 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer flag with flag = 1",
      "code": "int flag = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 2 to m exclusive",
      "code": "for ( int i = 2 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n % i is 0",
      "code": "if ( n % i == 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return false from function",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "create integers n , k , i , tmp , ans , count with tmp = 1 , ans = 0",
      "code": "int n , k , i , tmp = 1 , ans = 0 , count ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "create integer set ju",
      "code": "set < int > ju ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "while read n read k is true",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set ans to 0",
      "code": "ans = 0 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set tmp to 1",
      "code": "tmp = 1 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set count to 0",
      "code": "count = 0 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "for i = 3 to n exclusive",
      "code": "for ( i = 3 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if result of run prime with i as argument , insert i into ju",
      "code": "if ( prime ( i ) ) { ju . insert ( i ) ; }",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "create integer set iterator it",
      "code": "set < int > :: iterator it ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "for it = beginning of ju to it is not end of ju , incrementing it",
      "code": "for ( it = ju . begin ( ) ; it != ju . end ( ) ; it ++ )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "increment tmp by value of it",
      "code": "tmp += * it ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "if count is greater than or equal to 2",
      "code": "if ( count >= 2 )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "decrement it",
      "code": "it -- ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "decrement it",
      "code": "it -- ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "decrement tmp by value of it",
      "code": "tmp -= * it ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "if result of run prime with tmp as argument and tmp is less than or equal to n , increment ans",
      "code": "if ( prime ( tmp ) && tmp <= n ) { ans ++ ; }",
      "indent": 3
    },
    {
      "line": 34,
      "text": "if count is greater than or equal to 2",
      "code": "if ( count >= 2 )",
      "indent": 3
    },
    {
      "line": 35,
      "text": "increment it",
      "code": "it ++ ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "increment it",
      "code": "it ++ ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 38,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 40,
      "text": "if ans is greater than or equal to k",
      "code": "if ( ans >= k )",
      "indent": 2
    },
    {
      "line": 41,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 43,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool prime ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘bool’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "continue ;"
      ],
      "err_line": 10,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with no value, in function returning ‘bool’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int n , k , i , tmp = 0 , ans = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "vector < int > ju ;"
      ],
      "err_line": 23,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "while ( { cin >> n >> k )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "set < int > :: iterator itr ;"
      ],
      "err_line": 26,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "tmp += it ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "tmp -= * 1 ;"
      ],
      "err_line": 31,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        26,
        27
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        26,
        27,
        3
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        27,
        3,
        28
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        27,
        3,
        31
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "tmp -= * 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        27,
        3,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        27,
        28
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "if ( count > 2 )"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        26,
        27,
        28,
        31
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "if ( count > 2 )",
        "tmp -= * 1 ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        26,
        27,
        28,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "if ( count > 2 )",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        27,
        31
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "tmp -= * 1 ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        26,
        27,
        31,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        27,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp += it ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        3
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "for ( i = 2 ; i < m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        3,
        28
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        3,
        28,
        31
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )",
        "tmp -= * 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        3,
        28,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        3,
        31
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "for ( i = 2 ; i < m ; i ++ )",
        "tmp -= * 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        3,
        31,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "for ( i = 2 ; i < m ; i ++ )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        3,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "for ( i = 2 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        28,
        31
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "if ( count > 2 )",
        "tmp -= * 1 ;"
      ],
      "err_line": 31,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        26,
        28,
        31,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "if ( count > 2 )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        28,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "if ( count > 2 )",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        31
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp -= * 1 ;"
      ],
      "err_line": 31,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        26,
        31,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        6
      ],
      "mod_code": [
        "for ( it = it ; it != ju . end ( ) ; it ++ )",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27,
        3
      ],
      "mod_code": [
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        3,
        28
      ],
      "mod_code": [
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        3,
        28,
        31
      ],
      "mod_code": [
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )",
        "tmp -= * 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        3,
        28,
        6
      ],
      "mod_code": [
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        3,
        31
      ],
      "mod_code": [
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "tmp -= * 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        3,
        31,
        6
      ],
      "mod_code": [
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        3,
        6
      ],
      "mod_code": [
        "tmp += it ;",
        "for ( i = 2 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28
      ],
      "mod_code": [
        "tmp += it ;",
        "if ( count > 2 )"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        27,
        28,
        31
      ],
      "mod_code": [
        "tmp += it ;",
        "if ( count > 2 )",
        "tmp -= * 1 ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        27,
        28,
        31,
        6
      ],
      "mod_code": [
        "tmp += it ;",
        "if ( count > 2 )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27,
        28,
        6
      ],
      "mod_code": [
        "tmp += it ;",
        "if ( count > 2 )",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27,
        31
      ],
      "mod_code": [
        "tmp += it ;",
        "tmp -= * 1 ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’)"
    },
    {
      "mod_line": [
        27,
        31,
        6
      ],
      "mod_code": [
        "tmp += it ;",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27,
        6
      ],
      "mod_code": [
        "tmp += it ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        28
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        28,
        31
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )",
        "tmp -= * 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        28,
        31,
        6
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        28,
        6
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )",
        "if ( count > 2 )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        31
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )",
        "tmp -= * 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        31,
        6
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "for ( i = 2 ; i < m ; i ++ )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        31
      ],
      "mod_code": [
        "if ( count > 2 )",
        "tmp -= * 1 ;"
      ],
      "err_line": 31,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        28,
        31,
        6
      ],
      "mod_code": [
        "if ( count > 2 )",
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        6
      ],
      "mod_code": [
        "if ( count > 2 )",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        31,
        6
      ],
      "mod_code": [
        "tmp -= * 1 ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}