{
  "meta": {
    "index": 942,
    "hitid": "3ZVPAMTJWNXQM3UYZJNUWGB51AGGRY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "106A",
    "subid": "47501055"
  },
  "lines": [
    {
      "line": 0,
      "text": "LoL is a int function with char argument r",
      "code": "int LoL ( char r )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if r = ' 6 '",
      "code": "if ( r == ' 6 ' )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else if r is equal to ' 7 '",
      "code": "else if ( r == ' 7 ' )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return 2",
      "code": "return 2 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if r is equal to ' 8 '",
      "code": "else if ( r == ' 8 ' )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return 3",
      "code": "return 3 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if r is equal to ' 9 '",
      "code": "else if ( r == ' 9 ' )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return 4",
      "code": "return 4 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if r = ' T '",
      "code": "else if ( r == ' T ' )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return 6",
      "code": "return 6 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if r is equal to ' J '",
      "code": "else if ( r == ' J ' )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return 7",
      "code": "return 7 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if r is equal to ' Q '",
      "code": "else if ( r == ' Q ' )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "return 8",
      "code": "return 8 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if r = ' K '",
      "code": "else if ( r == ' K ' )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return 9",
      "code": "return 9 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if r is equal to ' A '",
      "code": "else if ( r == ' A ' )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return 10",
      "code": "return 10 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "declare new character a",
      "code": "char a ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "declare strings s1 and s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "declare new integer variables p and q",
      "code": "int p , q ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "read s1 and s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "declare new boolean variable ans",
      "code": "bool ans ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "assign the result of LoL ( s1 [ 0 ] ) to p",
      "code": "p = LoL ( s1 [ 0 ] ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "assign the new value = LoL ( s2 [ 0 ] ) to q",
      "code": "q = LoL ( s2 [ 0 ] ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if s1 [ 1 ] = a and s2 [ 1 ] ! = a",
      "code": "if ( s1 [ 1 ] == a && s2 [ 1 ] != a )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "set ans to true",
      "code": "ans = true ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else if s1 [ 1 ] ! = s2 [ 1 ]",
      "code": "else if ( s1 [ 1 ] != s2 [ 1 ] )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "change ans to false",
      "code": "ans = false ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 35,
      "text": "if p is greater than q",
      "code": "if ( p > q )",
      "indent": 2
    },
    {
      "line": 36,
      "text": "set ans to true",
      "code": "ans = true ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 38,
      "text": "change ans to false",
      "code": "ans = false ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "if ans is true",
      "code": "if ( ans == true )",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print \" YES \" and ' \\ n '",
      "code": "cout << \" YES \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print \" NO \" and ' \\ n ' to the standard output",
      "code": "cout << \" NO \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int LoL ( char r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( r == ' 6 ' ) break ;"
      ],
      "err_line": 1,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "else if ( r is ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( r == ' T ' ) r ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( r is ' J ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( r is ' Q ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( r is ' A ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "char a [ 8 ] ;"
      ],
      "err_line": 30,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 23,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "string s1 declare s2 ;"
      ],
      "err_line": 24,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int p , p ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "cout << s1 >> s2 ;"
      ],
      "err_line": 26,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "bool ans ( )"
      ],
      "err_line": 28,
      "err_msg": "expected initializer before ‘p’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "int q = LoL ( s2 [ 0 ] ) ;"
      ],
      "err_line": 29,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "else if ( s1 [ 1 ] ] != s2 [ 1 ] )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        30,
        7
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        28
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        28,
        25
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        28,
        36
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "bool ans = true ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        28,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        25
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "int p , p ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        25,
        36
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "int p , p ;",
        "bool ans = true ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        25,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "int p , p ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        36
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "bool ans = true ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        36,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        7,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "else if ( r is ' 9 ' )",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        30,
        28
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "p assign LoL ( s1 [ 0 ] ) ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        30,
        28,
        25
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        30,
        28,
        25,
        36
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;",
        "bool ans = true ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        30,
        28,
        25,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        30,
        28,
        36
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "bool ans = true ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        30,
        28,
        36,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        30,
        28,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        30,
        25
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "int p , p ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        30,
        25,
        36
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "int p , p ;",
        "bool ans = true ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        30,
        25,
        36,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "int p , p ;",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        30,
        25,
        22
      ],
      "mod_code": [
        "if ( s1 [ 1 ] == ' a ' && s2 [ 1 ] != ' a ' )",
        "int p , p ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        28
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        28,
        25
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        28,
        25,
        36
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;",
        "bool ans = true ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        28,
        25,
        22
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        28,
        36
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "bool ans = true ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        28,
        36,
        22
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        28,
        22
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "p assign LoL ( s1 [ 0 ] ) ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        25
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "int p , p ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        25,
        36
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "int p , p ;",
        "bool ans = true ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        25,
        36,
        22
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "int p , p ;",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        25,
        22
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "int p , p ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        36
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "bool ans = true ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        36,
        22
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "else if ( r is ' 9 ' )",
        "char a [ 8 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        28,
        25
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        28,
        25,
        36
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;",
        "bool ans = true ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        28,
        25,
        36,
        22
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        28,
        25,
        22
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;",
        "int p , p ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        28,
        36
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;",
        "bool ans = true ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        28,
        36,
        22
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        28,
        22
      ],
      "mod_code": [
        "p assign LoL ( s1 [ 0 ] ) ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘assign’"
    },
    {
      "mod_line": [
        25,
        36
      ],
      "mod_code": [
        "int p , p ;",
        "bool ans = true ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        25,
        36,
        22
      ],
      "mod_code": [
        "int p , p ;",
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        25,
        22
      ],
      "mod_code": [
        "int p , p ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        36,
        22
      ],
      "mod_code": [
        "bool ans = true ;",
        "char a [ 8 ] ;"
      ],
      "err_line": 30,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}