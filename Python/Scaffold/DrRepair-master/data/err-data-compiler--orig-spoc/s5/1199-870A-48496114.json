{
  "meta": {
    "index": 1199,
    "hitid": "39HYCOOPKOFWD37FSLQ54WEYH85DMQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "870A",
    "subid": "48496114"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare min with integer array arr , integer l as arguments , returning integer",
      "code": "int min ( int arr [ ] , int l )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers i , min with min = 10",
      "code": "int i , min = 10 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to l exclusive",
      "code": "for ( i = 0 ; i < l ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if min is greater than arr [ i ] , set min to arr [ i ]",
      "code": "if ( min > arr [ i ] ) { min = arr [ i ] ; }",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return min from function",
      "code": "return min ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create integers n , m , i , min1 , min2 , c with c = 0",
      "code": "int n , m , i , min1 , min2 , c = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create integer array arr with size 10 , with arr = { 0 }",
      "code": "int arr [ 10 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create integer array a with size n",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create integer array b with size m",
      "code": "int b [ m ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment arr [ a [ i ] ]",
      "code": "arr [ a [ i ] ] ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read b [ i ]",
      "code": "cin >> b [ i ] ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment arr [ b [ i ] ]",
      "code": "arr [ b [ i ] ] ++ ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 1 to 10 exclusive",
      "code": "for ( i = 1 ; i < 10 ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if arr [ i ] is 2",
      "code": "if ( arr [ i ] == 2 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print i print newline",
      "code": "cout << i << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "set min1 to minimum of a and n",
      "code": "min1 = min ( a , n ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "set min2 to minimum of b and m",
      "code": "min2 = min ( b , m ) ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if c is 0",
      "code": "if ( c == 0 )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if min1 is less than min2",
      "code": "if ( min1 < min2 )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "print min1 * 10 + min2 print newline",
      "code": "cout << ( min1 * 10 + min2 ) << endl ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print min2 * 10 + min1 print newline",
      "code": "cout << ( min2 * 10 + min1 ) << endl ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return min ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘min’ cannot be used as a function"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cin >> n read m ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int * a [ n ] ;"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int * b [ m ] ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        9
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        28,
        9,
        29
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        28,
        9,
        29,
        25
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        28,
        9,
        29,
        22
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        28,
        9,
        29,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        9,
        25
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        28,
        9,
        25,
        22
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        28,
        9,
        25,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "break break ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        9,
        22
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        28,
        9,
        22,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        9,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int arr [ 10 ] , arr = { 0 } ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        29,
        25
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "min2 = min ( m , m ) ;",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        29,
        25,
        22
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "min2 = min ( m , m ) ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        29,
        25,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "min2 = min ( m , m ) ;",
        "break break ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        29,
        22,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "min2 = min ( m , m ) ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        29,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "min2 = min ( m , m ) ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        25
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        25,
        22
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        25,
        22,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        25,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "break break ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        22,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        28,
        0
      ],
      "mod_code": [
        "min1 = min ( n , n ) ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        29
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        29,
        25
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        29,
        25,
        22
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        29,
        25,
        0
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "break break ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        29,
        22
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        29,
        22,
        0
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        29,
        0
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "min2 = min ( m , m ) ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        25
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        25,
        22
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        25,
        22,
        0
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        25,
        0
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "break break ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int arr’"
    },
    {
      "mod_line": [
        9,
        22,
        0
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "int arr [ 10 ] , arr = { 0 } ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        29,
        25
      ],
      "mod_code": [
        "min2 = min ( m , m ) ;",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        22
      ],
      "mod_code": [
        "min2 = min ( m , m ) ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        22,
        0
      ],
      "mod_code": [
        "min2 = min ( m , m ) ;",
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        29,
        25,
        0
      ],
      "mod_code": [
        "min2 = min ( m , m ) ;",
        "break break ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        29,
        22,
        0
      ],
      "mod_code": [
        "min2 = min ( m , m ) ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        29,
        0
      ],
      "mod_code": [
        "min2 = min ( m , m ) ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        22
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        22,
        0
      ],
      "mod_code": [
        "break break ;",
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0
      ],
      "mod_code": [
        "break break ;",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        0
      ],
      "mod_code": [
        "if ( arr [ i ] == ' 2 ' )",
        "int min ( int arr [ ] , int l ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}