{
  "meta": {
    "index": 2569,
    "hitid": "3I7SHAD35MQGWU6518NJ4442VX1M75",
    "workerid": "AIWEXPJAU66D9",
    "probid": "154A",
    "subid": "42794489"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function Min with integer arguments a and b that returns integer",
      "code": "int Min ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a if a < b , else return b",
      "code": "return a < b ? a : b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare string variables str and a",
      "code": "string str , a ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer len = length of str",
      "code": "int len = str . size ( ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integer variable ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare integers x and y",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "decrement n in a loop while n > 0",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "x and y = 0",
      "code": "x = y = 0 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if str [ i ] = a [ 0 ] or str [ i ] = a [ 1 ]",
      "code": "if ( str [ i ] == a [ 0 ] || str [ i ] == a [ 1 ] )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "in the infinite loop",
      "code": "while ( 1 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "if str [ i ] = a [ 0 ]",
      "code": "if ( str [ i ] == a [ 0 ] )",
      "indent": 5
    },
    {
      "line": 18,
      "text": "increase x by one",
      "code": "x ++ ;",
      "indent": 6
    },
    {
      "line": 19,
      "text": "else if str [ i ] = a [ 1 ]",
      "code": "else if ( str [ i ] == a [ 1 ] )",
      "indent": 5
    },
    {
      "line": 20,
      "text": "increase y by one",
      "code": "y ++ ;",
      "indent": 6
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 22,
      "text": "break the loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 23,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "ans = ans + Min ( x , y )",
      "code": "ans = ans + Min ( x , y ) ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string a , a ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘len’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( str [ i ] == a [ ' 0 ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        12,
        19
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        12,
        19,
        0
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        19,
        15
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        12,
        19,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        12,
        0
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        0,
        15
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        0,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "void Min ( int a , int b )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        15
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        12,
        15,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        12,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "cin >> n ;",
        "break the ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "string a , a ;",
        "else if ( str [ i ] ] == a [ 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        19,
        0
      ],
      "mod_code": [
        "string a , a ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        19,
        0,
        15
      ],
      "mod_code": [
        "string a , a ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        19,
        0,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        19,
        15
      ],
      "mod_code": [
        "string a , a ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        19,
        15,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        19,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "string a , a ;",
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        0,
        15
      ],
      "mod_code": [
        "string a , a ;",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        0,
        15,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        0,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "void Min ( int a , int b )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "string a , a ;",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        15,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "string a , a ;",
        "break the ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘std::__cxx11::string a’"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        19,
        0
      ],
      "mod_code": [
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        0,
        15
      ],
      "mod_code": [
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        0,
        22
      ],
      "mod_code": [
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        15
      ],
      "mod_code": [
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12,
        19,
        15,
        22
      ],
      "mod_code": [
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12,
        19,
        22
      ],
      "mod_code": [
        "cin >> n ;",
        "else if ( str [ i ] ] == a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "cin >> n ;",
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        0,
        15
      ],
      "mod_code": [
        "cin >> n ;",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        0,
        15,
        22
      ],
      "mod_code": [
        "cin >> n ;",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        0,
        22
      ],
      "mod_code": [
        "cin >> n ;",
        "void Min ( int a , int b )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12,
        15,
        22
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        12,
        22
      ],
      "mod_code": [
        "cin >> n ;",
        "break the ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        19,
        0
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        0,
        15
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        0,
        15,
        22
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        0,
        22
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )",
        "void Min ( int a , int b )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        19,
        15,
        22
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "else if ( str [ i ] ] == a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        15,
        22
      ],
      "mod_code": [
        "void Min ( int a , int b )",
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "void Min ( int a , int b )",
        "break the ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        22
      ],
      "mod_code": [
        "if ( str [ i ] == a [ 0 ] || str [ i ] = a [ 1 ] )",
        "break the ;"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}