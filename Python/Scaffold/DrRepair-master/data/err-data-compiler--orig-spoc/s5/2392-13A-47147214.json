{
  "meta": {
    "index": 2392,
    "hitid": "3ICOHX7ENC542VE8ZBERCHP6E2OE0Y",
    "workerid": "AIWEXPJAU66D9",
    "probid": "13A",
    "subid": "47147214"
  },
  "lines": [
    {
      "line": 0,
      "text": "function base with integer arguments t and c that returns integer",
      "code": "int base ( int t , int c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "assign value 0 to the integer s",
      "code": "int s = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while t is true",
      "code": "while ( t )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "increase s by t % c",
      "code": "s += t % c ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "t = t / c",
      "code": "t = t / c ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return s",
      "code": "return s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "integer function fraction with integer arguments f and g",
      "code": "int fraction ( int f , int g )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "declare integer variable k",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for k = g to 1 exclusive , decrementing k",
      "code": "for ( k = g ; k > 1 ; k -- )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ( g % k = 0 ) and ( f % k = 0 )",
      "code": "if ( ( g % k == 0 ) && ( f % k == 0 ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "go to the start of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return k",
      "code": "return k ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "create integers a , n and fra",
      "code": "int a , n , fra ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "create integer sum with value 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set n to a - 2",
      "code": "n = a - 2 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for integer i = 2 to a exclusive , add base ( a , i ) to sum",
      "code": "for ( int i = 2 ; i < a ; i ++ ) { sum += base ( a , i ) ; }",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set value of fra to fraction ( sum , n )",
      "code": "fra = fraction ( sum , n ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "n = n / fra",
      "code": "n = n / fra ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "sum = sum / fra",
      "code": "sum = sum / fra ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print sum , \" / \" , n and a new line",
      "code": "cout << sum << \" / \" << n << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int base ( int t , int c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "s = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int fraction ( int f , int g ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "the ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "cout << sum << \" / \" , n << endl ;"
      ],
      "err_line": 27,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10,
        22,
        14
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "the ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        22,
        14,
        12
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "the ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        22,
        14,
        24
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        22,
        14,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        22,
        12
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        22,
        12,
        24
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "break the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        22,
        12,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "break the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        22,
        24
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        22,
        24,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "n -= 2 ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "the ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        14,
        12
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "the ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        14,
        12,
        24
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "the ;",
        "break the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        14,
        12,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "the ;",
        "break the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        14,
        24
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        14,
        24,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "the ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        14,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        12,
        24
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "break the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        12,
        24,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "break the ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        12,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "break the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        10,
        24
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        24,
        6
      ],
      "mod_code": [
        "for ( int k = g ; k > 1 ; k -- )",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "n -= 2 ;",
        "the ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        14,
        12
      ],
      "mod_code": [
        "n -= 2 ;",
        "the ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        14,
        12,
        24
      ],
      "mod_code": [
        "n -= 2 ;",
        "the ;",
        "break the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        14,
        12,
        6
      ],
      "mod_code": [
        "n -= 2 ;",
        "the ;",
        "break the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        14,
        24
      ],
      "mod_code": [
        "n -= 2 ;",
        "the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        14,
        24,
        6
      ],
      "mod_code": [
        "n -= 2 ;",
        "the ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        14,
        6
      ],
      "mod_code": [
        "n -= 2 ;",
        "the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        12
      ],
      "mod_code": [
        "n -= 2 ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        12,
        24
      ],
      "mod_code": [
        "n -= 2 ;",
        "break the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        12,
        24,
        6
      ],
      "mod_code": [
        "n -= 2 ;",
        "break the ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        12,
        6
      ],
      "mod_code": [
        "n -= 2 ;",
        "break the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        24
      ],
      "mod_code": [
        "n -= 2 ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        24,
        6
      ],
      "mod_code": [
        "n -= 2 ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "the ;",
        "break the ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        14,
        12,
        24
      ],
      "mod_code": [
        "the ;",
        "break the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        14,
        12,
        24,
        6
      ],
      "mod_code": [
        "the ;",
        "break the ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        14,
        12,
        6
      ],
      "mod_code": [
        "the ;",
        "break the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        24,
        6
      ],
      "mod_code": [
        "the ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "break the ;",
        "* fra = fraction ( sum , n ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        24,
        6
      ],
      "mod_code": [
        "break the ;",
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "break the ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        24,
        6
      ],
      "mod_code": [
        "* fra = fraction ( sum , n ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 24,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}