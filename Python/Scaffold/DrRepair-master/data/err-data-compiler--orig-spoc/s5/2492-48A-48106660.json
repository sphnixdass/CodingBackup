{
  "meta": {
    "index": 2492,
    "hitid": "3S8A4GJRD3XGIHM9WQJILMNJR0D6VX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "48106660"
  },
  "lines": [
    {
      "line": 0,
      "text": "win is a boolean function with string arguments a and b",
      "code": "bool win ( string a , string b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a [ 0 ] = b [ 0 ]",
      "code": "if ( a [ 0 ] == b [ 0 ] ) return false ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return true if a [ 0 ] = ' r ' and b [ 0 ] = ' s '",
      "code": "if ( a [ 0 ] == ' r ' && b [ 0 ] == ' s ' ) return true ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return true if a [ 0 ] = ' s ' and b [ 0 ] = ' p '",
      "code": "if ( a [ 0 ] == ' s ' && b [ 0 ] == ' p ' ) return true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return true if a [ 0 ] = ' p ' and b [ 0 ] = ' r '",
      "code": "if ( a [ 0 ] == ' p ' && b [ 0 ] == ' r ' ) return true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "f , m and s are strings",
      "code": "string f , m , s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read f , m and s",
      "code": "cin >> f >> m >> s ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if win ( f , m ) and win ( f , s ) are both true",
      "code": "if ( win ( f , m ) && win ( f , s ) )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else if win ( m , f ) and win ( m , s ) are both true",
      "code": "else if ( win ( m , f ) && win ( m , s ) )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if win ( s , m ) and win ( s , f ) are both true",
      "code": "else if ( win ( s , m ) && win ( s , f ) )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool win ( string a , int b )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12,
        5,
        1
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "else if ( win ( m , f ) , win ( m , s ) )",
        "return 1 ;",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        12,
        5,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "else if ( win ( m , f ) , win ( m , s ) )",
        "return 1 ;",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12,
        10,
        1
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        12,
        10,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12,
        1
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        12,
        1,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        12,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "else if ( win ( m , f ) , win ( m , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        5,
        10,
        1
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "return 1 ;",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        5,
        10,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "return 1 ;",
        "if ( win ( f , m ) , win ( f , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        5,
        1
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "return 1 ;",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        5,
        1,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "return 1 ;",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        5,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "return 1 ;",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        10,
        1
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        10,
        1,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        10,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        1,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "else if ( win ( s , m ) , win ( s , f ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        5,
        10,
        1
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "return 1 ;",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        5,
        10,
        8
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "return 1 ;",
        "if ( win ( f , m ) , win ( f , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        5,
        1
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "return 1 ;",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        5,
        1,
        8
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "return 1 ;",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        5,
        8
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "return 1 ;",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        10,
        1
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        10,
        1,
        8
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        10,
        8
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( win ( f , m ) , win ( f , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        1,
        8
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "else if ( win ( m , f ) , win ( m , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        1
      ],
      "mod_code": [
        "return 1 ;",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        10,
        1,
        8
      ],
      "mod_code": [
        "return 1 ;",
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        10,
        8
      ],
      "mod_code": [
        "return 1 ;",
        "if ( win ( f , m ) , win ( f , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "return 1 ;",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        1,
        8
      ],
      "mod_code": [
        "return 1 ;",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "return 1 ;",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        1,
        8
      ],
      "mod_code": [
        "if ( win ( f , m ) , win ( f , s ) )",
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( win ( f , m ) , win ( f , s ) )",
        "string f , m , n ;"
      ],
      "err_line": 9,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "if ( a [ 0 ] ] == b [ 0 ] )",
        "string f , m , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}