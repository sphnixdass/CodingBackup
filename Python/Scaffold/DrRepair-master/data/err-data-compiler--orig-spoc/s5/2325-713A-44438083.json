{
  "meta": {
    "index": 2325,
    "hitid": "3XQ4XW3OD96C8OM4FT2AKMM0DTV2SQ",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "713A",
    "subid": "44438083"
  },
  "lines": [
    {
      "line": 0,
      "text": "function get_str ( get long long num , return string )",
      "code": "string get_str ( long long num )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if num is 0 return \" 0 \"",
      "code": "if ( num == 0 ) return \" 0 \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = \" \"",
      "code": "string s = \" \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while num",
      "code": "while ( num )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "n = num modulo 10 + 48",
      "code": "int n = num % 10 + 48 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if n and 1",
      "code": "if ( n & 1 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "append \" 1 \" to s",
      "code": "s += \" 1 \" ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "append \" 1 \" to s",
      "code": "s += \" 0 \" ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "divide num by 10",
      "code": "num = num / 10 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "reverse s",
      "code": "reverse ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return s",
      "code": "return s ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "t = int",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "mp = map from string to int",
      "code": "map < string , int > mp ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "while decremented value of t is not 0",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "ch = char",
      "code": "char ch ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "num = long long",
      "code": "long long num ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "sp = string",
      "code": "string sp ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "read ch",
      "code": "cin >> ch ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if ch is ' ? '",
      "code": "if ( ch == ' ? ' )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "read sp",
      "code": "cin >> sp ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 26,
      "text": "read num",
      "code": "cin >> num ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "str = get_str ( num )",
      "code": "string str = get_str ( num ) ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if ch is ' + ' or ' - '",
      "code": "if ( ch == ' + ' || ch == ' - ' )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "str = get_str ( num )",
      "code": "string str = get_str ( num ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if ch is ' + '",
      "code": "if ( ch == ' + ' )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment mp [ str ]",
      "code": "mp [ str ] ++ ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 33,
      "text": "decrement mp [ str ]",
      "code": "mp [ str ] -- ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "else if ch is ' ? '",
      "code": "else if ( ch == ' ? ' )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "mcnt = 0",
      "code": "int mcnt = 0 ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "lead = 0",
      "code": "int lead = 0 ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "for i = 0 to length of sp exclusive",
      "code": "for ( int i = 0 ; i < sp . length ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 39,
      "text": "if sp [ i ] is ' 1 '",
      "code": "if ( sp [ i ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 40,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 41,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 42,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 5
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 44,
      "text": "s = substring of sp starting from cnt , length of sp - cnt",
      "code": "string s = sp . substr ( cnt , sp . length ( ) - cnt ) ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "add mp [ s ] to mcnt",
      "code": "mcnt += mp [ s ] ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "while decremented value of cnt not equal 0",
      "code": "while ( cnt -- )",
      "indent": 3
    },
    {
      "line": 47,
      "text": "s = \" 0 \" + s",
      "code": "s = \" 0 \" + s ;",
      "indent": 4
    },
    {
      "line": 48,
      "text": "add mp [ s ] to mcnt",
      "code": "mcnt += mp [ s ] ;",
      "indent": 4
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 50,
      "text": "s = \" 0 \" + s",
      "code": "s = \" 0 \" + s ;",
      "indent": 3
    },
    {
      "line": 51,
      "text": "while length of s < 19",
      "code": "while ( s . length ( ) < 19 )",
      "indent": 3
    },
    {
      "line": 52,
      "text": "add mp [ s ] to mcnt",
      "code": "mcnt += mp [ s ] ;",
      "indent": 4
    },
    {
      "line": 53,
      "text": "s = \" 0 \" + s",
      "code": "s = \" 0 \" + s ;",
      "indent": 4
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 55,
      "text": "print mcnt",
      "code": "cout << mcnt << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void get_str ( long long num )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "n = num % 10 + 48 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "str = get_str ( num ) ;"
      ],
      "err_line": 27,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 44,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "n %= 10 + 48 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cin . get ( t ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "map < string = int , int > mp ;"
      ],
      "err_line": 17,
      "err_msg": "an assignment cannot appear in a constant-expression"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "string sp = 1 ;"
      ],
      "err_line": 21,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( ch == ' ? ' ) break ;"
      ],
      "err_line": 25,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int str = get_str ( num ) ;"
      ],
      "err_line": 27,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "int str = get_str ( num ) ;"
      ],
      "err_line": 29,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( ch == ' + ' ) break ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "mp [ ' str ' ] -- ;"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘int’)"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "else if ( ch == ' ? ' ) ' ;"
      ],
      "err_line": 34,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "if ( sp [ i ] == ' 1 ' ) break ;"
      ],
      "err_line": 41,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "string s = sp ( sp , sp . size ( ) - cnt ) ;"
      ],
      "err_line": 44,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "string s = \" 0 \" + s ;"
      ],
      "err_line": 50,
      "err_msg": "redeclaration of ‘std::__cxx11::string s’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "n = num % 10 + 48 ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        6
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        8
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        4,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        8
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        6,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        8
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        8,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        27,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = \" \" ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        6
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        8
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        8
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        8,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        8,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        27,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "n = num % 10 + 48 ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        8,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        27,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        27,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        8,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "str = get_str ( num ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        44
      ],
      "mod_code": [
        "void get_str ( long long num )",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        8
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        27
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        27
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        27
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        27,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "n = num % 10 + 48 ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        27
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        27
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        27,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        27
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        27,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "string s = \" \" ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 27,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        27,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 27,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        44
      ],
      "mod_code": [
        "string s = \" \" ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 44,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&, std::__cxx11::basic_string<char>::size_type)’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        27
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        44
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        27
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        27,
        44
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        44
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        27
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        27,
        44
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        44
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        27
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        27,
        44
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        44
      ],
      "mod_code": [
        "n = num % 10 + 48 ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        27
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        27,
        44
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        44
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        27
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        27,
        44
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        44
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        27
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        27,
        44
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        44
      ],
      "mod_code": [
        "s . push_back ( \" 1 \" ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        44
      ],
      "mod_code": [
        "str = get_str ( num ) ;",
        "string s = sp ( sp , sp . length ( ) - cnt ) ;"
      ],
      "err_line": 27,
      "err_msg": "‘str’ was not declared in this scope"
    }
  ]
}