{
  "meta": {
    "index": 961,
    "hitid": "3Q7TKIAPOT4C7LPUS9PQ4JZ9H3FLDW",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "119A",
    "subid": "48784517"
  },
  "lines": [
    {
      "line": 0,
      "text": "x , k = integer with x = 0",
      "code": "int x = 0 , k ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in the function f that takes integers i , j and returns integer",
      "code": "int f ( int i , int j )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if i < j swap i and j",
      "code": "if ( i < j ) swap ( i , j ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "temp = integer",
      "code": "int temp ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i is 1 return 1",
      "code": "if ( i == 1 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if j is 1 return 1",
      "code": "if ( j == 1 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while j > 0",
      "code": "while ( j > 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "temp = j",
      "code": "temp = j ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "j = i modulo j",
      "code": "j = i % j ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "i = temp",
      "code": "i = temp ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return i",
      "code": "return i ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "a , b , n = integer",
      "code": "int a , b , n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "while read a , b , n",
      "code": "while ( cin >> a >> b >> n )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "while 1",
      "code": "while ( 1 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "n = n - f on a and n",
      "code": "n = n - f ( a , n ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if n < 0",
      "code": "if ( n < 0 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "n = n - f on b and n",
      "code": "n = n - f ( b , n ) ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if n < 0",
      "code": "if ( n < 0 )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n = n - f ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int x , k , k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void f ( int i , int j )"
      ],
      "err_line": 4,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "n = n - f + n ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "n = n - f ;"
      ],
      "err_line": 22,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "n = n - f ;",
        "if ( n )"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        18,
        8
      ],
      "mod_code": [
        "n = n - f ;",
        "if ( n )",
        "j %= j ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        18,
        8,
        25
      ],
      "mod_code": [
        "n = n - f ;",
        "if ( n )",
        "j %= j ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        18,
        8,
        15
      ],
      "mod_code": [
        "n = n - f ;",
        "if ( n )",
        "j %= j ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        18,
        25
      ],
      "mod_code": [
        "n = n - f ;",
        "if ( n )",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        18,
        25,
        15
      ],
      "mod_code": [
        "n = n - f ;",
        "if ( n )",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        18,
        15
      ],
      "mod_code": [
        "n = n - f ;",
        "if ( n )",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "n = n - f ;",
        "j %= j ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        8,
        25
      ],
      "mod_code": [
        "n = n - f ;",
        "j %= j ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        8,
        25,
        15
      ],
      "mod_code": [
        "n = n - f ;",
        "j %= j ;",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        8,
        15
      ],
      "mod_code": [
        "n = n - f ;",
        "j %= j ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        25
      ],
      "mod_code": [
        "n = n - f ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        25,
        15
      ],
      "mod_code": [
        "n = n - f ;",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "n = n - f ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "if ( n )",
        "n = n - f + n ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        18,
        17,
        8
      ],
      "mod_code": [
        "if ( n )",
        "n = n - f + n ;",
        "j %= j ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        18,
        17,
        8,
        25
      ],
      "mod_code": [
        "if ( n )",
        "n = n - f + n ;",
        "j %= j ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        18,
        17,
        8,
        15
      ],
      "mod_code": [
        "if ( n )",
        "n = n - f + n ;",
        "j %= j ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        17,
        25
      ],
      "mod_code": [
        "if ( n )",
        "n = n - f + n ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        18,
        17,
        25,
        15
      ],
      "mod_code": [
        "if ( n )",
        "n = n - f + n ;",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        17,
        15
      ],
      "mod_code": [
        "if ( n )",
        "n = n - f + n ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        8,
        25
      ],
      "mod_code": [
        "if ( n )",
        "j %= j ;",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        8,
        25,
        15
      ],
      "mod_code": [
        "if ( n )",
        "j %= j ;",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        8,
        15
      ],
      "mod_code": [
        "if ( n )",
        "j %= j ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        25
      ],
      "mod_code": [
        "if ( n )",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        25,
        15
      ],
      "mod_code": [
        "if ( n )",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        15
      ],
      "mod_code": [
        "if ( n )",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "n = n - f + n ;",
        "j %= j ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        8,
        25
      ],
      "mod_code": [
        "n = n - f + n ;",
        "j %= j ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        8,
        25,
        15
      ],
      "mod_code": [
        "n = n - f + n ;",
        "j %= j ;",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        8,
        15
      ],
      "mod_code": [
        "n = n - f + n ;",
        "j %= j ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        25
      ],
      "mod_code": [
        "n = n - f + n ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘int(int, int)’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        17,
        25,
        15
      ],
      "mod_code": [
        "n = n - f + n ;",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "n = n - f + n ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "j %= j ;",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        25,
        15
      ],
      "mod_code": [
        "j %= j ;",
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "j %= j ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        15
      ],
      "mod_code": [
        "break break ;",
        "while ("
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}