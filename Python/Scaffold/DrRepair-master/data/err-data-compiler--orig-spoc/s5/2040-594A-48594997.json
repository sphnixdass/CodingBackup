{
  "meta": {
    "index": 2040,
    "hitid": "3511RHPADV868V8ZAAKA98GDXRYLR5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "594A",
    "subid": "48594997"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare int array a with size 200010",
      "code": "int a [ 200010 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i from 1 to n inclusive , read input to a [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "sort a from index 1 to n + 1",
      "code": "sort ( a + 1 , a + n + 1 ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if n is equal to 2",
      "code": "if ( n == 2 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print a [ 2 ] - a [ 1 ]",
      "code": "cout << a [ 2 ] - a [ 1 ] << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare int mm = 1000000000",
      "code": "int mm = 1000000000 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = to n inclusive , assign min of a [ i ] - a [ i - n / 2 ] and mm to mm",
      "code": "for ( int i = n / 2 + 1 ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] , mm ) ; }",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print mm",
      "code": "cout << mm << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "sort ( a from 1 , a + n + 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘from’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "char a [ 200010 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "char a [ 200010 ] ;",
        "cout << mm ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2,
        12,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "char a [ 200010 ] ;",
        "cout << mm ;",
        "int mm = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2,
        12,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "char a [ 200010 ] ;",
        "cout << mm ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        2,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "char a [ 200010 ] ;",
        "int mm = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2,
        10,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "char a [ 200010 ] ;",
        "int mm = 1 ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        2,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "char a [ 200010 ] ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "cout << mm ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        12,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "cout << mm ;",
        "int mm = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        12,
        10,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "cout << mm ;",
        "int mm = 1 ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        12,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "cout << mm ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "int mm = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        10,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "int mm = 1 ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { mm = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        12,
        10,
        11
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "cout << mm ;",
        "int mm = 1 ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        12,
        10,
        6
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "cout << mm ;",
        "int mm = 1 ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        12,
        11
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "cout << mm ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        12,
        11,
        6
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "cout << mm ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        12,
        6
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "cout << mm ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        10,
        11
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "int mm = 1 ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        6
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "int mm = 1 ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        10,
        6
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "int mm = 1 ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        6
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "char a [ 200010 ] ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        10,
        11
      ],
      "mod_code": [
        "cout << mm ;",
        "int mm = 1 ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        10,
        11,
        6
      ],
      "mod_code": [
        "cout << mm ;",
        "int mm = 1 ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        10,
        6
      ],
      "mod_code": [
        "cout << mm ;",
        "int mm = 1 ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "cout << mm ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        11,
        6
      ],
      "mod_code": [
        "cout << mm ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "cout << mm ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "int mm = 1 ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        6
      ],
      "mod_code": [
        "int mm = 1 ;",
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "int mm = 1 ;",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= n ; i ++ ) { a = min ( a [ i ] - a [ i - n / 2 ] ) ; }",
        "else if ( n == 2 )"
      ],
      "err_line": 6,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}