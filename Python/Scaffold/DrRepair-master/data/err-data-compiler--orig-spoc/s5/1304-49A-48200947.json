{
  "meta": {
    "index": 1304,
    "hitid": "3S4TINXCC0HRY9U7R5EC1AF398RBOL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "49A",
    "subid": "48200947"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string vow with value \" aeiouy \"",
      "code": "string vow = \" aeiouy \" ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let x be string",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read line and store it into x",
      "code": "getline ( cin , x ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set boolean ok to false",
      "code": "bool ok = false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to length of x exclusive",
      "code": "for ( int i = 0 ; i < x . length ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if isalpha ( x [ i ] ) is true",
      "code": "if ( isalpha ( x [ i ] ) )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if lowercase x [ i ] can be found in vow",
      "code": "if ( vow . find ( tolower ( x [ i ] ) ) != - 1 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set value of ok to true",
      "code": "ok = true ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set ok to false",
      "code": "ok = false ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" YES \" if ok is true or \" NO \" otherwise , and a new line",
      "code": "cout << ( ( ok ) ? \" YES \" : \" NO \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "boolean = false ;"
      ],
      "err_line": 4,
      "err_msg": "‘boolean’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "puts ( ok ? \" YES \" : \" YES \" ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        13,
        3
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        2
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        4
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        13,
        3,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        13,
        2
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        7,
        13,
        2,
        4
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "char x ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        7,
        13,
        2,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "char x ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        13,
        4
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "boolean = false ;"
      ],
      "err_line": 4,
      "err_msg": "‘boolean’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        13,
        4,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        13,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "gets ( x ) ;",
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        2,
        4
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "gets ( x ) ;",
        "char x ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        2,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "gets ( x ) ;",
        "char x ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        3,
        4
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "gets ( x ) ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        3,
        4,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "gets ( x ) ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        3,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "gets ( x ) ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        7,
        2,
        4
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "char x ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        7,
        2,
        4,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "char x ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        2,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "char x ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "boolean = false ;"
      ],
      "err_line": 4,
      "err_msg": "‘boolean’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        4,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "if ( isupper ( x [ i ] ) )",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        3,
        2
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        3,
        2,
        4
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "char x ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        3,
        2,
        0
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "char x ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        13,
        3,
        4
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        3,
        4,
        0
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        13,
        3,
        0
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "gets ( x ) ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        13,
        2,
        4
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "char x ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        13,
        2,
        4,
        0
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "char x ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        13,
        2,
        0
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "char x ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "boolean = false ;"
      ],
      "err_line": 4,
      "err_msg": "‘boolean’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        4,
        0
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "cout << ( ok ? \" YES \" : \" YES \" ) << endl ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "gets ( x ) ;",
        "char x ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        4
      ],
      "mod_code": [
        "gets ( x ) ;",
        "char x ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        4,
        0
      ],
      "mod_code": [
        "gets ( x ) ;",
        "char x ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        2,
        0
      ],
      "mod_code": [
        "gets ( x ) ;",
        "char x ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "gets ( x ) ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        4,
        0
      ],
      "mod_code": [
        "gets ( x ) ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "gets ( x ) ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "char x ;",
        "boolean = false ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        4,
        0
      ],
      "mod_code": [
        "char x ;",
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "char x ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "boolean = false ;",
        "string * vow = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "cannot convert ‘const char*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    }
  ]
}