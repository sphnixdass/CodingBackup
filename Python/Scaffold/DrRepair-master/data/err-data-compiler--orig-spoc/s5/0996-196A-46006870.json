{
  "meta": {
    "index": 996,
    "hitid": "3NI0WFPPI9A0PGLTTTVT0TXTXJG60F",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "196A",
    "subid": "46006870"
  },
  "lines": [
    {
      "line": 0,
      "text": "function solve ( get iterators to string and char , return deque of char",
      "code": "deque < char > solve ( string :: iterator ib , string :: iterator ie , char max )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "d is a deque of char",
      "code": "deque < char > d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if max < ' a ' return d",
      "code": "if ( max < ' a ' ) return d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "iter on it = ib while it not equal to ie",
      "code": "for ( string :: iterator it = ib ; it != ie ; it ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if char pointed by it is max",
      "code": "if ( * it == max )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "d = solve ( it + 1 , ie , max )",
      "code": "d = solve ( it + 1 , ie , max ) ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "push char pointed by it in front of d",
      "code": "d . push_front ( * it ) ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "return d",
      "code": "return d ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return solve ( ib , ie , max - 1 )",
      "code": "return solve ( ib , ie , max - 1 ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "s is a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "d = solve ( begin of s , end of s , ' z ' )",
      "code": "deque < char > d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "iter on it = begin of d while it not equal end of d , print char pointed by it",
      "code": "for ( deque < char > :: iterator it = d . begin ( ) ; it != d . end ( ) ; it ++ ) cout << * it ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print newline",
      "code": "cout << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "deque < string , char > solve ( )"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( char ( it == max ) )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "d . push_back ( d ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::deque<char>::push_back(std::deque<char>&)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "iter . end ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "deque < string , char > solve ( , char ) { }"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘,’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "deque < int > d ;"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘d’ from ‘std::deque<int>’ to ‘std::deque<char>’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( it != ib . end ( ) )"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( char ( it ) == max )"
      ],
      "err_line": 4,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ to type ‘char’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int d = solve ( it + 1 , ie , max ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::deque<char>’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "return solve ( ib , 1.0 , max - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "could not convert ‘1.0e+0’ from ‘double’ to ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 15,
      "err_msg": "request for member ‘begin’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::deque<char>’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( it = d . end ( ) ; it != d . end ( ) ; it ++ ) cout << * it << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        6
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        15
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        6
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "d . push_back ( d ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        15
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "d . push_back ( d ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        15
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        15,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        3,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "while ( it != ie . end ( ) )",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "if ( char ( it == max ) )"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        4,
        6
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        15
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        4,
        15
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "if ( char ( it == max ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        4,
        15,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "if ( char ( it == max ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        4,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "if ( char ( it == max ) )",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "d . push_back ( d ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        6,
        15
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        6,
        15,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        6,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "d . push_back ( d ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        15,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "deque < string , char > solve ( )",
        "iter . end ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "parse error in template argument list"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        15
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        16
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        15
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        15,
        16
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        16
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "if ( char ( it == max ) )",
        "iter . end ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "d . push_back ( d ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        15
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        16
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        16
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "d . push_back ( d ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        15,
        16
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "while ( it != ie . end ( ) )",
        "iter . end ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        4,
        6,
        15
      ],
      "mod_code": [
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        4,
        6,
        15,
        16
      ],
      "mod_code": [
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        4,
        6,
        16
      ],
      "mod_code": [
        "if ( char ( it == max ) )",
        "d . push_back ( d ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "if ( char ( it == max ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        4,
        15,
        16
      ],
      "mod_code": [
        "if ( char ( it == max ) )",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "if ( char ( it == max ) )",
        "iter . end ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘char’)"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::deque<char>::push_back(std::deque<char>&)’"
    },
    {
      "mod_line": [
        6,
        15,
        16
      ],
      "mod_code": [
        "d . push_back ( d ) ;",
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::deque<char>::push_back(std::deque<char>&)’"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "d . push_back ( d ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "no matching function for call to ‘std::deque<char>::push_back(std::deque<char>&)’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "d = solve ( s . begin ( ) , s . end ( ) , ' z ' ) ;",
        "iter . end ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘d’ was not declared in this scope"
    }
  ]
}