{
  "meta": {
    "index": 1306,
    "hitid": "3RDTX9JRTYV1PANBCZJEZIYIVJE97J",
    "workerid": "AIWEXPJAU66D9",
    "probid": "49A",
    "subid": "47802320"
  },
  "lines": [
    {
      "line": 0,
      "text": "char array vocals with elements ' a ' , ' e ' , ' i ' , ' o ' , ' u ' , ' y ' , ' A ' , ' E ' , ' I ' , ' O ' , ' U ' and ' Y '",
      "code": "char vocals [ ] = { ' a ' , ' e ' , ' i ' , ' o ' , ' u ' , ' y ' , ' A ' , ' E ' , ' I ' , ' O ' , ' U ' , ' Y ' } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function contains with char argument vocal and boolean return type",
      "code": "bool contains ( char vocal )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "for integer i = 0 to 12 exclusive",
      "code": "for ( int i = 0 ; i < 12 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return true if vocals [ i ] = vocal",
      "code": "if ( vocals [ i ] == vocal ) return true ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "question = string",
      "code": "string question ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read input into question",
      "code": "getline ( cin , question ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = length of question - 2 to 0 inclusive counting down",
      "code": "for ( int i = question . size ( ) - 2 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if question [ i ] ! = ' '",
      "code": "if ( question [ i ] != ' ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if contains ( question [ i ] )",
      "code": "if ( contains ( question [ i ] ) )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "char question ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "bool contains ( char vocal ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "bool contains ( char vocal ) ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        9
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "bool contains ( char vocal ) ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "cin >> question ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "bool contains ( char vocal ) ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "bool contains ( char vocal ) ;",
        "cin >> question ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "bool contains ( char vocal ) ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "bool contains ( char vocal ) ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' O ' } ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        3
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        3,
        9
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "cin >> question ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        3,
        11
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        9
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "cin >> question ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        9,
        11
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        11
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        9
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "cin >> question ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        11
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        11
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "cin >> question ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        11
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "bool contains ( char vocal ) ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "char vocals [ ] = { ' a ' , ' e ' , ' o ' , ' A ' , ' A ' , ' I ' , ' I ' , ' I ' , ' I ' , ' I ' , ' U ' } ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "if ( vocals [ i ] == ' vocal ' ) return true ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "cin >> question ;",
        "if ( question [ i ] ] != ' ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}