{
  "meta": {
    "index": 1737,
    "hitid": "32FESTC2NHK5LJ6A1RMGB0DAAHQCUM",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "909A",
    "subid": "47920176"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s1 , s2 be strings",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s1",
      "code": "cin >> s1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s2",
      "code": "cin >> s2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "result = string",
      "code": "string result ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "increment result by s1 [ 0 ]",
      "code": "result += s1 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for x = 1 to length of s1 exclusive",
      "code": "for ( int x = 1 ; x < s1 . length ( ) ; x ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s1 [ x ] < s2 at 0",
      "code": "if ( s1 [ x ] < s2 [ 0 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment result by s1 at x",
      "code": "result += s1 [ x ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "exit loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "increment result by s2 at 0",
      "code": "result += s2 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print result and new line",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        7
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "continue ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 )",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        1,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        7,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        7,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )",
        "continue ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "gets ( s1 ) ;",
        "continue ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        1,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "if ( s1 [ x ] < s2 )",
        "continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        10
      ],
      "mod_code": [
        "cout << s2 << endl ;",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        7
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        7,
        1
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        7,
        10
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )",
        "continue ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        1
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        1,
        10
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        10
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "gets ( s1 ) ;",
        "continue ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        1
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        1,
        10
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "if ( s1 [ x ] < s2 )",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        10
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "for ( x = 1 ; x < s1 . length ( ) ; x ++ )",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        1
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        1,
        10
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        10
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "if ( s1 [ x ] < s2 )",
        "continue ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        10
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "gets ( s1 ) ;",
        "continue ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        1,
        10
      ],
      "mod_code": [
        "if ( s1 [ x ] < s2 )",
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "if ( s1 [ x ] < s2 )",
        "continue ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator<’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "strings , s2 ;",
        "continue ;"
      ],
      "err_line": 1,
      "err_msg": "‘strings’ was not declared in this scope"
    }
  ]
}